
# build time: Fri, 18 Dec 2020 03:12:33 +0000
# version: 9bf1f0c4f2313d8e1bc10146b52c53a3cefe31bc
# source: https://code.byted.org/devops/process-component

__all__ = ['ASLMutation']

# Don't look below, you will not understand this Python code :) I don't.

from js2py.pyjs import *
# setting scope
var = Scope( JS_BUILTINS )
set_global_object(var)

# Code follows:
var.registers([])
def PyJs_LONG_956_(var=var):
    @Js
    def PyJs_anonymous_0_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['Co', 'require', 'exports', 'module', 'co'])
        @Js
        def PyJsHoisted_co_(x, y, this, arguments, var=var):
            var = Scope({'x':x, 'y':y, 'this':this, 'arguments':arguments}, var)
            var.registers(['x', 'y'])
            if (var.get('x')==var.get(u"null")):
                return var.get('Co').create()
            if (var.get('y')==var.get(u"null")):
                return var.get('Co').create(var.get('x').get('x'), var.get('x').get('y'))
            return var.get('Co').create(var.get('x'), var.get('y'))
        PyJsHoisted_co_.func_name = 'co'
        var.put('co', PyJsHoisted_co_)
        Js('use strict')
        var.get('exports').put('__esModule', Js(True))
        @Js
        def PyJs_anonymous_1_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['Co'])
            @Js
            def PyJsHoisted_Co_(x, y, this, arguments, var=var):
                var = Scope({'x':x, 'y':y, 'this':this, 'arguments':arguments}, var)
                var.registers(['x', 'y'])
                if PyJsStrictEq(var.get('x'),PyJsComma(Js(0.0), Js(None))):
                    var.put('x', Js(0.0))
                if PyJsStrictEq(var.get('y'),PyJsComma(Js(0.0), Js(None))):
                    var.put('y', Js(0.0))
                var.get(u"this").put('x', var.get('x'))
                var.get(u"this").put('y', var.get('y'))
            PyJsHoisted_Co_.func_name = 'Co'
            var.put('Co', PyJsHoisted_Co_)
            pass
            @Js
            def PyJs_anonymous_2_(x, y, this, arguments, var=var):
                var = Scope({'x':x, 'y':y, 'this':this, 'arguments':arguments}, var)
                var.registers(['x', 'y'])
                return var.get('co')((var.get(u"this").get('x')+var.get('x')), (var.get(u"this").get('y')+var.get('y')))
            PyJs_anonymous_2_._set_name('anonymous')
            var.get('Co').get('prototype').put('offset', PyJs_anonymous_2_)
            @Js
            def PyJs_anonymous_3_(c, this, arguments, var=var):
                var = Scope({'c':c, 'this':this, 'arguments':arguments}, var)
                var.registers(['c'])
                return var.get('co')((var.get(u"this").get('x')+var.get('c').get('x')), (var.get(u"this").get('y')+var.get('c').get('y')))
            PyJs_anonymous_3_._set_name('anonymous')
            var.get('Co').get('prototype').put('add', PyJs_anonymous_3_)
            @Js
            def PyJs_anonymous_4_(c, this, arguments, var=var):
                var = Scope({'c':c, 'this':this, 'arguments':arguments}, var)
                var.registers(['c'])
                return var.get('co')((var.get(u"this").get('x')-var.get('c').get('x')), (var.get(u"this").get('y')-var.get('c').get('y')))
            PyJs_anonymous_4_._set_name('anonymous')
            var.get('Co').get('prototype').put('sub', PyJs_anonymous_4_)
            @Js
            def PyJs_anonymous_5_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return Js({'x':var.get(u"this").get('x'),'y':var.get(u"this").get('y')})
            PyJs_anonymous_5_._set_name('anonymous')
            var.get('Co').get('prototype').put('valueOf', PyJs_anonymous_5_)
            return var.get('Co')
        PyJs_anonymous_1_._set_name('anonymous')
        var.put('Co', PyJs_anonymous_1_())
        var.get('exports').put('Co', var.get('Co'))
        pass
        var.get('exports').put('co', var.get('co'))
    PyJs_anonymous_0_._set_name('anonymous')
    @Js
    def PyJs_anonymous_6_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['__read', 'ASLMutations_1', 'require', 'lodash_1', '__importDefault', 'exports', '__values', 'module', '__spread', 'util_1'])
        Js('use strict')
        @Js
        def PyJs_anonymous_7_(o, this, arguments, var=var):
            var = Scope({'o':o, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'm', 's', 'o'])
            var.put('s', (PyJsStrictEq(var.get('Symbol',throw=False).typeof(),Js('function')) and var.get('Symbol').get('iterator')))
            var.put('m', (var.get('s') and var.get('o').get(var.get('s'))))
            var.put('i', Js(0.0))
            if var.get('m'):
                return var.get('m').callprop('call', var.get('o'))
            if (var.get('o') and PyJsStrictEq(var.get('o').get('length').typeof(),Js('number'))):
                @Js
                def PyJs_anonymous_8_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    if (var.get('o') and (var.get('i')>=var.get('o').get('length'))):
                        var.put('o', PyJsComma(Js(0.0), Js(None)))
                    return Js({'value':(var.get('o') and var.get('o').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)))),'done':var.get('o').neg()})
                PyJs_anonymous_8_._set_name('anonymous')
                return Js({'next':PyJs_anonymous_8_})
            PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Object is not iterable.') if var.get('s') else Js('Symbol.iterator is not defined.'))))
            raise PyJsTempException
        PyJs_anonymous_7_._set_name('anonymous')
        var.put('__values', ((var.get(u"this") and var.get(u"this").get('__values')) or PyJs_anonymous_7_))
        @Js
        def PyJs_anonymous_9_(o, n, this, arguments, var=var):
            var = Scope({'o':o, 'n':n, 'this':this, 'arguments':arguments}, var)
            var.registers(['o', 'm', 'n', 'i', 'r', 'ar', 'e'])
            var.put('m', (PyJsStrictEq(var.get('Symbol',throw=False).typeof(),Js('function')) and var.get('o').get(var.get('Symbol').get('iterator'))))
            if var.get('m').neg():
                return var.get('o')
            var.put('i', var.get('m').callprop('call', var.get('o')))
            var.put('ar', Js([]))
            try:
                while ((PyJsStrictEq(var.get('n'),PyJsComma(Js(0.0), Js(None))) or ((var.put('n',Js(var.get('n').to_number())-Js(1))+Js(1))>Js(0.0))) and var.put('r', var.get('i').callprop('next')).get('done').neg()):
                    var.get('ar').callprop('push', var.get('r').get('value'))
            except PyJsException as PyJsTempException:
                PyJsHolder_6572726f72_86249187 = var.own.get('error')
                var.force_own_put('error', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('e', Js({'error':var.get('error')}))
                finally:
                    if PyJsHolder_6572726f72_86249187 is not None:
                        var.own['error'] = PyJsHolder_6572726f72_86249187
                    else:
                        del var.own['error']
                    del PyJsHolder_6572726f72_86249187
            finally:
                try:
                    if ((var.get('r') and var.get('r').get('done').neg()) and var.put('m', var.get('i').get('return'))):
                        var.get('m').callprop('call', var.get('i'))
                finally:
                    if var.get('e'):
                        PyJsTempException = JsToPyException(var.get('e').get('error'))
                        raise PyJsTempException
            return var.get('ar')
        PyJs_anonymous_9_._set_name('anonymous')
        var.put('__read', ((var.get(u"this") and var.get(u"this").get('__read')) or PyJs_anonymous_9_))
        @Js
        def PyJs_anonymous_10_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'ar'])
            #for JS loop
            var.put('ar', Js([]))
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('arguments').get('length')):
                try:
                    var.put('ar', var.get('ar').callprop('concat', var.get('__read')(var.get('arguments').get(var.get('i')))))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('ar')
        PyJs_anonymous_10_._set_name('anonymous')
        var.put('__spread', ((var.get(u"this") and var.get(u"this").get('__spread')) or PyJs_anonymous_10_))
        @Js
        def PyJs_anonymous_11_(mod, this, arguments, var=var):
            var = Scope({'mod':mod, 'this':this, 'arguments':arguments}, var)
            var.registers(['mod'])
            return (var.get('mod') if (var.get('mod') and var.get('mod').get('__esModule')) else Js({'default':var.get('mod')}))
        PyJs_anonymous_11_._set_name('anonymous')
        var.put('__importDefault', ((var.get(u"this") and var.get(u"this").get('__importDefault')) or PyJs_anonymous_11_))
        var.get('exports').put('__esModule', Js(True))
        var.put('lodash_1', var.get('__importDefault')(var.get('require')(Js('lodash'))))
        var.put('ASLMutations_1', var.get('require')(Js('../mutations/ASLMutations')))
        var.put('util_1', var.get('require')(Js('../../Process/util')))
        @Js
        def PyJs_anonymous_12_(asl, this, arguments, var=var):
            var = Scope({'asl':asl, 'this':this, 'arguments':arguments}, var)
            var.registers(['states', 'i', 'statesInStage', 'stage', 'stages', 'j', 'id', 'asl', 'state'])
            var.put('stages', var.get('asl').get('Stages'))
            var.put('states', var.get('asl').get('States'))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('stages').get('length')):
                try:
                    var.put('stage', var.get('stages').get(var.get('i')))
                    var.get('stage').put('index', var.get('i'))
                    var.put('statesInStage', Js({}))
                    #for JS loop
                    var.put('j', Js(0.0))
                    while (var.get('j')<var.get('stage').get('states').get('length')):
                        try:
                            var.put('id', var.get('stage').get('states').get(var.get('j')))
                            var.put('state', var.get('states').get(var.get('id')))
                            if var.get('state').neg():
                                PyJsTempException = JsToPyException(var.get('TypeError').create((((((((Js('unexpected state name ')+var.get('id'))+Js(' in stage '))+var.get('i'))+Js(' at '))+var.get('i'))+Js('.'))+var.get('j'))))
                                raise PyJsTempException
                            var.get('state').put('stageName', var.get('stage').get('name'))
                            var.get('state').put('stageIndex', var.get('i'))
                            var.get('state').put('stage', var.get('stage'))
                            var.get('statesInStage').put(var.get('id'), var.get('state'))
                        finally:
                                var.put('j', Js(1.0), '+')
                    var.get('stage').put('statesInStage', var.get('statesInStage'))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('stages')
        PyJs_anonymous_12_._set_name('anonymous')
        var.get('exports').put('calStageInfo', PyJs_anonymous_12_)
        @Js
        def PyJs_anonymous_13_(states, this, arguments, var=var):
            var = Scope({'states':states, 'this':this, 'arguments':arguments}, var)
            var.registers(['states', 'nextIds_1_1', 'nextIds_1', 'e_1', 'nextIds', 'next', 'id', 'nextId', '_a', 'state'])
            pass
            for PyJsTemp in var.get('states'):
                var.put('id', PyJsTemp)
                var.put('state', var.get('states').get(var.get('id')))
                if var.get('state').get('End'):
                    continue
                var.put('nextIds', var.get('exports').callprop('getNextInScope', var.get('state'), var.get('states')))
                try:
                    #for JS loop
                    var.put('nextIds_1', PyJsComma(var.put('e_1', PyJsComma(Js(0.0), Js(None))),var.get('__values')(var.get('nextIds'))))
                    var.put('nextIds_1_1', var.get('nextIds_1').callprop('next'))
                    while var.get('nextIds_1_1').get('done').neg():
                        try:
                            var.put('nextId', var.get('nextIds_1_1').get('value'))
                            var.put('next', var.get('states').get(var.get('nextId')))
                            var.get('next').put('before', (var.get('lodash_1').get('default').callprop('union', var.get('__spread')(var.get('next').get('before'), Js([var.get('id')]))) if var.get('next').get('before') else Js([var.get('id')])))
                        finally:
                                var.put('nextIds_1_1', var.get('nextIds_1').callprop('next'))
                except PyJsException as PyJsTempException:
                    PyJsHolder_655f315f31_60538368 = var.own.get('e_1_1')
                    var.force_own_put('e_1_1', PyExceptionToJs(PyJsTempException))
                    try:
                        var.put('e_1', Js({'error':var.get('e_1_1')}))
                    finally:
                        if PyJsHolder_655f315f31_60538368 is not None:
                            var.own['e_1_1'] = PyJsHolder_655f315f31_60538368
                        else:
                            del var.own['e_1_1']
                        del PyJsHolder_655f315f31_60538368
                finally:
                    try:
                        if ((var.get('nextIds_1_1') and var.get('nextIds_1_1').get('done').neg()) and var.put('_a', var.get('nextIds_1').get('return'))):
                            var.get('_a').callprop('call', var.get('nextIds_1'))
                    finally:
                        if var.get('e_1'):
                            PyJsTempException = JsToPyException(var.get('e_1').get('error'))
                            raise PyJsTempException
            return var.get('states')
        PyJs_anonymous_13_._set_name('anonymous')
        var.get('exports').put('calRevRefs', PyJs_anonymous_13_)
        @Js
        def PyJs_anonymous_14_(state, states, this, arguments, var=var):
            var = Scope({'state':state, 'states':states, 'this':this, 'arguments':arguments}, var)
            var.registers(['states', 'next', 'state'])
            if var.get('state').get('End'):
                return Js([])
            @Js
            def PyJs_anonymous_15_(c, this, arguments, var=var):
                var = Scope({'c':c, 'this':this, 'arguments':arguments}, var)
                var.registers(['c'])
                return var.get('c').get('Next')
            PyJs_anonymous_15_._set_name('anonymous')
            var.put('next', (var.get('state').get('Choices').callprop('map', PyJs_anonymous_15_) if var.get('ASLMutations_1').callprop('isChoice', var.get('state')) else Js([var.get('state').get('Next')])))
            @Js
            def PyJs_anonymous_16_(i, this, arguments, var=var):
                var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                var.registers(['i'])
                return var.get('states').get(var.get('i'))
            PyJs_anonymous_16_._set_name('anonymous')
            return var.get('next').callprop('filter', PyJs_anonymous_16_)
        PyJs_anonymous_14_._set_name('anonymous')
        var.get('exports').put('getNextInScope', PyJs_anonymous_14_)
        @Js
        def PyJs_anonymous_17_(states, this, arguments, var=var):
            var = Scope({'states':states, 'this':this, 'arguments':arguments}, var)
            var.registers(['states', 'e_2', 'currentDepth_1', 'graph', '_c', 'currentDepth', 'nextDepth', 'id', 'currentDepth_1_1', '_b', '_a', 'state', 'head', 'visited'])
            pass
            var.put('_c', var.get('__read')(var.get('exports').callprop('getHead', var.get('states')), Js(1.0)))
            var.put('head', var.get('_c').get('0'))
            if var.get('head').neg():
                return Js([])
            var.put('visited', PyJsComma(PyJsComma(var.put('_a', Js({})),var.get('_a').put(var.get('head'), Js(True))),var.get('_a')))
            var.put('graph', Js([]))
            var.put('currentDepth', Js([var.get('head')]))
            while Js(True):
                if PyJsStrictEq(var.get('currentDepth').get('length'),Js(0.0)):
                    break
                var.put('nextDepth', Js([]))
                try:
                    #for JS loop
                    var.put('currentDepth_1', PyJsComma(var.put('e_2', PyJsComma(Js(0.0), Js(None))),var.get('__values')(var.get('currentDepth'))))
                    var.put('currentDepth_1_1', var.get('currentDepth_1').callprop('next'))
                    while var.get('currentDepth_1_1').get('done').neg():
                        try:
                            var.put('id', var.get('currentDepth_1_1').get('value'))
                            var.put('state', var.get('states').get(var.get('id')))
                            var.put('nextDepth', var.get('__spread')(var.get('nextDepth'), var.get('exports').callprop('getNextInScope', var.get('state'), var.get('states'))))
                        finally:
                                var.put('currentDepth_1_1', var.get('currentDepth_1').callprop('next'))
                except PyJsException as PyJsTempException:
                    PyJsHolder_655f325f31_72461352 = var.own.get('e_2_1')
                    var.force_own_put('e_2_1', PyExceptionToJs(PyJsTempException))
                    try:
                        var.put('e_2', Js({'error':var.get('e_2_1')}))
                    finally:
                        if PyJsHolder_655f325f31_72461352 is not None:
                            var.own['e_2_1'] = PyJsHolder_655f325f31_72461352
                        else:
                            del var.own['e_2_1']
                        del PyJsHolder_655f325f31_72461352
                finally:
                    try:
                        if ((var.get('currentDepth_1_1') and var.get('currentDepth_1_1').get('done').neg()) and var.put('_b', var.get('currentDepth_1').get('return'))):
                            var.get('_b').callprop('call', var.get('currentDepth_1'))
                    finally:
                        if var.get('e_2'):
                            PyJsTempException = JsToPyException(var.get('e_2').get('error'))
                            raise PyJsTempException
                var.get('graph').callprop('push', var.get('currentDepth'))
                @Js
                def PyJs_anonymous_18_(id, this, arguments, var=var):
                    var = Scope({'id':id, 'this':this, 'arguments':arguments}, var)
                    var.registers(['id'])
                    return var.get('visited').put(var.get('id'), Js(True))
                PyJs_anonymous_18_._set_name('anonymous')
                var.get('currentDepth').callprop('forEach', PyJs_anonymous_18_)
                @Js
                def PyJs_anonymous_19_(i, this, arguments, var=var):
                    var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                    var.registers(['i'])
                    return var.get('visited').get(var.get('i')).neg()
                PyJs_anonymous_19_._set_name('anonymous')
                var.put('currentDepth', var.get('lodash_1').get('default').callprop('union', var.get('nextDepth')).callprop('filter', PyJs_anonymous_19_))
            return var.get('graph')
        PyJs_anonymous_17_._set_name('anonymous')
        var.get('exports').put('calDepthLayout', PyJs_anonymous_17_)
        @Js
        def PyJs_anonymous_20_(states, this, arguments, var=var):
            var = Scope({'states':states, 'this':this, 'arguments':arguments}, var)
            var.registers(['states', 's'])
            var.put('s', var.get('util_1').callprop('clone', var.get('states')))
            var.get('exports').callprop('calRevRefs', var.get('s'))
            @Js
            def PyJs_anonymous_21_(_a, this, arguments, var=var):
                var = Scope({'_a':_a, 'this':this, 'arguments':arguments}, var)
                var.registers(['_b', '_a', 'id'])
                var.put('_b', var.get('__read')(var.get('_a'), Js(1.0)))
                var.put('id', var.get('_b').get('0'))
                return var.get('id')
            PyJs_anonymous_21_._set_name('anonymous')
            @Js
            def PyJs_anonymous_22_(_a, this, arguments, var=var):
                var = Scope({'_a':_a, 'this':this, 'arguments':arguments}, var)
                var.registers(['_b', '_a', 'state', 'id'])
                var.put('_b', var.get('__read')(var.get('_a'), Js(2.0)))
                var.put('id', var.get('_b').get('0'))
                var.put('state', var.get('_b').get('1'))
                @Js
                def PyJs_anonymous_23_(i, this, arguments, var=var):
                    var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                    var.registers(['i'])
                    return var.get('s').get(var.get('i')).neg()
                PyJs_anonymous_23_._set_name('anonymous')
                return (var.get('Array').callprop('isArray', var.get('state').get('before')).neg() or var.get('state').get('before').callprop('every', PyJs_anonymous_23_))
            PyJs_anonymous_22_._set_name('anonymous')
            return var.get('Object').callprop('entries', var.get('s')).callprop('filter', PyJs_anonymous_22_).callprop('map', PyJs_anonymous_21_)
        PyJs_anonymous_20_._set_name('anonymous')
        var.get('exports').put('getHead', PyJs_anonymous_20_)
        @Js
        def PyJs_anonymous_24_(states, this, arguments, var=var):
            var = Scope({'states':states, 'this':this, 'arguments':arguments}, var)
            var.registers(['states'])
            @Js
            def PyJs_anonymous_25_(_a, this, arguments, var=var):
                var = Scope({'_a':_a, 'this':this, 'arguments':arguments}, var)
                var.registers(['_b', '_a', 'id'])
                var.put('_b', var.get('__read')(var.get('_a'), Js(1.0)))
                var.put('id', var.get('_b').get('0'))
                return var.get('id')
            PyJs_anonymous_25_._set_name('anonymous')
            @Js
            def PyJs_anonymous_26_(_a, this, arguments, var=var):
                var = Scope({'_a':_a, 'this':this, 'arguments':arguments}, var)
                var.registers(['_b', '_a', 'state', 'id'])
                var.put('_b', var.get('__read')(var.get('_a'), Js(2.0)))
                var.put('id', var.get('_b').get('0'))
                var.put('state', var.get('_b').get('1'))
                return (var.get('state').get('Next').neg() or var.get('states').get(var.get('state').get('Next')).neg())
            PyJs_anonymous_26_._set_name('anonymous')
            return var.get('Object').callprop('entries', var.get('states')).callprop('filter', PyJs_anonymous_26_).callprop('map', PyJs_anonymous_25_)
        PyJs_anonymous_24_._set_name('anonymous')
        var.get('exports').put('getEnd', PyJs_anonymous_24_)
        @Js
        def PyJs_anonymous_27_(a, path, this, arguments, var=var):
            var = Scope({'a':a, 'path':path, 'this':this, 'arguments':arguments}, var)
            var.registers(['rootStateId', '_a', 'path', 'a'])
            pass
            var.put('rootStateId', var.get('path').get('1'))
            @Js
            def PyJs_anonymous_28_(stage, this, arguments, var=var):
                var = Scope({'stage':stage, 'this':this, 'arguments':arguments}, var)
                var.registers(['stage', '_a'])
                pass
                return (PyJsComma(Js(0.0), Js(None)) if (PyJsStrictEq(var.put('_a', var.get('stage')),var.get(u"null")) or PyJsStrictEq(var.get('_a'),PyJsComma(Js(0.0), Js(None)))) else var.get('_a').get('states').callprop('includes', var.get('rootStateId')))
            PyJs_anonymous_28_._set_name('anonymous')
            return (PyJsComma(Js(0.0), Js(None)) if (PyJsStrictEq(var.put('_a', var.get('a').get('Stages')),var.get(u"null")) or PyJsStrictEq(var.get('_a'),PyJsComma(Js(0.0), Js(None)))) else var.get('_a').callprop('find', PyJs_anonymous_28_))
        PyJs_anonymous_27_._set_name('anonymous')
        var.get('exports').put('getItemStage', PyJs_anonymous_27_)
    PyJs_anonymous_6_._set_name('anonymous')
    @Js
    def PyJs_anonymous_29_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['replaceStage', 'utils_1', '__read', '__assign', 'require', 'lodash_1', 'stageUtils_1', '__importDefault', 'insertState', 'exports', '__values', 'directInsertState', 'module', 'replaceID', 'serial', '__spread', 'util_1', 'replaceState'])
        @Js
        def PyJsHoisted_insertState_(asl, baseId, state, newId, before, inPlace, this, arguments, var=var):
            var = Scope({'asl':asl, 'baseId':baseId, 'state':state, 'newId':newId, 'before':before, 'inPlace':inPlace, 'this':this, 'arguments':arguments}, var)
            var.registers(['newASL', 'state', 'grandParentPath', 'result', 'stage_3', 'path', 'inPlace', 'newId', 'grandParent', 'asl', 'id', 'parentPath', 'before', 'baseId'])
            if PyJsStrictEq(var.get('newId'),PyJsComma(Js(0.0), Js(None))):
                var.put('newId', var.get('utils_1').callprop('genId'))
            if PyJsStrictEq(var.get('before'),PyJsComma(Js(0.0), Js(None))):
                var.put('before', Js(False))
            if PyJsStrictEq(var.get('inPlace'),PyJsComma(Js(0.0), Js(None))):
                var.put('inPlace', Js(False))
            var.put('result', (var.get('asl') if var.get('inPlace') else var.get('util_1').callprop('clone', var.get('asl'))))
            var.put('path', (var.get('baseId') if var.get('Array').callprop('isArray', var.get('baseId')) else var.get('exports').callprop('findPathWithId', var.get('result'), (var.get('baseId')+Js('')))))
            if var.get('path').neg():
                return var.get('result')
            var.put('parentPath', var.get('lodash_1').get('default').callprop('initial', var.get('path')))
            var.put('id', var.get('lodash_1').get('default').callprop('last', var.get('path')))
            var.put('grandParentPath', var.get('lodash_1').get('default').callprop('initial', var.get('parentPath')))
            var.put('grandParent', (var.get('lodash_1').get('default').callprop('get', var.get('result'), var.get('grandParentPath')) if var.get('grandParentPath').get('length') else var.get('result')))
            if (var.get('result').get('Stages') and PyJsStrictEq(var.get('grandParent'),var.get('result'))):
                @Js
                def PyJs_anonymous_56_(stage, this, arguments, var=var):
                    var = Scope({'stage':stage, 'this':this, 'arguments':arguments}, var)
                    var.registers(['stage'])
                    return var.get('stage').get('states').callprop('includes', var.get('id'))
                PyJs_anonymous_56_._set_name('anonymous')
                var.put('stage_3', var.get('result').get('Stages').callprop('find', PyJs_anonymous_56_))
                if var.get('stage_3'):
                    var.get('stage_3').get('states').callprop('push', var.get('newId'))
            var.put('newASL', var.get('directInsertState')(var.get('grandParent'), var.get('id'), var.get('state'), var.get('newId'), var.get('before')))
            var.get('lodash_1').get('default').callprop('set', var.get('result'), var.get('grandParentPath'), var.get('newASL'))
            return var.get('result')
        PyJsHoisted_insertState_.func_name = 'insertState'
        var.put('insertState', PyJsHoisted_insertState_)
        @Js
        def PyJsHoisted_serial_(states, this, arguments, var=var):
            var = Scope({'states':states, 'this':this, 'arguments':arguments}, var)
            var.registers(['state', 'states', 'others', 'end', '_c', 'r', 'others_1', 'id', '_b', '_a', 'e_3', 'head', 'others_1_1'])
            pass
            pass
            if PyJsStrictEq(var.get('states',throw=False).typeof(),Js('number')):
                @Js
                def PyJs_anonymous_61_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return var.get('exports').callprop('task')
                PyJs_anonymous_61_._set_name('anonymous')
                return var.get('serial')(var.get('Array').callprop('from', Js({'length':var.get('states')}), PyJs_anonymous_61_))
            var.put('_c', var.get('__read')(var.get('states')))
            var.put('head', var.get('_c').get('0'))
            var.put('others', var.get('_c').callprop('slice', Js(1.0)))
            var.put('r', var.get('exports').callprop('asl', var.get('head'), var.get('head').get('id')))
            var.put('end', var.get('r').get('StartAt'))
            try:
                #for JS loop
                var.put('others_1', var.get('__values')(var.get('others')))
                var.put('others_1_1', var.get('others_1').callprop('next'))
                while var.get('others_1_1').get('done').neg():
                    try:
                        var.put('state', var.get('others_1_1').get('value'))
                        var.put('id', PyJsComma(var.put('_b', var.get('state').get('id')),(var.get('_b') if (PyJsStrictNeq(var.get('_b'),var.get(u"null")) and PyJsStrictNeq(var.get('_b'),PyJsComma(Js(0.0), Js(None)))) else var.get('utils_1').callprop('genId'))))
                        var.get('r').get('States').put(var.get('id'), var.get('state'))
                        var.get('r').get('States').get(var.get('id')).put('End', Js(True))
                        var.get('r').get('States').get(var.get('end')).put('Next', var.get('id'))
                        var.get('r').get('States').get(var.get('end')).put('End', Js(False))
                        var.put('end', var.get('id'))
                    finally:
                            var.put('others_1_1', var.get('others_1').callprop('next'))
            except PyJsException as PyJsTempException:
                PyJsHolder_655f335f31_5992292 = var.own.get('e_3_1')
                var.force_own_put('e_3_1', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('e_3', Js({'error':var.get('e_3_1')}))
                finally:
                    if PyJsHolder_655f335f31_5992292 is not None:
                        var.own['e_3_1'] = PyJsHolder_655f335f31_5992292
                    else:
                        del var.own['e_3_1']
                    del PyJsHolder_655f335f31_5992292
            finally:
                try:
                    if ((var.get('others_1_1') and var.get('others_1_1').get('done').neg()) and var.put('_a', var.get('others_1').get('return'))):
                        var.get('_a').callprop('call', var.get('others_1'))
                finally:
                    if var.get('e_3'):
                        PyJsTempException = JsToPyException(var.get('e_3').get('error'))
                        raise PyJsTempException
            return var.get('r')
        PyJsHoisted_serial_.func_name = 'serial'
        var.put('serial', PyJsHoisted_serial_)
        @Js
        def PyJsHoisted_replaceState_(a, target, stateOrUpdater, inPlace, this, arguments, var=var):
            var = Scope({'a':a, 'target':target, 'stateOrUpdater':stateOrUpdater, 'inPlace':inPlace, 'this':this, 'arguments':arguments}, var)
            var.registers(['result', 'newState', 'path', 'stateOrUpdater', 'inPlace', 'a', 'target', 'oldState'])
            if PyJsStrictEq(var.get('inPlace'),PyJsComma(Js(0.0), Js(None))):
                var.put('inPlace', Js(False))
            var.put('result', (var.get('a') if var.get('inPlace') else var.get('util_1').callprop('clone', var.get('a'))))
            var.put('path', (var.get('target') if var.get('Array').callprop('isArray', var.get('target')) else var.get('exports').callprop('findPathWithId', var.get('result'), var.get('target'))))
            if var.get('path'):
                var.put('oldState', var.get('lodash_1').get('default').callprop('get', var.get('result'), var.get('path')))
                var.put('newState', (var.get('stateOrUpdater')(var.get('oldState')) if PyJsStrictEq(var.get('stateOrUpdater',throw=False).typeof(),Js('function')) else var.get('stateOrUpdater')))
                var.get('lodash_1').get('default').callprop('set', var.get('result'), var.get('path'), var.get('__assign')(var.get('__assign')(Js({}), var.get('oldState')), var.get('newState')))
            return var.get('result')
        PyJsHoisted_replaceState_.func_name = 'replaceState'
        var.put('replaceState', PyJsHoisted_replaceState_)
        @Js
        def PyJsHoisted_replaceStage_(a, index, stage, inPlace, this, arguments, var=var):
            var = Scope({'a':a, 'index':index, 'stage':stage, 'inPlace':inPlace, 'this':this, 'arguments':arguments}, var)
            var.registers(['result', 'index', 'inPlace', 'stage', 'a'])
            if PyJsStrictEq(var.get('inPlace'),PyJsComma(Js(0.0), Js(None))):
                var.put('inPlace', Js(False))
            var.put('result', (var.get('a') if var.get('inPlace') else var.get('util_1').callprop('clone', var.get('a'))))
            var.get('result').get('Stages').put(var.get('index'), var.get('__assign')(var.get('__assign')(Js({}), var.get('result').get('Stages').get(var.get('index'))), var.get('stage')))
            return var.get('result')
        PyJsHoisted_replaceStage_.func_name = 'replaceStage'
        var.put('replaceStage', PyJsHoisted_replaceStage_)
        @Js
        def PyJsHoisted_replaceID_(a, target, newId, inPlace, this, arguments, var=var):
            var = Scope({'a':a, 'target':target, 'newId':newId, 'inPlace':inPlace, 'this':this, 'arguments':arguments}, var)
            var.registers(['result', 'parentASL', 'path', 'inPlace', 'newId', 'parentASLPath', 'tmp', 'id', 'a', 'target', 'key', 'state', 'stage_4'])
            if PyJsStrictEq(var.get('inPlace'),PyJsComma(Js(0.0), Js(None))):
                var.put('inPlace', Js(False))
            var.put('result', (var.get('a') if var.get('inPlace') else var.get('util_1').callprop('clone', var.get('a'))))
            var.put('path', (var.get('target') if var.get('Array').callprop('isArray', var.get('target')) else var.get('exports').callprop('findPathWithId', var.get('result'), var.get('target'))))
            if var.get('path').neg():
                return var.get('result')
            var.put('parentASLPath', var.get('exports').callprop('getParentASLPath', var.get('result'), var.get('path')))
            var.put('parentASL', (var.get('lodash_1').get('default').callprop('get', var.get('result'), var.get('parentASLPath')) if var.get('parentASLPath').get('length') else var.get('result')))
            var.put('tmp', var.get('lodash_1').get('default').callprop('get', var.get('result'), var.get('path')))
            var.put('id', var.get('lodash_1').get('default').callprop('last', var.get('path')))
            var.get('parentASL').get('States').delete(var.get('id'))
            for PyJsTemp in var.get('parentASL').get('States'):
                var.put('key', PyJsTemp)
                var.put('state', var.get('parentASL').get('States').get(var.get('key')))
                if PyJsStrictEq(var.get('state').get('Next'),var.get('id')):
                    var.get('state').put('Next', var.get('newId'))
            var.get('parentASL').get('States').put(var.get('newId'), var.get('tmp'))
            if var.get('parentASL').get('Stages'):
                @Js
                def PyJs_anonymous_88_(stage, this, arguments, var=var):
                    var = Scope({'stage':stage, 'this':this, 'arguments':arguments}, var)
                    var.registers(['stage'])
                    return var.get('stage').get('states').callprop('includes', var.get('id'))
                PyJs_anonymous_88_._set_name('anonymous')
                var.put('stage_4', var.get('parentASL').get('Stages').callprop('find', PyJs_anonymous_88_))
                if var.get('stage_4'):
                    @Js
                    def PyJs_anonymous_89_(state, this, arguments, var=var):
                        var = Scope({'state':state, 'this':this, 'arguments':arguments}, var)
                        var.registers(['state'])
                        return PyJsStrictNeq(var.get('state'),var.get('id'))
                    PyJs_anonymous_89_._set_name('anonymous')
                    var.get('stage_4').put('states', var.get('__spread')(var.get('stage_4').get('states').callprop('filter', PyJs_anonymous_89_), Js([var.get('newId')])))
            if PyJsStrictEq(var.get('parentASL').get('StartAt'),var.get('id')):
                var.get('parentASL').put('StartAt', var.get('newId'))
            return var.get('result')
        PyJsHoisted_replaceID_.func_name = 'replaceID'
        var.put('replaceID', PyJsHoisted_replaceID_)
        Js('use strict')
        @Js
        def PyJs_anonymous_30_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_anonymous_31_(t, this, arguments, var=var):
                var = Scope({'t':t, 'this':this, 'arguments':arguments}, var)
                var.registers(['s', 'n', 'i', 't', 'p'])
                #for JS loop
                var.put('i', Js(1.0))
                var.put('n', var.get('arguments').get('length'))
                while (var.get('i')<var.get('n')):
                    try:
                        var.put('s', var.get('arguments').get(var.get('i')))
                        for PyJsTemp in var.get('s'):
                            var.put('p', PyJsTemp)
                            if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('s'), var.get('p')):
                                var.get('t').put(var.get('p'), var.get('s').get(var.get('p')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get('t')
            PyJs_anonymous_31_._set_name('anonymous')
            var.put('__assign', (var.get('Object').get('assign') or PyJs_anonymous_31_))
            return var.get('__assign').callprop('apply', var.get(u"this"), var.get('arguments'))
        PyJs_anonymous_30_._set_name('anonymous')
        var.put('__assign', ((var.get(u"this") and var.get(u"this").get('__assign')) or PyJs_anonymous_30_))
        @Js
        def PyJs_anonymous_32_(o, this, arguments, var=var):
            var = Scope({'o':o, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'm', 's', 'o'])
            var.put('s', (PyJsStrictEq(var.get('Symbol',throw=False).typeof(),Js('function')) and var.get('Symbol').get('iterator')))
            var.put('m', (var.get('s') and var.get('o').get(var.get('s'))))
            var.put('i', Js(0.0))
            if var.get('m'):
                return var.get('m').callprop('call', var.get('o'))
            if (var.get('o') and PyJsStrictEq(var.get('o').get('length').typeof(),Js('number'))):
                @Js
                def PyJs_anonymous_33_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    if (var.get('o') and (var.get('i')>=var.get('o').get('length'))):
                        var.put('o', PyJsComma(Js(0.0), Js(None)))
                    return Js({'value':(var.get('o') and var.get('o').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)))),'done':var.get('o').neg()})
                PyJs_anonymous_33_._set_name('anonymous')
                return Js({'next':PyJs_anonymous_33_})
            PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Object is not iterable.') if var.get('s') else Js('Symbol.iterator is not defined.'))))
            raise PyJsTempException
        PyJs_anonymous_32_._set_name('anonymous')
        var.put('__values', ((var.get(u"this") and var.get(u"this").get('__values')) or PyJs_anonymous_32_))
        @Js
        def PyJs_anonymous_34_(o, n, this, arguments, var=var):
            var = Scope({'o':o, 'n':n, 'this':this, 'arguments':arguments}, var)
            var.registers(['o', 'm', 'n', 'i', 'r', 'ar', 'e'])
            var.put('m', (PyJsStrictEq(var.get('Symbol',throw=False).typeof(),Js('function')) and var.get('o').get(var.get('Symbol').get('iterator'))))
            if var.get('m').neg():
                return var.get('o')
            var.put('i', var.get('m').callprop('call', var.get('o')))
            var.put('ar', Js([]))
            try:
                while ((PyJsStrictEq(var.get('n'),PyJsComma(Js(0.0), Js(None))) or ((var.put('n',Js(var.get('n').to_number())-Js(1))+Js(1))>Js(0.0))) and var.put('r', var.get('i').callprop('next')).get('done').neg()):
                    var.get('ar').callprop('push', var.get('r').get('value'))
            except PyJsException as PyJsTempException:
                PyJsHolder_6572726f72_69599953 = var.own.get('error')
                var.force_own_put('error', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('e', Js({'error':var.get('error')}))
                finally:
                    if PyJsHolder_6572726f72_69599953 is not None:
                        var.own['error'] = PyJsHolder_6572726f72_69599953
                    else:
                        del var.own['error']
                    del PyJsHolder_6572726f72_69599953
            finally:
                try:
                    if ((var.get('r') and var.get('r').get('done').neg()) and var.put('m', var.get('i').get('return'))):
                        var.get('m').callprop('call', var.get('i'))
                finally:
                    if var.get('e'):
                        PyJsTempException = JsToPyException(var.get('e').get('error'))
                        raise PyJsTempException
            return var.get('ar')
        PyJs_anonymous_34_._set_name('anonymous')
        var.put('__read', ((var.get(u"this") and var.get(u"this").get('__read')) or PyJs_anonymous_34_))
        @Js
        def PyJs_anonymous_35_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'ar'])
            #for JS loop
            var.put('ar', Js([]))
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('arguments').get('length')):
                try:
                    var.put('ar', var.get('ar').callprop('concat', var.get('__read')(var.get('arguments').get(var.get('i')))))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('ar')
        PyJs_anonymous_35_._set_name('anonymous')
        var.put('__spread', ((var.get(u"this") and var.get(u"this").get('__spread')) or PyJs_anonymous_35_))
        @Js
        def PyJs_anonymous_36_(mod, this, arguments, var=var):
            var = Scope({'mod':mod, 'this':this, 'arguments':arguments}, var)
            var.registers(['mod'])
            return (var.get('mod') if (var.get('mod') and var.get('mod').get('__esModule')) else Js({'default':var.get('mod')}))
        PyJs_anonymous_36_._set_name('anonymous')
        var.put('__importDefault', ((var.get(u"this") and var.get(u"this").get('__importDefault')) or PyJs_anonymous_36_))
        var.get('exports').put('__esModule', Js(True))
        var.put('util_1', var.get('require')(Js('../../Process/util')))
        var.put('lodash_1', var.get('__importDefault')(var.get('require')(Js('lodash'))))
        var.put('utils_1', var.get('require')(Js('../utils')))
        var.put('stageUtils_1', var.get('require')(Js('../layout/stageUtils')))
        @Js
        def PyJs_anonymous_37_(arr, n, this, arguments, var=var):
            var = Scope({'arr':arr, 'n':n, 'this':this, 'arguments':arguments}, var)
            var.registers(['arr', 'n'])
            if PyJsStrictEq(var.get('n'),PyJsComma(Js(0.0), Js(None))):
                var.put('n', Js(1.0))
            return var.get('arr').callprop('slice', Js(0.0), (var.get('arr').get('length')-var.get('n')))
        PyJs_anonymous_37_._set_name('anonymous')
        var.get('exports').put('rTail', PyJs_anonymous_37_)
        @Js
        def PyJs_anonymous_38_(v, this, arguments, var=var):
            var = Scope({'v':v, 'this':this, 'arguments':arguments}, var)
            var.registers(['v'])
            return ((var.get('v') and var.get('v').get('StartAt')) and var.get('v').get('States'))
        PyJs_anonymous_38_._set_name('anonymous')
        var.get('exports').put('isASL', PyJs_anonymous_38_)
        @Js
        def PyJs_anonymous_39_(v, this, arguments, var=var):
            var = Scope({'v':v, 'this':this, 'arguments':arguments}, var)
            var.registers(['v'])
            return (var.get('v') and ((((var.get('v').get('Type') or var.get('v').get('Next')) or var.get('v').get('End')) or var.get('v').get('Choices')) or var.get('v').get('Branches')))
        PyJs_anonymous_39_._set_name('anonymous')
        var.get('exports').put('isState', PyJs_anonymous_39_)
        @Js
        def PyJs_anonymous_40_(v, this, arguments, var=var):
            var = Scope({'v':v, 'this':this, 'arguments':arguments}, var)
            var.registers(['v'])
            return (var.get('exports').callprop('isState', var.get('v')) and PyJsStrictEq(var.get('v').get('Type'),Js('Parallel')))
        PyJs_anonymous_40_._set_name('anonymous')
        var.get('exports').put('isParallel', PyJs_anonymous_40_)
        @Js
        def PyJs_anonymous_41_(v, this, arguments, var=var):
            var = Scope({'v':v, 'this':this, 'arguments':arguments}, var)
            var.registers(['v'])
            return ((var.get('exports').callprop('isState', var.get('v')) and PyJsStrictEq(var.get('v').get('Type'),Js('Choice'))) and var.get('v').get('Choices'))
        PyJs_anonymous_41_._set_name('anonymous')
        var.get('exports').put('isChoice', PyJs_anonymous_41_)
        @Js
        def PyJs_anonymous_42_(v, this, arguments, var=var):
            var = Scope({'v':v, 'this':this, 'arguments':arguments}, var)
            var.registers(['v'])
            return (var.get('exports').callprop('isState', var.get('v')) and PyJsStrictEq(var.get('v').get('Type'),Js('Pass')))
        PyJs_anonymous_42_._set_name('anonymous')
        var.get('exports').put('isPass', PyJs_anonymous_42_)
        @Js
        def PyJs_anonymous_43_(asl, path, inPlace, this, arguments, var=var):
            var = Scope({'asl':asl, 'path':path, 'inPlace':inPlace, 'this':this, 'arguments':arguments}, var)
            var.registers(['states', 'key', 'result', 'grandParentPath', 'stageIndex', 'path', 'inPlace', 'grandParent', 'stages', 'stage_1', 'id', 'parentPath', 'node', 'asl', 'parent'])
            if PyJsStrictEq(var.get('inPlace'),PyJsComma(Js(0.0), Js(None))):
                var.put('inPlace', Js(False))
            var.put('result', (var.get('asl') if var.get('inPlace') else var.get('util_1').callprop('clone', var.get('asl'))))
            var.put('parentPath', var.get('lodash_1').get('default').callprop('initial', var.get('path')))
            var.put('id', var.get('lodash_1').get('default').callprop('last', var.get('path')))
            var.put('parent', (var.get('lodash_1').get('default').callprop('get', var.get('result'), var.get('parentPath')) if var.get('parentPath').get('length') else var.get('result')))
            var.put('grandParentPath', var.get('lodash_1').get('default').callprop('initial', var.get('parentPath')))
            var.put('grandParent', (var.get('lodash_1').get('default').callprop('get', var.get('result'), var.get('grandParentPath')) if var.get('grandParentPath').get('length') else var.get('result')))
            var.put('node', (var.get('lodash_1').get('default').callprop('get', var.get('parent'), var.get('id')) if (var.get('id')!=var.get(u"null")) else var.get('parent')))
            if ((var.get('grandParent').neg() or var.get('parent').neg()) or var.get('node').neg()):
                return var.get('result')
            if var.get('exports').callprop('isState', var.get('node')):
                if PyJsStrictEq(var.get('grandParent'),var.get('result')):
                    var.put('stages', var.get('result').get('Stages'))
                    if var.get('stages'):
                        @Js
                        def PyJs_anonymous_44_(stage, this, arguments, var=var):
                            var = Scope({'stage':stage, 'this':this, 'arguments':arguments}, var)
                            var.registers(['stage'])
                            return var.get('stage').get('states').callprop('includes', var.get('id'))
                        PyJs_anonymous_44_._set_name('anonymous')
                        var.put('stageIndex', var.get('stages').callprop('findIndex', PyJs_anonymous_44_))
                        if PyJsStrictNeq(var.get('stageIndex'),(-Js(1.0))):
                            var.put('stage_1', var.get('stages').get(var.get('stageIndex')))
                            @Js
                            def PyJs_anonymous_45_(id, this, arguments, var=var):
                                var = Scope({'id':id, 'this':this, 'arguments':arguments}, var)
                                var.registers(['id'])
                                return var.get('result').get('States').get(var.get('id'))
                            PyJs_anonymous_45_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_46_(i, this, arguments, var=var):
                                var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                                var.registers(['i'])
                                return PyJsStrictNeq(var.get('i'),var.get('id'))
                            PyJs_anonymous_46_._set_name('anonymous')
                            var.put('states', var.get('stage_1').get('states').callprop('filter', PyJs_anonymous_46_).callprop('map', PyJs_anonymous_45_))
                            @Js
                            def PyJs_anonymous_47_(state, this, arguments, var=var):
                                var = Scope({'state':state, 'this':this, 'arguments':arguments}, var)
                                var.registers(['state'])
                                return PyJsStrictEq(var.get('state').get('Type'),Js('Pass'))
                            PyJs_anonymous_47_._set_name('anonymous')
                            if (PyJsStrictEq(var.get('states').get('length'),Js(0.0)) or var.get('states').callprop('every', PyJs_anonymous_47_)):
                                return var.get('exports').callprop('removeStage', var.get('result'), var.get('stageIndex'), Js(True))
                            @Js
                            def PyJs_anonymous_48_(i, this, arguments, var=var):
                                var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                                var.registers(['i'])
                                return PyJsStrictNeq(var.get('i'),var.get('id'))
                            PyJs_anonymous_48_._set_name('anonymous')
                            var.get('stage_1').put('states', var.get('stage_1').get('states').callprop('filter', PyJs_anonymous_48_))
                var.get('parent').delete(var.get('id'))
                if PyJsStrictEq(var.get('id'),var.get('grandParent').get('StartAt')):
                    if var.get('node').get('End'):
                        return var.get('exports').callprop('removePath', var.get('result'), var.get('grandParentPath'), Js(True))
                    else:
                        var.get('grandParent').put('StartAt', var.get('node').get('Next'))
                for PyJsTemp in var.get('parent'):
                    var.put('key', PyJsTemp)
                    if PyJsStrictEq(var.get('parent').get(var.get('key')).get('Next'),var.get('id')):
                        if var.get('node').get('End'):
                            var.get('parent').get(var.get('key')).delete('Next')
                            var.get('parent').get(var.get('key')).put('End', Js(True))
                        else:
                            var.get('parent').get(var.get('key')).put('Next', var.get('node').get('Next'))
                return var.get('result')
            if var.get('exports').callprop('isASL', var.get('node')):
                if PyJsStrictEq(var.get('path').get('length'),Js(0.0)):
                    return Js({'Stages':var.get('node').get('Stages'),'States':Js({})})
                var.get('grandParent').get('Branches').callprop('splice', var.get('id'), Js(1.0))
                if PyJsStrictEq(var.get('grandParent').get('Branches').get('length'),Js(0.0)):
                    return var.get('exports').callprop('removePath', var.get('result'), var.get('grandParentPath'), Js(True))
                if PyJsStrictEq(var.get('grandParent').get('Branches').get('length'),Js(1.0)):
                    pass
            return var.get('result')
        PyJs_anonymous_43_._set_name('anonymous')
        var.get('exports').put('removePath', PyJs_anonymous_43_)
        @Js
        def PyJs_anonymous_49_(o, path, this, arguments, var=var):
            var = Scope({'o':o, 'path':path, 'this':this, 'arguments':arguments}, var)
            var.registers(['o', 'path'])
            return (var.get('lodash_1').get('default').callprop('get', var.get('o'), var.get('path')) if var.get('path').get('length') else var.get('o'))
        PyJs_anonymous_49_._set_name('anonymous')
        var.get('exports').put('get', PyJs_anonymous_49_)
        @Js
        def PyJs_anonymous_50_(asl, path, this, arguments, var=var):
            var = Scope({'asl':asl, 'path':path, 'this':this, 'arguments':arguments}, var)
            var.registers(['asl', 'path', 'node'])
            var.put('node', var.get('lodash_1').get('default').callprop('get', var.get('asl'), var.get('path')))
            if var.get('exports').callprop('isState', var.get('node')):
                return var.get('exports').callprop('rTail', var.get('path'), Js(2.0))
            if var.get('exports').callprop('isASL', var.get('node')):
                return var.get('exports').callprop('rTail', var.get('path'), Js(4.0))
            PyJsTempException = JsToPyException(var.get('Error').create((Js('unexpected target to get parent asl with path')+var.get('path').callprop('join', Js('.')))))
            raise PyJsTempException
        PyJs_anonymous_50_._set_name('anonymous')
        var.get('exports').put('getParentASLPath', PyJs_anonymous_50_)
        @Js
        def PyJs_anonymous_51_(asl, path, this, arguments, var=var):
            var = Scope({'asl':asl, 'path':path, 'this':this, 'arguments':arguments}, var)
            var.registers(['asl', 'path'])
            return var.get('exports').callprop('get', var.get('asl'), var.get('exports').callprop('getParentASLPath', var.get('asl'), var.get('path')))
        PyJs_anonymous_51_._set_name('anonymous')
        var.get('exports').put('getParentASL', PyJs_anonymous_51_)
        @Js
        def PyJs_anonymous_52_(asl, path, this, arguments, var=var):
            var = Scope({'asl':asl, 'path':path, 'this':this, 'arguments':arguments}, var)
            var.registers(['asl', 'path', 'node'])
            var.put('node', var.get('lodash_1').get('default').callprop('get', var.get('asl'), var.get('path')))
            if var.get('exports').callprop('isState', var.get('node')):
                return var.get('exports').callprop('rTail', var.get('path'), Js(4.0))
            if var.get('exports').callprop('isASL', var.get('node')):
                return var.get('exports').callprop('rTail', var.get('path'), Js(2.0))
            PyJsTempException = JsToPyException(var.get('Error').create((Js('unexpected target to get parent state with path: ')+var.get('path').callprop('join', Js('.')))))
            raise PyJsTempException
        PyJs_anonymous_52_._set_name('anonymous')
        var.get('exports').put('getParentStatePath', PyJs_anonymous_52_)
        @Js
        def PyJs_anonymous_53_(asl, path, this, arguments, var=var):
            var = Scope({'asl':asl, 'path':path, 'this':this, 'arguments':arguments}, var)
            var.registers(['asl', 'path'])
            return var.get('exports').callprop('get', var.get('asl'), var.get('exports').callprop('getParentStatePath', var.get('asl'), var.get('path')))
        PyJs_anonymous_53_._set_name('anonymous')
        var.get('exports').put('getParentState', PyJs_anonymous_53_)
        @Js
        def PyJs_anonymous_54_(_asl, path, newId, inPlace, this, arguments, var=var):
            var = Scope({'_asl':_asl, 'path':path, 'newId':newId, 'inPlace':inPlace, 'this':this, 'arguments':arguments}, var)
            var.registers(['_d', 'e_1', 'parentASL', '_a', 'id', 'node', '_e', '_f', '_asl', 'index', 'path', 'newNode', '_b', 'result', 'e_2', '_c', 'newId', 'inPlace', 'state', 'branches', 'stage_2'])
            pass
            if PyJsStrictEq(var.get('newId'),PyJsComma(Js(0.0), Js(None))):
                var.put('newId', var.get('utils_1').callprop('genId'))
            if PyJsStrictEq(var.get('inPlace'),PyJsComma(Js(0.0), Js(None))):
                var.put('inPlace', Js(False))
            var.put('result', (var.get('_asl') if var.get('inPlace') else var.get('util_1').callprop('clone', var.get('_asl'))))
            var.put('id', var.get('lodash_1').get('default').callprop('last', var.get('path')))
            var.put('parentASL', var.get('exports').callprop('getParentASL', var.get('result'), var.get('path')))
            var.put('node', var.get('lodash_1').get('default').callprop('get', var.get('result'), var.get('path')))
            var.put('branches', Js([var.get('exports').callprop('asl', var.get('node'), var.get('id'))]))
            if PyJsStrictEq(var.get('parentASL').get('StartAt'),var.get('id')):
                var.get('parentASL').put('StartAt', var.get('newId'))
            try:
                #for JS loop
                var.put('_c', var.get('__values')(var.get('Object').callprop('values', var.get('parentASL').get('States'))))
                var.put('_d', var.get('_c').callprop('next'))
                while var.get('_d').get('done').neg():
                    try:
                        var.put('state', var.get('_d').get('value'))
                        if PyJsStrictEq(var.get('state').get('Next'),var.get('id')):
                            var.get('state').put('Next', var.get('newId'))
                    finally:
                            var.put('_d', var.get('_c').callprop('next'))
            except PyJsException as PyJsTempException:
                PyJsHolder_655f315f31_47815952 = var.own.get('e_1_1')
                var.force_own_put('e_1_1', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('e_1', Js({'error':var.get('e_1_1')}))
                finally:
                    if PyJsHolder_655f315f31_47815952 is not None:
                        var.own['e_1_1'] = PyJsHolder_655f315f31_47815952
                    else:
                        del var.own['e_1_1']
                    del PyJsHolder_655f315f31_47815952
            finally:
                try:
                    if ((var.get('_d') and var.get('_d').get('done').neg()) and var.put('_a', var.get('_c').get('return'))):
                        var.get('_a').callprop('call', var.get('_c'))
                finally:
                    if var.get('e_1'):
                        PyJsTempException = JsToPyException(var.get('e_1').get('error'))
                        raise PyJsTempException
            var.get('parentASL').get('States').delete(var.get('id'))
            if var.get('parentASL').get('Stages'):
                try:
                    #for JS loop
                    var.put('_e', var.get('__values')(var.get('parentASL').get('Stages')))
                    var.put('_f', var.get('_e').callprop('next'))
                    while var.get('_f').get('done').neg():
                        try:
                            var.put('stage_2', var.get('_f').get('value'))
                            var.put('index', var.get('stage_2').get('states').callprop('indexOf', var.get('id')))
                            if PyJsStrictEq(var.get('index'),(-Js(1.0))):
                                continue
                            var.get('stage_2').get('states').callprop('splice', var.get('index'), Js(1.0))
                            var.get('stage_2').get('states').callprop('push', var.get('newId'))
                            break
                        finally:
                                var.put('_f', var.get('_e').callprop('next'))
                except PyJsException as PyJsTempException:
                    PyJsHolder_655f325f31_2516427 = var.own.get('e_2_1')
                    var.force_own_put('e_2_1', PyExceptionToJs(PyJsTempException))
                    try:
                        var.put('e_2', Js({'error':var.get('e_2_1')}))
                    finally:
                        if PyJsHolder_655f325f31_2516427 is not None:
                            var.own['e_2_1'] = PyJsHolder_655f325f31_2516427
                        else:
                            del var.own['e_2_1']
                        del PyJsHolder_655f325f31_2516427
                finally:
                    try:
                        if ((var.get('_f') and var.get('_f').get('done').neg()) and var.put('_b', var.get('_e').get('return'))):
                            var.get('_b').callprop('call', var.get('_e'))
                    finally:
                        if var.get('e_2'):
                            PyJsTempException = JsToPyException(var.get('e_2').get('error'))
                            raise PyJsTempException
            var.put('newNode', var.get('parentASL').get('States').put(var.get('newId'), var.get('exports').callprop('parallel', var.get('branches'))))
            if var.get('node').get('End'):
                var.get('newNode').put('End', Js(True))
            else:
                var.get('newNode').put('Next', var.get('node').get('Next'))
                var.get('node').put('End', Js(True))
                var.get('node').delete('Next')
            return var.get('result')
        PyJs_anonymous_54_._set_name('anonymous')
        var.get('exports').put('makeParallel', PyJs_anonymous_54_)
        @Js
        def PyJs_anonymous_55_(_asl, path, state, newId, inPlace, this, arguments, var=var):
            var = Scope({'_asl':_asl, 'path':path, 'state':state, 'newId':newId, 'inPlace':inPlace, 'this':this, 'arguments':arguments}, var)
            var.registers(['newASL', 'result', 'newPath', 'parentASL', '_asl', 'path', 'inPlace', 'newId', 'node', 'target', 'parentState', 'branch', 'state', 'parallelId', 'oldId'])
            if PyJsStrictEq(var.get('newId'),PyJsComma(Js(0.0), Js(None))):
                var.put('newId', var.get('utils_1').callprop('genId'))
            if PyJsStrictEq(var.get('inPlace'),PyJsComma(Js(0.0), Js(None))):
                var.put('inPlace', Js(False))
            var.put('result', (var.get('_asl') if var.get('inPlace') else var.get('util_1').callprop('clone', var.get('_asl'))))
            if var.get('Array').callprop('isArray', var.get('path')).neg():
                var.put('target', var.get('exports').callprop('findPathWithId', var.get('result'), (var.get('path')+Js(''))))
                if var.get('target').neg():
                    return var.get('result')
                return var.get('exports').callprop('addParallel', var.get('result'), var.get('target'), var.get('state'), var.get('newId'), Js(True))
            var.put('parentState', var.get('exports').callprop('getParentState', var.get('result'), var.get('path')))
            var.put('parentASL', var.get('exports').callprop('getParentASL', var.get('result'), var.get('path')))
            var.put('node', var.get('lodash_1').get('default').callprop('get', var.get('result'), var.get('path')))
            var.put('branch', (var.get('path').get((var.get('path').get('length')-Js(1.0))) if var.get('exports').callprop('isASL', var.get('node')) else var.get('path').get((var.get('path').get('length')-Js(3.0)))))
            if (var.get('exports').callprop('isParallel', var.get('parentState')) and (var.get('exports').callprop('isASL', var.get('node')) or (var.get('exports').callprop('isState', var.get('node')) and PyJsStrictEq(var.get('Object').callprop('keys', var.get('parentASL').get('States')).get('length'),Js(1.0))))):
                var.get('parentState').get('Branches').callprop('splice', (var.get('branch')+Js(1.0)), Js(0.0), var.get('exports').callprop('asl', var.get('state'), var.get('newId')))
                return var.get('result')
            var.put('parallelId', var.get('utils_1').callprop('genId'))
            var.put('newASL', var.get('exports').callprop('makeParallel', var.get('result'), var.get('path'), var.get('parallelId'), Js(True)))
            var.put('oldId', var.get('path').callprop('pop'))
            var.put('newPath', var.get('__spread')(var.get('path'), Js([var.get('parallelId'), Js('Branches'), Js(0.0), Js('States'), var.get('oldId')])))
            return var.get('exports').callprop('addParallel', var.get('newASL'), var.get('newPath'), var.get('state'), var.get('newId'), Js(True))
        PyJs_anonymous_55_._set_name('anonymous')
        var.get('exports').put('addParallel', PyJs_anonymous_55_)
        pass
        var.get('exports').put('insertState', var.get('insertState'))
        @Js
        def PyJs_anonymous_57_(result, baseId, state, newId, before, this, arguments, var=var):
            var = Scope({'result':result, 'baseId':baseId, 'state':state, 'newId':newId, 'before':before, 'this':this, 'arguments':arguments}, var)
            var.registers(['state', 'result', 'baseState', 'newId', 'asl', 'id', 'before', 'baseId'])
            var.get('result').get('States').put(var.get('newId'), var.get('state'))
            var.put('asl', var.get('result'))
            if var.get('before'):
                var.get('state').delete('End')
                if PyJsStrictEq(var.get('asl').get('StartAt'),var.get('baseId')):
                    var.get('asl').put('StartAt', var.get('newId'))
                else:
                    for PyJsTemp in var.get('result').get('States'):
                        var.put('id', PyJsTemp)
                        if PyJsStrictEq(var.get('result').get('States').get(var.get('id')).get('Next'),var.get('baseId')):
                            var.get('result').get('States').get(var.get('id')).put('Next', var.get('newId'))
                var.get('state').put('Next', var.get('baseId'))
            else:
                var.put('baseState', var.get('result').get('States').get(var.get('baseId')))
                if var.get('baseState').get('End'):
                    var.get('baseState').put('End', Js(False))
                    var.get('baseState').put('Next', var.get('newId'))
                    var.get('state').put('End', Js(True))
                    var.get('state').delete('Next')
                else:
                    var.get('state').delete('End')
                    var.get('state').put('Next', var.get('baseState').get('Next'))
                    var.get('baseState').put('Next', var.get('newId'))
            return var.get('result')
        PyJs_anonymous_57_._set_name('anonymous')
        var.put('directInsertState', PyJs_anonymous_57_)
        @Js
        def PyJs_anonymous_58_(asl, this, arguments, var=var):
            var = Scope({'asl':asl, 'this':this, 'arguments':arguments}, var)
            var.registers(['asl'])
            return Js({'Type':Js('Parallel'),'Branches':(var.get('asl') if var.get('Array').callprop('isArray', var.get('asl')) else Js([var.get('asl')]))})
        PyJs_anonymous_58_._set_name('anonymous')
        var.get('exports').put('parallel', PyJs_anonymous_58_)
        @Js
        def PyJs_anonymous_59_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return Js({'Type':Js('Pass')})
        PyJs_anonymous_59_._set_name('anonymous')
        var.get('exports').put('pass', PyJs_anonymous_59_)
        @Js
        def PyJs_anonymous_60_(_a, this, arguments, var=var):
            var = Scope({'_a':_a, 'this':this, 'arguments':arguments}, var)
            var.registers(['Next', 'End', '_b', '_a', 'state'])
            var.put('_b', (Js({}) if PyJsStrictEq(var.get('_a'),PyJsComma(Js(0.0), Js(None))) else var.get('_a')))
            var.put('End', var.get('_b').get('End'))
            var.put('Next', var.get('_b').get('Next'))
            var.put('state', Js({'Type':Js('Task')}))
            if var.get('End'):
                var.get('state').put('End', Js(True))
            if var.get('Next'):
                var.get('state').put('Next', var.get('Next'))
            return var.get('state')
        PyJs_anonymous_60_._set_name('anonymous')
        var.get('exports').put('task', PyJs_anonymous_60_)
        pass
        var.get('exports').put('serial', var.get('serial'))
        @Js
        def PyJs_anonymous_62_(asl, name, this, arguments, var=var):
            var = Scope({'asl':asl, 'name':name, 'this':this, 'arguments':arguments}, var)
            var.registers(['name', 'asl'])
            if PyJsStrictEq(var.get('name'),PyJsComma(Js(0.0), Js(None))):
                var.put('name', var.get('utils_1').callprop('genId'))
            var.get('asl').put('Stages', Js([var.get('exports').callprop('stage', var.get('name'), var.get('Object').callprop('keys', var.get('asl').get('States')))]))
            return var.get('asl')
        PyJs_anonymous_62_._set_name('anonymous')
        var.get('exports').put('oneStage', PyJs_anonymous_62_)
        @Js
        def PyJs_anonymous_63_(aslList, this, arguments, var=var):
            var = Scope({'aslList':aslList, 'this':this, 'arguments':arguments}, var)
            var.registers(['result', 'States', 'ends_1_1', 'i', 'end', 'endId', 'asl_1', 'aslList', 'ends', 'ends_1', 'e_4', '_a', 'Stages'])
            pass
            @Js
            def PyJs_anonymous_64_(asl, this, arguments, var=var):
                var = Scope({'asl':asl, 'this':this, 'arguments':arguments}, var)
                var.registers(['asl'])
                return var.get('util_1').callprop('clone', var.get('asl').get('Stages'))
            PyJs_anonymous_64_._set_name('anonymous')
            var.put('Stages', var.get('lodash_1').get('default').callprop('flatten', var.get('aslList').callprop('map', PyJs_anonymous_64_)))
            @Js
            def PyJs_anonymous_65_(asl, this, arguments, var=var):
                var = Scope({'asl':asl, 'this':this, 'arguments':arguments}, var)
                var.registers(['asl'])
                return var.get('util_1').callprop('clone', var.get('asl').get('States'))
            PyJs_anonymous_65_._set_name('anonymous')
            var.put('States', var.get('Object').get('assign').callprop('apply', var.get('Object'), var.get('__spread')(Js([Js({})]), var.get('aslList').callprop('map', PyJs_anonymous_65_))))
            var.put('result', Js({'Stages':var.get('Stages'),'States':var.get('States'),'StartAt':var.get('aslList').get('0').get('StartAt')}))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<(var.get('aslList').get('length')-Js(1.0))):
                try:
                    var.put('asl_1', var.get('aslList').get(var.get('i')))
                    var.put('ends', var.get('stageUtils_1').callprop('getEnd', var.get('asl_1').get('States')))
                    try:
                        #for JS loop
                        var.put('ends_1', PyJsComma(var.put('e_4', PyJsComma(Js(0.0), Js(None))),var.get('__values')(var.get('ends'))))
                        var.put('ends_1_1', var.get('ends_1').callprop('next'))
                        while var.get('ends_1_1').get('done').neg():
                            try:
                                var.put('endId', var.get('ends_1_1').get('value'))
                                var.put('end', var.get('result').get('States').get(var.get('endId')))
                                var.get('end').delete('End')
                                var.get('end').put('Next', var.get('aslList').get((var.get('i')+Js(1.0))).get('StartAt'))
                            finally:
                                    var.put('ends_1_1', var.get('ends_1').callprop('next'))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_655f345f31_39968019 = var.own.get('e_4_1')
                        var.force_own_put('e_4_1', PyExceptionToJs(PyJsTempException))
                        try:
                            var.put('e_4', Js({'error':var.get('e_4_1')}))
                        finally:
                            if PyJsHolder_655f345f31_39968019 is not None:
                                var.own['e_4_1'] = PyJsHolder_655f345f31_39968019
                            else:
                                del var.own['e_4_1']
                            del PyJsHolder_655f345f31_39968019
                    finally:
                        try:
                            if ((var.get('ends_1_1') and var.get('ends_1_1').get('done').neg()) and var.put('_a', var.get('ends_1').get('return'))):
                                var.get('_a').callprop('call', var.get('ends_1'))
                        finally:
                            if var.get('e_4'):
                                PyJsTempException = JsToPyException(var.get('e_4').get('error'))
                                raise PyJsTempException
                finally:
                        var.put('i', Js(1.0), '+')
            return var.get('result')
        PyJs_anonymous_63_._set_name('anonymous')
        var.get('exports').put('concat', PyJs_anonymous_63_)
        @Js
        def PyJs_anonymous_66_(_state, id, this, arguments, var=var):
            var = Scope({'_state':_state, 'id':id, 'this':this, 'arguments':arguments}, var)
            var.registers(['result', 'state', '_state', 'id'])
            var.put('state', var.get('util_1').callprop('clone', var.get('_state')))
            var.put('result', Js({'States':Js({})}))
            if var.get('state'):
                var.get('result').put('StartAt', (var.get('id') or var.get('utils_1').callprop('genId')))
                var.get('result').get('States').put(var.get('result').get('StartAt'), var.get('state'))
                var.get('state').put('End', Js(True))
                var.get('state').delete('Next')
            return var.get('result')
        PyJs_anonymous_66_._set_name('anonymous')
        var.get('exports').put('asl', PyJs_anonymous_66_)
        @Js
        def PyJs_anonymous_67_(name, states, this, arguments, var=var):
            var = Scope({'name':name, 'states':states, 'this':this, 'arguments':arguments}, var)
            var.registers(['name', 'states'])
            if PyJsStrictEq(var.get('states'),PyJsComma(Js(0.0), Js(None))):
                var.put('states', Js([]))
            return Js({'name':var.get('name'),'states':var.get('states')})
        PyJs_anonymous_67_._set_name('anonymous')
        var.get('exports').put('stage', PyJs_anonymous_67_)
        @Js
        def PyJs_anonymous_68_(_asl, index, stage, inPlace, this, arguments, var=var):
            var = Scope({'_asl':_asl, 'index':index, 'stage':stage, 'inPlace':inPlace, 'this':this, 'arguments':arguments}, var)
            var.registers(['result', '_asl', 'index', 'inPlace', 'stage'])
            if PyJsStrictEq(var.get('inPlace'),PyJsComma(Js(0.0), Js(None))):
                var.put('inPlace', Js(False))
            var.put('result', (var.get('_asl') if var.get('inPlace') else var.get('util_1').callprop('clone', var.get('_asl'))))
            var.get('result').put('Stages', (var.get('result').get('Stages') or Js([])))
            var.get('result').get('Stages').callprop('splice', var.get('index'), Js(0.0), var.get('stage'))
            return var.get('result')
        PyJs_anonymous_68_._set_name('anonymous')
        var.get('exports').put('insertStage', PyJs_anonymous_68_)
        @Js
        def PyJs_anonymous_69_(_asl, index, name, state, stateId, inPlace, this, arguments, var=var):
            var = Scope({'_asl':_asl, 'index':index, 'name':name, 'state':state, 'stateId':stateId, 'inPlace':inPlace, 'this':this, 'arguments':arguments}, var)
            var.registers(['result', 'normalizedStage', 'id0', 'end', '_asl', 'index', '_c', 'inPlace', 'name', 'stateId', 'stages', 'id1', '_b', '_a', 'state', 'head'])
            if PyJsStrictEq(var.get('name'),PyJsComma(Js(0.0), Js(None))):
                var.put('name', var.get('utils_1').callprop('genId'))
            if PyJsStrictEq(var.get('stateId'),PyJsComma(Js(0.0), Js(None))):
                var.put('stateId', var.get('utils_1').callprop('genId'))
            if PyJsStrictEq(var.get('inPlace'),PyJsComma(Js(0.0), Js(None))):
                var.put('inPlace', Js(False))
            var.put('result', (var.get('_asl') if var.get('inPlace') else var.get('util_1').callprop('clone', var.get('_asl'))))
            var.put('_a', var.get('__read')(Js([var.get('utils_1').callprop('genId'), var.get('utils_1').callprop('genId')]), Js(2.0)))
            var.put('id0', var.get('_a').get('0'))
            var.put('id1', var.get('_a').get('1'))
            var.get('result').put('States', (var.get('result').get('States') or Js({})))
            var.get('result').get('States').put(var.get('id0'), Js({'Type':Js('Pass'),'Next':(var.get('stateId') if var.get('state') else var.get('id1'))}))
            if var.get('state'):
                var.get('result').get('States').put(var.get('stateId'), var.get('state'))
                var.get('state').delete('End')
                var.get('state').put('Next', var.get('id1'))
            var.get('result').get('States').put(var.get('id1'), Js({'Type':Js('Pass')}))
            if (var.get('result').get('Stages') and var.get('result').get('Stages').get((var.get('index')-Js(1.0)))):
                var.put('stages', var.get('stageUtils_1').callprop('calStageInfo', var.get('util_1').callprop('clone', var.get('result'))))
                var.put('_b', var.get('__read')(var.get('stageUtils_1').callprop('getEnd', var.get('stages').get((var.get('index')-Js(1.0))).get('statesInStage')), Js(1.0)))
                var.put('end', var.get('_b').get('0'))
                var.get('result').get('States').get(var.get('end')).delete('End')
                var.get('result').get('States').get(var.get('end')).put('Next', var.get('id0'))
            else:
                var.get('result').put('StartAt', var.get('id0'))
            if (var.get('result').get('Stages') and var.get('result').get('Stages').get(var.get('index'))):
                var.put('stages', var.get('stageUtils_1').callprop('calStageInfo', var.get('util_1').callprop('clone', var.get('result'))))
                var.put('_c', var.get('__read')(var.get('stageUtils_1').callprop('getHead', var.get('stages').get(var.get('index')).get('statesInStage')), Js(1.0)))
                var.put('head', var.get('_c').get('0'))
                var.get('result').get('States').get(var.get('id1')).put('Next', var.get('head'))
            else:
                var.get('result').get('States').get(var.get('id1')).put('End', Js(True))
            var.put('normalizedStage', var.get('exports').callprop('stage', var.get('name'), Js([var.get('id0'), var.get('id1')])))
            if var.get('state'):
                var.get('normalizedStage').get('states').callprop('push', var.get('stateId'))
            var.get('exports').callprop('insertStage', var.get('result'), var.get('index'), var.get('normalizedStage'), Js(True))
            return var.get('result')
        PyJs_anonymous_69_._set_name('anonymous')
        var.get('exports').put('insertNormalizedStage', PyJs_anonymous_69_)
        @Js
        def PyJs_anonymous_70_(states, next, this, arguments, var=var):
            var = Scope({'states':states, 'next':next, 'this':this, 'arguments':arguments}, var)
            var.registers(['states', 'next'])
            @Js
            def PyJs_anonymous_71_(_a, this, arguments, var=var):
                var = Scope({'_a':_a, 'this':this, 'arguments':arguments}, var)
                var.registers(['_b', '_a', 'id'])
                var.put('_b', var.get('__read')(var.get('_a'), Js(1.0)))
                var.put('id', var.get('_b').get('0'))
                return var.get('id')
            PyJs_anonymous_71_._set_name('anonymous')
            @Js
            def PyJs_anonymous_72_(_a, this, arguments, var=var):
                var = Scope({'_a':_a, 'this':this, 'arguments':arguments}, var)
                var.registers(['_b', '_a', 'state', 'id'])
                var.put('_b', var.get('__read')(var.get('_a'), Js(2.0)))
                var.put('id', var.get('_b').get('0'))
                var.put('state', var.get('_b').get('1'))
                return PyJsStrictEq(var.get('state').get('Next'),var.get('next'))
            PyJs_anonymous_72_._set_name('anonymous')
            return var.get('Object').callprop('entries', var.get('states')).callprop('filter', PyJs_anonymous_72_).callprop('map', PyJs_anonymous_71_)
        PyJs_anonymous_70_._set_name('anonymous')
        var.get('exports').put('findStateWithNext', PyJs_anonymous_70_)
        @Js
        def PyJs_anonymous_73_(_asl, index, inPlace, this, arguments, var=var):
            var = Scope({'_asl':_asl, 'index':index, 'inPlace':inPlace, 'this':this, 'arguments':arguments}, var)
            var.registers(['result', 'end', '_asl', 'index', '_c', 'inPlace', 'stages', 'before', '_b', '_a', 'head'])
            if PyJsStrictEq(var.get('inPlace'),PyJsComma(Js(0.0), Js(None))):
                var.put('inPlace', Js(False))
            var.put('result', (var.get('_asl') if var.get('inPlace') else var.get('util_1').callprop('clone', var.get('_asl'))))
            if var.get('result').get('Stages').neg():
                return var.get('result')
            var.put('stages', var.get('stageUtils_1').callprop('calStageInfo', var.get('util_1').callprop('clone', var.get('result'))))
            var.put('_a', var.get('__read')(var.get('stageUtils_1').callprop('getHead', var.get('stages').get(var.get('index')).get('statesInStage')), Js(1.0)))
            var.put('head', var.get('_a').get('0'))
            var.put('_b', var.get('__read')(var.get('stageUtils_1').callprop('getEnd', var.get('stages').get(var.get('index')).get('statesInStage')), Js(1.0)))
            var.put('end', var.get('_b').get('0'))
            if (var.get('head') and var.get('end')):
                if PyJsStrictEq(var.get('result').get('StartAt'),var.get('head')):
                    var.get('result').put('StartAt', var.get('result').get('States').get(var.get('end')).get('Next'))
                else:
                    var.put('_c', var.get('__read')(var.get('exports').callprop('findStateWithNext', var.get('result').get('States'), var.get('head')), Js(1.0)))
                    var.put('before', var.get('_c').get('0'))
                    if var.get('result').get('States').get(var.get('end')).get('End'):
                        var.get('result').get('States').get(var.get('before')).delete('Next')
                        var.get('result').get('States').get(var.get('before')).put('End', Js(True))
                    else:
                        var.get('result').get('States').get(var.get('before')).put('Next', var.get('result').get('States').get(var.get('end')).get('Next'))
                @Js
                def PyJs_anonymous_74_(id, this, arguments, var=var):
                    var = Scope({'id':id, 'this':this, 'arguments':arguments}, var)
                    var.registers(['id'])
                    var.get('result').get('States').delete(var.get('id'))
                PyJs_anonymous_74_._set_name('anonymous')
                var.get('result').get('Stages').get(var.get('index')).get('states').callprop('forEach', PyJs_anonymous_74_)
            var.get('result').get('Stages').callprop('splice', var.get('index'), Js(1.0))
            return var.get('result')
        PyJs_anonymous_73_._set_name('anonymous')
        var.get('exports').put('removeStage', PyJs_anonymous_73_)
        @Js
        def PyJs_anonymous_75_(a, target, currentPath, this, arguments, var=var):
            var = Scope({'a':a, 'target':target, 'currentPath':currentPath, 'this':this, 'arguments':arguments}, var)
            var.registers(['currentPath', 'i', 'found', 'id', 'a', 'target', 'state'])
            if PyJsStrictEq(var.get('currentPath'),PyJsComma(Js(0.0), Js(None))):
                var.put('currentPath', Js([]))
            if var.get('a').get('States').neg():
                return var.get('undefined')
            for PyJsTemp in var.get('a').get('States'):
                var.put('id', PyJsTemp)
                var.put('state', var.get('a').get('States').get(var.get('id')))
                if var.get('target')(var.get('state'), var.get('id')):
                    return var.get('__spread')(var.get('currentPath'), Js([Js('States'), var.get('id')]))
                if var.get('exports').callprop('isParallel', var.get('state')):
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('state').get('Branches').get('length')):
                        try:
                            var.put('found', var.get('exports').callprop('findPath', var.get('state').get('Branches').get(var.get('i')), var.get('target'), var.get('__spread')(var.get('currentPath'), Js([Js('States'), var.get('id'), Js('Branches'), var.get('i')]))))
                            if var.get('found'):
                                return var.get('found')
                        finally:
                                var.put('i', Js(1.0), '+')
        PyJs_anonymous_75_._set_name('anonymous')
        var.get('exports').put('findPath', PyJs_anonymous_75_)
        @Js
        def PyJs_anonymous_76_(a, target, currentPath, this, arguments, var=var):
            var = Scope({'a':a, 'target':target, 'currentPath':currentPath, 'this':this, 'arguments':arguments}, var)
            var.registers(['target', 'a', 'currentPath'])
            if PyJsStrictEq(var.get('currentPath'),PyJsComma(Js(0.0), Js(None))):
                var.put('currentPath', Js([]))
            @Js
            def PyJs_anonymous_77_(state, id, this, arguments, var=var):
                var = Scope({'state':state, 'id':id, 'this':this, 'arguments':arguments}, var)
                var.registers(['state', 'id'])
                return PyJsStrictEq(var.get('id'),var.get('target'))
            PyJs_anonymous_77_._set_name('anonymous')
            return var.get('exports').callprop('findPath', var.get('a'), PyJs_anonymous_77_, var.get('currentPath'))
        PyJs_anonymous_76_._set_name('anonymous')
        var.get('exports').put('findPathWithId', PyJs_anonymous_76_)
        @Js
        def PyJs_anonymous_78_(a, handler, depth, path, this, arguments, var=var):
            var = Scope({'a':a, 'handler':handler, 'depth':depth, 'path':path, 'this':this, 'arguments':arguments}, var)
            var.registers(['depth', 'item', 'handler', 'i', 'path', 'asl_2', 'a', 'tmpPath', 'key'])
            if PyJsStrictEq(var.get('depth'),PyJsComma(Js(0.0), Js(None))):
                var.put('depth', var.get('Infinity'))
            if PyJsStrictEq(var.get('path'),PyJsComma(Js(0.0), Js(None))):
                var.put('path', Js([]))
            if (var.get('depth')<Js(1.0)):
                return var.get('undefined')
            if var.get('exports').callprop('isASL', var.get('a')):
                for PyJsTemp in var.get('a').get('States'):
                    var.put('key', PyJsTemp)
                    var.put('item', var.get('a').get('States').get(var.get('key')))
                    var.put('tmpPath', var.get('__spread')(var.get('path'), Js([Js('States'), var.get('key')])))
                    var.get('handler')(var.get('item'), var.get('tmpPath'))
                    var.get('exports').callprop('travel', var.get('item'), var.get('handler'), (var.get('depth')-Js(1.0)), var.get('tmpPath'))
            if var.get('exports').callprop('isParallel', var.get('a')):
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('a').get('Branches').get('length')):
                    try:
                        var.put('asl_2', var.get('a').get('Branches').get(var.get('i')))
                        var.put('tmpPath', var.get('__spread')(var.get('path'), Js([Js('Branches'), var.get('i')])))
                        var.get('handler')(var.get('asl_2'), var.get('tmpPath'))
                        var.get('exports').callprop('travel', var.get('asl_2'), var.get('handler'), (var.get('depth')-Js(1.0)), var.get('tmpPath'))
                    finally:
                            var.put('i', Js(1.0), '+')
        PyJs_anonymous_78_._set_name('anonymous')
        var.get('exports').put('travel', PyJs_anonymous_78_)
        @Js
        def PyJs_anonymous_79_(a, handler, root, depth, docPath, logicPath, visited, this, arguments, var=var):
            var = Scope({'a':a, 'handler':handler, 'root':root, 'depth':depth, 'docPath':docPath, 'logicPath':logicPath, 'visited':visited, 'this':this, 'arguments':arguments}, var)
            var.registers(['depth', 'docPath', 'logicPath', 'StartAt', 'handler', 'i', 'pathStr', 'parentASL', 'Next', 'parentASLPath', 'End', 'root', 'a', 'asl_3', 'visited'])
            if PyJsStrictEq(var.get('root'),PyJsComma(Js(0.0), Js(None))):
                var.put('root', var.get('a'))
            if PyJsStrictEq(var.get('depth'),PyJsComma(Js(0.0), Js(None))):
                var.put('depth', var.get('Infinity'))
            if PyJsStrictEq(var.get('docPath'),PyJsComma(Js(0.0), Js(None))):
                var.put('docPath', Js([]))
            if PyJsStrictEq(var.get('logicPath'),PyJsComma(Js(0.0), Js(None))):
                var.put('logicPath', Js([]))
            if PyJsStrictEq(var.get('visited'),PyJsComma(Js(0.0), Js(None))):
                var.put('visited', Js({}))
            if (var.get('depth')<Js(1.0)):
                return var.get('undefined')
            var.put('pathStr', var.get('docPath').callprop('join', Js('.')))
            if var.get('visited').get(var.get('pathStr')):
                return var.get('undefined')
            var.get('visited').put(var.get('pathStr'), Js(True))
            var.get('handler')(var.get('a'), var.get('docPath'), var.get('logicPath'))
            if var.get('exports').callprop('isASL', var.get('a')):
                var.put('StartAt', var.get('a').get('StartAt'))
                if var.get('StartAt').neg():
                    return var.get('undefined')
                return var.get('exports').callprop('travelWithOrder', var.get('a').get('States').get(var.get('StartAt')), var.get('handler'), var.get('root'), (var.get('depth')-Js(1.0)), var.get('__spread')(var.get('docPath'), Js([Js('States'), var.get('StartAt')])), var.get('__spread')(var.get('logicPath'), Js([var.get('StartAt')])), var.get('visited'))
            if var.get('exports').callprop('isParallel', var.get('a')):
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('a').get('Branches').get('length')):
                    try:
                        var.put('asl_3', var.get('a').get('Branches').get(var.get('i')))
                        var.get('exports').callprop('travelWithOrder', var.get('asl_3'), var.get('handler'), var.get('root'), (var.get('depth')-Js(1.0)), var.get('__spread')(var.get('docPath'), Js([Js('Branches'), var.get('i')])), var.get('__spread')(var.get('logicPath'), Js([var.get('i')])), var.get('visited'))
                    finally:
                            var.put('i', Js(1.0), '+')
            if var.get('exports').callprop('isChoice', var.get('a')):
                var.put('parentASLPath', var.get('exports').callprop('getParentASLPath', var.get('root'), var.get('docPath')))
                var.put('parentASL', var.get('exports').callprop('get', var.get('root'), var.get('parentASLPath')))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('a').get('Choices').get('length')):
                    try:
                        var.put('Next', var.get('a').get('Choices').get(var.get('i')).get('Next'))
                        return var.get('exports').callprop('travelWithOrder', var.get('parentASL').get('States').get(var.get('Next')), var.get('handler'), var.get('root'), (var.get('depth')-Js(1.0)), var.get('__spread')(var.get('parentASLPath'), Js([Js('States'), var.get('Next')])), var.get('__spread')(var.get('logicPath'), Js([var.get('Next')])), var.get('visited'))
                    finally:
                            var.put('i', Js(1.0), '+')
            if var.get('exports').callprop('isState', var.get('a')):
                var.put('End', var.get('a').get('End'))
                var.put('Next', var.get('a').get('Next'))
                if var.get('End'):
                    return var.get('undefined')
                var.put('parentASLPath', var.get('exports').callprop('getParentASLPath', var.get('root'), var.get('docPath')))
                var.put('parentASL', var.get('exports').callprop('get', var.get('root'), var.get('parentASLPath')))
                if var.get('Next'):
                    return var.get('exports').callprop('travelWithOrder', var.get('parentASL').get('States').get(var.get('Next')), var.get('handler'), var.get('root'), (var.get('depth')-Js(1.0)), var.get('__spread')(var.get('parentASLPath'), Js([Js('States'), var.get('Next')])), var.get('__spread')(var.get('logicPath'), Js([var.get('Next')])), var.get('visited'))
        PyJs_anonymous_79_._set_name('anonymous')
        var.get('exports').put('travelWithOrder', PyJs_anonymous_79_)
        @Js
        def PyJs_anonymous_80_(a, this, arguments, var=var):
            var = Scope({'a':a, 'this':this, 'arguments':arguments}, var)
            var.registers(['result', 'a'])
            var.put('result', Js([]))
            @Js
            def PyJs_anonymous_81_(item, docPath, this, arguments, var=var):
                var = Scope({'item':item, 'docPath':docPath, 'this':this, 'arguments':arguments}, var)
                var.registers(['item', 'i', 'docPath', 'id'])
                if var.get('exports').callprop('isState', var.get('item')).neg():
                    return var.get('undefined')
                var.put('id', var.get('lodash_1').get('default').callprop('last', var.get('docPath')))
                var.put('i', var.get('util_1').callprop('clone', var.get('item')))
                var.get('i').put('id', var.get('id'))
                var.get('result').callprop('push', var.get('i'))
            PyJs_anonymous_81_._set_name('anonymous')
            var.get('exports').callprop('travelWithOrder', var.get('a'), PyJs_anonymous_81_)
            return var.get('result')
        PyJs_anonymous_80_._set_name('anonymous')
        var.get('exports').put('aslToArraySimple', PyJs_anonymous_80_)
        @Js
        def PyJs_anonymous_82_(a, b, filter, isSameState, this, arguments, var=var):
            var = Scope({'a':a, 'b':b, 'filter':filter, 'isSameState':isSameState, 'this':this, 'arguments':arguments}, var)
            var.registers(['isSameState', 'i', 'arrA', 'b', 'a', 'filter', '_a', 'arrB'])
            if PyJsStrictEq(var.get('filter'),PyJsComma(Js(0.0), Js(None))):
                @Js
                def PyJs_anonymous_83_(s, this, arguments, var=var):
                    var = Scope({'s':s, 'this':this, 'arguments':arguments}, var)
                    var.registers(['s'])
                    return PyJsStrictEq(var.get('s').get('Type'),Js('Task'))
                PyJs_anonymous_83_._set_name('anonymous')
                var.put('filter', PyJs_anonymous_83_)
            if PyJsStrictEq(var.get('isSameState'),PyJsComma(Js(0.0), Js(None))):
                @Js
                def PyJs_anonymous_84_(a, b, this, arguments, var=var):
                    var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments}, var)
                    var.registers(['b', 'a'])
                    return PyJsStrictEq(var.get('a').get('id'),var.get('b').get('id'))
                PyJs_anonymous_84_._set_name('anonymous')
                var.put('isSameState', PyJs_anonymous_84_)
            @Js
            def PyJs_anonymous_85_(i, this, arguments, var=var):
                var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                var.registers(['i'])
                return var.get('i').callprop('filter', var.get('filter'))
            PyJs_anonymous_85_._set_name('anonymous')
            var.put('_a', var.get('__read')(Js([var.get('a'), var.get('b')]).callprop('map', var.get('exports').get('aslToArraySimple')).callprop('map', PyJs_anonymous_85_), Js(2.0)))
            var.put('arrA', var.get('_a').get('0'))
            var.put('arrB', var.get('_a').get('1'))
            if PyJsStrictNeq(var.get('arrA').get('length'),var.get('arrB').get('length')):
                return Js(False)
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('arrA').get('length')):
                try:
                    if var.get('isSameState')(var.get('arrA').get(var.get('i')), var.get('arrB').get(var.get('i'))).neg():
                        return Js(False)
                finally:
                        var.put('i', Js(1.0), '+')
            return Js(True)
        PyJs_anonymous_82_._set_name('anonymous')
        var.get('exports').put('sameLayout', PyJs_anonymous_82_)
        @Js
        def PyJs_anonymous_86_(a, this, arguments, var=var):
            var = Scope({'a':a, 'this':this, 'arguments':arguments}, var)
            var.registers(['result', 'a'])
            var.put('result', Js({}))
            @Js
            def PyJs_anonymous_87_(item, path, this, arguments, var=var):
                var = Scope({'item':item, 'path':path, 'this':this, 'arguments':arguments}, var)
                var.registers(['item', 'path', 'id'])
                if var.get('exports').callprop('isState', var.get('item')):
                    var.put('id', var.get('lodash_1').get('default').callprop('last', var.get('path')))
                    var.get('result').put(var.get('id'), var.get('path'))
            PyJs_anonymous_87_._set_name('anonymous')
            var.get('exports').callprop('travel', var.get('a'), PyJs_anonymous_87_)
            return var.get('result')
        PyJs_anonymous_86_._set_name('anonymous')
        var.get('exports').put('mapStateIdPath', PyJs_anonymous_86_)
        pass
        var.get('exports').put('replaceState', var.get('replaceState'))
        pass
        var.get('exports').put('replaceStage', var.get('replaceStage'))
        pass
        var.get('exports').put('replaceID', var.get('replaceID'))
    PyJs_anonymous_29_._set_name('anonymous')
    @Js
    def PyJs_anonymous_90_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['ASLMutations_1', 'require', 'exports', '__values', 'module'])
        Js('use strict')
        @Js
        def PyJs_anonymous_91_(o, this, arguments, var=var):
            var = Scope({'o':o, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'm', 's', 'o'])
            var.put('s', (PyJsStrictEq(var.get('Symbol',throw=False).typeof(),Js('function')) and var.get('Symbol').get('iterator')))
            var.put('m', (var.get('s') and var.get('o').get(var.get('s'))))
            var.put('i', Js(0.0))
            if var.get('m'):
                return var.get('m').callprop('call', var.get('o'))
            if (var.get('o') and PyJsStrictEq(var.get('o').get('length').typeof(),Js('number'))):
                @Js
                def PyJs_anonymous_92_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    if (var.get('o') and (var.get('i')>=var.get('o').get('length'))):
                        var.put('o', PyJsComma(Js(0.0), Js(None)))
                    return Js({'value':(var.get('o') and var.get('o').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)))),'done':var.get('o').neg()})
                PyJs_anonymous_92_._set_name('anonymous')
                return Js({'next':PyJs_anonymous_92_})
            PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Object is not iterable.') if var.get('s') else Js('Symbol.iterator is not defined.'))))
            raise PyJsTempException
        PyJs_anonymous_91_._set_name('anonymous')
        var.put('__values', ((var.get(u"this") and var.get(u"this").get('__values')) or PyJs_anonymous_91_))
        var.get('exports').put('__esModule', Js(True))
        var.put('ASLMutations_1', var.get('require')(Js('./ASLMutations')))
        @Js
        def PyJs_anonymous_93_(info, this, arguments, var=var):
            var = Scope({'info':info, 'this':this, 'arguments':arguments}, var)
            var.registers(['result', 'e_1', 'dep', '_c', 'id', 'info', '_b', '_a'])
            pass
            var.put('result', Js({}))
            for PyJsTemp in var.get('info'):
                var.put('id', PyJsTemp)
                try:
                    #for JS loop
                    var.put('_b', PyJsComma(var.put('e_1', PyJsComma(Js(0.0), Js(None))),var.get('__values')(var.get('result').put(var.get('id'), var.get('info').get(var.get('id'))))))
                    var.put('_c', var.get('_b').callprop('next'))
                    while var.get('_c').get('done').neg():
                        try:
                            var.put('dep', var.get('_c').get('value'))
                            if var.get('info').get(var.get('dep')).neg():
                                var.get('result').put(var.get('dep'), Js([]))
                        finally:
                                var.put('_c', var.get('_b').callprop('next'))
                except PyJsException as PyJsTempException:
                    PyJsHolder_655f315f31_44900527 = var.own.get('e_1_1')
                    var.force_own_put('e_1_1', PyExceptionToJs(PyJsTempException))
                    try:
                        var.put('e_1', Js({'error':var.get('e_1_1')}))
                    finally:
                        if PyJsHolder_655f315f31_44900527 is not None:
                            var.own['e_1_1'] = PyJsHolder_655f315f31_44900527
                        else:
                            del var.own['e_1_1']
                        del PyJsHolder_655f315f31_44900527
                finally:
                    try:
                        if ((var.get('_c') and var.get('_c').get('done').neg()) and var.put('_a', var.get('_b').get('return'))):
                            var.get('_a').callprop('call', var.get('_b'))
                    finally:
                        if var.get('e_1'):
                            PyJsTempException = JsToPyException(var.get('e_1').get('error'))
                            raise PyJsTempException
            return var.get('result')
        PyJs_anonymous_93_._set_name('anonymous')
        var.get('exports').put('normalizeGroupItemRelationGroupInfo', PyJs_anonymous_93_)
        @Js
        def PyJs_anonymous_94_(deps, this, arguments, var=var):
            var = Scope({'deps':deps, 'this':this, 'arguments':arguments}, var)
            var.registers(['done', 'group', 'dep', 'rest', 'cur', 'deps', 'groups', 'left'])
            var.put('groups', Js([]))
            var.put('rest', var.get('deps'))
            var.put('done', Js({}))
            while var.get('Object').callprop('keys', var.get('rest')).get('length'):
                var.put('group', Js([]))
                var.put('left', Js({}))
                for PyJsTemp in var.get('rest'):
                    var.put('cur', PyJsTemp)
                    @Js
                    def PyJs_anonymous_95_(i, this, arguments, var=var):
                        var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                        var.registers(['i'])
                        return var.get('done').get(var.get('i')).neg()
                    PyJs_anonymous_95_._set_name('anonymous')
                    var.put('dep', var.get('rest').get(var.get('cur')).callprop('filter', PyJs_anonymous_95_))
                    if PyJsStrictEq(var.get('dep').get('length'),Js(0.0)):
                        var.get('group').callprop('push', var.get('cur'))
                        var.get('done').put(var.get('cur'), Js(True))
                    else:
                        var.get('left').put(var.get('cur'), var.get('rest').get(var.get('cur')))
                var.get('groups').callprop('push', var.get('group'))
                var.put('rest', var.get('left'))
            return var.get('groups')
        PyJs_anonymous_94_._set_name('anonymous')
        var.get('exports').put('calGroupByItemsRelation', PyJs_anonymous_94_)
        @Js
        def PyJs_anonymous_96_(matrix, this, arguments, var=var):
            var = Scope({'matrix':matrix, 'this':this, 'arguments':arguments}, var)
            var.registers(['matrix'])
            @Js
            def PyJs_anonymous_97_(branches, this, arguments, var=var):
                var = Scope({'branches':branches, 'this':this, 'arguments':arguments}, var)
                var.registers(['branches'])
                @Js
                def PyJs_anonymous_98_(branch, this, arguments, var=var):
                    var = Scope({'branch':branch, 'this':this, 'arguments':arguments}, var)
                    var.registers(['branch'])
                    return var.get('ASLMutations_1').callprop('asl', var.get('ASLMutations_1').callprop('task'), var.get('branch'))
                PyJs_anonymous_98_._set_name('anonymous')
                return var.get('ASLMutations_1').callprop('oneStage', var.get('ASLMutations_1').callprop('serial', Js([var.get('ASLMutations_1').callprop('pass'), var.get('ASLMutations_1').callprop('parallel', var.get('branches').callprop('map', PyJs_anonymous_98_)), var.get('ASLMutations_1').callprop('pass')])))
            PyJs_anonymous_97_._set_name('anonymous')
            return var.get('ASLMutations_1').callprop('concat', var.get('matrix').callprop('map', PyJs_anonymous_97_))
        PyJs_anonymous_96_._set_name('anonymous')
        var.get('exports').put('genNormalizedASLBy2DMatrix', PyJs_anonymous_96_)
        @Js
        def PyJs_anonymous_99_(a, states, this, arguments, var=var):
            var = Scope({'a':a, 'states':states, 'this':this, 'arguments':arguments}, var)
            var.registers(['states', 'pathMap', 'a', 'id'])
            var.put('pathMap', var.get('ASLMutations_1').callprop('mapStateIdPath', var.get('a')))
            for PyJsTemp in var.get('states'):
                var.put('id', PyJsTemp)
                var.get('ASLMutations_1').callprop('replaceState', var.get('a'), var.get('pathMap').get(var.get('id')), var.get('states').get(var.get('id')), Js(True))
            return var.get('a')
        PyJs_anonymous_99_._set_name('anonymous')
        var.get('exports').put('bulkUpdateStateInPlace', PyJs_anonymous_99_)
        @Js
        def PyJs_anonymous_100_(deps, states, this, arguments, var=var):
            var = Scope({'deps':deps, 'states':states, 'this':this, 'arguments':arguments}, var)
            var.registers(['states', 'deps'])
            return var.get('exports').callprop('bulkUpdateStateInPlace', var.get('exports').callprop('genNormalizedASLBy2DMatrix', var.get('exports').callprop('calGroupByItemsRelation', var.get('exports').callprop('normalizeGroupItemRelationGroupInfo', var.get('deps')))), var.get('states'))
        PyJs_anonymous_100_._set_name('anonymous')
        var.get('exports').put('genASLForReleaseTrain', PyJs_anonymous_100_)
    PyJs_anonymous_90_._set_name('anonymous')
    @Js
    def PyJs_anonymous_101_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', '__export', 'exports'])
        @Js
        def PyJsHoisted___export_(m, this, arguments, var=var):
            var = Scope({'m':m, 'this':this, 'arguments':arguments}, var)
            var.registers(['m', 'p'])
            for PyJsTemp in var.get('m'):
                var.put('p', PyJsTemp)
                if var.get('exports').callprop('hasOwnProperty', var.get('p')).neg():
                    var.get('exports').put(var.get('p'), var.get('m').get(var.get('p')))
        PyJsHoisted___export_.func_name = '__export'
        var.put('__export', PyJsHoisted___export_)
        Js('use strict')
        pass
        var.get('exports').put('__esModule', Js(True))
        var.get('__export')(var.get('require')(Js('./ASLMutations')))
        var.get('__export')(var.get('require')(Js('./transform')))
        var.get('__export')(var.get('require')(Js('./gen')))
    PyJs_anonymous_101_._set_name('anonymous')
    @Js
    def PyJs_anonymous_102_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['_handleProcess', '_isJSON', '__values', 'module', '_getStageFromService', '_genStateForService', 'require', '__importDefault', 'utils_1', '__read', '__assign', 'ASLMutations_1', '_fillServiceIndex', '__spread', 'lodash_1', '_mergeService', 'exports', '_getStage', 'STREAM_ARRAY_ATTRS'])
        Js('use strict')
        @Js
        def PyJs_anonymous_103_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_anonymous_104_(t, this, arguments, var=var):
                var = Scope({'t':t, 'this':this, 'arguments':arguments}, var)
                var.registers(['s', 'n', 'i', 't', 'p'])
                #for JS loop
                var.put('i', Js(1.0))
                var.put('n', var.get('arguments').get('length'))
                while (var.get('i')<var.get('n')):
                    try:
                        var.put('s', var.get('arguments').get(var.get('i')))
                        for PyJsTemp in var.get('s'):
                            var.put('p', PyJsTemp)
                            if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('s'), var.get('p')):
                                var.get('t').put(var.get('p'), var.get('s').get(var.get('p')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get('t')
            PyJs_anonymous_104_._set_name('anonymous')
            var.put('__assign', (var.get('Object').get('assign') or PyJs_anonymous_104_))
            return var.get('__assign').callprop('apply', var.get(u"this"), var.get('arguments'))
        PyJs_anonymous_103_._set_name('anonymous')
        var.put('__assign', ((var.get(u"this") and var.get(u"this").get('__assign')) or PyJs_anonymous_103_))
        @Js
        def PyJs_anonymous_105_(o, this, arguments, var=var):
            var = Scope({'o':o, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'm', 's', 'o'])
            var.put('s', (PyJsStrictEq(var.get('Symbol',throw=False).typeof(),Js('function')) and var.get('Symbol').get('iterator')))
            var.put('m', (var.get('s') and var.get('o').get(var.get('s'))))
            var.put('i', Js(0.0))
            if var.get('m'):
                return var.get('m').callprop('call', var.get('o'))
            if (var.get('o') and PyJsStrictEq(var.get('o').get('length').typeof(),Js('number'))):
                @Js
                def PyJs_anonymous_106_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    if (var.get('o') and (var.get('i')>=var.get('o').get('length'))):
                        var.put('o', PyJsComma(Js(0.0), Js(None)))
                    return Js({'value':(var.get('o') and var.get('o').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)))),'done':var.get('o').neg()})
                PyJs_anonymous_106_._set_name('anonymous')
                return Js({'next':PyJs_anonymous_106_})
            PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Object is not iterable.') if var.get('s') else Js('Symbol.iterator is not defined.'))))
            raise PyJsTempException
        PyJs_anonymous_105_._set_name('anonymous')
        var.put('__values', ((var.get(u"this") and var.get(u"this").get('__values')) or PyJs_anonymous_105_))
        @Js
        def PyJs_anonymous_107_(o, n, this, arguments, var=var):
            var = Scope({'o':o, 'n':n, 'this':this, 'arguments':arguments}, var)
            var.registers(['o', 'm', 'n', 'i', 'r', 'ar', 'e'])
            var.put('m', (PyJsStrictEq(var.get('Symbol',throw=False).typeof(),Js('function')) and var.get('o').get(var.get('Symbol').get('iterator'))))
            if var.get('m').neg():
                return var.get('o')
            var.put('i', var.get('m').callprop('call', var.get('o')))
            var.put('ar', Js([]))
            try:
                while ((PyJsStrictEq(var.get('n'),PyJsComma(Js(0.0), Js(None))) or ((var.put('n',Js(var.get('n').to_number())-Js(1))+Js(1))>Js(0.0))) and var.put('r', var.get('i').callprop('next')).get('done').neg()):
                    var.get('ar').callprop('push', var.get('r').get('value'))
            except PyJsException as PyJsTempException:
                PyJsHolder_6572726f72_4535853 = var.own.get('error')
                var.force_own_put('error', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('e', Js({'error':var.get('error')}))
                finally:
                    if PyJsHolder_6572726f72_4535853 is not None:
                        var.own['error'] = PyJsHolder_6572726f72_4535853
                    else:
                        del var.own['error']
                    del PyJsHolder_6572726f72_4535853
            finally:
                try:
                    if ((var.get('r') and var.get('r').get('done').neg()) and var.put('m', var.get('i').get('return'))):
                        var.get('m').callprop('call', var.get('i'))
                finally:
                    if var.get('e'):
                        PyJsTempException = JsToPyException(var.get('e').get('error'))
                        raise PyJsTempException
            return var.get('ar')
        PyJs_anonymous_107_._set_name('anonymous')
        var.put('__read', ((var.get(u"this") and var.get(u"this").get('__read')) or PyJs_anonymous_107_))
        @Js
        def PyJs_anonymous_108_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'ar'])
            #for JS loop
            var.put('ar', Js([]))
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('arguments').get('length')):
                try:
                    var.put('ar', var.get('ar').callprop('concat', var.get('__read')(var.get('arguments').get(var.get('i')))))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('ar')
        PyJs_anonymous_108_._set_name('anonymous')
        var.put('__spread', ((var.get(u"this") and var.get(u"this").get('__spread')) or PyJs_anonymous_108_))
        @Js
        def PyJs_anonymous_109_(mod, this, arguments, var=var):
            var = Scope({'mod':mod, 'this':this, 'arguments':arguments}, var)
            var.registers(['mod'])
            return (var.get('mod') if (var.get('mod') and var.get('mod').get('__esModule')) else Js({'default':var.get('mod')}))
        PyJs_anonymous_109_._set_name('anonymous')
        var.put('__importDefault', ((var.get(u"this") and var.get(u"this").get('__importDefault')) or PyJs_anonymous_109_))
        var.get('exports').put('__esModule', Js(True))
        var.put('lodash_1', var.get('__importDefault')(var.get('require')(Js('lodash'))))
        var.put('utils_1', var.get('require')(Js('../utils')))
        var.put('ASLMutations_1', var.get('require')(Js('./ASLMutations')))
        @Js
        def PyJs_anonymous_110_(attrs, this, arguments, var=var):
            var = Scope({'attrs':attrs, 'this':this, 'arguments':arguments}, var)
            var.registers(['filteredAttrs', 'attrs'])
            if var.get('Array').callprop('isArray', var.get('attrs')):
                @Js
                def PyJs_anonymous_111_(attr, this, arguments, var=var):
                    var = Scope({'attr':attr, 'this':this, 'arguments':arguments}, var)
                    var.registers(['attr'])
                    return (var.get('attr').get('key') and var.get('attr').get('value'))
                PyJs_anonymous_111_._set_name('anonymous')
                var.put('filteredAttrs', var.get('attrs').callprop('filter', PyJs_anonymous_111_))
                return var.get('lodash_1').get('default').callprop('mapValues', var.get('lodash_1').get('default').callprop('keyBy', var.get('filteredAttrs'), Js('key')), Js('value'))
            return Js({})
        PyJs_anonymous_110_._set_name('anonymous')
        var.get('exports').put('formatAttributes', PyJs_anonymous_110_)
        @Js
        def PyJs_anonymous_112_(attrs, this, arguments, var=var):
            var = Scope({'attrs':attrs, 'this':this, 'arguments':arguments}, var)
            var.registers(['attrs'])
            @Js
            def PyJs_anonymous_113_(attrs, this, arguments, var=var):
                var = Scope({'attrs':attrs, 'this':this, 'arguments':arguments}, var)
                var.registers(['attrs'])
                return var.get('lodash_1').get('default').callprop('mapValues', var.get('lodash_1').get('default').callprop('groupBy', var.get('attrs'), Js('service_index')), var.get('exports').get('formatAttributes'))
            PyJs_anonymous_113_._set_name('anonymous')
            return var.get('lodash_1').get('default').callprop('mapValues', var.get('lodash_1').get('default').callprop('groupBy', var.get('attrs'), Js('service_id')), PyJs_anonymous_113_)
        PyJs_anonymous_112_._set_name('anonymous')
        var.get('exports').put('getServiceAttributesFromStreamAttributes', PyJs_anonymous_112_)
        @Js
        def PyJs_anonymous_114_(s, this, arguments, var=var):
            var = Scope({'s':s, 'this':this, 'arguments':arguments}, var)
            var.registers(['s', 'r'])
            var.put('r', var.get('lodash_1').get('default').callprop('attempt', var.get('JSON').get('parse'), var.get('s')))
            return (var.get('s') if var.get('lodash_1').get('default').callprop('isError', var.get('r')) else var.get('r'))
        PyJs_anonymous_114_._set_name('anonymous')
        var.get('exports').put('attemptParseJSON', PyJs_anonymous_114_)
        @Js
        def PyJs_anonymous_115_(s, this, arguments, var=var):
            var = Scope({'s':s, 'this':this, 'arguments':arguments}, var)
            var.registers(['s', 'r'])
            var.put('r', var.get('lodash_1').get('default').callprop('attempt', var.get('eval'), ((Js('var r = ')+var.get('s'))+Js('; r'))))
            return (var.get('s') if var.get('lodash_1').get('default').callprop('isError', var.get('r')) else var.get('r'))
        PyJs_anonymous_115_._set_name('anonymous')
        var.get('exports').put('attemptParseDictLiteral', PyJs_anonymous_115_)
        var.put('STREAM_ARRAY_ATTRS', Js([Js('scm_repo_name'), Js('psms'), Js('tce_env')]))
        @Js
        def PyJs_anonymous_116_(key, value, this, arguments, var=var):
            var = Scope({'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['key', 'value'])
            return Js(True)
        PyJs_anonymous_116_._set_name('anonymous')
        var.put('_isJSON', PyJs_anonymous_116_)
        @Js
        def PyJs_anonymous_117_(key, value, isJSON, this, arguments, var=var):
            var = Scope({'key':key, 'value':value, 'isJSON':isJSON, 'this':this, 'arguments':arguments}, var)
            var.registers(['key', 'value', 'isJSON'])
            if PyJsStrictEq(var.get('isJSON'),PyJsComma(Js(0.0), Js(None))):
                var.put('isJSON', var.get('_isJSON'))
            if var.get('STREAM_ARRAY_ATTRS').callprop('includes', var.get('key')):
                return var.get('value').callprop('split', Js(','))
            if (var.get('isJSON') and var.get('isJSON')(var.get('key'), var.get('value'))):
                return var.get('exports').callprop('attemptParseJSON', var.get('value'))
            return var.get('value')
        PyJs_anonymous_117_._set_name('anonymous')
        var.get('exports').put('attemptTransformAttribute', PyJs_anonymous_117_)
        @Js
        def PyJs_anonymous_118_(attrs, isJSON, this, arguments, var=var):
            var = Scope({'attrs':attrs, 'isJSON':isJSON, 'this':this, 'arguments':arguments}, var)
            var.registers(['key', 'result', 'isJSON', 'attrs'])
            var.put('result', Js({}))
            for PyJsTemp in var.get('attrs'):
                var.put('key', PyJsTemp)
                var.get('result').put(var.get('key'), var.get('exports').callprop('attemptTransformAttribute', var.get('key'), var.get('attrs').get(var.get('key')), var.get('isJSON')))
            return var.get('result')
        PyJs_anonymous_118_._set_name('anonymous')
        var.get('exports').put('transformAttributesToJSONCompatible', PyJs_anonymous_118_)
        @Js
        def PyJs_anonymous_119_(arr, distinct, this, arguments, var=var):
            var = Scope({'arr':arr, 'distinct':distinct, 'this':this, 'arguments':arguments}, var)
            var.registers(['result', 'item', 'distinct', 'i', 'flag', 'lastFlag', 'arr', 'tmpChunk'])
            if PyJsStrictEq(var.get('distinct'),PyJsComma(Js(0.0), Js(None))):
                @Js
                def PyJs_anonymous_120_(i, this, arguments, var=var):
                    var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                    var.registers(['i'])
                    return var.get('i')
                PyJs_anonymous_120_._set_name('anonymous')
                var.put('distinct', PyJs_anonymous_120_)
            var.put('result', Js([]))
            var.put('lastFlag', var.get('NaN'))
            var.put('tmpChunk', Js([]))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('arr').get('length')):
                try:
                    var.put('item', var.get('arr').get(var.get('i')))
                    var.put('flag', var.get('distinct')(var.get('item')))
                    if (PyJsStrictEq(var.get('i'),Js(0.0)) or PyJsStrictEq(var.get('flag'),var.get('lastFlag'))):
                        var.put('lastFlag', var.get('flag'))
                        var.get('tmpChunk').callprop('push', var.get('item'))
                    else:
                        var.get('result').callprop('push', var.get('tmpChunk'))
                        var.put('tmpChunk', Js([var.get('item')]))
                        var.put('lastFlag', var.get('flag'))
                finally:
                        var.put('i', Js(1.0), '+')
            var.get('result').callprop('push', var.get('tmpChunk'))
            return var.get('result')
        PyJs_anonymous_119_._set_name('anonymous')
        var.get('exports').put('chunkBy', PyJs_anonymous_119_)
        @Js
        def PyJs_anonymous_121_(service, this, arguments, var=var):
            var = Scope({'service':service, 'this':this, 'arguments':arguments}, var)
            var.registers(['service'])
            return var.get('exports').callprop('formatAttributes', var.get('service')).get('stage')
        PyJs_anonymous_121_._set_name('anonymous')
        var.put('_getStageFromService', PyJs_anonymous_121_)
        @Js
        def PyJs_anonymous_122_(service, this, arguments, var=var):
            var = Scope({'service':service, 'this':this, 'arguments':arguments}, var)
            var.registers(['service'])
            if var.get('Array').callprop('isArray', var.get('service')):
                return var.get('_getStage')(var.get('service').get('0'))
            return var.get('_getStageFromService')(var.get('service').get('attributes'))
        PyJs_anonymous_122_._set_name('anonymous')
        var.put('_getStage', PyJs_anonymous_122_)
        @Js
        def PyJs_anonymous_123_(services, this, arguments, var=var):
            var = Scope({'services':services, 'this':this, 'arguments':arguments}, var)
            var.registers(['services'])
            return var.get('exports').callprop('chunkBy', var.get('services'), var.get('_getStage'))
        PyJs_anonymous_123_._set_name('anonymous')
        var.get('exports').put('chunkWithStage', PyJs_anonymous_123_)
        @Js
        def PyJs_anonymous_124_(service, serviceAttributes, customState, isJSON, this, arguments, var=var):
            var = Scope({'service':service, 'serviceAttributes':serviceAttributes, 'customState':customState, 'isJSON':isJSON, 'this':this, 'arguments':arguments}, var)
            var.registers(['service', 'customProperties', 'isJSON', '_b', '_a', 'serviceAttributes', 'customState'])
            if PyJsStrictEq(var.get('customState'),PyJsComma(Js(0.0), Js(None))):
                @Js
                def PyJs_anonymous_125_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return var.get('undefined')
                PyJs_anonymous_125_._set_name('anonymous')
                var.put('customState', PyJs_anonymous_125_)
            pass
            if var.get('Array').callprop('isArray', var.get('service')):
                @Js
                def PyJs_anonymous_126_(subProcess, this, arguments, var=var):
                    var = Scope({'subProcess':subProcess, 'this':this, 'arguments':arguments}, var)
                    var.registers(['subProcess', 'services'])
                    var.put('services', (var.get('subProcess') if var.get('Array').callprop('isArray', var.get('subProcess')) else Js([var.get('subProcess')])))
                    @Js
                    def PyJs_anonymous_127_(service, this, arguments, var=var):
                        var = Scope({'service':service, 'this':this, 'arguments':arguments}, var)
                        var.registers(['service'])
                        return var.get('_genStateForService')(var.get('service'), var.get('serviceAttributes'), var.get('customState'), var.get('isJSON'))
                    PyJs_anonymous_127_._set_name('anonymous')
                    return var.get('ASLMutations_1').callprop('serial', var.get('services').callprop('map', PyJs_anonymous_127_))
                PyJs_anonymous_126_._set_name('anonymous')
                return Js({'id':var.get('utils_1').callprop('genId'),'Type':Js('Parallel'),'Branches':var.get('service').callprop('map', PyJs_anonymous_126_)})
            var.put('customProperties', (var.get('customState')(var.get('service')) if var.get('customState') else var.get('undefined')))
            def PyJs_LONG_129_(var=var):
                def PyJs_LONG_128_(var=var):
                    return (PyJsComma(Js(0.0), Js(None)) if (PyJsStrictEq(var.put('_b', (PyJsComma(Js(0.0), Js(None)) if (PyJsStrictEq(var.put('_a', var.get('serviceAttributes')),var.get(u"null")) or PyJsStrictEq(var.get('_a'),PyJsComma(Js(0.0), Js(None)))) else var.get('_a').get(var.get('service').get('id')))),var.get(u"null")) or PyJsStrictEq(var.get('_b'),PyJsComma(Js(0.0), Js(None)))) else var.get('_b').get(var.get('service').get('index')))
                return var.get('__assign')(Js({'id':((var.get('service').get('name')+Js('-'))+var.get('utils_1').callprop('genId')),'Type':Js('Task'),'Parameters':Js({'service_title':var.get('service').get('title'),'service_name':var.get('service').get('name'),'service_type':var.get('service').get('type'),'stream_attributes':var.get('exports').callprop('transformAttributesToJSONCompatible', PyJs_LONG_128_(), var.get('isJSON'))})}), var.get('customProperties'))
            return PyJs_LONG_129_()
        PyJs_anonymous_124_._set_name('anonymous')
        var.put('_genStateForService', PyJs_anonymous_124_)
        @Js
        def PyJs_anonymous_130_(services, this, arguments, var=var):
            var = Scope({'services':services, 'this':this, 'arguments':arguments}, var)
            var.registers(['s', 'services', 'e_1', '_c', 'service', '_b', '_a'])
            pass
            var.put('s', Js({}))
            try:
                #for JS loop
                var.put('_b', var.get('__values')(var.get('lodash_1').get('default').callprop('flattenDeep', var.get('services'))))
                var.put('_c', var.get('_b').callprop('next'))
                while var.get('_c').get('done').neg():
                    try:
                        var.put('service', var.get('_c').get('value'))
                        if (var.get('s').get(var.get('service').get('id'))==var.get(u"null")):
                            var.get('s').put(var.get('service').get('id'), Js(1.0))
                        else:
                            var.get('s').put(var.get('service').get('id'), Js(1.0), '+')
                        var.get('service').put('index', var.get('s').get(var.get('service').get('id')))
                    finally:
                            var.put('_c', var.get('_b').callprop('next'))
            except PyJsException as PyJsTempException:
                PyJsHolder_655f315f31_8861285 = var.own.get('e_1_1')
                var.force_own_put('e_1_1', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('e_1', Js({'error':var.get('e_1_1')}))
                finally:
                    if PyJsHolder_655f315f31_8861285 is not None:
                        var.own['e_1_1'] = PyJsHolder_655f315f31_8861285
                    else:
                        del var.own['e_1_1']
                    del PyJsHolder_655f315f31_8861285
            finally:
                try:
                    if ((var.get('_c') and var.get('_c').get('done').neg()) and var.put('_a', var.get('_b').get('return'))):
                        var.get('_a').callprop('call', var.get('_b'))
                finally:
                    if var.get('e_1'):
                        PyJsTempException = JsToPyException(var.get('e_1').get('error'))
                        raise PyJsTempException
        PyJs_anonymous_130_._set_name('anonymous')
        var.put('_fillServiceIndex', PyJs_anonymous_130_)
        @Js
        def PyJs_anonymous_131_(services, streamAttributes, genStateForService, isJSON, this, arguments, var=var):
            var = Scope({'services':services, 'streamAttributes':streamAttributes, 'genStateForService':genStateForService, 'isJSON':isJSON, 'this':this, 'arguments':arguments}, var)
            var.registers(['states', 'handledChunks', 'e_2', 'services', 'stageName', 'streamAttributes', '_c', 'asl', 'genStateForService', 'isJSON', '_b', '_a', 'serviceAttributes', 'chunk', 'Stages'])
            pass
            if PyJsStrictEq(var.get('streamAttributes'),PyJsComma(Js(0.0), Js(None))):
                var.put('streamAttributes', Js([]))
            if PyJsStrictEq(var.get('genStateForService'),PyJsComma(Js(0.0), Js(None))):
                @Js
                def PyJs_anonymous_132_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return var.get('undefined')
                PyJs_anonymous_132_._set_name('anonymous')
                var.put('genStateForService', PyJs_anonymous_132_)
            var.get('_fillServiceIndex')(var.get('services'))
            var.put('serviceAttributes', var.get('exports').callprop('getServiceAttributesFromStreamAttributes', var.get('streamAttributes')))
            var.put('Stages', Js([]))
            var.put('handledChunks', Js([]))
            try:
                #for JS loop
                var.put('_b', var.get('__values')(var.get('exports').callprop('chunkWithStage', var.get('services'))))
                var.put('_c', var.get('_b').callprop('next'))
                while var.get('_c').get('done').neg():
                    try:
                        var.put('chunk', var.get('_c').get('value'))
                        @Js
                        def PyJs_anonymous_133_(service, this, arguments, var=var):
                            var = Scope({'service':service, 'this':this, 'arguments':arguments}, var)
                            var.registers(['service'])
                            return var.get('_genStateForService')(var.get('service'), var.get('serviceAttributes'), var.get('genStateForService'), var.get('isJSON'))
                        PyJs_anonymous_133_._set_name('anonymous')
                        var.put('states', var.get('chunk').callprop('map', PyJs_anonymous_133_))
                        var.put('stageName', var.get('_getStage')(var.get('chunk').get('0')))
                        var.get('states').callprop('push', Js({'Type':Js('Pass'),'id':var.get('utils_1').callprop('genId')}))
                        var.get('states').callprop('unshift', Js({'Type':Js('Pass'),'id':var.get('utils_1').callprop('genId')}))
                        @Js
                        def PyJs_anonymous_134_(i, this, arguments, var=var):
                            var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                            var.registers(['i'])
                            return var.get('i').get('id')
                        PyJs_anonymous_134_._set_name('anonymous')
                        var.get('Stages').callprop('push', var.get('ASLMutations_1').callprop('stage', (var.get('stageName') or Js('')), var.get('states').callprop('map', PyJs_anonymous_134_)))
                        var.get('handledChunks').callprop('push', var.get('states'))
                    finally:
                            var.put('_c', var.get('_b').callprop('next'))
            except PyJsException as PyJsTempException:
                PyJsHolder_655f325f31_53749748 = var.own.get('e_2_1')
                var.force_own_put('e_2_1', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('e_2', Js({'error':var.get('e_2_1')}))
                finally:
                    if PyJsHolder_655f325f31_53749748 is not None:
                        var.own['e_2_1'] = PyJsHolder_655f325f31_53749748
                    else:
                        del var.own['e_2_1']
                    del PyJsHolder_655f325f31_53749748
            finally:
                try:
                    if ((var.get('_c') and var.get('_c').get('done').neg()) and var.put('_a', var.get('_b').get('return'))):
                        var.get('_a').callprop('call', var.get('_b'))
                finally:
                    if var.get('e_2'):
                        PyJsTempException = JsToPyException(var.get('e_2').get('error'))
                        raise PyJsTempException
            var.put('asl', var.get('ASLMutations_1').callprop('serial', var.get('lodash_1').get('default').callprop('flatten', var.get('handledChunks'))))
            var.get('asl').put('Stages', var.get('Stages'))
            return var.get('asl')
        PyJs_anonymous_131_._set_name('anonymous')
        var.get('exports').put('transformArrayProcessToASL', PyJs_anonymous_131_)
        @Js
        def PyJs_anonymous_135_(service, services, node_attributes, this, arguments, var=var):
            var = Scope({'service':service, 'services':services, 'node_attributes':node_attributes, 'this':this, 'arguments':arguments}, var)
            var.registers(['node_attributes', 'service', 'services'])
            if var.get('Array').callprop('isArray', var.get('service')):
                @Js
                def PyJs_anonymous_136_(i, this, arguments, var=var):
                    var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                    var.registers(['i'])
                    return var.get('_mergeService')(var.get('i'), var.get('services'), var.get('node_attributes'))
                PyJs_anonymous_136_._set_name('anonymous')
                return var.get('service').callprop('map', PyJs_anonymous_136_)
            @Js
            def PyJs_anonymous_137_(i, this, arguments, var=var):
                var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                var.registers(['i'])
                return PyJsStrictEq(var.get('i').get('name'),var.get('service').get('name'))
            PyJs_anonymous_137_._set_name('anonymous')
            return var.get('Object').callprop('assign', var.get('service'), var.get('services').callprop('find', PyJs_anonymous_137_), Js({'index':var.get('node_attributes').get(((var.get('service').get('name')+Js('_'))+var.get('service').get('index'))).get('service_index')}))
        PyJs_anonymous_135_._set_name('anonymous')
        var.put('_mergeService', PyJs_anonymous_135_)
        @Js
        def PyJs_anonymous_138_(process, this, arguments, var=var):
            var = Scope({'process':process, 'this':this, 'arguments':arguments}, var)
            var.registers(['process'])
            @Js
            def PyJs_anonymous_139_(i, this, arguments, var=var):
                var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                var.registers(['i'])
                if PyJsStrictEq(var.get('i').get('0').get('length'),Js(1.0)):
                    @Js
                    def PyJs_anonymous_140_(i, this, arguments, var=var):
                        var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                        var.registers(['i'])
                        return var.get('i').get('0')
                    PyJs_anonymous_140_._set_name('anonymous')
                    return var.get('i').callprop('map', PyJs_anonymous_140_)
                return var.get('lodash_1').get('default').get('zip').callprop('apply', var.get('lodash_1').get('default'), var.get('__spread')(var.get('i')))
            PyJs_anonymous_139_._set_name('anonymous')
            @Js
            def PyJs_anonymous_141_(i, this, arguments, var=var):
                var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                var.registers(['i'])
                return var.get('i').get('length')
            PyJs_anonymous_141_._set_name('anonymous')
            @Js
            def PyJs_anonymous_142_(i, this, arguments, var=var):
                var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                var.registers(['i'])
                if var.get('Array').callprop('isArray', var.get('i').get('0')):
                    return Js([var.get('i')])
                return var.get('i')
            PyJs_anonymous_142_._set_name('anonymous')
            return var.get('lodash_1').get('default').callprop('flatMap', var.get('exports').callprop('chunkBy', var.get('process'), PyJs_anonymous_141_).callprop('map', PyJs_anonymous_139_), PyJs_anonymous_142_)
        PyJs_anonymous_138_._set_name('anonymous')
        var.put('_handleProcess', PyJs_anonymous_138_)
        @Js
        def PyJs_anonymous_143_(process, services, streamAttributes, genStateForService, isJSON, this, arguments, var=var):
            var = Scope({'process':process, 'services':services, 'streamAttributes':streamAttributes, 'genStateForService':genStateForService, 'isJSON':isJSON, 'this':this, 'arguments':arguments}, var)
            var.registers(['stageName', 'streamAttributes', 'mergedServices', 'as_array', '_a', 'handledProcess', 'services', 'e_3', 'serviceAttributes', 'Stages', 'states', 'handledChunks', 'process', '_b', 'chunk', 'firstService', '_c', 'asl', 'isJSON', 'node_attributes', 'genStateForService'])
            pass
            if PyJsStrictEq(var.get('streamAttributes'),PyJsComma(Js(0.0), Js(None))):
                var.put('streamAttributes', Js([]))
            if PyJsStrictEq(var.get('genStateForService'),PyJsComma(Js(0.0), Js(None))):
                @Js
                def PyJs_anonymous_144_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return var.get('undefined')
                PyJs_anonymous_144_._set_name('anonymous')
                var.put('genStateForService', PyJs_anonymous_144_)
            var.put('as_array', var.get('process').get('as_array'))
            var.put('node_attributes', var.get('process').get('node_attributes'))
            var.put('serviceAttributes', var.get('exports').callprop('getServiceAttributesFromStreamAttributes', var.get('streamAttributes')))
            var.put('Stages', Js([]))
            var.put('mergedServices', var.get('_mergeService')(var.get('as_array'), var.get('lodash_1').get('default').callprop('flatten', var.get('services')), var.get('node_attributes')))
            var.put('handledProcess', var.get('_handleProcess')(var.get('mergedServices')))
            var.put('handledChunks', Js([]))
            try:
                #for JS loop
                var.put('_b', var.get('__values')(var.get('exports').callprop('chunkWithStage', var.get('handledProcess'))))
                var.put('_c', var.get('_b').callprop('next'))
                while var.get('_c').get('done').neg():
                    try:
                        var.put('chunk', var.get('_c').get('value'))
                        @Js
                        def PyJs_anonymous_145_(service, this, arguments, var=var):
                            var = Scope({'service':service, 'this':this, 'arguments':arguments}, var)
                            var.registers(['service'])
                            return var.get('_genStateForService')(var.get('service'), var.get('serviceAttributes'), var.get('genStateForService'), var.get('isJSON'))
                        PyJs_anonymous_145_._set_name('anonymous')
                        var.put('states', var.get('chunk').callprop('map', PyJs_anonymous_145_))
                        var.put('firstService', var.get('lodash_1').get('default').callprop('flattenDeep', var.get('chunk')).get('0'))
                        var.put('stageName', (var.get('_getStageFromService')(var.get('firstService').get('attributes')) or var.get('firstService').get('name')))
                        var.get('states').callprop('push', Js({'Type':Js('Pass'),'id':var.get('utils_1').callprop('genId')}))
                        var.get('states').callprop('unshift', Js({'Type':Js('Pass'),'id':var.get('utils_1').callprop('genId')}))
                        @Js
                        def PyJs_anonymous_146_(i, this, arguments, var=var):
                            var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                            var.registers(['i'])
                            return var.get('i').get('id')
                        PyJs_anonymous_146_._set_name('anonymous')
                        var.get('Stages').callprop('push', var.get('ASLMutations_1').callprop('stage', var.get('stageName'), var.get('states').callprop('map', PyJs_anonymous_146_)))
                        var.get('handledChunks').callprop('push', var.get('states'))
                    finally:
                            var.put('_c', var.get('_b').callprop('next'))
            except PyJsException as PyJsTempException:
                PyJsHolder_655f335f31_8560841 = var.own.get('e_3_1')
                var.force_own_put('e_3_1', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('e_3', Js({'error':var.get('e_3_1')}))
                finally:
                    if PyJsHolder_655f335f31_8560841 is not None:
                        var.own['e_3_1'] = PyJsHolder_655f335f31_8560841
                    else:
                        del var.own['e_3_1']
                    del PyJsHolder_655f335f31_8560841
            finally:
                try:
                    if ((var.get('_c') and var.get('_c').get('done').neg()) and var.put('_a', var.get('_b').get('return'))):
                        var.get('_a').callprop('call', var.get('_b'))
                finally:
                    if var.get('e_3'):
                        PyJsTempException = JsToPyException(var.get('e_3').get('error'))
                        raise PyJsTempException
            var.put('asl', var.get('ASLMutations_1').callprop('serial', var.get('lodash_1').get('default').callprop('flatten', var.get('handledChunks'))))
            var.get('asl').put('Stages', var.get('Stages'))
            return var.get('asl')
        PyJs_anonymous_143_._set_name('anonymous')
        var.get('exports').put('transformI18NProcessToASL', PyJs_anonymous_143_)
        @Js
        def PyJs_anonymous_147_(asl, this, arguments, var=var):
            var = Scope({'asl':asl, 'this':this, 'arguments':arguments}, var)
            var.registers(['states', 'asl'])
            var.put('states', var.get('ASLMutations_1').callprop('aslToArraySimple', var.get('asl')))
            @Js
            def PyJs_anonymous_148_(state, this, arguments, var=var):
                var = Scope({'state':state, 'this':this, 'arguments':arguments}, var)
                var.registers(['state'])
                return PyJsStrictEq(var.get('state').get('Type'),Js('Task'))
            PyJs_anonymous_148_._set_name('anonymous')
            return var.get('states').callprop('filter', PyJs_anonymous_148_)
        PyJs_anonymous_147_._set_name('anonymous')
        var.get('exports').put('transformASLToArrayProcess', PyJs_anonymous_147_)
    PyJs_anonymous_102_._set_name('anonymous')
    @Js
    def PyJs_anonymous_149_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['isGlobalEnd', 'getItemId', '__values', 'module', 'getBranch', 'require', 'line', 'getLastStage', '__importDefault', 'co_1', 'isGlobalHead', 'dLineToCard', 'utils_1', 'lodash_1', 'inParallel', 'isEnd', 'findByPath', 'isHead', 'mutations_1', 'exports', '_1'])
        Js('use strict')
        @Js
        def PyJs_anonymous_150_(o, this, arguments, var=var):
            var = Scope({'o':o, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'm', 's', 'o'])
            var.put('s', (PyJsStrictEq(var.get('Symbol',throw=False).typeof(),Js('function')) and var.get('Symbol').get('iterator')))
            var.put('m', (var.get('s') and var.get('o').get(var.get('s'))))
            var.put('i', Js(0.0))
            if var.get('m'):
                return var.get('m').callprop('call', var.get('o'))
            if (var.get('o') and PyJsStrictEq(var.get('o').get('length').typeof(),Js('number'))):
                @Js
                def PyJs_anonymous_151_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    if (var.get('o') and (var.get('i')>=var.get('o').get('length'))):
                        var.put('o', PyJsComma(Js(0.0), Js(None)))
                    return Js({'value':(var.get('o') and var.get('o').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)))),'done':var.get('o').neg()})
                PyJs_anonymous_151_._set_name('anonymous')
                return Js({'next':PyJs_anonymous_151_})
            PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Object is not iterable.') if var.get('s') else Js('Symbol.iterator is not defined.'))))
            raise PyJsTempException
        PyJs_anonymous_150_._set_name('anonymous')
        var.put('__values', ((var.get(u"this") and var.get(u"this").get('__values')) or PyJs_anonymous_150_))
        @Js
        def PyJs_anonymous_152_(mod, this, arguments, var=var):
            var = Scope({'mod':mod, 'this':this, 'arguments':arguments}, var)
            var.registers(['mod'])
            return (var.get('mod') if (var.get('mod') and var.get('mod').get('__esModule')) else Js({'default':var.get('mod')}))
        PyJs_anonymous_152_._set_name('anonymous')
        var.put('__importDefault', ((var.get(u"this") and var.get(u"this").get('__importDefault')) or PyJs_anonymous_152_))
        var.get('exports').put('__esModule', Js(True))
        var.put('mutations_1', var.get('require')(Js('../mutations')))
        var.put('lodash_1', var.get('__importDefault')(var.get('require')(Js('lodash'))))
        var.put('_1', var.get('require')(Js('.')))
        var.put('utils_1', var.get('require')(Js('../utils')))
        var.put('co_1', var.get('require')(Js('../co')))
        @Js
        def PyJs_anonymous_153_(asl, path, this, arguments, var=var):
            var = Scope({'asl':asl, 'path':path, 'this':this, 'arguments':arguments}, var)
            var.registers(['asl', 'path'])
            return PyJsStrictNeq(var.get('mutations_1').callprop('getParentStatePath', var.get('asl'), var.get('path')).get('length'),Js(0.0))
        PyJs_anonymous_153_._set_name('anonymous')
        var.put('inParallel', PyJs_anonymous_153_)
        @Js
        def PyJs_anonymous_154_(aslPath, this, arguments, var=var):
            var = Scope({'aslPath':aslPath, 'this':this, 'arguments':arguments}, var)
            var.registers(['aslPath'])
            return var.get('lodash_1').get('default').callprop('last', var.get('aslPath'))
        PyJs_anonymous_154_._set_name('anonymous')
        var.put('getBranch', PyJs_anonymous_154_)
        @Js
        def PyJs_anonymous_155_(asl, path, this, arguments, var=var):
            var = Scope({'asl':asl, 'path':path, 'this':this, 'arguments':arguments}, var)
            var.registers(['asl', 'path'])
            return PyJsStrictEq(var.get('asl').get('StartAt'),var.get('lodash_1').get('default').callprop('last', var.get('path')))
        PyJs_anonymous_155_._set_name('anonymous')
        var.put('isHead', PyJs_anonymous_155_)
        @Js
        def PyJs_anonymous_156_(item, this, arguments, var=var):
            var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
            var.registers(['_a', 'item'])
            pass
            return (PyJsComma(Js(0.0), Js(None)) if (PyJsStrictEq(var.put('_a', var.get('item').get('state')),var.get(u"null")) or PyJsStrictEq(var.get('_a'),PyJsComma(Js(0.0), Js(None)))) else var.get('_a').get('End'))
        PyJs_anonymous_156_._set_name('anonymous')
        var.put('isEnd', PyJs_anonymous_156_)
        @Js
        def PyJs_anonymous_157_(asl, path, this, arguments, var=var):
            var = Scope({'asl':asl, 'path':path, 'this':this, 'arguments':arguments}, var)
            var.registers(['parentASLPath', 'asl', 'parentStatePath', 'path'])
            var.put('parentASLPath', var.get('mutations_1').callprop('getParentASLPath', var.get('asl'), var.get('path')))
            if var.get('lodash_1').get('default').callprop('isEmpty', var.get('_1').callprop('getLayerBefore', var.get('asl'), var.get('path'))).neg():
                return Js(False)
            if PyJsStrictEq(var.get('parentASLPath').get('length'),Js(0.0)):
                return Js(True)
            var.put('parentStatePath', var.get('mutations_1').callprop('getParentStatePath', var.get('asl'), var.get('path')))
            return var.get('isGlobalHead')(var.get('asl'), var.get('parentStatePath'))
        PyJs_anonymous_157_._set_name('anonymous')
        var.put('isGlobalHead', PyJs_anonymous_157_)
        @Js
        def PyJs_anonymous_158_(asl, path, this, arguments, var=var):
            var = Scope({'asl':asl, 'path':path, 'this':this, 'arguments':arguments}, var)
            var.registers(['next', 'asl', 'path', 'nextIds'])
            var.put('nextIds', var.get('_1').callprop('getNext', var.get('asl'), var.get('path')))
            if (var.get('nextIds')==var.get(u"null")):
                return Js(True)
            var.put('next', (var.get('nextIds') if var.get('Array').callprop('isArray', var.get('nextIds')) else Js([var.get('nextIds')])))
            @Js
            def PyJs_anonymous_159_(id, this, arguments, var=var):
                var = Scope({'id':id, 'this':this, 'arguments':arguments}, var)
                var.registers(['nextStatePath', 'id', 'nextState'])
                var.put('nextStatePath', var.get('mutations_1').callprop('findPathWithId', var.get('asl'), var.get('id')))
                if var.get('nextStatePath').neg():
                    return Js(True)
                var.put('nextState', var.get('mutations_1').callprop('get', var.get('asl'), var.get('nextStatePath')))
                if var.get('mutations_1').callprop('isPass', var.get('nextState')):
                    return var.get('isGlobalEnd')(var.get('asl'), var.get('nextStatePath'))
                return Js(False)
            PyJs_anonymous_159_._set_name('anonymous')
            return var.get('next').callprop('every', PyJs_anonymous_159_)
        PyJs_anonymous_158_._set_name('anonymous')
        var.put('isGlobalEnd', PyJs_anonymous_158_)
        @Js
        def PyJs_anonymous_160_(items, path, this, arguments, var=var):
            var = Scope({'items':items, 'path':path, 'this':this, 'arguments':arguments}, var)
            var.registers(['path', 'items'])
            @Js
            def PyJs_anonymous_161_(item, this, arguments, var=var):
                var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
                var.registers(['item'])
                return var.get('lodash_1').get('default').callprop('isEqual', var.get('item').get('path'), var.get('path'))
            PyJs_anonymous_161_._set_name('anonymous')
            return var.get('items').callprop('find', PyJs_anonymous_161_)
        PyJs_anonymous_160_._set_name('anonymous')
        var.put('findByPath', PyJs_anonymous_160_)
        @Js
        def PyJs_anonymous_162_(id, path, this, arguments, var=var):
            var = Scope({'id':id, 'path':path, 'this':this, 'arguments':arguments}, var)
            var.registers(['path', 'id'])
            return Js({'id':var.get('id'),'path':var.get('path')})
        PyJs_anonymous_162_._set_name('anonymous')
        var.put('line', PyJs_anonymous_162_)
        var.put('dLineToCard', Js(15.0))
        @Js
        def PyJs_anonymous_163_(item, this, arguments, var=var):
            var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
            var.registers(['item'])
            if var.get('item').get('stage'):
                return (Js('stage-')+var.get('item').get('stage').get('index'))
            if var.get('item').get('id'):
                return (Js('item-')+var.get('item').get('id'))
            return (Js('unknown-')+var.get('utils_1').callprop('genId'))
        PyJs_anonymous_163_._set_name('anonymous')
        var.put('getItemId', PyJs_anonymous_163_)
        @Js
        def PyJs_anonymous_164_(item, this, arguments, var=var):
            var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
            var.registers(['item', '_a', 'index'])
            pass
            var.put('index', var.get('item').get('stage').get('index'))
            @Js
            def PyJs_anonymous_165_(item, this, arguments, var=var):
                var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
                var.registers(['item'])
                return var.get('item').get('stage')
            PyJs_anonymous_165_._set_name('anonymous')
            return (PyJsComma(Js(0.0), Js(None)) if (PyJsStrictEq(var.put('_a', var.get('item').get('parent')),var.get(u"null")) or PyJsStrictEq(var.get('_a'),PyJsComma(Js(0.0), Js(None)))) else var.get('_a').get('items').callprop('filter', PyJs_anonymous_165_).get((var.get('index')-Js(1.0))))
        PyJs_anonymous_164_._set_name('anonymous')
        var.put('getLastStage', PyJs_anonymous_164_)
        @Js
        def PyJs_anonymous_166_(asl, items, this, arguments, var=var):
            var = Scope({'asl':asl, 'items':items, 'this':this, 'arguments':arguments}, var)
            var.registers(['e_1', 'parentASL', 'branch', '_a', 'parallelPath', 'enterAnchor', 'parallelEnterAnchor', 'exitAnchor', 'parentASLPath', 'enterLineId', 'item', 'lastStage', '_isParallel', 'lastItem', '_b', 'items_1', 'items_1_1', 'parallelContainer', 'exitLineId', 'r', 'firstItemPos', 'parallelExitAnchor', 'items', 'asl'])
            pass
            pass
            var.put('r', Js([]))
            try:
                #for JS loop
                var.put('items_1', var.get('__values')(var.get('items')))
                var.put('items_1_1', var.get('items_1').callprop('next'))
                while var.get('items_1_1').get('done').neg():
                    try:
                        var.put('item', var.get('items_1_1').get('value'))
                        var.put('enterLineId', (var.get('getItemId')(var.get('item'))+Js('-enter')))
                        var.put('exitLineId', (var.get('getItemId')(var.get('item'))+Js('-exit')))
                        if var.get('item').get('stage'):
                            var.put('firstItemPos', (PyJsComma(Js(0.0), Js(None)) if (PyJsStrictEq(var.put('_b', var.get('item').get('items').get('0')),var.get(u"null")) or PyJsStrictEq(var.get('_b'),PyJsComma(Js(0.0), Js(None)))) else var.get('_b').get('pos')))
                            if (PyJsStrictNeq(var.get('item').get('stage').get('index'),Js(0.0)) and var.get('firstItemPos')):
                                var.put('lastStage', var.get('getLastStage')(var.get('item')))
                                var.put('lastItem', var.get('lodash_1').get('default').callprop('last', var.get('lastStage').get('items')))
                                var.put('exitAnchor', var.get('utils_1').callprop('getItemRightTop', var.get('lastItem')).callprop('add', var.get('lastStage').get('pos')).callprop('offset', (-Js(34.0)), Js(8.0)))
                                var.put('enterAnchor', var.get('co_1').callprop('co', var.get('firstItemPos')).callprop('add', var.get('item').get('pos')).callprop('offset', Js(35.0), Js(8.0)))
                                var.get('r').callprop('push', var.get('line')(var.get('enterLineId'), Js([var.get('exitAnchor'), var.get('enterAnchor')])))
                        else:
                            if (var.get('mutations_1').callprop('isState', var.get('item').get('state')) and var.get('mutations_1').callprop('isPass', var.get('item').get('state')).neg()):
                                var.put('_isParallel', var.get('mutations_1').callprop('isParallel', var.get('item').get('state')))
                                var.put('enterAnchor', (var.get('co_1').callprop('co', var.get('item').get('pos')).callprop('offset', Js(0.0), Js(8.0)) if var.get('_isParallel') else var.get('co_1').callprop('co', var.get('item').get('pos')).callprop('offset', Js(80.0), Js(8.0))))
                                var.put('exitAnchor', (var.get('utils_1').callprop('getItemRightTop', var.get('item')).callprop('offset', Js(0.0), Js(8.0)) if var.get('_isParallel') else var.get('co_1').callprop('co', var.get('item').get('pos')).callprop('offset', (var.get('item').get('width')-Js(80.0)), Js(8.0))))
                                if var.get('inParallel')(var.get('asl'), var.get('item').get('path')):
                                    var.put('parentASLPath', var.get('mutations_1').callprop('getParentASLPath', var.get('asl'), var.get('item').get('path')))
                                    var.put('parentASL', var.get('mutations_1').callprop('get', var.get('asl'), var.get('parentASLPath')))
                                    var.put('parallelPath', var.get('mutations_1').callprop('getParentStatePath', var.get('asl'), var.get('item').get('path')))
                                    var.put('parallelContainer', var.get('findByPath')(var.get('items'), var.get('parallelPath')))
                                    var.put('parallelEnterAnchor', var.get('co_1').callprop('co', var.get('parallelContainer').get('pos')).callprop('offset', (-Js(10.0)), Js(8.0)))
                                    var.put('parallelExitAnchor', var.get('co_1').callprop('co', var.get('parallelContainer').get('pos')).callprop('offset', (var.get('parallelContainer').get('width')+Js(10.0)), Js(8.0)))
                                    if var.get('isGlobalHead')(var.get('asl'), var.get('item').get('path')).neg():
                                        if var.get('isHead')(var.get('parentASL'), var.get('item').get('path')):
                                            var.put('branch', var.get('getBranch')(var.get('parentASLPath')))
                                            if PyJsStrictEq(var.get('branch'),Js(0.0)):
                                                var.get('r').callprop('push', var.get('line')(var.get('enterLineId'), Js([var.get('parallelEnterAnchor'), var.get('enterAnchor')])))
                                            else:
                                                var.get('r').callprop('push', var.get('line')(var.get('enterLineId'), Js([var.get('parallelEnterAnchor'), var.get('parallelEnterAnchor').callprop('offset', var.get('dLineToCard'), Js(0.0)), var.get('co_1').callprop('co', (var.get('parallelEnterAnchor').get('x')+var.get('dLineToCard')), var.get('enterAnchor').get('y')), var.get('enterAnchor')])))
                                        else:
                                            if var.get('_isParallel').neg():
                                                var.get('r').callprop('push', var.get('line')(var.get('enterLineId'), Js([var.get('enterAnchor').callprop('offset', (-Js(90.0)), Js(0.0)), var.get('enterAnchor')])))
                                    if var.get('isGlobalEnd')(var.get('asl'), var.get('item').get('path')).neg():
                                        if var.get('isEnd')(var.get('item')):
                                            var.put('branch', var.get('getBranch')(var.get('parentASLPath')))
                                            if PyJsStrictEq(var.get('branch'),Js(0.0)):
                                                var.get('r').callprop('push', var.get('line')(var.get('exitLineId'), Js([var.get('exitAnchor'), var.get('parallelExitAnchor')])))
                                            else:
                                                var.get('r').callprop('push', var.get('line')(var.get('exitLineId'), Js([var.get('exitAnchor'), var.get('co_1').callprop('co', (var.get('parallelExitAnchor').get('x')-var.get('dLineToCard')), var.get('exitAnchor').get('y')), var.get('parallelExitAnchor').callprop('offset', (-var.get('dLineToCard')), Js(0.0)), var.get('parallelExitAnchor')])))
                                        else:
                                            if var.get('_isParallel').neg():
                                                var.get('r').callprop('push', var.get('line')(var.get('exitLineId'), Js([var.get('exitAnchor'), var.get('exitAnchor').callprop('offset', Js(90.0), Js(0.0))])))
                                else:
                                    if var.get('isGlobalHead')(var.get('asl'), var.get('item').get('path')).neg():
                                        if var.get('_isParallel').neg():
                                            var.get('r').callprop('push', var.get('line')(var.get('enterLineId'), Js([var.get('enterAnchor').callprop('offset', (-Js(120.0)), Js(0.0)), var.get('enterAnchor')])))
                                    if var.get('isGlobalEnd')(var.get('asl'), var.get('item').get('path')).neg():
                                        if var.get('_isParallel').neg():
                                            var.get('r').callprop('push', var.get('line')(var.get('exitLineId'), Js([var.get('exitAnchor'), var.get('exitAnchor').callprop('offset', Js(120.0), Js(0.0))])))
                    finally:
                            var.put('items_1_1', var.get('items_1').callprop('next'))
            except PyJsException as PyJsTempException:
                PyJsHolder_655f315f31_76924280 = var.own.get('e_1_1')
                var.force_own_put('e_1_1', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('e_1', Js({'error':var.get('e_1_1')}))
                finally:
                    if PyJsHolder_655f315f31_76924280 is not None:
                        var.own['e_1_1'] = PyJsHolder_655f315f31_76924280
                    else:
                        del var.own['e_1_1']
                    del PyJsHolder_655f315f31_76924280
            finally:
                try:
                    if ((var.get('items_1_1') and var.get('items_1_1').get('done').neg()) and var.put('_a', var.get('items_1').get('return'))):
                        var.get('_a').callprop('call', var.get('items_1'))
                finally:
                    if var.get('e_1'):
                        PyJsTempException = JsToPyException(var.get('e_1').get('error'))
                        raise PyJsTempException
            return var.get('r')
        PyJs_anonymous_166_._set_name('anonymous')
        var.get('exports').put('designedLineLayout', PyJs_anonymous_166_)
    PyJs_anonymous_149_._set_name('anonymous')
    @Js
    def PyJs_anonymous_167_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['utils_1', '__read', '__assign', 'ASLMutations_1', 'require', 'layouts', 'getNextFromChoice', 'co_1', '__importStar', 'exports', '_', '__values', 'module', 'designed_1', 'getNextFromParallel', '__spread', '__export'])
        @Js
        def PyJsHoisted___export_(m, this, arguments, var=var):
            var = Scope({'m':m, 'this':this, 'arguments':arguments}, var)
            var.registers(['m', 'p'])
            for PyJsTemp in var.get('m'):
                var.put('p', PyJsTemp)
                if var.get('exports').callprop('hasOwnProperty', var.get('p')).neg():
                    var.get('exports').put(var.get('p'), var.get('m').get(var.get('p')))
        PyJsHoisted___export_.func_name = '__export'
        var.put('__export', PyJsHoisted___export_)
        Js('use strict')
        @Js
        def PyJs_anonymous_168_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_anonymous_169_(t, this, arguments, var=var):
                var = Scope({'t':t, 'this':this, 'arguments':arguments}, var)
                var.registers(['s', 'n', 'i', 't', 'p'])
                #for JS loop
                var.put('i', Js(1.0))
                var.put('n', var.get('arguments').get('length'))
                while (var.get('i')<var.get('n')):
                    try:
                        var.put('s', var.get('arguments').get(var.get('i')))
                        for PyJsTemp in var.get('s'):
                            var.put('p', PyJsTemp)
                            if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('s'), var.get('p')):
                                var.get('t').put(var.get('p'), var.get('s').get(var.get('p')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get('t')
            PyJs_anonymous_169_._set_name('anonymous')
            var.put('__assign', (var.get('Object').get('assign') or PyJs_anonymous_169_))
            return var.get('__assign').callprop('apply', var.get(u"this"), var.get('arguments'))
        PyJs_anonymous_168_._set_name('anonymous')
        var.put('__assign', ((var.get(u"this") and var.get(u"this").get('__assign')) or PyJs_anonymous_168_))
        @Js
        def PyJs_anonymous_170_(o, n, this, arguments, var=var):
            var = Scope({'o':o, 'n':n, 'this':this, 'arguments':arguments}, var)
            var.registers(['o', 'm', 'n', 'i', 'r', 'ar', 'e'])
            var.put('m', (PyJsStrictEq(var.get('Symbol',throw=False).typeof(),Js('function')) and var.get('o').get(var.get('Symbol').get('iterator'))))
            if var.get('m').neg():
                return var.get('o')
            var.put('i', var.get('m').callprop('call', var.get('o')))
            var.put('ar', Js([]))
            try:
                while ((PyJsStrictEq(var.get('n'),PyJsComma(Js(0.0), Js(None))) or ((var.put('n',Js(var.get('n').to_number())-Js(1))+Js(1))>Js(0.0))) and var.put('r', var.get('i').callprop('next')).get('done').neg()):
                    var.get('ar').callprop('push', var.get('r').get('value'))
            except PyJsException as PyJsTempException:
                PyJsHolder_6572726f72_88882343 = var.own.get('error')
                var.force_own_put('error', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('e', Js({'error':var.get('error')}))
                finally:
                    if PyJsHolder_6572726f72_88882343 is not None:
                        var.own['error'] = PyJsHolder_6572726f72_88882343
                    else:
                        del var.own['error']
                    del PyJsHolder_6572726f72_88882343
            finally:
                try:
                    if ((var.get('r') and var.get('r').get('done').neg()) and var.put('m', var.get('i').get('return'))):
                        var.get('m').callprop('call', var.get('i'))
                finally:
                    if var.get('e'):
                        PyJsTempException = JsToPyException(var.get('e').get('error'))
                        raise PyJsTempException
            return var.get('ar')
        PyJs_anonymous_170_._set_name('anonymous')
        var.put('__read', ((var.get(u"this") and var.get(u"this").get('__read')) or PyJs_anonymous_170_))
        @Js
        def PyJs_anonymous_171_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'ar'])
            #for JS loop
            var.put('ar', Js([]))
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('arguments').get('length')):
                try:
                    var.put('ar', var.get('ar').callprop('concat', var.get('__read')(var.get('arguments').get(var.get('i')))))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('ar')
        PyJs_anonymous_171_._set_name('anonymous')
        var.put('__spread', ((var.get(u"this") and var.get(u"this").get('__spread')) or PyJs_anonymous_171_))
        @Js
        def PyJs_anonymous_172_(o, this, arguments, var=var):
            var = Scope({'o':o, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'm', 's', 'o'])
            var.put('s', (PyJsStrictEq(var.get('Symbol',throw=False).typeof(),Js('function')) and var.get('Symbol').get('iterator')))
            var.put('m', (var.get('s') and var.get('o').get(var.get('s'))))
            var.put('i', Js(0.0))
            if var.get('m'):
                return var.get('m').callprop('call', var.get('o'))
            if (var.get('o') and PyJsStrictEq(var.get('o').get('length').typeof(),Js('number'))):
                @Js
                def PyJs_anonymous_173_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    if (var.get('o') and (var.get('i')>=var.get('o').get('length'))):
                        var.put('o', PyJsComma(Js(0.0), Js(None)))
                    return Js({'value':(var.get('o') and var.get('o').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)))),'done':var.get('o').neg()})
                PyJs_anonymous_173_._set_name('anonymous')
                return Js({'next':PyJs_anonymous_173_})
            PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Object is not iterable.') if var.get('s') else Js('Symbol.iterator is not defined.'))))
            raise PyJsTempException
        PyJs_anonymous_172_._set_name('anonymous')
        var.put('__values', ((var.get(u"this") and var.get(u"this").get('__values')) or PyJs_anonymous_172_))
        pass
        @Js
        def PyJs_anonymous_174_(mod, this, arguments, var=var):
            var = Scope({'mod':mod, 'this':this, 'arguments':arguments}, var)
            var.registers(['result', 'mod', 'k'])
            if (var.get('mod') and var.get('mod').get('__esModule')):
                return var.get('mod')
            var.put('result', Js({}))
            if (var.get('mod')!=var.get(u"null")):
                for PyJsTemp in var.get('mod'):
                    var.put('k', PyJsTemp)
                    if var.get('Object').get('hasOwnProperty').callprop('call', var.get('mod'), var.get('k')):
                        var.get('result').put(var.get('k'), var.get('mod').get(var.get('k')))
            var.get('result').put('default', var.get('mod'))
            return var.get('result')
        PyJs_anonymous_174_._set_name('anonymous')
        var.put('__importStar', ((var.get(u"this") and var.get(u"this").get('__importStar')) or PyJs_anonymous_174_))
        var.get('exports').put('__esModule', Js(True))
        var.put('utils_1', var.get('require')(Js('../utils')))
        var.put('co_1', var.get('require')(Js('../co')))
        var.put('ASLMutations_1', var.get('require')(Js('../mutations/ASLMutations')))
        var.put('_', var.get('__importStar')(var.get('require')(Js('lodash'))))
        var.put('designed_1', var.get('require')(Js('./designed')))
        @Js
        def PyJs_anonymous_175_(start, end, this, arguments, var=var):
            var = Scope({'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
            var.registers(['t0', 't1', 'start', 'end'])
            if PyJsStrictEq(var.get('start').get('y'),var.get('end').get('y')):
                return Js([var.get('start'), var.get('end')])
            var.put('t0', var.get('co_1').callprop('co', ((var.get('start').get('x')+var.get('end').get('x'))/Js(2.0)), var.get('start').get('y')))
            var.put('t1', var.get('co_1').callprop('co', var.get('t0').get('x'), var.get('end').get('y')))
            return Js([var.get('start'), var.get('t0'), var.get('t1'), var.get('end')])
        PyJs_anonymous_175_._set_name('anonymous')
        var.get('exports').put('_t0', PyJs_anonymous_175_)
        @Js
        def PyJs_anonymous_176_(start, end, this, arguments, var=var):
            var = Scope({'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
            var.registers(['t0', 't1', 'start', 'end'])
            if PyJsStrictEq(var.get('start').get('y'),var.get('end').get('y')):
                return Js([var.get('start'), var.get('end')])
            var.put('t0', var.get('co_1').callprop('co', (var.get('end').get('x')-Js(20.0)), var.get('start').get('y')))
            var.put('t1', var.get('co_1').callprop('co', var.get('t0').get('x'), var.get('end').get('y')))
            return Js([var.get('start'), var.get('t0'), var.get('t1'), var.get('end')])
        PyJs_anonymous_176_._set_name('anonymous')
        var.get('exports').put('_t1', PyJs_anonymous_176_)
        @Js
        def PyJs_anonymous_177_(state, this, arguments, var=var):
            var = Scope({'state':state, 'this':this, 'arguments':arguments}, var)
            var.registers(['state'])
            @Js
            def PyJs_anonymous_178_(branch, this, arguments, var=var):
                var = Scope({'branch':branch, 'this':this, 'arguments':arguments}, var)
                var.registers(['next', 'branch'])
                var.put('next', var.get('branch').get('States').get(var.get('branch').get('StartAt')))
                if var.get('ASLMutations_1').callprop('isParallel', var.get('next')):
                    return var.get('getNextFromParallel')(var.get('next'))
                return var.get('branch').get('StartAt')
            PyJs_anonymous_178_._set_name('anonymous')
            return var.get('state').get('Branches').callprop('map', PyJs_anonymous_178_).callprop('flat')
        PyJs_anonymous_177_._set_name('anonymous')
        var.put('getNextFromParallel', PyJs_anonymous_177_)
        @Js
        def PyJs_anonymous_179_(state, this, arguments, var=var):
            var = Scope({'state':state, 'this':this, 'arguments':arguments}, var)
            var.registers(['state'])
            @Js
            def PyJs_anonymous_180_(choice, this, arguments, var=var):
                var = Scope({'choice':choice, 'this':this, 'arguments':arguments}, var)
                var.registers(['choice'])
                return var.get('choice').get('Next')
            PyJs_anonymous_180_._set_name('anonymous')
            return var.get('state').get('Choices').callprop('map', PyJs_anonymous_180_)
        PyJs_anonymous_179_._set_name('anonymous')
        var.put('getNextFromChoice', PyJs_anonymous_179_)
        @Js
        def PyJs_anonymous_181_(a, path, this, arguments, var=var):
            var = Scope({'a':a, 'path':path, 'this':this, 'arguments':arguments}, var)
            var.registers(['path', 'next', 'asl', 'node', 'a', 'parentStatePath'])
            if (var.get('path').neg() or var.get('path').get('length').neg()):
                return var.get('undefined')
            var.put('node', var.get('ASLMutations_1').callprop('get', var.get('a'), var.get('path')))
            if var.get('node').neg():
                return var.get('undefined')
            var.put('asl', var.get('ASLMutations_1').callprop('getParentASL', var.get('a'), var.get('path')))
            if var.get('node').get('Next'):
                var.put('next', var.get('asl').get('States').get(var.get('node').get('Next')))
                if var.get('ASLMutations_1').callprop('isParallel', var.get('next')):
                    return var.get('getNextFromParallel')(var.get('next'))
                return var.get('node').get('Next')
            if var.get('ASLMutations_1').callprop('isChoice', var.get('node')):
                return var.get('getNextFromChoice')(var.get('node'))
            var.put('parentStatePath', var.get('ASLMutations_1').callprop('getParentStatePath', var.get('a'), var.get('path')))
            if var.get('parentStatePath').get('length'):
                return var.get('exports').callprop('getNext', var.get('a'), var.get('parentStatePath'))
            return var.get('undefined')
        PyJs_anonymous_181_._set_name('anonymous')
        var.get('exports').put('getNext', PyJs_anonymous_181_)
        @Js
        def PyJs_anonymous_182_(a, path, this, arguments, var=var):
            var = Scope({'a':a, 'path':path, 'this':this, 'arguments':arguments}, var)
            var.registers(['path', 'node', 'a'])
            if (var.get('path').neg() or var.get('path').get('length').neg()):
                return var.get('undefined')
            var.put('node', var.get('ASLMutations_1').callprop('get', var.get('a'), var.get('path')))
            if (var.get('node') and var.get('node').get('Next')):
                return var.get('node').get('Next')
        PyJs_anonymous_182_._set_name('anonymous')
        var.get('exports').put('getLayerNext', PyJs_anonymous_182_)
        @Js
        def PyJs_anonymous_183_(a, path, this, arguments, var=var):
            var = Scope({'a':a, 'path':path, 'this':this, 'arguments':arguments}, var)
            var.registers(['pathPrefix', 'parentASL', 'path', 'beforeItems', 'a', 'id'])
            var.put('pathPrefix', var.get('ASLMutations_1').callprop('rTail', var.get('path'), Js(1.0)))
            var.put('id', var.get('_').callprop('last', var.get('path')))
            var.put('parentASL', var.get('ASLMutations_1').callprop('getParentASL', var.get('a'), var.get('path')))
            @Js
            def PyJs_anonymous_184_(_a, this, arguments, var=var):
                var = Scope({'_a':_a, 'this':this, 'arguments':arguments}, var)
                var.registers(['_b', '_a', 'item', 'key'])
                var.put('_b', var.get('__read')(var.get('_a'), Js(2.0)))
                var.put('key', var.get('_b').get('0'))
                var.put('item', var.get('_b').get('1'))
                return (var.get('exports').callprop('getLayerBefore', var.get('a'), var.get('__spread')(var.get('pathPrefix'), Js([var.get('key')]))) if var.get('ASLMutations_1').callprop('isPass', var.get('item')) else var.get('key'))
            PyJs_anonymous_184_._set_name('anonymous')
            @Js
            def PyJs_anonymous_185_(_a, this, arguments, var=var):
                var = Scope({'_a':_a, 'this':this, 'arguments':arguments}, var)
                var.registers(['_b', '_a', 'Next'])
                var.put('_b', var.get('__read')(var.get('_a'), Js(2.0)))
                var.put('Next', var.get('_b').get('1').get('Next'))
                return PyJsStrictEq(var.get('Next'),var.get('id'))
            PyJs_anonymous_185_._set_name('anonymous')
            var.put('beforeItems', var.get('_').callprop('flatten', var.get('Object').callprop('entries', var.get('parentASL').get('States')).callprop('filter', PyJs_anonymous_185_).callprop('map', PyJs_anonymous_184_)))
            return var.get('beforeItems')
        PyJs_anonymous_183_._set_name('anonymous')
        var.get('exports').put('getLayerBefore', PyJs_anonymous_183_)
        @Js
        def PyJs_anonymous_186_(asl, items, type, this, arguments, var=var):
            var = Scope({'asl':asl, 'items':items, 'type':type, 'this':this, 'arguments':arguments}, var)
            var.registers(['_d', 'e_1', '_a', 'nextIds', 'next', 'type', 'item', 'next_1', '_loop_1', '_b', 'next_1_1', 'items_1', 'items_1_1', 'e_2', '_c', 'items', 'asl', 'lines', 'nextId'])
            pass
            pass
            var.put('lines', Js([]))
            if PyJsStrictEq(var.get('type'),Js('none')):
                return var.get('lines')
            try:
                #for JS loop
                var.put('items_1', var.get('__values')(var.get('items')))
                var.put('items_1_1', var.get('items_1').callprop('next'))
                while var.get('items_1_1').get('done').neg():
                    try:
                        var.put('item', var.get('items_1_1').get('value'))
                        if (var.get('ASLMutations_1').callprop('isState', var.get('item').get('state')).neg() or PyJsStrictNeq(var.get('item').get('type'),Js('item'))):
                            continue
                        var.put('nextIds', (var.get('exports').callprop('getLayerNext', var.get('asl'), var.get('item').get('path')) if var.get('type').callprop('startsWith', Js('layer')) else var.get('exports').callprop('getNext', var.get('asl'), var.get('item').get('path'))))
                        if var.get('nextIds').neg():
                            continue
                        var.get('item').put('next', var.get('nextIds'))
                        var.put('next', (var.get('nextIds') if var.get('Array').callprop('isArray', var.get('nextIds')) else Js([var.get('nextIds')])))
                        @Js
                        def PyJs_anonymous_187_(nextId, this, arguments, var=var):
                            var = Scope({'nextId':nextId, 'this':this, 'arguments':arguments}, var)
                            var.registers(['next_2', 'end', 'start', 'nextId'])
                            @Js
                            def PyJs_anonymous_188_(i, this, arguments, var=var):
                                var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                                var.registers(['i'])
                                return PyJsStrictEq(var.get('i').get('id'),var.get('nextId'))
                            PyJs_anonymous_188_._set_name('anonymous')
                            var.put('next_2', var.get('items').callprop('find', PyJs_anonymous_188_))
                            if var.get('next_2').neg():
                                return Js('continue')
                            def PyJs_LONG_189_(var=var):
                                return (PyJsStrictEq((PyJsComma(Js(0.0), Js(None)) if (PyJsStrictEq(var.put('_c', var.get('next_2').get('state')),var.get(u"null")) or PyJsStrictEq(var.get('_c'),PyJsComma(Js(0.0), Js(None)))) else var.get('_c').get('Type')),Js('Pass')) or PyJsStrictEq((PyJsComma(Js(0.0), Js(None)) if (PyJsStrictEq(var.put('_d', var.get('item').get('state')),var.get(u"null")) or PyJsStrictEq(var.get('_d'),PyJsComma(Js(0.0), Js(None)))) else var.get('_d').get('Type')),Js('Pass')))
                            if PyJs_LONG_189_():
                                return Js('continue')
                            var.put('start', var.get('utils_1').callprop('getItemRightMid', var.get('item')))
                            var.put('end', var.get('utils_1').callprop('getItemLeftMid', var.get('next_2')))
                            if var.get('type').callprop('endsWith', Js('t0')):
                                var.get('lines').callprop('push', Js({'id':((var.get('item').get('id')+Js('-'))+var.get('nextId')),'path':var.get('exports').callprop('_t0', var.get('start'), var.get('end'))}))
                            if var.get('type').callprop('endsWith', Js('t1')):
                                var.get('lines').callprop('push', Js({'id':((var.get('item').get('id')+Js('-'))+var.get('nextId')),'path':var.get('exports').callprop('_t1', var.get('start'), var.get('end'))}))
                            return Js('continue')
                        PyJs_anonymous_187_._set_name('anonymous')
                        var.put('_loop_1', PyJs_anonymous_187_)
                        try:
                            #for JS loop
                            var.put('next_1', PyJsComma(var.put('e_2', PyJsComma(Js(0.0), Js(None))),var.get('__values')(var.get('next'))))
                            var.put('next_1_1', var.get('next_1').callprop('next'))
                            while var.get('next_1_1').get('done').neg():
                                try:
                                    var.put('nextId', var.get('next_1_1').get('value'))
                                    var.get('_loop_1')(var.get('nextId'))
                                finally:
                                        var.put('next_1_1', var.get('next_1').callprop('next'))
                        except PyJsException as PyJsTempException:
                            PyJsHolder_655f325f31_81885415 = var.own.get('e_2_1')
                            var.force_own_put('e_2_1', PyExceptionToJs(PyJsTempException))
                            try:
                                var.put('e_2', Js({'error':var.get('e_2_1')}))
                            finally:
                                if PyJsHolder_655f325f31_81885415 is not None:
                                    var.own['e_2_1'] = PyJsHolder_655f325f31_81885415
                                else:
                                    del var.own['e_2_1']
                                del PyJsHolder_655f325f31_81885415
                        finally:
                            try:
                                if ((var.get('next_1_1') and var.get('next_1_1').get('done').neg()) and var.put('_b', var.get('next_1').get('return'))):
                                    var.get('_b').callprop('call', var.get('next_1'))
                            finally:
                                if var.get('e_2'):
                                    PyJsTempException = JsToPyException(var.get('e_2').get('error'))
                                    raise PyJsTempException
                    finally:
                            var.put('items_1_1', var.get('items_1').callprop('next'))
            except PyJsException as PyJsTempException:
                PyJsHolder_655f315f31_70782412 = var.own.get('e_1_1')
                var.force_own_put('e_1_1', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('e_1', Js({'error':var.get('e_1_1')}))
                finally:
                    if PyJsHolder_655f315f31_70782412 is not None:
                        var.own['e_1_1'] = PyJsHolder_655f315f31_70782412
                    else:
                        del var.own['e_1_1']
                    del PyJsHolder_655f315f31_70782412
            finally:
                try:
                    if ((var.get('items_1_1') and var.get('items_1_1').get('done').neg()) and var.put('_a', var.get('items_1').get('return'))):
                        var.get('_a').callprop('call', var.get('items_1'))
                finally:
                    if var.get('e_1'):
                        PyJsTempException = JsToPyException(var.get('e_1').get('error'))
                        raise PyJsTempException
            return var.get('lines')
        PyJs_anonymous_186_._set_name('anonymous')
        var.get('exports').put('polylineLayout', PyJs_anonymous_186_)
        @Js
        def PyJs_anonymous_190_(type, this, arguments, var=var):
            var = Scope({'type':type, 'this':this, 'arguments':arguments}, var)
            var.registers(['type'])
            @Js
            def PyJs_anonymous_191_(a, b, this, arguments, var=var):
                var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments}, var)
                var.registers(['b', 'a'])
                return var.get('exports').callprop('polylineLayout', var.get('a'), var.get('b'), var.get('type'))
            PyJs_anonymous_191_._set_name('anonymous')
            return Js([var.get('type'), PyJs_anonymous_191_])
        PyJs_anonymous_190_._set_name('anonymous')
        var.put('layouts', var.get('__assign')(Js({'designed':var.get('designed_1').get('designedLineLayout')}), var.get('Object').callprop('fromEntries', Js([Js('t1'), Js('t0'), Js('none'), Js('layer-t1'), Js('layer-t0')]).callprop('map', PyJs_anonymous_190_))))
        var.get('exports').put('default', var.get('layouts'))
        var.get('__export')(var.get('require')(Js('./designed')))
    PyJs_anonymous_167_._set_name('anonymous')
    @Js
    def PyJs_anonymous_192_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['__read', 'require', 'co_1', 'exports', 'module'])
        Js('use strict')
        @Js
        def PyJs_anonymous_193_(o, n, this, arguments, var=var):
            var = Scope({'o':o, 'n':n, 'this':this, 'arguments':arguments}, var)
            var.registers(['o', 'm', 'n', 'i', 'r', 'ar', 'e'])
            var.put('m', (PyJsStrictEq(var.get('Symbol',throw=False).typeof(),Js('function')) and var.get('o').get(var.get('Symbol').get('iterator'))))
            if var.get('m').neg():
                return var.get('o')
            var.put('i', var.get('m').callprop('call', var.get('o')))
            var.put('ar', Js([]))
            try:
                while ((PyJsStrictEq(var.get('n'),PyJsComma(Js(0.0), Js(None))) or ((var.put('n',Js(var.get('n').to_number())-Js(1))+Js(1))>Js(0.0))) and var.put('r', var.get('i').callprop('next')).get('done').neg()):
                    var.get('ar').callprop('push', var.get('r').get('value'))
            except PyJsException as PyJsTempException:
                PyJsHolder_6572726f72_54553839 = var.own.get('error')
                var.force_own_put('error', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('e', Js({'error':var.get('error')}))
                finally:
                    if PyJsHolder_6572726f72_54553839 is not None:
                        var.own['error'] = PyJsHolder_6572726f72_54553839
                    else:
                        del var.own['error']
                    del PyJsHolder_6572726f72_54553839
            finally:
                try:
                    if ((var.get('r') and var.get('r').get('done').neg()) and var.put('m', var.get('i').get('return'))):
                        var.get('m').callprop('call', var.get('i'))
                finally:
                    if var.get('e'):
                        PyJsTempException = JsToPyException(var.get('e').get('error'))
                        raise PyJsTempException
            return var.get('ar')
        PyJs_anonymous_193_._set_name('anonymous')
        var.put('__read', ((var.get(u"this") and var.get(u"this").get('__read')) or PyJs_anonymous_193_))
        var.get('exports').put('__esModule', Js(True))
        var.put('co_1', var.get('require')(Js('./co')))
        @Js
        def PyJs_anonymous_194_(item, this, arguments, var=var):
            var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
            var.registers(['item'])
            return var.get('co_1').callprop('co', var.get('item').get('pos').get('x'), (var.get('item').get('pos').get('y')+(var.get('item').get('height')/Js(2.0))))
        PyJs_anonymous_194_._set_name('anonymous')
        var.get('exports').put('getItemLeftMid', PyJs_anonymous_194_)
        @Js
        def PyJs_anonymous_195_(item, this, arguments, var=var):
            var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
            var.registers(['item'])
            return var.get('co_1').callprop('co', (var.get('item').get('pos').get('x')+var.get('item').get('width')), (var.get('item').get('pos').get('y')+(var.get('item').get('height')/Js(2.0))))
        PyJs_anonymous_195_._set_name('anonymous')
        var.get('exports').put('getItemRightMid', PyJs_anonymous_195_)
        @Js
        def PyJs_anonymous_196_(item, this, arguments, var=var):
            var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
            var.registers(['item'])
            return var.get('co_1').callprop('co', (var.get('item').get('pos').get('x')+var.get('item').get('width')), var.get('item').get('pos').get('y'))
        PyJs_anonymous_196_._set_name('anonymous')
        var.get('exports').put('getItemRightTop', PyJs_anonymous_196_)
        @Js
        def PyJs_anonymous_197_(a, b, this, arguments, var=var):
            var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments}, var)
            var.registers(['b', 'a'])
            return var.get('co_1').callprop('co', ((var.get('a').get('x')+var.get('b').get('x'))/Js(2.0)), ((var.get('b').get('x')+var.get('b').get('y'))/Js(2.0)))
        PyJs_anonymous_197_._set_name('anonymous')
        var.get('exports').put('middle', PyJs_anonymous_197_)
        @Js
        def PyJs_anonymous_198_(_a, _b, this, arguments, var=var):
            var = Scope({'_a':_a, '_b':_b, 'this':this, 'arguments':arguments}, var)
            var.registers(['x', '_c', 'y', 'b', 'a', '_b', '_a'])
            var.put('x', var.get('_a').get('x'))
            var.put('y', var.get('_a').get('y'))
            var.put('_c', var.get('__read')(var.get('_b'), Js(2.0)))
            var.put('a', var.get('_c').get('0'))
            var.put('b', var.get('_c').get('1'))
            return (((var.get('a').get('y')-var.get('b').get('y'))*(var.get('x')-var.get('a').get('x')))-((var.get('a').get('x')-var.get('b').get('x'))*(var.get('y')-var.get('a').get('y'))))
        PyJs_anonymous_198_._set_name('anonymous')
        var.get('exports').put('side', PyJs_anonymous_198_)
        var.get('exports').put('sign', var.get('Math').get('sign'))
        @Js
        def PyJs_anonymous_199_(a, b, this, arguments, var=var):
            var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments}, var)
            var.registers(['b', 'a'])
            return PyJsStrictEq(var.get('exports').callprop('sign', var.get('a')),var.get('exports').callprop('sign', var.get('b')))
        PyJs_anonymous_199_._set_name('anonymous')
        var.get('exports').put('sameSide', PyJs_anonymous_199_)
        @Js
        def PyJs_anonymous_200_(a, b, this, arguments, var=var):
            var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments}, var)
            var.registers(['b', 'a'])
            return (var.get('exports').callprop('sameSide', var.get('exports').callprop('side', var.get('a').get('0'), var.get('b')), var.get('exports').callprop('side', var.get('a').get('1'), var.get('b'))) or var.get('exports').callprop('sameSide', var.get('exports').callprop('side', var.get('b').get('0'), var.get('a')), var.get('exports').callprop('side', var.get('b').get('1'), var.get('a'))))
        PyJs_anonymous_200_._set_name('anonymous')
        var.get('exports').put('isTwoLineCross', PyJs_anonymous_200_)
        @Js
        def PyJs_anonymous_201_(point, _a, this, arguments, var=var):
            var = Scope({'point':point, '_a':_a, 'this':this, 'arguments':arguments}, var)
            var.registers(['c', 'x', 'd', 'width', 'height', '_c', 'y', 'b', 'lines', 'a', 'point', '_b', '_a'])
            var.put('_b', var.get('_a').get('pos'))
            var.put('x', var.get('_b').get('x'))
            var.put('y', var.get('_b').get('y'))
            var.put('width', var.get('_a').get('width'))
            var.put('height', var.get('_a').get('height'))
            var.put('_c', var.get('__read')(Js([var.get('co_1').callprop('co', var.get('x'), var.get('y')), var.get('co_1').callprop('co', (var.get('x')+var.get('width')), var.get('y')), var.get('co_1').callprop('co', (var.get('x')+var.get('width')), (var.get('y')+var.get('height'))), var.get('co_1').callprop('co', var.get('x'), (var.get('y')+var.get('height')))]), Js(4.0)))
            var.put('a', var.get('_c').get('0'))
            var.put('b', var.get('_c').get('1'))
            var.put('c', var.get('_c').get('2'))
            var.put('d', var.get('_c').get('3'))
            var.put('lines', Js([Js([var.get('a'), var.get('b')]), Js([var.get('b'), var.get('c')]), Js([var.get('c'), var.get('d')]), Js([var.get('d'), var.get('a')])]))
            @Js
            def PyJs_anonymous_202_(line, this, arguments, var=var):
                var = Scope({'line':line, 'this':this, 'arguments':arguments}, var)
                var.registers(['line'])
                return (var.get('exports').callprop('side', var.get('point'), var.get('line'))>Js(0.0))
            PyJs_anonymous_202_._set_name('anonymous')
            return var.get('lines').callprop('every', PyJs_anonymous_202_)
        PyJs_anonymous_201_._set_name('anonymous')
        var.get('exports').put('isPointInRect', PyJs_anonymous_201_)
        @Js
        def PyJs_anonymous_203_(path, rect, this, arguments, var=var):
            var = Scope({'path':path, 'rect':rect, 'this':this, 'arguments':arguments}, var)
            var.registers(['c', 'x', 'd', 'rect', 'width', 'i', 'height', 'line', 'path', 'y', 'b', 'a', '_b', '_a'])
            var.put('_a', var.get('rect').get('pos'))
            var.put('x', var.get('_a').get('x'))
            var.put('y', var.get('_a').get('y'))
            var.put('width', var.get('rect').get('width'))
            var.put('height', var.get('rect').get('height'))
            var.put('_b', var.get('__read')(Js([var.get('co_1').callprop('co', var.get('x'), var.get('y')), var.get('co_1').callprop('co', (var.get('x')+var.get('width')), var.get('y')), var.get('co_1').callprop('co', (var.get('x')+var.get('width')), (var.get('y')+var.get('height'))), var.get('co_1').callprop('co', var.get('x'), (var.get('y')+var.get('height')))]), Js(4.0)))
            var.put('a', var.get('_b').get('0'))
            var.put('b', var.get('_b').get('1'))
            var.put('c', var.get('_b').get('2'))
            var.put('d', var.get('_b').get('3'))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<(var.get('path').get('length')-Js(1.0))):
                try:
                    var.put('line', Js([var.get('path').get(var.get('i')), var.get('path').get((var.get('i')+Js(1.0)))]))
                    if var.get('exports').callprop('isPointInRect', var.get('line').get('0'), var.get('rect')):
                        return (Js(1.0) if PyJsStrictEq(var.get('i'),Js(0.0)) else var.get('i'))
                    if (var.get('exports').callprop('isTwoLineCross', var.get('line'), Js([var.get('a'), var.get('c')])) or var.get('exports').callprop('isTwoLineCross', var.get('line'), Js([var.get('b'), var.get('d')]))):
                        return (var.get('i')+Js(1.0))
                finally:
                        var.put('i', Js(1.0), '+')
            return Js(0.0)
        PyJs_anonymous_203_._set_name('anonymous')
        var.get('exports').put('isPathCrossRect', PyJs_anonymous_203_)
        @Js
        def PyJs_anonymous_204_(line, this, arguments, var=var):
            var = Scope({'line':line, 'this':this, 'arguments':arguments}, var)
            var.registers(['line'])
            return PyJsStrictEq(var.get('line').get('0').get('x'),var.get('line').get('1').get('x'))
        PyJs_anonymous_204_._set_name('anonymous')
        var.get('exports').put('isVertical', PyJs_anonymous_204_)
        @Js
        def PyJs_anonymous_205_(line, this, arguments, var=var):
            var = Scope({'line':line, 'this':this, 'arguments':arguments}, var)
            var.registers(['line'])
            return PyJsStrictEq(var.get('line').get('0').get('y'),var.get('line').get('1').get('y'))
        PyJs_anonymous_205_._set_name('anonymous')
        var.get('exports').put('isHorizontal', PyJs_anonymous_205_)
        @Js
        def PyJs_anonymous_206_(length, base, this, arguments, var=var):
            var = Scope({'length':length, 'base':base, 'this':this, 'arguments':arguments}, var)
            var.registers(['base', 'length'])
            @Js
            def PyJs_anonymous_207_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return ((var.get('Math').callprop('random')*var.get('base'))<<Js(0.0)).callprop('toString', var.get('base'))
            PyJs_anonymous_207_._set_name('anonymous')
            return var.get('Array').callprop('from', Js({'length':var.get('length')}), PyJs_anonymous_207_).callprop('join', Js(''))
        PyJs_anonymous_206_._set_name('anonymous')
        var.get('exports').put('randomChar', PyJs_anonymous_206_)
        @Js
        def PyJs_anonymous_208_(length, this, arguments, var=var):
            var = Scope({'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['length'])
            return var.get('exports').callprop('randomChar', var.get('length'), Js(16.0))
        PyJs_anonymous_208_._set_name('anonymous')
        var.get('exports').put('randomHex', PyJs_anonymous_208_)
        @Js
        def PyJs_anonymous_209_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('exports').callprop('randomHex', Js(6.0))
        PyJs_anonymous_209_._set_name('anonymous')
        var.get('exports').put('genId', PyJs_anonymous_209_)
        @Js
        def PyJs_anonymous_210_(item, this, arguments, var=var):
            var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
            var.registers(['item'])
            return PyJsStrictEq(var.get('item').get('type'),Js('container'))
        PyJs_anonymous_210_._set_name('anonymous')
        var.get('exports').put('isContainer', PyJs_anonymous_210_)
    PyJs_anonymous_192_._set_name('anonymous')
    @Js
    def PyJs_anonymous_211_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['__read', 'ProcessGraph', 'require', 'lodash_1', '__importDefault', 'exports', '__values', 'module', '__spread', 'util_1'])
        Js('use strict')
        @Js
        def PyJs_anonymous_212_(o, n, this, arguments, var=var):
            var = Scope({'o':o, 'n':n, 'this':this, 'arguments':arguments}, var)
            var.registers(['o', 'm', 'n', 'i', 'r', 'ar', 'e'])
            var.put('m', (PyJsStrictEq(var.get('Symbol',throw=False).typeof(),Js('function')) and var.get('o').get(var.get('Symbol').get('iterator'))))
            if var.get('m').neg():
                return var.get('o')
            var.put('i', var.get('m').callprop('call', var.get('o')))
            var.put('ar', Js([]))
            try:
                while ((PyJsStrictEq(var.get('n'),PyJsComma(Js(0.0), Js(None))) or ((var.put('n',Js(var.get('n').to_number())-Js(1))+Js(1))>Js(0.0))) and var.put('r', var.get('i').callprop('next')).get('done').neg()):
                    var.get('ar').callprop('push', var.get('r').get('value'))
            except PyJsException as PyJsTempException:
                PyJsHolder_6572726f72_12222771 = var.own.get('error')
                var.force_own_put('error', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('e', Js({'error':var.get('error')}))
                finally:
                    if PyJsHolder_6572726f72_12222771 is not None:
                        var.own['error'] = PyJsHolder_6572726f72_12222771
                    else:
                        del var.own['error']
                    del PyJsHolder_6572726f72_12222771
            finally:
                try:
                    if ((var.get('r') and var.get('r').get('done').neg()) and var.put('m', var.get('i').get('return'))):
                        var.get('m').callprop('call', var.get('i'))
                finally:
                    if var.get('e'):
                        PyJsTempException = JsToPyException(var.get('e').get('error'))
                        raise PyJsTempException
            return var.get('ar')
        PyJs_anonymous_212_._set_name('anonymous')
        var.put('__read', ((var.get(u"this") and var.get(u"this").get('__read')) or PyJs_anonymous_212_))
        @Js
        def PyJs_anonymous_213_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'ar'])
            #for JS loop
            var.put('ar', Js([]))
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('arguments').get('length')):
                try:
                    var.put('ar', var.get('ar').callprop('concat', var.get('__read')(var.get('arguments').get(var.get('i')))))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('ar')
        PyJs_anonymous_213_._set_name('anonymous')
        var.put('__spread', ((var.get(u"this") and var.get(u"this").get('__spread')) or PyJs_anonymous_213_))
        @Js
        def PyJs_anonymous_214_(o, this, arguments, var=var):
            var = Scope({'o':o, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'm', 's', 'o'])
            var.put('s', (PyJsStrictEq(var.get('Symbol',throw=False).typeof(),Js('function')) and var.get('Symbol').get('iterator')))
            var.put('m', (var.get('s') and var.get('o').get(var.get('s'))))
            var.put('i', Js(0.0))
            if var.get('m'):
                return var.get('m').callprop('call', var.get('o'))
            if (var.get('o') and PyJsStrictEq(var.get('o').get('length').typeof(),Js('number'))):
                @Js
                def PyJs_anonymous_215_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    if (var.get('o') and (var.get('i')>=var.get('o').get('length'))):
                        var.put('o', PyJsComma(Js(0.0), Js(None)))
                    return Js({'value':(var.get('o') and var.get('o').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)))),'done':var.get('o').neg()})
                PyJs_anonymous_215_._set_name('anonymous')
                return Js({'next':PyJs_anonymous_215_})
            PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Object is not iterable.') if var.get('s') else Js('Symbol.iterator is not defined.'))))
            raise PyJsTempException
        PyJs_anonymous_214_._set_name('anonymous')
        var.put('__values', ((var.get(u"this") and var.get(u"this").get('__values')) or PyJs_anonymous_214_))
        @Js
        def PyJs_anonymous_216_(mod, this, arguments, var=var):
            var = Scope({'mod':mod, 'this':this, 'arguments':arguments}, var)
            var.registers(['mod'])
            return (var.get('mod') if (var.get('mod') and var.get('mod').get('__esModule')) else Js({'default':var.get('mod')}))
        PyJs_anonymous_216_._set_name('anonymous')
        var.put('__importDefault', ((var.get(u"this") and var.get(u"this").get('__importDefault')) or PyJs_anonymous_216_))
        var.get('exports').put('__esModule', Js(True))
        var.put('lodash_1', var.get('__importDefault')(var.get('require')(Js('lodash'))))
        var.put('util_1', var.get('require')(Js('./util')))
        @Js
        def PyJs_anonymous_217_(item, this, arguments, var=var):
            var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
            var.registers(['item'])
            return (var.get('item').get('id')!=var.get(u"null"))
        PyJs_anonymous_217_._set_name('anonymous')
        var.get('exports').put('isGraphItem', PyJs_anonymous_217_)
        @Js
        def PyJs_anonymous_218_(item, this, arguments, var=var):
            var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
            var.registers(['item'])
            return var.get('util_1').callprop('clone', var.get('lodash_1').get('default').callprop('pick', var.get('item'), Js([Js('id'), Js('value'), Js('before')])))
        PyJs_anonymous_218_._set_name('anonymous')
        var.get('exports').put('normalizeGraphItem', PyJs_anonymous_218_)
        @Js
        def PyJs_anonymous_219_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['ProcessGraph'])
            @Js
            def PyJsHoisted_ProcessGraph_(graph, this, arguments, var=var):
                var = Scope({'graph':graph, 'this':this, 'arguments':arguments}, var)
                var.registers(['graph'])
                var.get(u"this").put('graph', var.get('graph'))
            PyJsHoisted_ProcessGraph_.func_name = 'ProcessGraph'
            var.put('ProcessGraph', PyJsHoisted_ProcessGraph_)
            pass
            @Js
            def PyJs_anonymous_220_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                @Js
                def PyJs_anonymous_221_(i, this, arguments, var=var):
                    var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                    var.registers(['i'])
                    return PyJsStrictEq(var.get('i').get('before').get('length'),Js(0.0))
                PyJs_anonymous_221_._set_name('anonymous')
                return var.get(u"this").get('graph').callprop('filter', PyJs_anonymous_221_)
            PyJs_anonymous_220_._set_name('anonymous')
            var.get('ProcessGraph').get('prototype').put('getStarts', PyJs_anonymous_220_)
            @Js
            def PyJs_anonymous_222_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                @Js
                def PyJs_anonymous_223_(i, this, arguments, var=var):
                    var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                    var.registers(['i'])
                    return (var.get('i').get('next').neg() or PyJsStrictEq(var.get('i').get('next').get('length'),Js(0.0)))
                PyJs_anonymous_223_._set_name('anonymous')
                return var.get(u"this").get('graph').callprop('filter', PyJs_anonymous_223_)
            PyJs_anonymous_222_._set_name('anonymous')
            var.get('ProcessGraph').get('prototype').put('getEnds', PyJs_anonymous_222_)
            @Js
            def PyJs_anonymous_224_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return var.get(u"this").get('graph').callprop('map', var.get('exports').get('normalizeGraphItem'))
            PyJs_anonymous_224_._set_name('anonymous')
            var.get('ProcessGraph').get('prototype').put('getNormalizedGraph', PyJs_anonymous_224_)
            @Js
            def PyJs_anonymous_225_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                if var.get(u"this").get('_itemMap').neg():
                    var.get(u"this").put('_itemMap', var.get('util_1').callprop('transformItemToMap', var.get(u"this").get('graph')))
                return var.get(u"this").get('_itemMap')
            PyJs_anonymous_225_._set_name('anonymous')
            var.get('Object').callprop('defineProperty', var.get('ProcessGraph').get('prototype'), Js('itemMap'), Js({'get':PyJs_anonymous_225_,'enumerable':Js(True),'configurable':Js(True)}))
            @Js
            def PyJs_anonymous_226_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['_this', 'result', 'left', 'deq'])
                var.put('_this', var.get(u"this"))
                var.put('result', Js([]))
                @Js
                def PyJs_anonymous_227_(i, this, arguments, var=var):
                    var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                    var.registers(['i'])
                    return var.get('i').get('id')
                PyJs_anonymous_227_._set_name('anonymous')
                var.put('left', var.get('Set').create(var.get(u"this").get('graph').callprop('map', PyJs_anonymous_227_)))
                @Js
                def PyJs_anonymous_228_(item, this, arguments, var=var):
                    var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
                    var.registers(['item'])
                    if (var.get('item').neg() or var.get('left').callprop('has', var.get('item').get('id')).neg()):
                        return var.get('undefined')
                    @Js
                    def PyJs_anonymous_229_(i, this, arguments, var=var):
                        var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                        var.registers(['i'])
                        return var.get('left').callprop('has', var.get('i')).neg()
                    PyJs_anonymous_229_._set_name('anonymous')
                    if ((var.get('item').get('before').neg() or PyJsStrictEq(var.get('item').get('before').get('length'),Js(0.0))) or var.get('item').get('before').callprop('every', PyJs_anonymous_229_)):
                        var.get('result').callprop('push', var.get('item'))
                        var.get('left').callprop('delete', var.get('item').get('id'))
                        return var.get('undefined')
                    @Js
                    def PyJs_anonymous_230_(i, this, arguments, var=var):
                        var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                        var.registers(['i'])
                        return var.get('deq')(var.get('_this').callprop('get', var.get('i')))
                    PyJs_anonymous_230_._set_name('anonymous')
                    var.get('item').get('before').callprop('forEach', PyJs_anonymous_230_)
                    var.get('result').callprop('push', var.get('item'))
                    var.get('left').callprop('delete', var.get('item').get('id'))
                PyJs_anonymous_228_._set_name('anonymous')
                var.put('deq', PyJs_anonymous_228_)
                while PyJsStrictNeq(var.get('left').get('size'),Js(0.0)):
                    var.get('deq')(var.get(u"this").callprop('get', var.get('left').callprop('keys').callprop('next').get('value')))
                return var.get('result')
            PyJs_anonymous_226_._set_name('anonymous')
            var.get('ProcessGraph').get('prototype').put('topologicalSort', PyJs_anonymous_226_)
            pass
            @Js
            def PyJs_anonymous_231_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['_this', 'sortedGraph'])
                var.put('_this', var.get(u"this"))
                var.put('sortedGraph', var.get(u"this").callprop('topologicalSort'))
                @Js
                def PyJs_anonymous_232_(item, this, arguments, var=var):
                    var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
                    var.registers(['item'])
                    @Js
                    def PyJs_anonymous_233_(i, this, arguments, var=var):
                        var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                        var.registers(['i'])
                        return (var.get('_this').callprop('get', var.get('i')).get('depth')+Js(1.0))
                    PyJs_anonymous_233_._set_name('anonymous')
                    var.get('item').put('depth', var.get('Math').get('max').callprop('apply', var.get('Math'), var.get('__spread')(Js([Js(0.0)]), var.get('item').get('before').callprop('map', PyJs_anonymous_233_))))
                PyJs_anonymous_232_._set_name('anonymous')
                var.get('sortedGraph').callprop('forEach', PyJs_anonymous_232_)
                return var.get('sortedGraph')
            PyJs_anonymous_231_._set_name('anonymous')
            var.get('ProcessGraph').get('prototype').put('calDepth', PyJs_anonymous_231_)
            pass
            @Js
            def PyJs_anonymous_234_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['_this'])
                var.put('_this', var.get(u"this"))
                @Js
                def PyJs_anonymous_235_(item, this, arguments, var=var):
                    var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
                    var.registers(['item'])
                    @Js
                    def PyJs_anonymous_236_(id, this, arguments, var=var):
                        var = Scope({'id':id, 'this':this, 'arguments':arguments}, var)
                        var.registers(['id'])
                        if var.get('_this').callprop('get', var.get('id')).neg():
                            return var.get('undefined')
                        if var.get('_this').callprop('get', var.get('id')).get('next'):
                            var.get('_this').callprop('get', var.get('id')).get('next').callprop('push', var.get('item'))
                        else:
                            var.get('_this').callprop('get', var.get('id')).put('next', Js([var.get('item')]))
                    PyJs_anonymous_236_._set_name('anonymous')
                    var.get('item').get('before').callprop('forEach', PyJs_anonymous_236_)
                PyJs_anonymous_235_._set_name('anonymous')
                var.get(u"this").get('graph').callprop('forEach', PyJs_anonymous_235_)
            PyJs_anonymous_234_._set_name('anonymous')
            var.get('ProcessGraph').get('prototype').put('calReverseRefs', PyJs_anonymous_234_)
            @Js
            def PyJs_anonymous_237_(id, this, arguments, var=var):
                var = Scope({'id':id, 'this':this, 'arguments':arguments}, var)
                var.registers(['id'])
                return var.get(u"this").get('itemMap').callprop('get', var.get('id'))
            PyJs_anonymous_237_._set_name('anonymous')
            var.get('ProcessGraph').get('prototype').put('get', PyJs_anonymous_237_)
            @Js
            def PyJs_anonymous_238_(itemOrId, this, arguments, var=var):
                var = Scope({'itemOrId':itemOrId, 'this':this, 'arguments':arguments}, var)
                var.registers(['_this', 'itemOrId', 'item', 'deps'])
                var.put('_this', var.get(u"this"))
                var.put('item', (var.get('itemOrId') if var.get('exports').callprop('isGraphItem', var.get('itemOrId')) else var.get(u"this").callprop('get', var.get('itemOrId'))))
                if var.get('item').get('deps').neg():
                    @Js
                    def PyJs_anonymous_239_(id, this, arguments, var=var):
                        var = Scope({'id':id, 'this':this, 'arguments':arguments}, var)
                        var.registers(['id'])
                        return var.get('_this').callprop('getDeps', var.get('id'))
                    PyJs_anonymous_239_._set_name('anonymous')
                    var.put('deps', var.get('item').get('before').callprop('map', PyJs_anonymous_239_))
                    var.get('item').put('deps', var.get('lodash_1').get('default').callprop('union', var.get('__spread')(var.get('item').get('before'), var.get('lodash_1').get('default').callprop('flatten', var.get('deps')))))
                return var.get('item').get('deps')
            PyJs_anonymous_238_._set_name('anonymous')
            var.get('ProcessGraph').get('prototype').put('getDeps', PyJs_anonymous_238_)
            @Js
            def PyJs_anonymous_240_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['_this'])
                var.put('_this', var.get(u"this"))
                @Js
                def PyJs_anonymous_241_(item, this, arguments, var=var):
                    var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
                    var.registers(['item'])
                    return var.get('_this').callprop('getDeps', var.get('item'))
                PyJs_anonymous_241_._set_name('anonymous')
                var.get(u"this").get('graph').callprop('forEach', PyJs_anonymous_241_)
            PyJs_anonymous_240_._set_name('anonymous')
            var.get('ProcessGraph').get('prototype').put('calAllDeps', PyJs_anonymous_240_)
            @Js
            def PyJs_anonymous_242_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['_this', 'starts', '_noCycle'])
                var.put('_this', var.get(u"this"))
                if (var.get(u"this").get('_isCycle')!=var.get(u"null")):
                    return var.get(u"this").get('_isCycle')
                if PyJsStrictEq(var.get(u"this").get('graph').get('length'),Js(0.0)):
                    return var.get(u"this").put('_isCycle', Js(False))
                var.get(u"this").callprop('calReverseRefs')
                var.put('starts', var.get(u"this").callprop('getStarts'))
                if PyJsStrictEq(var.get('starts').get('length'),Js(0.0)):
                    return var.get(u"this").put('_isCycle', Js(True))
                @Js
                def PyJs_anonymous_243_(item, stack, this, arguments, var=var):
                    var = Scope({'item':item, 'stack':stack, 'this':this, 'arguments':arguments}, var)
                    var.registers(['item', 'e_1', '_c', 'id', '_b', '_a', 'stack'])
                    pass
                    if var.get('stack').callprop('includes', var.get('item')):
                        return Js(True)
                    var.get('stack').callprop('push', var.get('item'))
                    try:
                        #for JS loop
                        var.put('_b', var.get('__values')(var.get('item').get('before')))
                        var.put('_c', var.get('_b').callprop('next'))
                        while var.get('_c').get('done').neg():
                            try:
                                var.put('id', var.get('_c').get('value'))
                                if var.get('_noCycle')(var.get('_this').callprop('get', var.get('id')), var.get('stack')):
                                    return Js(True)
                            finally:
                                    var.put('_c', var.get('_b').callprop('next'))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_655f315f31_62792298 = var.own.get('e_1_1')
                        var.force_own_put('e_1_1', PyExceptionToJs(PyJsTempException))
                        try:
                            var.put('e_1', Js({'error':var.get('e_1_1')}))
                        finally:
                            if PyJsHolder_655f315f31_62792298 is not None:
                                var.own['e_1_1'] = PyJsHolder_655f315f31_62792298
                            else:
                                del var.own['e_1_1']
                            del PyJsHolder_655f315f31_62792298
                    finally:
                        try:
                            if ((var.get('_c') and var.get('_c').get('done').neg()) and var.put('_a', var.get('_b').get('return'))):
                                var.get('_a').callprop('call', var.get('_b'))
                        finally:
                            if var.get('e_1'):
                                PyJsTempException = JsToPyException(var.get('e_1').get('error'))
                                raise PyJsTempException
                    var.get('stack').callprop('pop')
                    return Js(False)
                PyJs_anonymous_243_._set_name('anonymous')
                var.put('_noCycle', PyJs_anonymous_243_)
                @Js
                def PyJs_anonymous_244_(item, this, arguments, var=var):
                    var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
                    var.registers(['item'])
                    return var.get('_noCycle')(var.get('item'), Js([])).neg()
                PyJs_anonymous_244_._set_name('anonymous')
                return var.get(u"this").put('_isCycle', var.get('starts').callprop('every', PyJs_anonymous_244_))
            PyJs_anonymous_242_._set_name('anonymous')
            var.get('ProcessGraph').get('prototype').put('checkCycle', PyJs_anonymous_242_)
            @Js
            def PyJs_anonymous_245_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['starts', 'len', '_noFork'])
                if (var.get(u"this").get('_isLinear')!=var.get(u"null")):
                    return var.get(u"this").get('_isLinear')
                if var.get(u"this").callprop('checkCycle'):
                    return var.get(u"this").put('_isLinear', Js(False))
                if PyJsStrictEq(var.get(u"this").get('graph').get('length'),Js(0.0)):
                    return var.get(u"this").put('_isLinear', Js(False))
                var.get(u"this").callprop('calReverseRefs')
                var.put('starts', var.get(u"this").callprop('getStarts'))
                if PyJsStrictNeq(var.get('starts').get('length'),Js(1.0)):
                    return var.get(u"this").put('_isLinear', Js(False))
                var.put('len', Js(0.0))
                @Js
                def PyJs_anonymous_246_(item, this, arguments, var=var):
                    var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
                    var.registers(['item'])
                    var.put('len', Js(1.0), '+')
                    if (var.get('item').get('next') and PyJsStrictEq(var.get('item').get('next').get('length'),Js(1.0))):
                        return var.get('_noFork')(var.get('item').get('next').get('0'))
                    if (var.get('item').get('next') and (var.get('item').get('next').get('length')>Js(1.0))):
                        return Js(False)
                    return Js(True)
                PyJs_anonymous_246_._set_name('anonymous')
                var.put('_noFork', PyJs_anonymous_246_)
                if var.get('_noFork')(var.get('starts').get('0')):
                    return var.get(u"this").put('_isLinear', PyJsStrictEq(var.get('len'),var.get(u"this").get('graph').get('length')))
                return var.get(u"this").put('_isLinear', Js(False))
            PyJs_anonymous_245_._set_name('anonymous')
            var.get('ProcessGraph').get('prototype').put('isLinear', PyJs_anonymous_245_)
            @Js
            def PyJs_anonymous_247_(item, this, arguments, var=var):
                var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
                var.registers(['_d', '_f', 'e_2', 'item', 'repeat', 'inter', 'item_1', '_c', 'id', 'deps', '_b', '_a', 'e_3', '_e'])
                pass
                if PyJsStrictEq(var.get(u"this").get('graph').get('length'),Js(0.0)):
                    return var.get('undefined')
                if var.get('item'):
                    try:
                        #for JS loop
                        var.put('_c', var.get('__values')(var.get('item').get('before')))
                        var.put('_d', var.get('_c').callprop('next'))
                        while var.get('_d').get('done').neg():
                            try:
                                var.put('id', var.get('_d').get('value'))
                                var.put('deps', var.get(u"this").callprop('getDeps', var.get('id')))
                                var.put('inter', var.get('lodash_1').get('default').callprop('intersection', var.get('deps'), var.get('item').get('before')))
                                if (var.get('inter').get('length')>Js(0.0)):
                                    return Js([var.get('item'), var.get(u"this").callprop('get', var.get('id')), var.get('inter')])
                            finally:
                                    var.put('_d', var.get('_c').callprop('next'))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_655f325f31_78752536 = var.own.get('e_2_1')
                        var.force_own_put('e_2_1', PyExceptionToJs(PyJsTempException))
                        try:
                            var.put('e_2', Js({'error':var.get('e_2_1')}))
                        finally:
                            if PyJsHolder_655f325f31_78752536 is not None:
                                var.own['e_2_1'] = PyJsHolder_655f325f31_78752536
                            else:
                                del var.own['e_2_1']
                            del PyJsHolder_655f325f31_78752536
                    finally:
                        try:
                            if ((var.get('_d') and var.get('_d').get('done').neg()) and var.put('_a', var.get('_c').get('return'))):
                                var.get('_a').callprop('call', var.get('_c'))
                        finally:
                            if var.get('e_2'):
                                PyJsTempException = JsToPyException(var.get('e_2').get('error'))
                                raise PyJsTempException
                    return var.get('undefined')
                try:
                    #for JS loop
                    var.put('_e', var.get('__values')(var.get(u"this").get('graph')))
                    var.put('_f', var.get('_e').callprop('next'))
                    while var.get('_f').get('done').neg():
                        try:
                            var.put('item_1', var.get('_f').get('value'))
                            var.put('repeat', var.get(u"this").callprop('checkRepeatDependence', var.get('item_1')))
                            if var.get('repeat'):
                                return var.get('repeat')
                        finally:
                                var.put('_f', var.get('_e').callprop('next'))
                except PyJsException as PyJsTempException:
                    PyJsHolder_655f335f31_77990200 = var.own.get('e_3_1')
                    var.force_own_put('e_3_1', PyExceptionToJs(PyJsTempException))
                    try:
                        var.put('e_3', Js({'error':var.get('e_3_1')}))
                    finally:
                        if PyJsHolder_655f335f31_77990200 is not None:
                            var.own['e_3_1'] = PyJsHolder_655f335f31_77990200
                        else:
                            del var.own['e_3_1']
                        del PyJsHolder_655f335f31_77990200
                finally:
                    try:
                        if ((var.get('_f') and var.get('_f').get('done').neg()) and var.put('_b', var.get('_e').get('return'))):
                            var.get('_b').callprop('call', var.get('_e'))
                    finally:
                        if var.get('e_3'):
                            PyJsTempException = JsToPyException(var.get('e_3').get('error'))
                            raise PyJsTempException
            PyJs_anonymous_247_._set_name('anonymous')
            var.get('ProcessGraph').get('prototype').put('checkRepeatDependence', PyJs_anonymous_247_)
            @Js
            def PyJs_anonymous_248_(id, isTarget, this, arguments, var=var):
                var = Scope({'id':id, 'isTarget':isTarget, 'this':this, 'arguments':arguments}, var)
                var.registers(['item', 'omitNext_1', 'omitBefore', 'isTarget', '_this', 'omitNext_2', 'omitBefore_1', 'id', 'deps', 'available'])
                var.put('_this', var.get(u"this"))
                if PyJsStrictEq(var.get(u"this").get('graph').get('length'),Js(1.0)):
                    return Js([])
                var.put('item', var.get(u"this").callprop('get', var.get('id')))
                var.get(u"this").callprop('calReverseRefs')
                @Js
                def PyJs_anonymous_249_(i, this, arguments, var=var):
                    var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                    var.registers(['i'])
                    return var.get('i').get('id')
                PyJs_anonymous_249_._set_name('anonymous')
                var.put('available', var.get('Set').create(var.get(u"this").get('graph').callprop('map', PyJs_anonymous_249_)))
                if var.get('isTarget'):
                    @Js
                    def PyJs_anonymous_250_(item, this, arguments, var=var):
                        var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
                        var.registers(['item'])
                        if (var.get('item').get('next').neg() or PyJsStrictEq(var.get('item').get('next').get('length'),Js(0.0))):
                            return var.get('undefined')
                        @Js
                        def PyJs_anonymous_251_(next, this, arguments, var=var):
                            var = Scope({'next':next, 'this':this, 'arguments':arguments}, var)
                            var.registers(['next'])
                            @Js
                            def PyJs_anonymous_252_(depId, this, arguments, var=var):
                                var = Scope({'depId':depId, 'this':this, 'arguments':arguments}, var)
                                var.registers(['depId'])
                                if PyJsStrictEq(var.get('depId'),var.get('id')):
                                    return var.get('undefined')
                                var.get('available').callprop('delete', var.get('depId'))
                            PyJs_anonymous_252_._set_name('anonymous')
                            var.get('next').get('before').callprop('forEach', PyJs_anonymous_252_)
                            var.get('available').callprop('delete', var.get('next').get('id'))
                            var.get('omitNext_1')(var.get('next'))
                        PyJs_anonymous_251_._set_name('anonymous')
                        var.get('item').get('next').callprop('forEach', PyJs_anonymous_251_)
                    PyJs_anonymous_250_._set_name('anonymous')
                    var.put('omitNext_1', PyJs_anonymous_250_)
                    var.get('omitNext_1')(var.get('item'))
                    @Js
                    def PyJs_anonymous_253_(item, this, arguments, var=var):
                        var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
                        var.registers(['item'])
                        @Js
                        def PyJs_anonymous_254_(id, this, arguments, var=var):
                            var = Scope({'id':id, 'this':this, 'arguments':arguments}, var)
                            var.registers(['before', 'id'])
                            var.put('before', var.get('_this').callprop('get', var.get('id')))
                            var.get('omitNext_1')(var.get('before'))
                        PyJs_anonymous_254_._set_name('anonymous')
                        var.get('item').get('before').callprop('forEach', PyJs_anonymous_254_)
                    PyJs_anonymous_253_._set_name('anonymous')
                    var.put('omitBefore', PyJs_anonymous_253_)
                    var.get('omitBefore')(var.get('item'))
                    var.put('deps', var.get(u"this").callprop('getDeps', var.get('item')))
                    @Js
                    def PyJs_anonymous_255_(id, this, arguments, var=var):
                        var = Scope({'id':id, 'this':this, 'arguments':arguments}, var)
                        var.registers(['id'])
                        var.get('available').callprop('delete', var.get('id'))
                    PyJs_anonymous_255_._set_name('anonymous')
                    var.get('deps').callprop('forEach', PyJs_anonymous_255_)
                else:
                    @Js
                    def PyJs_anonymous_256_(item, this, arguments, var=var):
                        var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
                        var.registers(['item'])
                        @Js
                        def PyJs_anonymous_257_(id, this, arguments, var=var):
                            var = Scope({'id':id, 'this':this, 'arguments':arguments}, var)
                            var.registers(['before', 'id'])
                            var.get('available').callprop('delete', var.get('id'))
                            var.put('before', var.get('_this').callprop('get', var.get('id')))
                            if var.get('before').get('next'):
                                @Js
                                def PyJs_anonymous_258_(next, this, arguments, var=var):
                                    var = Scope({'next':next, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['next'])
                                    if PyJsStrictEq(var.get('next'),var.get('item')):
                                        return var.get('undefined')
                                    var.get('available').callprop('delete', var.get('next').get('id'))
                                PyJs_anonymous_258_._set_name('anonymous')
                                var.get('before').get('next').callprop('forEach', PyJs_anonymous_258_)
                            var.get('omitBefore_1')(var.get('before'))
                        PyJs_anonymous_257_._set_name('anonymous')
                        var.get('item').get('before').callprop('forEach', PyJs_anonymous_257_)
                    PyJs_anonymous_256_._set_name('anonymous')
                    var.put('omitBefore_1', PyJs_anonymous_256_)
                    var.get('omitBefore_1')(var.get('item'))
                    @Js
                    def PyJs_anonymous_259_(item, this, arguments, var=var):
                        var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
                        var.registers(['item'])
                        if var.get('item').get('next'):
                            @Js
                            def PyJs_anonymous_260_(next, this, arguments, var=var):
                                var = Scope({'next':next, 'this':this, 'arguments':arguments}, var)
                                var.registers(['next'])
                                var.get('available').callprop('delete', var.get('next').get('id'))
                                @Js
                                def PyJs_anonymous_261_(dep, this, arguments, var=var):
                                    var = Scope({'dep':dep, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['dep'])
                                    if PyJsStrictEq(var.get('dep'),var.get('id')):
                                        return var.get('undefined')
                                    var.get('available').callprop('delete', var.get('dep'))
                                PyJs_anonymous_261_._set_name('anonymous')
                                var.get('next').get('before').callprop('forEach', PyJs_anonymous_261_)
                                var.get('omitNext_2')(var.get('next'))
                            PyJs_anonymous_260_._set_name('anonymous')
                            var.get('item').get('next').callprop('forEach', PyJs_anonymous_260_)
                    PyJs_anonymous_259_._set_name('anonymous')
                    var.put('omitNext_2', PyJs_anonymous_259_)
                    var.get('omitNext_2')(var.get('item'))
                var.get('available').callprop('delete', var.get('id'))
                return var.get('Array').callprop('from', var.get('available').callprop('keys'))
            PyJs_anonymous_248_._set_name('anonymous')
            var.get('ProcessGraph').get('prototype').put('getAvailableTarget', PyJs_anonymous_248_)
            return var.get('ProcessGraph')
        PyJs_anonymous_219_._set_name('anonymous')
        var.put('ProcessGraph', PyJs_anonymous_219_())
        var.get('exports').put('ProcessGraph', var.get('ProcessGraph'))
    PyJs_anonymous_211_._set_name('anonymous')
    @Js
    def PyJs_anonymous_262_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['__spread', '__read', 'utils_1', 'require', 'lodash_1', '__importDefault', 'exports', 'module', 'ProcessGraph_1'])
        Js('use strict')
        @Js
        def PyJs_anonymous_263_(o, n, this, arguments, var=var):
            var = Scope({'o':o, 'n':n, 'this':this, 'arguments':arguments}, var)
            var.registers(['o', 'm', 'n', 'i', 'r', 'ar', 'e'])
            var.put('m', (PyJsStrictEq(var.get('Symbol',throw=False).typeof(),Js('function')) and var.get('o').get(var.get('Symbol').get('iterator'))))
            if var.get('m').neg():
                return var.get('o')
            var.put('i', var.get('m').callprop('call', var.get('o')))
            var.put('ar', Js([]))
            try:
                while ((PyJsStrictEq(var.get('n'),PyJsComma(Js(0.0), Js(None))) or ((var.put('n',Js(var.get('n').to_number())-Js(1))+Js(1))>Js(0.0))) and var.put('r', var.get('i').callprop('next')).get('done').neg()):
                    var.get('ar').callprop('push', var.get('r').get('value'))
            except PyJsException as PyJsTempException:
                PyJsHolder_6572726f72_6422257 = var.own.get('error')
                var.force_own_put('error', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('e', Js({'error':var.get('error')}))
                finally:
                    if PyJsHolder_6572726f72_6422257 is not None:
                        var.own['error'] = PyJsHolder_6572726f72_6422257
                    else:
                        del var.own['error']
                    del PyJsHolder_6572726f72_6422257
            finally:
                try:
                    if ((var.get('r') and var.get('r').get('done').neg()) and var.put('m', var.get('i').get('return'))):
                        var.get('m').callprop('call', var.get('i'))
                finally:
                    if var.get('e'):
                        PyJsTempException = JsToPyException(var.get('e').get('error'))
                        raise PyJsTempException
            return var.get('ar')
        PyJs_anonymous_263_._set_name('anonymous')
        var.put('__read', ((var.get(u"this") and var.get(u"this").get('__read')) or PyJs_anonymous_263_))
        @Js
        def PyJs_anonymous_264_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'ar'])
            #for JS loop
            var.put('ar', Js([]))
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('arguments').get('length')):
                try:
                    var.put('ar', var.get('ar').callprop('concat', var.get('__read')(var.get('arguments').get(var.get('i')))))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('ar')
        PyJs_anonymous_264_._set_name('anonymous')
        var.put('__spread', ((var.get(u"this") and var.get(u"this").get('__spread')) or PyJs_anonymous_264_))
        @Js
        def PyJs_anonymous_265_(mod, this, arguments, var=var):
            var = Scope({'mod':mod, 'this':this, 'arguments':arguments}, var)
            var.registers(['mod'])
            return (var.get('mod') if (var.get('mod') and var.get('mod').get('__esModule')) else Js({'default':var.get('mod')}))
        PyJs_anonymous_265_._set_name('anonymous')
        var.put('__importDefault', ((var.get(u"this") and var.get(u"this").get('__importDefault')) or PyJs_anonymous_265_))
        var.get('exports').put('__esModule', Js(True))
        var.put('ProcessGraph_1', var.get('require')(Js('./ProcessGraph')))
        var.put('utils_1', var.get('require')(Js('../AProcess/utils')))
        var.put('lodash_1', var.get('__importDefault')(var.get('require')(Js('lodash'))))
        @Js
        def PyJs_anonymous_266_(o, this, arguments, var=var):
            var = Scope({'o':o, 'this':this, 'arguments':arguments}, var)
            var.registers(['t', 'o', 'k'])
            return var.get('lodash_1').get('default').callprop('cloneDeep', var.get('o'))
            if var.get('Array').callprop('isArray', var.get('o')):
                return var.get('o').callprop('map', var.get('exports').get('clone'))
            if PyJsStrictEq(var.get('o',throw=False).typeof(),Js('object')):
                var.put('t', Js({}))
                for PyJsTemp in var.get('o'):
                    var.put('k', PyJsTemp)
                    var.get('t').put(var.get('k'), var.get('exports').callprop('clone', var.get('o').get(var.get('k'))))
                return var.get('t')
            return var.get('o')
        PyJs_anonymous_266_._set_name('anonymous')
        var.get('exports').put('clone', PyJs_anonymous_266_)
        @Js
        def PyJs_anonymous_267_(arr, this, arguments, var=var):
            var = Scope({'arr':arr, 'this':this, 'arguments':arguments}, var)
            var.registers(['arr', 'itemMap'])
            var.put('itemMap', var.get('Map').create())
            @Js
            def PyJs_anonymous_268_(i, this, arguments, var=var):
                var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                var.registers(['i'])
                var.get('itemMap').callprop('set', var.get('i').get('id'), var.get('i'))
            PyJs_anonymous_268_._set_name('anonymous')
            var.get('arr').callprop('forEach', PyJs_anonymous_268_)
            return var.get('itemMap')
        PyJs_anonymous_267_._set_name('anonymous')
        var.get('exports').put('transformItemToMap', PyJs_anonymous_267_)
        @Js
        def PyJs_anonymous_269_(graph, this, arguments, var=var):
            var = Scope({'graph':graph, 'this':this, 'arguments':arguments}, var)
            var.registers(['depth', 'processGraph', 'graph', 'items'])
            var.put('items', var.get('exports').callprop('clone', var.get('graph')))
            var.put('processGraph', var.get('ProcessGraph_1').get('ProcessGraph').create(var.get('items')))
            var.get('processGraph').callprop('calReverseRefs')
            var.get('processGraph').callprop('calDepth')
            var.put('depth', Js([]))
            @Js
            def PyJs_anonymous_270_(item, this, arguments, var=var):
                var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
                var.registers(['item', 'd'])
                var.put('d', var.get('item').get('depth'))
                if var.get('depth').get(var.get('d')):
                    var.get('depth').get(var.get('d')).callprop('push', var.get('item'))
                else:
                    var.get('depth').put(var.get('d'), Js([var.get('item')]))
                var.get('item').put('order', (var.get('depth').get(var.get('d')).get('length')-Js(1.0)))
            PyJs_anonymous_270_._set_name('anonymous')
            var.get('items').callprop('forEach', PyJs_anonymous_270_)
            @Js
            def PyJs_anonymous_271_(i, this, arguments, var=var):
                var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                var.registers(['i'])
                return var.get('i').get('length')
            PyJs_anonymous_271_._set_name('anonymous')
            return Js({'items':var.get('items'),'column':var.get('depth').get('length'),'row':var.get('Math').get('max').callprop('apply', var.get('Math'), var.get('__spread')(Js([Js(0.0)]), var.get('depth').callprop('map', PyJs_anonymous_271_)))})
        PyJs_anonymous_269_._set_name('anonymous')
        var.get('exports').put('calItemPosIn2DMatrixCompact', PyJs_anonymous_269_)
        @Js
        def PyJs_anonymous_272_(graph, this, arguments, var=var):
            var = Scope({'graph':graph, 'this':this, 'arguments':arguments}, var)
            var.registers(['maxOrder', 'processGraph', 'graph', 'items', 'travel', 'starts'])
            var.put('items', var.get('exports').callprop('clone', var.get('graph')))
            var.put('processGraph', var.get('ProcessGraph_1').get('ProcessGraph').create(var.get('items')))
            var.get('processGraph').callprop('calReverseRefs')
            var.get('processGraph').callprop('calDepth')
            var.put('starts', var.get('processGraph').callprop('getStarts'))
            var.put('maxOrder', Js([]))
            @Js
            def PyJs_anonymous_273_(item, this, arguments, var=var):
                var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
                var.registers(['item'])
                if (var.get('item').get('order')!=var.get(u"null")):
                    return var.get('undefined')
                if (var.get('item').get('next') and (var.get('item').get('next').get('length')>Js(0.0))):
                    @Js
                    def PyJs_anonymous_274_(next, this, arguments, var=var):
                        var = Scope({'next':next, 'this':this, 'arguments':arguments}, var)
                        var.registers(['i', 'next', 'through'])
                        var.get('travel')(var.get('next'))
                        if (var.get('item').get('order')!=var.get(u"null")):
                            return var.get('undefined')
                        pass
                        #for JS loop
                        var.put('i', var.get('item').get('depth'))
                        while (var.get('i')<var.get('next').get('depth')):
                            try:
                                if ((var.get('maxOrder').get(var.get('i'))!=var.get(u"null")) and ((var.get('through')==var.get(u"null")) or (var.get('maxOrder').get(var.get('i'))>var.get('through')))):
                                    var.put('through', var.get('maxOrder').get(var.get('i')))
                            finally:
                                    var.put('i', Js(1.0), '+')
                        var.get('item').put('order', ((var.get('through')+Js(1.0)) if (var.get('through')!=var.get(u"null")) else Js(0.0)))
                        #for JS loop
                        var.put('i', var.get('item').get('depth'))
                        while (var.get('i')<var.get('next').get('depth')):
                            try:
                                if ((var.get('maxOrder').get(var.get('i'))==var.get(u"null")) or (var.get('item').get('order')>var.get('maxOrder').get(var.get('i')))):
                                    var.get('maxOrder').put(var.get('i'), var.get('item').get('order'))
                            finally:
                                    var.put('i', Js(1.0), '+')
                    PyJs_anonymous_274_._set_name('anonymous')
                    var.get('item').get('next').callprop('forEach', PyJs_anonymous_274_)
                else:
                    var.get('maxOrder').put(var.get('item').get('depth'), var.get('item').put('order', ((var.get('maxOrder').get(var.get('item').get('depth'))+Js(1.0)) if (var.get('maxOrder').get(var.get('item').get('depth'))!=var.get(u"null")) else Js(0.0))))
            PyJs_anonymous_273_._set_name('anonymous')
            var.put('travel', PyJs_anonymous_273_)
            @Js
            def PyJs_anonymous_275_(i, this, arguments, var=var):
                var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                var.registers(['i'])
                var.get('travel')(var.get('i'))
            PyJs_anonymous_275_._set_name('anonymous')
            var.get('starts').callprop('forEach', PyJs_anonymous_275_)
            @Js
            def PyJs_anonymous_276_(i, this, arguments, var=var):
                var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                var.registers(['i'])
                return var.get('i').get('depth')
            PyJs_anonymous_276_._set_name('anonymous')
            return Js({'items':var.get('items'),'column':(var.get('Math').get('max').callprop('apply', var.get('Math'), var.get('__spread')(Js([Js(0.0)]), var.get('items').callprop('map', PyJs_anonymous_276_)))+Js(1.0)),'row':(var.get('Math').get('max').callprop('apply', var.get('Math'), var.get('__spread')(Js([Js(0.0)]), var.get('maxOrder')))+Js(1.0))})
        PyJs_anonymous_272_._set_name('anonymous')
        var.get('exports').put('calItemPosIn2DMatrixRelax', PyJs_anonymous_272_)
        var.get('exports').put('calItemPosIn2DMatrix', var.get('exports').get('calItemPosIn2DMatrixRelax'))
        @Js
        def PyJs_anonymous_277_(arr, this, arguments, var=var):
            var = Scope({'arr':arr, 'this':this, 'arguments':arguments}, var)
            var.registers(['value', 'item', 'i', 're', 'arr'])
            var.put('re', Js([]))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('arr').get('length')):
                try:
                    var.put('value', var.get('arr').get(var.get('i')))
                    var.put('item', Js({'id':var.get('i'),'value':var.get('value'),'before':Js([])}))
                    if PyJsStrictNeq(var.get('i'),Js(0.0)):
                        var.get('item').get('before').callprop('push', (var.get('i')-Js(1.0)))
                    var.get('re').callprop('push', var.get('item'))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('re')
        PyJs_anonymous_277_._set_name('anonymous')
        var.get('exports').put('arrayToGraph', PyJs_anonymous_277_)
        @Js
        def PyJs_anonymous_278_(graph, this, arguments, var=var):
            var = Scope({'graph':graph, 'this':this, 'arguments':arguments}, var)
            var.registers(['start', 're', 'processGraph', 'graph', 'cur', '_a'])
            var.put('re', Js([]))
            var.put('processGraph', var.get('ProcessGraph_1').get('ProcessGraph').create(var.get('graph')))
            var.get('processGraph').callprop('calReverseRefs')
            var.put('_a', var.get('__read')(var.get('processGraph').callprop('getStarts'), Js(1.0)))
            var.put('start', var.get('_a').get('0'))
            var.put('cur', var.get('start'))
            while var.get('cur'):
                var.get('re').callprop('push', var.get('cur').get('value'))
                var.put('cur', (var.get('cur').get('next') and var.get('cur').get('next').get('0')))
            return var.get('re')
        PyJs_anonymous_278_._set_name('anonymous')
        var.get('exports').put('graphToArray', PyJs_anonymous_278_)
        @Js
        def PyJs_anonymous_279_(vertex, edge, this, arguments, var=var):
            var = Scope({'vertex':vertex, 'edge':edge, 'this':this, 'arguments':arguments}, var)
            var.registers(['from', 'i', 'items', 'vertex', 'edge', 'to'])
            @Js
            def PyJs_anonymous_280_(_, index, this, arguments, var=var):
                var = Scope({'_':_, 'index':index, 'this':this, 'arguments':arguments}, var)
                var.registers(['_', 'index'])
                return Js({'id':var.get('index'),'value':Js({'title':var.get('index').callprop('toString')}),'before':Js([])})
            PyJs_anonymous_280_._set_name('anonymous')
            var.put('items', var.get('Array').callprop('from', Js({'length':var.get('vertex')}), PyJs_anonymous_280_))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('edge')):
                try:
                    var.put('from', ((var.get('Math').callprop('random')*var.get('vertex'))<<Js(0.0)))
                    var.put('to', ((var.get('from')+(var.get('Math').callprop('random')*(var.get('vertex')-var.get('from'))))<<Js(0.0)))
                    if PyJsStrictEq(var.get('from'),var.get('to')):
                        continue
                    var.get('items').get(var.get('to')).get('before').callprop('push', var.get('from'))
                finally:
                        var.put('i', Js(1.0), '+')
            return var.get('items')
        PyJs_anonymous_279_._set_name('anonymous')
        var.get('exports').put('generateRandomGraph', PyJs_anonymous_279_)
        @Js
        def PyJs_anonymous_281_(a, b, this, arguments, var=var):
            var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments}, var)
            var.registers(['b', 'a'])
            return Js({'x':((var.get('a').get('x')+var.get('b').get('x'))/Js(2.0)),'y':((var.get('a').get('y')+var.get('b').get('y'))/Js(2.0))})
        PyJs_anonymous_281_._set_name('anonymous')
        var.get('exports').put('middle', PyJs_anonymous_281_)
        @Js
        def PyJs_anonymous_282_(graph, id, isTarget, this, arguments, var=var):
            var = Scope({'graph':graph, 'id':id, 'isTarget':isTarget, 'this':this, 'arguments':arguments}, var)
            var.registers(['isTarget', 'graph', 'id'])
            return var.get('ProcessGraph_1').get('ProcessGraph').create(var.get('exports').callprop('clone', var.get('graph'))).callprop('getAvailableTarget', var.get('id'), var.get('isTarget'))
        PyJs_anonymous_282_._set_name('anonymous')
        var.get('exports').put('getAvailableTarget', PyJs_anonymous_282_)
        @Js
        def PyJs_anonymous_283_(graph, src, dst, this, arguments, var=var):
            var = Scope({'graph':graph, 'src':src, 'dst':dst, 'this':this, 'arguments':arguments}, var)
            var.registers(['dstItem', 'newGraph', 'src', 'graph', 'dst'])
            var.put('newGraph', var.get('exports').callprop('clone', var.get('graph')))
            @Js
            def PyJs_anonymous_284_(item, this, arguments, var=var):
                var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
                var.registers(['item'])
                return PyJsStrictEq(var.get('item').get('id'),var.get('dst'))
            PyJs_anonymous_284_._set_name('anonymous')
            var.put('dstItem', var.get('newGraph').callprop('find', PyJs_anonymous_284_))
            if var.get('dstItem').neg():
                return var.get('newGraph')
            if var.get('dstItem').get('before').callprop('includes', var.get('src')):
                return var.get('newGraph')
            var.get('dstItem').get('before').callprop('push', var.get('src'))
            return var.get('newGraph')
        PyJs_anonymous_283_._set_name('anonymous')
        var.get('exports').put('addDeps', PyJs_anonymous_283_)
        @Js
        def PyJs_anonymous_285_(graph, src, dst, this, arguments, var=var):
            var = Scope({'graph':graph, 'src':src, 'dst':dst, 'this':this, 'arguments':arguments}, var)
            var.registers(['dstItem', 'newGraph', 'src', 'graph', 'dst'])
            var.put('newGraph', var.get('exports').callprop('clone', var.get('graph')))
            @Js
            def PyJs_anonymous_286_(item, this, arguments, var=var):
                var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
                var.registers(['item'])
                return PyJsStrictEq(var.get('item').get('id'),var.get('dst'))
            PyJs_anonymous_286_._set_name('anonymous')
            var.put('dstItem', var.get('newGraph').callprop('find', PyJs_anonymous_286_))
            if var.get('dstItem').neg():
                return var.get('newGraph')
            @Js
            def PyJs_anonymous_287_(id, this, arguments, var=var):
                var = Scope({'id':id, 'this':this, 'arguments':arguments}, var)
                var.registers(['id'])
                return PyJsStrictNeq(var.get('id'),var.get('src'))
            PyJs_anonymous_287_._set_name('anonymous')
            var.get('dstItem').put('before', var.get('dstItem').get('before').callprop('filter', PyJs_anonymous_287_))
            return var.get('newGraph')
        PyJs_anonymous_285_._set_name('anonymous')
        var.get('exports').put('removeDeps', PyJs_anonymous_285_)
        @Js
        def PyJs_anonymous_288_(graph, id, keepDeps, this, arguments, var=var):
            var = Scope({'graph':graph, 'id':id, 'keepDeps':keepDeps, 'this':this, 'arguments':arguments}, var)
            var.registers(['newGraph', 'graph', 'before', 'id', 'keepDeps'])
            if PyJsStrictEq(var.get('keepDeps'),PyJsComma(Js(0.0), Js(None))):
                var.put('keepDeps', Js(False))
            @Js
            def PyJs_anonymous_289_(item, this, arguments, var=var):
                var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
                var.registers(['item'])
                return PyJsStrictEq(var.get('item').get('id'),var.get('id'))
            PyJs_anonymous_289_._set_name('anonymous')
            var.put('before', (var.get('graph').callprop('find', PyJs_anonymous_289_).get('before') if var.get('keepDeps') else Js([])))
            @Js
            def PyJs_anonymous_290_(item, this, arguments, var=var):
                var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
                var.registers(['item'])
                return PyJsStrictNeq(var.get('item').get('id'),var.get('id'))
            PyJs_anonymous_290_._set_name('anonymous')
            var.put('newGraph', var.get('exports').callprop('clone', var.get('graph')).callprop('filter', PyJs_anonymous_290_))
            @Js
            def PyJs_anonymous_291_(item, this, arguments, var=var):
                var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
                var.registers(['item'])
                @Js
                def PyJs_anonymous_292_(depId, this, arguments, var=var):
                    var = Scope({'depId':depId, 'this':this, 'arguments':arguments}, var)
                    var.registers(['depId'])
                    return PyJsStrictNeq(var.get('depId'),var.get('id'))
                PyJs_anonymous_292_._set_name('anonymous')
                var.get('item').put('before', var.get('item').get('before').callprop('filter', PyJs_anonymous_292_).callprop('concat', var.get('before')))
            PyJs_anonymous_291_._set_name('anonymous')
            @Js
            def PyJs_anonymous_293_(item, this, arguments, var=var):
                var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
                var.registers(['item'])
                return var.get('item').get('before').callprop('includes', var.get('id'))
            PyJs_anonymous_293_._set_name('anonymous')
            var.get('newGraph').callprop('filter', PyJs_anonymous_293_).callprop('forEach', PyJs_anonymous_291_)
            return var.get('newGraph')
        PyJs_anonymous_288_._set_name('anonymous')
        var.get('exports').put('removeItem', PyJs_anonymous_288_)
        @Js
        def PyJs_anonymous_294_(graph, value, this, arguments, var=var):
            var = Scope({'graph':graph, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['newItem', 'value', 'newGraph', 'graph', 'id'])
            var.put('newGraph', var.get('exports').callprop('clone', var.get('graph')))
            var.put('id', var.get('utils_1').callprop('genId'))
            var.put('newItem', Js({'id':var.get('id'),'value':var.get('value'),'before':Js([])}))
            var.get('newGraph').callprop('push', var.get('newItem'))
            return Js([var.get('newGraph'), var.get('newItem')])
        PyJs_anonymous_294_._set_name('anonymous')
        var.get('exports').put('addItem', PyJs_anonymous_294_)
        @Js
        def PyJs_anonymous_295_(graph, this, arguments, var=var):
            var = Scope({'graph':graph, 'this':this, 'arguments':arguments}, var)
            var.registers(['processGraph', 'graph'])
            var.put('processGraph', var.get('ProcessGraph_1').get('ProcessGraph').create(var.get('exports').callprop('clone', var.get('graph'))))
            var.get('processGraph').callprop('calReverseRefs')
            return var.get('processGraph').callprop('getEnds').callprop('shift').get('id')
        PyJs_anonymous_295_._set_name('anonymous')
        var.get('exports').put('tailLinear', PyJs_anonymous_295_)
        @Js
        def PyJs_anonymous_296_(graph, value, this, arguments, var=var):
            var = Scope({'graph':graph, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['newItem', 'value', 'newGraph', 'graph', 'tailId', '_a'])
            var.put('_a', var.get('__read')(var.get('exports').callprop('addItem', var.get('graph'), var.get('value')), Js(2.0)))
            var.put('newGraph', var.get('_a').get('0'))
            var.put('newItem', var.get('_a').get('1'))
            var.put('tailId', var.get('exports').callprop('tailLinear', var.get('newGraph')))
            return var.get('exports').callprop('addDeps', var.get('newGraph'), var.get('tailId'), var.get('newItem').get('id'))
        PyJs_anonymous_296_._set_name('anonymous')
        var.get('exports').put('appendItem', PyJs_anonymous_296_)
        @Js
        def PyJs_anonymous_297_(graph, value, id, this, arguments, var=var):
            var = Scope({'graph':graph, 'value':value, 'id':id, 'this':this, 'arguments':arguments}, var)
            var.registers(['newItem', 'value', 'item', 'newGraph', 'processGraph', 'graph', 'id', '_a'])
            var.put('_a', var.get('__read')(var.get('exports').callprop('addItem', var.get('graph'), var.get('value')), Js(2.0)))
            var.put('newGraph', var.get('_a').get('0'))
            var.put('newItem', var.get('_a').get('1'))
            var.put('processGraph', var.get('ProcessGraph_1').get('ProcessGraph').create(var.get('newGraph')))
            var.get('processGraph').callprop('calReverseRefs')
            var.put('item', var.get('processGraph').callprop('get', var.get('id')))
            var.get('newItem').put('before', var.get('item').get('before').callprop('slice'))
            var.get('item').put('before', Js([var.get('newItem').get('id')]))
            return var.get('processGraph').callprop('getNormalizedGraph')
        PyJs_anonymous_297_._set_name('anonymous')
        var.get('exports').put('insertItemBefore', PyJs_anonymous_297_)
        @Js
        def PyJs_anonymous_298_(graph, value, id, this, arguments, var=var):
            var = Scope({'graph':graph, 'value':value, 'id':id, 'this':this, 'arguments':arguments}, var)
            var.registers(['newItem', 'value', 'item', 'newGraph', 'processGraph', 'graph', 'id', '_a'])
            var.put('_a', var.get('__read')(var.get('exports').callprop('addItem', var.get('graph'), var.get('value')), Js(2.0)))
            var.put('newGraph', var.get('_a').get('0'))
            var.put('newItem', var.get('_a').get('1'))
            var.put('processGraph', var.get('ProcessGraph_1').get('ProcessGraph').create(var.get('newGraph')))
            var.get('processGraph').callprop('calReverseRefs')
            var.put('item', var.get('processGraph').callprop('get', var.get('id')))
            if var.get('item').get('next'):
                @Js
                def PyJs_anonymous_299_(next, this, arguments, var=var):
                    var = Scope({'next':next, 'this':this, 'arguments':arguments}, var)
                    var.registers(['next'])
                    @Js
                    def PyJs_anonymous_300_(dep, this, arguments, var=var):
                        var = Scope({'dep':dep, 'this':this, 'arguments':arguments}, var)
                        var.registers(['dep'])
                        return PyJsStrictNeq(var.get('dep'),var.get('id'))
                    PyJs_anonymous_300_._set_name('anonymous')
                    var.get('next').put('before', var.get('__spread')(var.get('next').get('before').callprop('filter', PyJs_anonymous_300_), Js([var.get('newItem').get('id')])))
                PyJs_anonymous_299_._set_name('anonymous')
                var.get('item').get('next').callprop('forEach', PyJs_anonymous_299_)
            var.get('newItem').put('before', Js([var.get('id')]))
            return var.get('processGraph').callprop('getNormalizedGraph')
        PyJs_anonymous_298_._set_name('anonymous')
        var.get('exports').put('insertItemAfter', PyJs_anonymous_298_)
    PyJs_anonymous_262_._set_name('anonymous')
    @Js
    def PyJs_anonymous_301_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['has', 'isForced', 'require', 'normalize', 'ASYNC_ITERATOR_PROTOTYPE', 'exports', 'setAggressivenessLevel', 'isArray', 'module', 'shared', 'data', 'USE_FUNCTION_CONSTRUCTOR'])
        var.put('has', var.get('require')(Js('./internals/has')))
        var.put('isArray', var.get('require')(Js('./internals/is-array')))
        var.put('isForced', var.get('require')(Js('./internals/is-forced')))
        var.put('shared', var.get('require')(Js('./internals/shared-store')))
        var.put('data', var.get('isForced').get('data'))
        var.put('normalize', var.get('isForced').get('normalize'))
        var.put('USE_FUNCTION_CONSTRUCTOR', Js('USE_FUNCTION_CONSTRUCTOR'))
        var.put('ASYNC_ITERATOR_PROTOTYPE', Js('AsyncIteratorPrototype'))
        @Js
        def PyJs_anonymous_302_(object, constant, this, arguments, var=var):
            var = Scope({'object':object, 'constant':constant, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'constant', 'object'])
            if var.get('isArray')(var.get('object')):
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('object').get('length')):
                    try:
                        var.get('data').put(var.get('normalize')(var.get('object').get(var.get('i'))), var.get('constant'))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        PyJs_anonymous_302_._set_name('anonymous')
        var.put('setAggressivenessLevel', PyJs_anonymous_302_)
        @Js
        def PyJs_anonymous_303_(options, this, arguments, var=var):
            var = Scope({'options':options, 'this':this, 'arguments':arguments}, var)
            var.registers(['options'])
            if (var.get('options',throw=False).typeof()==Js('object')):
                var.get('setAggressivenessLevel')(var.get('options').get('useNative'), var.get('isForced').get('NATIVE'))
                var.get('setAggressivenessLevel')(var.get('options').get('usePolyfill'), var.get('isForced').get('POLYFILL'))
                var.get('setAggressivenessLevel')(var.get('options').get('useFeatureDetection'), var.get(u"null"))
                if var.get('has')(var.get('options'), var.get('USE_FUNCTION_CONSTRUCTOR')):
                    var.get('shared').put(var.get('USE_FUNCTION_CONSTRUCTOR'), var.get('options').get(var.get('USE_FUNCTION_CONSTRUCTOR')).neg().neg())
                if var.get('has')(var.get('options'), var.get('ASYNC_ITERATOR_PROTOTYPE')):
                    var.get('shared').put(var.get('USE_FUNCTION_CONSTRUCTOR'), var.get('options').get(var.get('ASYNC_ITERATOR_PROTOTYPE')))
        PyJs_anonymous_303_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_303_)
    PyJs_anonymous_301_._set_name('anonymous')
    @Js
    def PyJs_anonymous_304_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'path', 'exports'])
        var.get('require')(Js('../../modules/es.string.iterator'))
        var.get('require')(Js('../../modules/es.array.from'))
        var.get('require')(Js('../../modules/es.array.is-array'))
        var.get('require')(Js('../../modules/es.array.of'))
        var.get('require')(Js('../../modules/es.array.concat'))
        var.get('require')(Js('../../modules/es.array.copy-within'))
        var.get('require')(Js('../../modules/es.array.every'))
        var.get('require')(Js('../../modules/es.array.fill'))
        var.get('require')(Js('../../modules/es.array.filter'))
        var.get('require')(Js('../../modules/es.array.find'))
        var.get('require')(Js('../../modules/es.array.find-index'))
        var.get('require')(Js('../../modules/es.array.flat'))
        var.get('require')(Js('../../modules/es.array.flat-map'))
        var.get('require')(Js('../../modules/es.array.for-each'))
        var.get('require')(Js('../../modules/es.array.includes'))
        var.get('require')(Js('../../modules/es.array.index-of'))
        var.get('require')(Js('../../modules/es.array.iterator'))
        var.get('require')(Js('../../modules/es.array.join'))
        var.get('require')(Js('../../modules/es.array.last-index-of'))
        var.get('require')(Js('../../modules/es.array.map'))
        var.get('require')(Js('../../modules/es.array.reduce'))
        var.get('require')(Js('../../modules/es.array.reduce-right'))
        var.get('require')(Js('../../modules/es.array.reverse'))
        var.get('require')(Js('../../modules/es.array.slice'))
        var.get('require')(Js('../../modules/es.array.some'))
        var.get('require')(Js('../../modules/es.array.sort'))
        var.get('require')(Js('../../modules/es.array.species'))
        var.get('require')(Js('../../modules/es.array.splice'))
        var.get('require')(Js('../../modules/es.array.unscopables.flat'))
        var.get('require')(Js('../../modules/es.array.unscopables.flat-map'))
        var.put('path', var.get('require')(Js('../../internals/path')))
        var.get('module').put('exports', var.get('path').get('Array'))
    PyJs_anonymous_304_._set_name('anonymous')
    @Js
    def PyJs_anonymous_305_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'path', 'exports'])
        var.get('require')(Js('../../modules/es.symbol'))
        var.get('require')(Js('../../modules/es.object.assign'))
        var.get('require')(Js('../../modules/es.object.create'))
        var.get('require')(Js('../../modules/es.object.define-property'))
        var.get('require')(Js('../../modules/es.object.define-properties'))
        var.get('require')(Js('../../modules/es.object.entries'))
        var.get('require')(Js('../../modules/es.object.freeze'))
        var.get('require')(Js('../../modules/es.object.from-entries'))
        var.get('require')(Js('../../modules/es.object.get-own-property-descriptor'))
        var.get('require')(Js('../../modules/es.object.get-own-property-descriptors'))
        var.get('require')(Js('../../modules/es.object.get-own-property-names'))
        var.get('require')(Js('../../modules/es.object.get-prototype-of'))
        var.get('require')(Js('../../modules/es.object.is'))
        var.get('require')(Js('../../modules/es.object.is-extensible'))
        var.get('require')(Js('../../modules/es.object.is-frozen'))
        var.get('require')(Js('../../modules/es.object.is-sealed'))
        var.get('require')(Js('../../modules/es.object.keys'))
        var.get('require')(Js('../../modules/es.object.prevent-extensions'))
        var.get('require')(Js('../../modules/es.object.seal'))
        var.get('require')(Js('../../modules/es.object.set-prototype-of'))
        var.get('require')(Js('../../modules/es.object.values'))
        var.get('require')(Js('../../modules/es.object.to-string'))
        var.get('require')(Js('../../modules/es.object.define-getter'))
        var.get('require')(Js('../../modules/es.object.define-setter'))
        var.get('require')(Js('../../modules/es.object.lookup-getter'))
        var.get('require')(Js('../../modules/es.object.lookup-setter'))
        var.get('require')(Js('../../modules/es.json.to-string-tag'))
        var.get('require')(Js('../../modules/es.math.to-string-tag'))
        var.get('require')(Js('../../modules/es.reflect.to-string-tag'))
        var.put('path', var.get('require')(Js('../../internals/path')))
        var.get('module').put('exports', var.get('path').get('Object'))
    PyJs_anonymous_305_._set_name('anonymous')
    @Js
    def PyJs_anonymous_306_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'exports'])
        @Js
        def PyJs_anonymous_307_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            if (var.get('it',throw=False).typeof()!=Js('function')):
                PyJsTempException = JsToPyException(var.get('TypeError')((var.get('String')(var.get('it'))+Js(' is not a function'))))
                raise PyJsTempException
            return var.get('it')
        PyJs_anonymous_307_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_307_)
    PyJs_anonymous_306_._set_name('anonymous')
    @Js
    def PyJs_anonymous_308_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'isObject', 'require', 'exports'])
        var.put('isObject', var.get('require')(Js('../internals/is-object')))
        @Js
        def PyJs_anonymous_309_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            if (var.get('isObject')(var.get('it')).neg() and PyJsStrictNeq(var.get('it'),var.get(u"null"))):
                PyJsTempException = JsToPyException(var.get('TypeError')(((Js("Can't set ")+var.get('String')(var.get('it')))+Js(' as a prototype'))))
                raise PyJsTempException
            return var.get('it')
        PyJs_anonymous_309_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_309_)
    PyJs_anonymous_308_._set_name('anonymous')
    @Js
    def PyJs_anonymous_310_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'ArrayPrototype', 'UNSCOPABLES', 'definePropertyModule', 'exports', 'wellKnownSymbol', 'module', 'create'])
        var.put('wellKnownSymbol', var.get('require')(Js('../internals/well-known-symbol')))
        var.put('create', var.get('require')(Js('../internals/object-create')))
        var.put('definePropertyModule', var.get('require')(Js('../internals/object-define-property')))
        var.put('UNSCOPABLES', var.get('wellKnownSymbol')(Js('unscopables')))
        var.put('ArrayPrototype', var.get('Array').get('prototype'))
        if (var.get('ArrayPrototype').get(var.get('UNSCOPABLES'))==var.get('undefined')):
            var.get('definePropertyModule').callprop('f', var.get('ArrayPrototype'), var.get('UNSCOPABLES'), Js({'configurable':Js(True),'value':var.get('create')(var.get(u"null"))}))
        @Js
        def PyJs_anonymous_311_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
            var.registers(['key'])
            var.get('ArrayPrototype').get(var.get('UNSCOPABLES')).put(var.get('key'), Js(True))
        PyJs_anonymous_311_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_311_)
    PyJs_anonymous_310_._set_name('anonymous')
    @Js
    def PyJs_anonymous_312_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'isObject', 'require', 'exports'])
        var.put('isObject', var.get('require')(Js('../internals/is-object')))
        @Js
        def PyJs_anonymous_313_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            if var.get('isObject')(var.get('it')).neg():
                PyJsTempException = JsToPyException(var.get('TypeError')((var.get('String')(var.get('it'))+Js(' is not an object'))))
                raise PyJsTempException
            return var.get('it')
        PyJs_anonymous_313_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_313_)
    PyJs_anonymous_312_._set_name('anonymous')
    @Js
    def PyJs_anonymous_314_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['min', 'require', 'toAbsoluteIndex', 'exports', 'module', 'toObject', 'toLength'])
        Js('use strict')
        var.put('toObject', var.get('require')(Js('../internals/to-object')))
        var.put('toAbsoluteIndex', var.get('require')(Js('../internals/to-absolute-index')))
        var.put('toLength', var.get('require')(Js('../internals/to-length')))
        var.put('min', var.get('Math').get('min'))
        @Js
        def PyJs_copyWithin_315_(target, start, this, arguments, var=var):
            var = Scope({'target':target, 'start':start, 'this':this, 'arguments':arguments, 'copyWithin':PyJs_copyWithin_315_}, var)
            var.registers(['O', 'start', 'from', 'len', 'end', 'inc', 'target', 'count', 'to'])
            var.put('O', var.get('toObject')(var.get(u"this")))
            var.put('len', var.get('toLength')(var.get('O').get('length')))
            var.put('to', var.get('toAbsoluteIndex')(var.get('target'), var.get('len')))
            var.put('from', var.get('toAbsoluteIndex')(var.get('start'), var.get('len')))
            var.put('end', (var.get('arguments').get('2') if (var.get('arguments').get('length')>Js(2.0)) else var.get('undefined')))
            var.put('count', var.get('min')(((var.get('len') if PyJsStrictEq(var.get('end'),var.get('undefined')) else var.get('toAbsoluteIndex')(var.get('end'), var.get('len')))-var.get('from')), (var.get('len')-var.get('to'))))
            var.put('inc', Js(1.0))
            if ((var.get('from')<var.get('to')) and (var.get('to')<(var.get('from')+var.get('count')))):
                var.put('inc', (-Js(1.0)))
                var.put('from', (var.get('count')-Js(1.0)), '+')
                var.put('to', (var.get('count')-Js(1.0)), '+')
            while ((var.put('count',Js(var.get('count').to_number())-Js(1))+Js(1))>Js(0.0)):
                if var.get('O').contains(var.get('from')):
                    var.get('O').put(var.get('to'), var.get('O').get(var.get('from')))
                else:
                    var.get('O').delete(var.get('to'))
                var.put('to', var.get('inc'), '+')
                var.put('from', var.get('inc'), '+')
            return var.get('O')
        PyJs_copyWithin_315_._set_name('copyWithin')
        var.get('module').put('exports', (Js([]).get('copyWithin') or PyJs_copyWithin_315_))
    PyJs_anonymous_314_._set_name('anonymous')
    @Js
    def PyJs_anonymous_316_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toAbsoluteIndex', 'exports', 'module', 'toObject', 'toLength'])
        Js('use strict')
        var.put('toObject', var.get('require')(Js('../internals/to-object')))
        var.put('toAbsoluteIndex', var.get('require')(Js('../internals/to-absolute-index')))
        var.put('toLength', var.get('require')(Js('../internals/to-length')))
        @Js
        def PyJs_fill_317_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments, 'fill':PyJs_fill_317_}, var)
            var.registers(['O', 'value', 'end', 'length', 'index', 'argumentsLength', 'endPos'])
            var.put('O', var.get('toObject')(var.get(u"this")))
            var.put('length', var.get('toLength')(var.get('O').get('length')))
            var.put('argumentsLength', var.get('arguments').get('length'))
            var.put('index', var.get('toAbsoluteIndex')((var.get('arguments').get('1') if (var.get('argumentsLength')>Js(1.0)) else var.get('undefined')), var.get('length')))
            var.put('end', (var.get('arguments').get('2') if (var.get('argumentsLength')>Js(2.0)) else var.get('undefined')))
            var.put('endPos', (var.get('length') if PyJsStrictEq(var.get('end'),var.get('undefined')) else var.get('toAbsoluteIndex')(var.get('end'), var.get('length'))))
            while (var.get('endPos')>var.get('index')):
                var.get('O').put((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1)), var.get('value'))
            return var.get('O')
        PyJs_fill_317_._set_name('fill')
        var.get('module').put('exports', PyJs_fill_317_)
    PyJs_anonymous_316_._set_name('anonymous')
    @Js
    def PyJs_anonymous_318_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['STRICT_METHOD', 'require', 'USES_TO_LENGTH', 'exports', '$forEach', 'arrayMethodUsesToLength', 'module', 'arrayMethodIsStrict'])
        Js('use strict')
        var.put('$forEach', var.get('require')(Js('../internals/array-iteration')).get('forEach'))
        var.put('arrayMethodIsStrict', var.get('require')(Js('../internals/array-method-is-strict')))
        var.put('arrayMethodUsesToLength', var.get('require')(Js('../internals/array-method-uses-to-length')))
        var.put('STRICT_METHOD', var.get('arrayMethodIsStrict')(Js('forEach')))
        var.put('USES_TO_LENGTH', var.get('arrayMethodUsesToLength')(Js('forEach')))
        @Js
        def PyJs_forEach_319_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'forEach':PyJs_forEach_319_}, var)
            var.registers(['callbackfn'])
            return var.get('$forEach')(var.get(u"this"), var.get('callbackfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
        PyJs_forEach_319_._set_name('forEach')
        var.get('module').put('exports', (PyJs_forEach_319_ if (var.get('STRICT_METHOD').neg() or var.get('USES_TO_LENGTH').neg()) else Js([]).get('forEach')))
    PyJs_anonymous_318_._set_name('anonymous')
    @Js
    def PyJs_anonymous_320_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['callWithSafeIterationClosing', 'isArrayIteratorMethod', 'require', 'getIteratorMethod', 'bind', 'exports', 'module', 'toObject', 'createProperty', 'toLength'])
        Js('use strict')
        var.put('bind', var.get('require')(Js('../internals/function-bind-context')))
        var.put('toObject', var.get('require')(Js('../internals/to-object')))
        var.put('callWithSafeIterationClosing', var.get('require')(Js('../internals/call-with-safe-iteration-closing')))
        var.put('isArrayIteratorMethod', var.get('require')(Js('../internals/is-array-iterator-method')))
        var.put('toLength', var.get('require')(Js('../internals/to-length')))
        var.put('createProperty', var.get('require')(Js('../internals/create-property')))
        var.put('getIteratorMethod', var.get('require')(Js('../internals/get-iterator-method')))
        @Js
        def PyJs_InlineNonPyName_321_(arrayLike, this, arguments, var=var):
            var = Scope({'arrayLike':arrayLike, 'this':this, 'arguments':arguments, 'from':PyJs_InlineNonPyName_321_}, var)
            var.registers(['iterator', 'mapfn', 'O', 'result', 'iteratorMethod', 'step', 'value', 'C', 'length', 'index', 'arrayLike', 'next', 'mapping', 'argumentsLength'])
            var.put('O', var.get('toObject')(var.get('arrayLike')))
            var.put('C', (var.get(u"this") if (var.get(u"this",throw=False).typeof()==Js('function')) else var.get('Array')))
            var.put('argumentsLength', var.get('arguments').get('length'))
            var.put('mapfn', (var.get('arguments').get('1') if (var.get('argumentsLength')>Js(1.0)) else var.get('undefined')))
            var.put('mapping', PyJsStrictNeq(var.get('mapfn'),var.get('undefined')))
            var.put('iteratorMethod', var.get('getIteratorMethod')(var.get('O')))
            var.put('index', Js(0.0))
            pass
            if var.get('mapping'):
                var.put('mapfn', var.get('bind')(var.get('mapfn'), (var.get('arguments').get('2') if (var.get('argumentsLength')>Js(2.0)) else var.get('undefined')), Js(2.0)))
            if ((var.get('iteratorMethod')!=var.get('undefined')) and ((var.get('C')==var.get('Array')) and var.get('isArrayIteratorMethod')(var.get('iteratorMethod'))).neg()):
                var.put('iterator', var.get('iteratorMethod').callprop('call', var.get('O')))
                var.put('next', var.get('iterator').get('next'))
                var.put('result', var.get('C').create())
                #for JS loop
                
                while var.put('step', var.get('next').callprop('call', var.get('iterator'))).get('done').neg():
                    try:
                        var.put('value', (var.get('callWithSafeIterationClosing')(var.get('iterator'), var.get('mapfn'), Js([var.get('step').get('value'), var.get('index')]), Js(True)) if var.get('mapping') else var.get('step').get('value')))
                        var.get('createProperty')(var.get('result'), var.get('index'), var.get('value'))
                    finally:
                            (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
            else:
                var.put('length', var.get('toLength')(var.get('O').get('length')))
                var.put('result', var.get('C').create(var.get('length')))
                #for JS loop
                
                while (var.get('length')>var.get('index')):
                    try:
                        var.put('value', (var.get('mapfn')(var.get('O').get(var.get('index')), var.get('index')) if var.get('mapping') else var.get('O').get(var.get('index'))))
                        var.get('createProperty')(var.get('result'), var.get('index'), var.get('value'))
                    finally:
                            (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
            var.get('result').put('length', var.get('index'))
            return var.get('result')
        PyJs_InlineNonPyName_321_._set_name('from')
        var.get('module').put('exports', PyJs_InlineNonPyName_321_)
    PyJs_anonymous_320_._set_name('anonymous')
    @Js
    def PyJs_anonymous_322_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'createMethod', 'toAbsoluteIndex', 'toIndexedObject', 'exports', 'module', 'toLength'])
        var.put('toIndexedObject', var.get('require')(Js('../internals/to-indexed-object')))
        var.put('toLength', var.get('require')(Js('../internals/to-length')))
        var.put('toAbsoluteIndex', var.get('require')(Js('../internals/to-absolute-index')))
        @Js
        def PyJs_anonymous_323_(IS_INCLUDES, this, arguments, var=var):
            var = Scope({'IS_INCLUDES':IS_INCLUDES, 'this':this, 'arguments':arguments}, var)
            var.registers(['IS_INCLUDES'])
            @Js
            def PyJs_anonymous_324_(PyJsArg_2474686973_, el, fromIndex, this, arguments, var=var):
                var = Scope({'$this':PyJsArg_2474686973_, 'el':el, 'fromIndex':fromIndex, 'this':this, 'arguments':arguments}, var)
                var.registers(['value', 'O', 'fromIndex', 'length', 'index', '$this', 'el'])
                var.put('O', var.get('toIndexedObject')(var.get('$this')))
                var.put('length', var.get('toLength')(var.get('O').get('length')))
                var.put('index', var.get('toAbsoluteIndex')(var.get('fromIndex'), var.get('length')))
                pass
                if (var.get('IS_INCLUDES') and (var.get('el')!=var.get('el'))):
                    while (var.get('length')>var.get('index')):
                        var.put('value', var.get('O').get((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))))
                        if (var.get('value')!=var.get('value')):
                            return Js(True)
                else:
                    #for JS loop
                    
                    while (var.get('length')>var.get('index')):
                        try:
                            if ((var.get('IS_INCLUDES') or var.get('O').contains(var.get('index'))) and PyJsStrictEq(var.get('O').get(var.get('index')),var.get('el'))):
                                return ((var.get('IS_INCLUDES') or var.get('index')) or Js(0.0))
                        finally:
                                (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
                return (var.get('IS_INCLUDES').neg() and (-Js(1.0)))
            PyJs_anonymous_324_._set_name('anonymous')
            return PyJs_anonymous_324_
        PyJs_anonymous_323_._set_name('anonymous')
        var.put('createMethod', PyJs_anonymous_323_)
        var.get('module').put('exports', Js({'includes':var.get('createMethod')(Js(True)),'indexOf':var.get('createMethod')(Js(False))}))
    PyJs_anonymous_322_._set_name('anonymous')
    @Js
    def PyJs_anonymous_325_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'createMethod', 'push', 'arraySpeciesCreate', 'bind', 'exports', 'module', 'toObject', 'IndexedObject', 'toLength'])
        var.put('bind', var.get('require')(Js('../internals/function-bind-context')))
        var.put('IndexedObject', var.get('require')(Js('../internals/indexed-object')))
        var.put('toObject', var.get('require')(Js('../internals/to-object')))
        var.put('toLength', var.get('require')(Js('../internals/to-length')))
        var.put('arraySpeciesCreate', var.get('require')(Js('../internals/array-species-create')))
        var.put('push', Js([]).get('push'))
        @Js
        def PyJs_anonymous_326_(TYPE, this, arguments, var=var):
            var = Scope({'TYPE':TYPE, 'this':this, 'arguments':arguments}, var)
            var.registers(['IS_SOME', 'TYPE', 'IS_FILTER', 'IS_EVERY', 'NO_HOLES', 'IS_MAP', 'IS_FILTER_OUT', 'IS_FIND_INDEX'])
            var.put('IS_MAP', (var.get('TYPE')==Js(1.0)))
            var.put('IS_FILTER', (var.get('TYPE')==Js(2.0)))
            var.put('IS_SOME', (var.get('TYPE')==Js(3.0)))
            var.put('IS_EVERY', (var.get('TYPE')==Js(4.0)))
            var.put('IS_FIND_INDEX', (var.get('TYPE')==Js(6.0)))
            var.put('IS_FILTER_OUT', (var.get('TYPE')==Js(7.0)))
            var.put('NO_HOLES', ((var.get('TYPE')==Js(5.0)) or var.get('IS_FIND_INDEX')))
            @Js
            def PyJs_anonymous_327_(PyJsArg_2474686973_, callbackfn, that, specificCreate, this, arguments, var=var):
                var = Scope({'$this':PyJsArg_2474686973_, 'callbackfn':callbackfn, 'that':that, 'specificCreate':specificCreate, 'this':this, 'arguments':arguments}, var)
                var.registers(['self', 'callbackfn', 'result', 'O', 'value', 'length', 'index', 'that', 'boundFunction', 'specificCreate', 'create', 'target', '$this'])
                var.put('O', var.get('toObject')(var.get('$this')))
                var.put('self', var.get('IndexedObject')(var.get('O')))
                var.put('boundFunction', var.get('bind')(var.get('callbackfn'), var.get('that'), Js(3.0)))
                var.put('length', var.get('toLength')(var.get('self').get('length')))
                var.put('index', Js(0.0))
                var.put('create', (var.get('specificCreate') or var.get('arraySpeciesCreate')))
                var.put('target', (var.get('create')(var.get('$this'), var.get('length')) if var.get('IS_MAP') else (var.get('create')(var.get('$this'), Js(0.0)) if (var.get('IS_FILTER') or var.get('IS_FILTER_OUT')) else var.get('undefined'))))
                pass
                #for JS loop
                
                while (var.get('length')>var.get('index')):
                    try:
                        if (var.get('NO_HOLES') or var.get('self').contains(var.get('index'))):
                            var.put('value', var.get('self').get(var.get('index')))
                            var.put('result', var.get('boundFunction')(var.get('value'), var.get('index'), var.get('O')))
                            if var.get('TYPE'):
                                if var.get('IS_MAP'):
                                    var.get('target').put(var.get('index'), var.get('result'))
                                else:
                                    if var.get('result'):
                                        while 1:
                                            SWITCHED = False
                                            CONDITION = (var.get('TYPE'))
                                            if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                                                SWITCHED = True
                                                return Js(True)
                                            if SWITCHED or PyJsStrictEq(CONDITION, Js(5.0)):
                                                SWITCHED = True
                                                return var.get('value')
                                            if SWITCHED or PyJsStrictEq(CONDITION, Js(6.0)):
                                                SWITCHED = True
                                                return var.get('index')
                                            if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                                                SWITCHED = True
                                                var.get('push').callprop('call', var.get('target'), var.get('value'))
                                            SWITCHED = True
                                            break
                                    else:
                                        while 1:
                                            SWITCHED = False
                                            CONDITION = (var.get('TYPE'))
                                            if SWITCHED or PyJsStrictEq(CONDITION, Js(4.0)):
                                                SWITCHED = True
                                                return Js(False)
                                            if SWITCHED or PyJsStrictEq(CONDITION, Js(7.0)):
                                                SWITCHED = True
                                                var.get('push').callprop('call', var.get('target'), var.get('value'))
                                            SWITCHED = True
                                            break
                    finally:
                            (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
                return ((-Js(1.0)) if var.get('IS_FIND_INDEX') else (var.get('IS_EVERY') if (var.get('IS_SOME') or var.get('IS_EVERY')) else var.get('target')))
            PyJs_anonymous_327_._set_name('anonymous')
            return PyJs_anonymous_327_
        PyJs_anonymous_326_._set_name('anonymous')
        var.put('createMethod', PyJs_anonymous_326_)
        var.get('module').put('exports', Js({'forEach':var.get('createMethod')(Js(0.0)),'map':var.get('createMethod')(Js(1.0)),'filter':var.get('createMethod')(Js(2.0)),'some':var.get('createMethod')(Js(3.0)),'every':var.get('createMethod')(Js(4.0)),'find':var.get('createMethod')(Js(5.0)),'findIndex':var.get('createMethod')(Js(6.0)),'filterOut':var.get('createMethod')(Js(7.0))}))
    PyJs_anonymous_325_._set_name('anonymous')
    @Js
    def PyJs_anonymous_328_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['STRICT_METHOD', 'min', 'require', 'USES_TO_LENGTH', 'FORCED', 'NEGATIVE_ZERO', 'toIndexedObject', 'nativeLastIndexOf', 'exports', 'arrayMethodUsesToLength', 'module', 'toInteger', 'arrayMethodIsStrict', 'toLength'])
        Js('use strict')
        var.put('toIndexedObject', var.get('require')(Js('../internals/to-indexed-object')))
        var.put('toInteger', var.get('require')(Js('../internals/to-integer')))
        var.put('toLength', var.get('require')(Js('../internals/to-length')))
        var.put('arrayMethodIsStrict', var.get('require')(Js('../internals/array-method-is-strict')))
        var.put('arrayMethodUsesToLength', var.get('require')(Js('../internals/array-method-uses-to-length')))
        var.put('min', var.get('Math').get('min'))
        var.put('nativeLastIndexOf', Js([]).get('lastIndexOf'))
        var.put('NEGATIVE_ZERO', (var.get('nativeLastIndexOf').neg().neg() and ((Js(1.0)/Js([Js(1.0)]).callprop('lastIndexOf', Js(1.0), (-Js(0.0))))<Js(0.0))))
        var.put('STRICT_METHOD', var.get('arrayMethodIsStrict')(Js('lastIndexOf')))
        var.put('USES_TO_LENGTH', var.get('arrayMethodUsesToLength')(Js('indexOf'), Js({'ACCESSORS':Js(True),'1':Js(0.0)})))
        var.put('FORCED', ((var.get('NEGATIVE_ZERO') or var.get('STRICT_METHOD').neg()) or var.get('USES_TO_LENGTH').neg()))
        @Js
        def PyJs_lastIndexOf_329_(searchElement, this, arguments, var=var):
            var = Scope({'searchElement':searchElement, 'this':this, 'arguments':arguments, 'lastIndexOf':PyJs_lastIndexOf_329_}, var)
            var.registers(['searchElement', 'O', 'length', 'index'])
            if var.get('NEGATIVE_ZERO'):
                return (var.get('nativeLastIndexOf').callprop('apply', var.get(u"this"), var.get('arguments')) or Js(0.0))
            var.put('O', var.get('toIndexedObject')(var.get(u"this")))
            var.put('length', var.get('toLength')(var.get('O').get('length')))
            var.put('index', (var.get('length')-Js(1.0)))
            if (var.get('arguments').get('length')>Js(1.0)):
                var.put('index', var.get('min')(var.get('index'), var.get('toInteger')(var.get('arguments').get('1'))))
            if (var.get('index')<Js(0.0)):
                var.put('index', (var.get('length')+var.get('index')))
            #for JS loop
            
            while (var.get('index')>=Js(0.0)):
                try:
                    if (var.get('O').contains(var.get('index')) and PyJsStrictEq(var.get('O').get(var.get('index')),var.get('searchElement'))):
                        return (var.get('index') or Js(0.0))
                finally:
                        (var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1))
            return (-Js(1.0))
        PyJs_lastIndexOf_329_._set_name('lastIndexOf')
        var.get('module').put('exports', (PyJs_lastIndexOf_329_ if var.get('FORCED') else var.get('nativeLastIndexOf')))
    PyJs_anonymous_328_._set_name('anonymous')
    @Js
    def PyJs_anonymous_330_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['SPECIES', 'require', 'fails', 'V8_VERSION', 'exports', 'wellKnownSymbol', 'module'])
        var.put('fails', var.get('require')(Js('../internals/fails')))
        var.put('wellKnownSymbol', var.get('require')(Js('../internals/well-known-symbol')))
        var.put('V8_VERSION', var.get('require')(Js('../internals/engine-v8-version')))
        var.put('SPECIES', var.get('wellKnownSymbol')(Js('species')))
        @Js
        def PyJs_anonymous_331_(METHOD_NAME, this, arguments, var=var):
            var = Scope({'METHOD_NAME':METHOD_NAME, 'this':this, 'arguments':arguments}, var)
            var.registers(['METHOD_NAME'])
            @Js
            def PyJs_anonymous_332_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['array', 'constructor'])
                var.put('array', Js([]))
                var.put('constructor', var.get('array').put('constructor', Js({})))
                @Js
                def PyJs_anonymous_333_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return Js({'foo':Js(1.0)})
                PyJs_anonymous_333_._set_name('anonymous')
                var.get('constructor').put(var.get('SPECIES'), PyJs_anonymous_333_)
                return PyJsStrictNeq(var.get('array').callprop(var.get('METHOD_NAME'), var.get('Boolean')).get('foo'),Js(1.0))
            PyJs_anonymous_332_._set_name('anonymous')
            return ((var.get('V8_VERSION')>=Js(51.0)) or var.get('fails')(PyJs_anonymous_332_).neg())
        PyJs_anonymous_331_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_331_)
    PyJs_anonymous_330_._set_name('anonymous')
    @Js
    def PyJs_anonymous_334_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'fails', 'exports'])
        Js('use strict')
        var.put('fails', var.get('require')(Js('../internals/fails')))
        @Js
        def PyJs_anonymous_335_(METHOD_NAME, argument, this, arguments, var=var):
            var = Scope({'METHOD_NAME':METHOD_NAME, 'argument':argument, 'this':this, 'arguments':arguments}, var)
            var.registers(['argument', 'METHOD_NAME', 'method'])
            var.put('method', Js([]).get(var.get('METHOD_NAME')))
            @Js
            def PyJs_anonymous_336_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                @Js
                def PyJs_anonymous_337_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    PyJsTempException = JsToPyException(Js(1.0))
                    raise PyJsTempException
                PyJs_anonymous_337_._set_name('anonymous')
                var.get('method').callprop('call', var.get(u"null"), (var.get('argument') or PyJs_anonymous_337_), Js(1.0))
            PyJs_anonymous_336_._set_name('anonymous')
            return (var.get('method').neg().neg() and var.get('fails')(PyJs_anonymous_336_))
        PyJs_anonymous_335_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_335_)
    PyJs_anonymous_334_._set_name('anonymous')
    @Js
    def PyJs_anonymous_338_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['has', 'fails', 'require', 'exports', 'DESCRIPTORS', 'cache', 'thrower', 'module', 'defineProperty'])
        var.put('DESCRIPTORS', var.get('require')(Js('../internals/descriptors')))
        var.put('fails', var.get('require')(Js('../internals/fails')))
        var.put('has', var.get('require')(Js('../internals/has')))
        var.put('defineProperty', var.get('Object').get('defineProperty'))
        var.put('cache', Js({}))
        @Js
        def PyJs_anonymous_339_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            PyJsTempException = JsToPyException(var.get('it'))
            raise PyJsTempException
        PyJs_anonymous_339_._set_name('anonymous')
        var.put('thrower', PyJs_anonymous_339_)
        @Js
        def PyJs_anonymous_340_(METHOD_NAME, options, this, arguments, var=var):
            var = Scope({'METHOD_NAME':METHOD_NAME, 'options':options, 'this':this, 'arguments':arguments}, var)
            var.registers(['options', 'ACCESSORS', 'METHOD_NAME', 'method', 'argument0', 'argument1'])
            if var.get('has')(var.get('cache'), var.get('METHOD_NAME')):
                return var.get('cache').get(var.get('METHOD_NAME'))
            if var.get('options').neg():
                var.put('options', Js({}))
            var.put('method', Js([]).get(var.get('METHOD_NAME')))
            var.put('ACCESSORS', (var.get('options').get('ACCESSORS') if var.get('has')(var.get('options'), Js('ACCESSORS')) else Js(False)))
            var.put('argument0', (var.get('options').get('0') if var.get('has')(var.get('options'), Js(0.0)) else var.get('thrower')))
            var.put('argument1', (var.get('options').get('1') if var.get('has')(var.get('options'), Js(1.0)) else var.get('undefined')))
            @Js
            def PyJs_anonymous_341_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['O'])
                if (var.get('ACCESSORS') and var.get('DESCRIPTORS').neg()):
                    return Js(True)
                var.put('O', Js({'length':(-Js(1.0))}))
                if var.get('ACCESSORS'):
                    var.get('defineProperty')(var.get('O'), Js(1.0), Js({'enumerable':Js(True),'get':var.get('thrower')}))
                else:
                    var.get('O').put('1', Js(1.0))
                var.get('method').callprop('call', var.get('O'), var.get('argument0'), var.get('argument1'))
            PyJs_anonymous_341_._set_name('anonymous')
            return var.get('cache').put(var.get('METHOD_NAME'), (var.get('method').neg().neg() and var.get('fails')(PyJs_anonymous_341_).neg()))
        PyJs_anonymous_340_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_340_)
    PyJs_anonymous_338_._set_name('anonymous')
    @Js
    def PyJs_anonymous_342_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'createMethod', 'aFunction', 'exports', 'module', 'toObject', 'IndexedObject', 'toLength'])
        var.put('aFunction', var.get('require')(Js('../internals/a-function')))
        var.put('toObject', var.get('require')(Js('../internals/to-object')))
        var.put('IndexedObject', var.get('require')(Js('../internals/indexed-object')))
        var.put('toLength', var.get('require')(Js('../internals/to-length')))
        @Js
        def PyJs_anonymous_343_(IS_RIGHT, this, arguments, var=var):
            var = Scope({'IS_RIGHT':IS_RIGHT, 'this':this, 'arguments':arguments}, var)
            var.registers(['IS_RIGHT'])
            @Js
            def PyJs_anonymous_344_(that, callbackfn, argumentsLength, memo, this, arguments, var=var):
                var = Scope({'that':that, 'callbackfn':callbackfn, 'argumentsLength':argumentsLength, 'memo':memo, 'this':this, 'arguments':arguments}, var)
                var.registers(['self', 'callbackfn', 'O', 'i', 'length', 'index', 'that', 'memo', 'argumentsLength'])
                var.get('aFunction')(var.get('callbackfn'))
                var.put('O', var.get('toObject')(var.get('that')))
                var.put('self', var.get('IndexedObject')(var.get('O')))
                var.put('length', var.get('toLength')(var.get('O').get('length')))
                var.put('index', ((var.get('length')-Js(1.0)) if var.get('IS_RIGHT') else Js(0.0)))
                var.put('i', ((-Js(1.0)) if var.get('IS_RIGHT') else Js(1.0)))
                if (var.get('argumentsLength')<Js(2.0)):
                    while Js(True):
                        if var.get('self').contains(var.get('index')):
                            var.put('memo', var.get('self').get(var.get('index')))
                            var.put('index', var.get('i'), '+')
                            break
                        var.put('index', var.get('i'), '+')
                        if ((var.get('index')<Js(0.0)) if var.get('IS_RIGHT') else (var.get('length')<=var.get('index'))):
                            PyJsTempException = JsToPyException(var.get('TypeError')(Js('Reduce of empty array with no initial value')))
                            raise PyJsTempException
                #for JS loop
                
                while ((var.get('index')>=Js(0.0)) if var.get('IS_RIGHT') else (var.get('length')>var.get('index'))):
                    try:
                        if var.get('self').contains(var.get('index')):
                            var.put('memo', var.get('callbackfn')(var.get('memo'), var.get('self').get(var.get('index')), var.get('index'), var.get('O')))
                    finally:
                            var.put('index', var.get('i'), '+')
                return var.get('memo')
            PyJs_anonymous_344_._set_name('anonymous')
            return PyJs_anonymous_344_
        PyJs_anonymous_343_._set_name('anonymous')
        var.put('createMethod', PyJs_anonymous_343_)
        var.get('module').put('exports', Js({'left':var.get('createMethod')(Js(False)),'right':var.get('createMethod')(Js(True))}))
    PyJs_anonymous_342_._set_name('anonymous')
    @Js
    def PyJs_anonymous_345_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['SPECIES', 'require', 'exports', 'wellKnownSymbol', 'isArray', 'module', 'isObject'])
        var.put('isObject', var.get('require')(Js('../internals/is-object')))
        var.put('isArray', var.get('require')(Js('../internals/is-array')))
        var.put('wellKnownSymbol', var.get('require')(Js('../internals/well-known-symbol')))
        var.put('SPECIES', var.get('wellKnownSymbol')(Js('species')))
        @Js
        def PyJs_anonymous_346_(originalArray, length, this, arguments, var=var):
            var = Scope({'originalArray':originalArray, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['C', 'length', 'originalArray'])
            pass
            if var.get('isArray')(var.get('originalArray')):
                var.put('C', var.get('originalArray').get('constructor'))
                if ((var.get('C',throw=False).typeof()==Js('function')) and (PyJsStrictEq(var.get('C'),var.get('Array')) or var.get('isArray')(var.get('C').get('prototype')))):
                    var.put('C', var.get('undefined'))
                else:
                    if var.get('isObject')(var.get('C')):
                        var.put('C', var.get('C').get(var.get('SPECIES')))
                        if PyJsStrictEq(var.get('C'),var.get(u"null")):
                            var.put('C', var.get('undefined'))
            return (var.get('Array') if PyJsStrictEq(var.get('C'),var.get('undefined')) else var.get('C')).create((Js(0.0) if PyJsStrictEq(var.get('length'),Js(0.0)) else var.get('length')))
        PyJs_anonymous_346_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_346_)
    PyJs_anonymous_345_._set_name('anonymous')
    @Js
    def PyJs_anonymous_347_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'anObject', 'exports', 'iteratorClose', 'module'])
        var.put('anObject', var.get('require')(Js('../internals/an-object')))
        var.put('iteratorClose', var.get('require')(Js('../internals/iterator-close')))
        @Js
        def PyJs_anonymous_348_(iterator, fn, value, ENTRIES, this, arguments, var=var):
            var = Scope({'iterator':iterator, 'fn':fn, 'value':value, 'ENTRIES':ENTRIES, 'this':this, 'arguments':arguments}, var)
            var.registers(['iterator', 'ENTRIES', 'value', 'fn'])
            try:
                return (var.get('fn')(var.get('anObject')(var.get('value')).get('0'), var.get('value').get('1')) if var.get('ENTRIES') else var.get('fn')(var.get('value')))
            except PyJsException as PyJsTempException:
                PyJsHolder_6572726f72_70153279 = var.own.get('error')
                var.force_own_put('error', PyExceptionToJs(PyJsTempException))
                try:
                    var.get('iteratorClose')(var.get('iterator'))
                    PyJsTempException = JsToPyException(var.get('error'))
                    raise PyJsTempException
                finally:
                    if PyJsHolder_6572726f72_70153279 is not None:
                        var.own['error'] = PyJsHolder_6572726f72_70153279
                    else:
                        del var.own['error']
                    del PyJsHolder_6572726f72_70153279
        PyJs_anonymous_348_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_348_)
    PyJs_anonymous_347_._set_name('anonymous')
    @Js
    def PyJs_anonymous_349_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'called', 'iteratorWithReturn', 'exports', 'wellKnownSymbol', 'SAFE_CLOSING', 'module', 'ITERATOR'])
        var.put('wellKnownSymbol', var.get('require')(Js('../internals/well-known-symbol')))
        var.put('ITERATOR', var.get('wellKnownSymbol')(Js('iterator')))
        var.put('SAFE_CLOSING', Js(False))
        try:
            var.put('called', Js(0.0))
            @Js
            def PyJs_anonymous_350_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return Js({'done':(var.put('called',Js(var.get('called').to_number())+Js(1))-Js(1)).neg().neg()})
            PyJs_anonymous_350_._set_name('anonymous')
            @Js
            def PyJs_anonymous_351_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.put('SAFE_CLOSING', Js(True))
            PyJs_anonymous_351_._set_name('anonymous')
            var.put('iteratorWithReturn', Js({'next':PyJs_anonymous_350_,'return':PyJs_anonymous_351_}))
            @Js
            def PyJs_anonymous_352_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return var.get(u"this")
            PyJs_anonymous_352_._set_name('anonymous')
            var.get('iteratorWithReturn').put(var.get('ITERATOR'), PyJs_anonymous_352_)
            @Js
            def PyJs_anonymous_353_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                PyJsTempException = JsToPyException(Js(2.0))
                raise PyJsTempException
            PyJs_anonymous_353_._set_name('anonymous')
            var.get('Array').callprop('from', var.get('iteratorWithReturn'), PyJs_anonymous_353_)
        except PyJsException as PyJsTempException:
            PyJsHolder_6572726f72_78080754 = var.own.get('error')
            var.force_own_put('error', PyExceptionToJs(PyJsTempException))
            try:
                pass
            finally:
                if PyJsHolder_6572726f72_78080754 is not None:
                    var.own['error'] = PyJsHolder_6572726f72_78080754
                else:
                    del var.own['error']
                del PyJsHolder_6572726f72_78080754
        @Js
        def PyJs_anonymous_354_(exec, SKIP_CLOSING, this, arguments, var=var):
            var = Scope({'exec':exec, 'SKIP_CLOSING':SKIP_CLOSING, 'this':this, 'arguments':arguments}, var)
            var.registers(['exec', 'object', 'SKIP_CLOSING', 'ITERATION_SUPPORT'])
            if (var.get('SKIP_CLOSING').neg() and var.get('SAFE_CLOSING').neg()):
                return Js(False)
            var.put('ITERATION_SUPPORT', Js(False))
            try:
                var.put('object', Js({}))
                @Js
                def PyJs_anonymous_355_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    @Js
                    def PyJs_anonymous_356_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return Js({'done':var.put('ITERATION_SUPPORT', Js(True))})
                    PyJs_anonymous_356_._set_name('anonymous')
                    return Js({'next':PyJs_anonymous_356_})
                PyJs_anonymous_355_._set_name('anonymous')
                var.get('object').put(var.get('ITERATOR'), PyJs_anonymous_355_)
                var.get('exec')(var.get('object'))
            except PyJsException as PyJsTempException:
                PyJsHolder_6572726f72_74649778 = var.own.get('error')
                var.force_own_put('error', PyExceptionToJs(PyJsTempException))
                try:
                    pass
                finally:
                    if PyJsHolder_6572726f72_74649778 is not None:
                        var.own['error'] = PyJsHolder_6572726f72_74649778
                    else:
                        del var.own['error']
                    del PyJsHolder_6572726f72_74649778
            return var.get('ITERATION_SUPPORT')
        PyJs_anonymous_354_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_354_)
    PyJs_anonymous_349_._set_name('anonymous')
    @Js
    def PyJs_anonymous_357_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'module', 'require', 'toString'])
        var.put('toString', Js({}).get('toString'))
        @Js
        def PyJs_anonymous_358_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return var.get('toString').callprop('call', var.get('it')).callprop('slice', Js(8.0), (-Js(1.0)))
        PyJs_anonymous_358_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_358_)
    PyJs_anonymous_357_._set_name('anonymous')
    @Js
    def PyJs_anonymous_359_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['CORRECT_ARGUMENTS', 'require', 'classofRaw', 'TO_STRING_TAG', 'exports', 'wellKnownSymbol', 'module', 'tryGet', 'TO_STRING_TAG_SUPPORT'])
        var.put('TO_STRING_TAG_SUPPORT', var.get('require')(Js('../internals/to-string-tag-support')))
        var.put('classofRaw', var.get('require')(Js('../internals/classof-raw')))
        var.put('wellKnownSymbol', var.get('require')(Js('../internals/well-known-symbol')))
        var.put('TO_STRING_TAG', var.get('wellKnownSymbol')(Js('toStringTag')))
        @Js
        def PyJs_anonymous_360_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('arguments')
        PyJs_anonymous_360_._set_name('anonymous')
        var.put('CORRECT_ARGUMENTS', (var.get('classofRaw')(PyJs_anonymous_360_())==Js('Arguments')))
        @Js
        def PyJs_anonymous_361_(it, key, this, arguments, var=var):
            var = Scope({'it':it, 'key':key, 'this':this, 'arguments':arguments}, var)
            var.registers(['key', 'it'])
            try:
                return var.get('it').get(var.get('key'))
            except PyJsException as PyJsTempException:
                PyJsHolder_6572726f72_71151946 = var.own.get('error')
                var.force_own_put('error', PyExceptionToJs(PyJsTempException))
                try:
                    pass
                finally:
                    if PyJsHolder_6572726f72_71151946 is not None:
                        var.own['error'] = PyJsHolder_6572726f72_71151946
                    else:
                        del var.own['error']
                    del PyJsHolder_6572726f72_71151946
        PyJs_anonymous_361_._set_name('anonymous')
        var.put('tryGet', PyJs_anonymous_361_)
        @Js
        def PyJs_anonymous_362_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['result', 'O', 'tag', 'it'])
            pass
            def PyJs_LONG_363_(var=var):
                return (var.get('tag') if (var.put('tag', var.get('tryGet')(var.put('O', var.get('Object')(var.get('it'))), var.get('TO_STRING_TAG'))).typeof()==Js('string')) else (var.get('classofRaw')(var.get('O')) if var.get('CORRECT_ARGUMENTS') else (Js('Arguments') if ((var.put('result', var.get('classofRaw')(var.get('O')))==Js('Object')) and (var.get('O').get('callee').typeof()==Js('function'))) else var.get('result'))))
            return (Js('Undefined') if PyJsStrictEq(var.get('it'),var.get('undefined')) else (Js('Null') if PyJsStrictEq(var.get('it'),var.get(u"null")) else PyJs_LONG_363_()))
        PyJs_anonymous_362_._set_name('anonymous')
        var.get('module').put('exports', (var.get('classofRaw') if var.get('TO_STRING_TAG_SUPPORT') else PyJs_anonymous_362_))
    PyJs_anonymous_359_._set_name('anonymous')
    @Js
    def PyJs_anonymous_364_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['has', 'require', 'ownKeys', 'definePropertyModule', 'exports', 'module', 'getOwnPropertyDescriptorModule'])
        var.put('has', var.get('require')(Js('../internals/has')))
        var.put('ownKeys', var.get('require')(Js('../internals/own-keys')))
        var.put('getOwnPropertyDescriptorModule', var.get('require')(Js('../internals/object-get-own-property-descriptor')))
        var.put('definePropertyModule', var.get('require')(Js('../internals/object-define-property')))
        @Js
        def PyJs_anonymous_365_(target, source, this, arguments, var=var):
            var = Scope({'target':target, 'source':source, 'this':this, 'arguments':arguments}, var)
            var.registers(['keys', 'i', 'getOwnPropertyDescriptor', 'source', 'target', 'key', 'defineProperty'])
            var.put('keys', var.get('ownKeys')(var.get('source')))
            var.put('defineProperty', var.get('definePropertyModule').get('f'))
            var.put('getOwnPropertyDescriptor', var.get('getOwnPropertyDescriptorModule').get('f'))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('keys').get('length')):
                try:
                    var.put('key', var.get('keys').get(var.get('i')))
                    if var.get('has')(var.get('target'), var.get('key')).neg():
                        var.get('defineProperty')(var.get('target'), var.get('key'), var.get('getOwnPropertyDescriptor')(var.get('source'), var.get('key')))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        PyJs_anonymous_365_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_365_)
    PyJs_anonymous_364_._set_name('anonymous')
    @Js
    def PyJs_anonymous_366_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'fails', 'exports'])
        var.put('fails', var.get('require')(Js('../internals/fails')))
        @Js
        def PyJs_anonymous_367_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['F'])
            @Js
            def PyJsHoisted_F_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                pass
            PyJsHoisted_F_.func_name = 'F'
            var.put('F', PyJsHoisted_F_)
            pass
            var.get('F').get('prototype').put('constructor', var.get(u"null"))
            return PyJsStrictNeq(var.get('Object').callprop('getPrototypeOf', var.get('F').create()),var.get('F').get('prototype'))
        PyJs_anonymous_367_._set_name('anonymous')
        var.get('module').put('exports', var.get('fails')(PyJs_anonymous_367_).neg())
    PyJs_anonymous_366_._set_name('anonymous')
    @Js
    def PyJs_anonymous_368_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['IteratorPrototype', 'Iterators', 'require', 'setToStringTag', 'exports', 'createPropertyDescriptor', 'module', 'create', 'returnThis'])
        Js('use strict')
        var.put('IteratorPrototype', var.get('require')(Js('../internals/iterators-core')).get('IteratorPrototype'))
        var.put('create', var.get('require')(Js('../internals/object-create')))
        var.put('createPropertyDescriptor', var.get('require')(Js('../internals/create-property-descriptor')))
        var.put('setToStringTag', var.get('require')(Js('../internals/set-to-string-tag')))
        var.put('Iterators', var.get('require')(Js('../internals/iterators')))
        @Js
        def PyJs_anonymous_369_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get(u"this")
        PyJs_anonymous_369_._set_name('anonymous')
        var.put('returnThis', PyJs_anonymous_369_)
        @Js
        def PyJs_anonymous_370_(IteratorConstructor, NAME, next, this, arguments, var=var):
            var = Scope({'IteratorConstructor':IteratorConstructor, 'NAME':NAME, 'next':next, 'this':this, 'arguments':arguments}, var)
            var.registers(['next', 'IteratorConstructor', 'NAME', 'TO_STRING_TAG'])
            var.put('TO_STRING_TAG', (var.get('NAME')+Js(' Iterator')))
            var.get('IteratorConstructor').put('prototype', var.get('create')(var.get('IteratorPrototype'), Js({'next':var.get('createPropertyDescriptor')(Js(1.0), var.get('next'))})))
            var.get('setToStringTag')(var.get('IteratorConstructor'), var.get('TO_STRING_TAG'), Js(False), Js(True))
            var.get('Iterators').put(var.get('TO_STRING_TAG'), var.get('returnThis'))
            return var.get('IteratorConstructor')
        PyJs_anonymous_370_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_370_)
    PyJs_anonymous_368_._set_name('anonymous')
    @Js
    def PyJs_anonymous_371_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'definePropertyModule', 'exports', 'DESCRIPTORS', 'createPropertyDescriptor', 'module'])
        var.put('DESCRIPTORS', var.get('require')(Js('../internals/descriptors')))
        var.put('definePropertyModule', var.get('require')(Js('../internals/object-define-property')))
        var.put('createPropertyDescriptor', var.get('require')(Js('../internals/create-property-descriptor')))
        @Js
        def PyJs_anonymous_372_(object, key, value, this, arguments, var=var):
            var = Scope({'object':object, 'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['object', 'value', 'key'])
            return var.get('definePropertyModule').callprop('f', var.get('object'), var.get('key'), var.get('createPropertyDescriptor')(Js(1.0), var.get('value')))
        PyJs_anonymous_372_._set_name('anonymous')
        @Js
        def PyJs_anonymous_373_(object, key, value, this, arguments, var=var):
            var = Scope({'object':object, 'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['object', 'value', 'key'])
            var.get('object').put(var.get('key'), var.get('value'))
            return var.get('object')
        PyJs_anonymous_373_._set_name('anonymous')
        var.get('module').put('exports', (PyJs_anonymous_372_ if var.get('DESCRIPTORS') else PyJs_anonymous_373_))
    PyJs_anonymous_371_._set_name('anonymous')
    @Js
    def PyJs_anonymous_374_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'exports'])
        @Js
        def PyJs_anonymous_375_(bitmap, value, this, arguments, var=var):
            var = Scope({'bitmap':bitmap, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['bitmap', 'value'])
            return Js({'enumerable':(var.get('bitmap')&Js(1.0)).neg(),'configurable':(var.get('bitmap')&Js(2.0)).neg(),'writable':(var.get('bitmap')&Js(4.0)).neg(),'value':var.get('value')})
        PyJs_anonymous_375_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_375_)
    PyJs_anonymous_374_._set_name('anonymous')
    @Js
    def PyJs_anonymous_376_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'definePropertyModule', 'toPrimitive', 'createPropertyDescriptor', 'exports', 'module'])
        Js('use strict')
        var.put('toPrimitive', var.get('require')(Js('../internals/to-primitive')))
        var.put('definePropertyModule', var.get('require')(Js('../internals/object-define-property')))
        var.put('createPropertyDescriptor', var.get('require')(Js('../internals/create-property-descriptor')))
        @Js
        def PyJs_anonymous_377_(object, key, value, this, arguments, var=var):
            var = Scope({'object':object, 'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['object', 'value', 'propertyKey', 'key'])
            var.put('propertyKey', var.get('toPrimitive')(var.get('key')))
            if var.get('object').contains(var.get('propertyKey')):
                var.get('definePropertyModule').callprop('f', var.get('object'), var.get('propertyKey'), var.get('createPropertyDescriptor')(Js(0.0), var.get('value')))
            else:
                var.get('object').put(var.get('propertyKey'), var.get('value'))
        PyJs_anonymous_377_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_377_)
    PyJs_anonymous_376_._set_name('anonymous')
    @Js
    def PyJs_anonymous_378_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['setPrototypeOf', 'module', 'getPrototypeOf', 'ENTRIES', 'redefine', 'Iterators', '$', 'BUGGY_SAFARI_ITERATORS', 'require', 'setToStringTag', 'VALUES', 'IteratorsCore', 'returnThis', 'KEYS', 'wellKnownSymbol', 'createIteratorConstructor', 'IS_PURE', 'IteratorPrototype', 'exports', 'createNonEnumerableProperty', 'ITERATOR'])
        Js('use strict')
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('createIteratorConstructor', var.get('require')(Js('../internals/create-iterator-constructor')))
        var.put('getPrototypeOf', var.get('require')(Js('../internals/object-get-prototype-of')))
        var.put('setPrototypeOf', var.get('require')(Js('../internals/object-set-prototype-of')))
        var.put('setToStringTag', var.get('require')(Js('../internals/set-to-string-tag')))
        var.put('createNonEnumerableProperty', var.get('require')(Js('../internals/create-non-enumerable-property')))
        var.put('redefine', var.get('require')(Js('../internals/redefine')))
        var.put('wellKnownSymbol', var.get('require')(Js('../internals/well-known-symbol')))
        var.put('IS_PURE', var.get('require')(Js('../internals/is-pure')))
        var.put('Iterators', var.get('require')(Js('../internals/iterators')))
        var.put('IteratorsCore', var.get('require')(Js('../internals/iterators-core')))
        var.put('IteratorPrototype', var.get('IteratorsCore').get('IteratorPrototype'))
        var.put('BUGGY_SAFARI_ITERATORS', var.get('IteratorsCore').get('BUGGY_SAFARI_ITERATORS'))
        var.put('ITERATOR', var.get('wellKnownSymbol')(Js('iterator')))
        var.put('KEYS', Js('keys'))
        var.put('VALUES', Js('values'))
        var.put('ENTRIES', Js('entries'))
        @Js
        def PyJs_anonymous_379_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get(u"this")
        PyJs_anonymous_379_._set_name('anonymous')
        var.put('returnThis', PyJs_anonymous_379_)
        @Js
        def PyJs_anonymous_380_(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED, this, arguments, var=var):
            var = Scope({'Iterable':Iterable, 'NAME':NAME, 'IteratorConstructor':IteratorConstructor, 'next':next, 'DEFAULT':DEFAULT, 'IS_SET':IS_SET, 'FORCED':FORCED, 'this':this, 'arguments':arguments}, var)
            var.registers(['IterablePrototype', 'methods', 'IS_SET', 'nativeIterator', 'KEY', 'defaultIterator', 'NAME', 'IteratorConstructor', 'FORCED', 'CurrentIteratorPrototype', 'TO_STRING_TAG', 'INCORRECT_VALUES_NAME', 'next', 'getIterationMethod', 'DEFAULT', 'anyNativeIterator', 'Iterable'])
            var.get('createIteratorConstructor')(var.get('IteratorConstructor'), var.get('NAME'), var.get('next'))
            @Js
            def PyJs_anonymous_381_(KIND, this, arguments, var=var):
                var = Scope({'KIND':KIND, 'this':this, 'arguments':arguments}, var)
                var.registers(['KIND'])
                if (PyJsStrictEq(var.get('KIND'),var.get('DEFAULT')) and var.get('defaultIterator')):
                    return var.get('defaultIterator')
                if (var.get('BUGGY_SAFARI_ITERATORS').neg() and var.get('IterablePrototype').contains(var.get('KIND'))):
                    return var.get('IterablePrototype').get(var.get('KIND'))
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get('KIND'))
                    if SWITCHED or PyJsStrictEq(CONDITION, var.get('KEYS')):
                        SWITCHED = True
                        @Js
                        def PyJs_keys_382_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'keys':PyJs_keys_382_}, var)
                            var.registers([])
                            return var.get('IteratorConstructor').create(var.get(u"this"), var.get('KIND'))
                        PyJs_keys_382_._set_name('keys')
                        return PyJs_keys_382_
                    if SWITCHED or PyJsStrictEq(CONDITION, var.get('VALUES')):
                        SWITCHED = True
                        @Js
                        def PyJs_values_383_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'values':PyJs_values_383_}, var)
                            var.registers([])
                            return var.get('IteratorConstructor').create(var.get(u"this"), var.get('KIND'))
                        PyJs_values_383_._set_name('values')
                        return PyJs_values_383_
                    if SWITCHED or PyJsStrictEq(CONDITION, var.get('ENTRIES')):
                        SWITCHED = True
                        @Js
                        def PyJs_entries_384_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'entries':PyJs_entries_384_}, var)
                            var.registers([])
                            return var.get('IteratorConstructor').create(var.get(u"this"), var.get('KIND'))
                        PyJs_entries_384_._set_name('entries')
                        return PyJs_entries_384_
                    SWITCHED = True
                    break
                @Js
                def PyJs_anonymous_385_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return var.get('IteratorConstructor').create(var.get(u"this"))
                PyJs_anonymous_385_._set_name('anonymous')
                return PyJs_anonymous_385_
            PyJs_anonymous_381_._set_name('anonymous')
            var.put('getIterationMethod', PyJs_anonymous_381_)
            var.put('TO_STRING_TAG', (var.get('NAME')+Js(' Iterator')))
            var.put('INCORRECT_VALUES_NAME', Js(False))
            var.put('IterablePrototype', var.get('Iterable').get('prototype'))
            var.put('nativeIterator', ((var.get('IterablePrototype').get(var.get('ITERATOR')) or var.get('IterablePrototype').get('@@iterator')) or (var.get('DEFAULT') and var.get('IterablePrototype').get(var.get('DEFAULT')))))
            var.put('defaultIterator', ((var.get('BUGGY_SAFARI_ITERATORS').neg() and var.get('nativeIterator')) or var.get('getIterationMethod')(var.get('DEFAULT'))))
            var.put('anyNativeIterator', ((var.get('IterablePrototype').get('entries') or var.get('nativeIterator')) if (var.get('NAME')==Js('Array')) else var.get('nativeIterator')))
            pass
            if var.get('anyNativeIterator'):
                var.put('CurrentIteratorPrototype', var.get('getPrototypeOf')(var.get('anyNativeIterator').callprop('call', var.get('Iterable').create())))
                if (PyJsStrictNeq(var.get('IteratorPrototype'),var.get('Object').get('prototype')) and var.get('CurrentIteratorPrototype').get('next')):
                    if (var.get('IS_PURE').neg() and PyJsStrictNeq(var.get('getPrototypeOf')(var.get('CurrentIteratorPrototype')),var.get('IteratorPrototype'))):
                        if var.get('setPrototypeOf'):
                            var.get('setPrototypeOf')(var.get('CurrentIteratorPrototype'), var.get('IteratorPrototype'))
                        else:
                            if (var.get('CurrentIteratorPrototype').get(var.get('ITERATOR')).typeof()!=Js('function')):
                                var.get('createNonEnumerableProperty')(var.get('CurrentIteratorPrototype'), var.get('ITERATOR'), var.get('returnThis'))
                    var.get('setToStringTag')(var.get('CurrentIteratorPrototype'), var.get('TO_STRING_TAG'), Js(True), Js(True))
                    if var.get('IS_PURE'):
                        var.get('Iterators').put(var.get('TO_STRING_TAG'), var.get('returnThis'))
            if (((var.get('DEFAULT')==var.get('VALUES')) and var.get('nativeIterator')) and PyJsStrictNeq(var.get('nativeIterator').get('name'),var.get('VALUES'))):
                var.put('INCORRECT_VALUES_NAME', Js(True))
                @Js
                def PyJs_values_386_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'values':PyJs_values_386_}, var)
                    var.registers([])
                    return var.get('nativeIterator').callprop('call', var.get(u"this"))
                PyJs_values_386_._set_name('values')
                var.put('defaultIterator', PyJs_values_386_)
            if ((var.get('IS_PURE').neg() or var.get('FORCED')) and PyJsStrictNeq(var.get('IterablePrototype').get(var.get('ITERATOR')),var.get('defaultIterator'))):
                var.get('createNonEnumerableProperty')(var.get('IterablePrototype'), var.get('ITERATOR'), var.get('defaultIterator'))
            var.get('Iterators').put(var.get('NAME'), var.get('defaultIterator'))
            if var.get('DEFAULT'):
                var.put('methods', Js({'values':var.get('getIterationMethod')(var.get('VALUES')),'keys':(var.get('defaultIterator') if var.get('IS_SET') else var.get('getIterationMethod')(var.get('KEYS'))),'entries':var.get('getIterationMethod')(var.get('ENTRIES'))}))
                if var.get('FORCED'):
                    for PyJsTemp in var.get('methods'):
                        var.put('KEY', PyJsTemp)
                        if ((var.get('BUGGY_SAFARI_ITERATORS') or var.get('INCORRECT_VALUES_NAME')) or var.get('IterablePrototype').contains(var.get('KEY')).neg()):
                            var.get('redefine')(var.get('IterablePrototype'), var.get('KEY'), var.get('methods').get(var.get('KEY')))
                else:
                    var.get('$')(Js({'target':var.get('NAME'),'proto':Js(True),'forced':(var.get('BUGGY_SAFARI_ITERATORS') or var.get('INCORRECT_VALUES_NAME'))}), var.get('methods'))
            return var.get('methods')
        PyJs_anonymous_380_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_380_)
    PyJs_anonymous_378_._set_name('anonymous')
    @Js
    def PyJs_anonymous_387_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['has', 'require', 'path', 'exports', 'wrappedWellKnownSymbolModule', 'module', 'defineProperty'])
        var.put('path', var.get('require')(Js('../internals/path')))
        var.put('has', var.get('require')(Js('../internals/has')))
        var.put('wrappedWellKnownSymbolModule', var.get('require')(Js('../internals/well-known-symbol-wrapped')))
        var.put('defineProperty', var.get('require')(Js('../internals/object-define-property')).get('f'))
        @Js
        def PyJs_anonymous_388_(NAME, this, arguments, var=var):
            var = Scope({'NAME':NAME, 'this':this, 'arguments':arguments}, var)
            var.registers(['Symbol', 'NAME'])
            var.put('Symbol', (var.get('path').get('Symbol') or var.get('path').put('Symbol', Js({}))))
            if var.get('has')(var.get('Symbol'), var.get('NAME')).neg():
                var.get('defineProperty')(var.get('Symbol'), var.get('NAME'), Js({'value':var.get('wrappedWellKnownSymbolModule').callprop('f', var.get('NAME'))}))
        PyJs_anonymous_388_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_388_)
    PyJs_anonymous_387_._set_name('anonymous')
    @Js
    def PyJs_anonymous_389_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'fails', 'exports'])
        var.put('fails', var.get('require')(Js('../internals/fails')))
        @Js
        def PyJs_anonymous_390_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_anonymous_391_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return Js(7.0)
            PyJs_anonymous_391_._set_name('anonymous')
            return (var.get('Object').callprop('defineProperty', Js({}), Js(1.0), Js({'get':PyJs_anonymous_391_})).get('1')!=Js(7.0))
        PyJs_anonymous_390_._set_name('anonymous')
        var.get('module').put('exports', var.get('fails')(PyJs_anonymous_390_).neg())
    PyJs_anonymous_389_._set_name('anonymous')
    @Js
    def PyJs_anonymous_392_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'EXISTS', 'exports', 'document', 'module', 'global', 'isObject'])
        var.put('global', var.get('require')(Js('../internals/global')))
        var.put('isObject', var.get('require')(Js('../internals/is-object')))
        var.put('document', var.get('global').get('document'))
        var.put('EXISTS', (var.get('isObject')(var.get('document')) and var.get('isObject')(var.get('document').get('createElement'))))
        @Js
        def PyJs_anonymous_393_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return (var.get('document').callprop('createElement', var.get('it')) if var.get('EXISTS') else Js({}))
        PyJs_anonymous_393_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_393_)
    PyJs_anonymous_392_._set_name('anonymous')
    @Js
    def PyJs_anonymous_394_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'classof', 'exports', 'module', 'global'])
        var.put('classof', var.get('require')(Js('../internals/classof-raw')))
        var.put('global', var.get('require')(Js('../internals/global')))
        var.get('module').put('exports', (var.get('classof')(var.get('global').get('process'))==Js('process')))
    PyJs_anonymous_394_._set_name('anonymous')
    @Js
    def PyJs_anonymous_395_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'getBuiltIn', 'exports'])
        var.put('getBuiltIn', var.get('require')(Js('../internals/get-built-in')))
        var.get('module').put('exports', (var.get('getBuiltIn')(Js('navigator'), Js('userAgent')) or Js('')))
    PyJs_anonymous_395_._set_name('anonymous')
    @Js
    def PyJs_anonymous_396_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'versions', 'exports', 'process', 'v8', 'match', 'userAgent', 'global', 'version', 'module'])
        var.put('global', var.get('require')(Js('../internals/global')))
        var.put('userAgent', var.get('require')(Js('../internals/engine-user-agent')))
        var.put('process', var.get('global').get('process'))
        var.put('versions', (var.get('process') and var.get('process').get('versions')))
        var.put('v8', (var.get('versions') and var.get('versions').get('v8')))
        pass
        if var.get('v8'):
            var.put('match', var.get('v8').callprop('split', Js('.')))
            var.put('version', (var.get('match').get('0')+var.get('match').get('1')))
        else:
            if var.get('userAgent'):
                var.put('match', var.get('userAgent').callprop('match', JsRegExp('/Edge\\/(\\d+)/')))
                if (var.get('match').neg() or (var.get('match').get('1')>=Js(74.0))):
                    var.put('match', var.get('userAgent').callprop('match', JsRegExp('/Chrome\\/(\\d+)/')))
                    if var.get('match'):
                        var.put('version', var.get('match').get('1'))
        var.get('module').put('exports', (var.get('version') and (+var.get('version'))))
    PyJs_anonymous_396_._set_name('anonymous')
    @Js
    def PyJs_anonymous_397_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'exports'])
        var.get('module').put('exports', Js([Js('constructor'), Js('hasOwnProperty'), Js('isPrototypeOf'), Js('propertyIsEnumerable'), Js('toLocaleString'), Js('toString'), Js('valueOf')]))
    PyJs_anonymous_397_._set_name('anonymous')
    @Js
    def PyJs_anonymous_398_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['isForced', 'require', 'setGlobal', 'copyConstructorProperties', 'getOwnPropertyDescriptor', 'exports', 'createNonEnumerableProperty', 'module', 'global', 'redefine'])
        var.put('global', var.get('require')(Js('../internals/global')))
        var.put('getOwnPropertyDescriptor', var.get('require')(Js('../internals/object-get-own-property-descriptor')).get('f'))
        var.put('createNonEnumerableProperty', var.get('require')(Js('../internals/create-non-enumerable-property')))
        var.put('redefine', var.get('require')(Js('../internals/redefine')))
        var.put('setGlobal', var.get('require')(Js('../internals/set-global')))
        var.put('copyConstructorProperties', var.get('require')(Js('../internals/copy-constructor-properties')))
        var.put('isForced', var.get('require')(Js('../internals/is-forced')))
        @Js
        def PyJs_anonymous_399_(options, source, this, arguments, var=var):
            var = Scope({'options':options, 'source':source, 'this':this, 'arguments':arguments}, var)
            var.registers(['descriptor', 'options', 'FORCED', 'sourceProperty', 'TARGET', 'targetProperty', 'source', 'target', 'key', 'GLOBAL', 'STATIC'])
            var.put('TARGET', var.get('options').get('target'))
            var.put('GLOBAL', var.get('options').get('global'))
            var.put('STATIC', var.get('options').get('stat'))
            pass
            if var.get('GLOBAL'):
                var.put('target', var.get('global'))
            else:
                if var.get('STATIC'):
                    var.put('target', (var.get('global').get(var.get('TARGET')) or var.get('setGlobal')(var.get('TARGET'), Js({}))))
                else:
                    var.put('target', (var.get('global').get(var.get('TARGET')) or Js({})).get('prototype'))
            if var.get('target'):
                for PyJsTemp in var.get('source'):
                    var.put('key', PyJsTemp)
                    var.put('sourceProperty', var.get('source').get(var.get('key')))
                    if var.get('options').get('noTargetGet'):
                        var.put('descriptor', var.get('getOwnPropertyDescriptor')(var.get('target'), var.get('key')))
                        var.put('targetProperty', (var.get('descriptor') and var.get('descriptor').get('value')))
                    else:
                        var.put('targetProperty', var.get('target').get(var.get('key')))
                    var.put('FORCED', var.get('isForced')((var.get('key') if var.get('GLOBAL') else ((var.get('TARGET')+(Js('.') if var.get('STATIC') else Js('#')))+var.get('key'))), var.get('options').get('forced')))
                    if (var.get('FORCED').neg() and PyJsStrictNeq(var.get('targetProperty'),var.get('undefined'))):
                        if PyJsStrictEq(var.get('sourceProperty',throw=False).typeof(),var.get('targetProperty',throw=False).typeof()):
                            continue
                        var.get('copyConstructorProperties')(var.get('sourceProperty'), var.get('targetProperty'))
                    if (var.get('options').get('sham') or (var.get('targetProperty') and var.get('targetProperty').get('sham'))):
                        var.get('createNonEnumerableProperty')(var.get('sourceProperty'), Js('sham'), Js(True))
                    var.get('redefine')(var.get('target'), var.get('key'), var.get('sourceProperty'), var.get('options'))
        PyJs_anonymous_399_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_399_)
    PyJs_anonymous_398_._set_name('anonymous')
    @Js
    def PyJs_anonymous_400_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'exports'])
        @Js
        def PyJs_anonymous_401_(exec, this, arguments, var=var):
            var = Scope({'exec':exec, 'this':this, 'arguments':arguments}, var)
            var.registers(['exec'])
            try:
                return var.get('exec')().neg().neg()
            except PyJsException as PyJsTempException:
                PyJsHolder_6572726f72_71932026 = var.own.get('error')
                var.force_own_put('error', PyExceptionToJs(PyJsTempException))
                try:
                    return Js(True)
                finally:
                    if PyJsHolder_6572726f72_71932026 is not None:
                        var.own['error'] = PyJsHolder_6572726f72_71932026
                    else:
                        del var.own['error']
                    del PyJsHolder_6572726f72_71932026
        PyJs_anonymous_401_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_401_)
    PyJs_anonymous_400_._set_name('anonymous')
    @Js
    def PyJs_anonymous_402_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'bind', 'exports', 'isArray', 'module', 'toLength', 'flattenIntoArray'])
        Js('use strict')
        var.put('isArray', var.get('require')(Js('../internals/is-array')))
        var.put('toLength', var.get('require')(Js('../internals/to-length')))
        var.put('bind', var.get('require')(Js('../internals/function-bind-context')))
        @Js
        def PyJs_anonymous_403_(target, original, source, sourceLen, start, depth, mapper, thisArg, this, arguments, var=var):
            var = Scope({'target':target, 'original':original, 'source':source, 'sourceLen':sourceLen, 'start':start, 'depth':depth, 'mapper':mapper, 'thisArg':thisArg, 'this':this, 'arguments':arguments}, var)
            var.registers(['depth', 'targetIndex', 'start', 'original', 'element', 'source', 'target', 'mapFn', 'mapper', 'sourceIndex', 'thisArg', 'sourceLen'])
            var.put('targetIndex', var.get('start'))
            var.put('sourceIndex', Js(0.0))
            var.put('mapFn', (var.get('bind')(var.get('mapper'), var.get('thisArg'), Js(3.0)) if var.get('mapper') else Js(False)))
            pass
            while (var.get('sourceIndex')<var.get('sourceLen')):
                if var.get('source').contains(var.get('sourceIndex')):
                    var.put('element', (var.get('mapFn')(var.get('source').get(var.get('sourceIndex')), var.get('sourceIndex'), var.get('original')) if var.get('mapFn') else var.get('source').get(var.get('sourceIndex'))))
                    if ((var.get('depth')>Js(0.0)) and var.get('isArray')(var.get('element'))):
                        var.put('targetIndex', (var.get('flattenIntoArray')(var.get('target'), var.get('original'), var.get('element'), var.get('toLength')(var.get('element').get('length')), var.get('targetIndex'), (var.get('depth')-Js(1.0)))-Js(1.0)))
                    else:
                        if (var.get('targetIndex')>=Js(9007199254740991)):
                            PyJsTempException = JsToPyException(var.get('TypeError')(Js('Exceed the acceptable array length')))
                            raise PyJsTempException
                        var.get('target').put(var.get('targetIndex'), var.get('element'))
                    (var.put('targetIndex',Js(var.get('targetIndex').to_number())+Js(1))-Js(1))
                (var.put('sourceIndex',Js(var.get('sourceIndex').to_number())+Js(1))-Js(1))
            return var.get('targetIndex')
        PyJs_anonymous_403_._set_name('anonymous')
        var.put('flattenIntoArray', PyJs_anonymous_403_)
        var.get('module').put('exports', var.get('flattenIntoArray'))
    PyJs_anonymous_402_._set_name('anonymous')
    @Js
    def PyJs_anonymous_404_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'fails', 'exports'])
        var.put('fails', var.get('require')(Js('../internals/fails')))
        @Js
        def PyJs_anonymous_405_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('Object').callprop('isExtensible', var.get('Object').callprop('preventExtensions', Js({})))
        PyJs_anonymous_405_._set_name('anonymous')
        var.get('module').put('exports', var.get('fails')(PyJs_anonymous_405_).neg())
    PyJs_anonymous_404_._set_name('anonymous')
    @Js
    def PyJs_anonymous_406_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'aFunction', 'require', 'exports'])
        var.put('aFunction', var.get('require')(Js('../internals/a-function')))
        @Js
        def PyJs_anonymous_407_(fn, that, length, this, arguments, var=var):
            var = Scope({'fn':fn, 'that':that, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['length', 'fn', 'that'])
            var.get('aFunction')(var.get('fn'))
            if PyJsStrictEq(var.get('that'),var.get('undefined')):
                return var.get('fn')
            while 1:
                SWITCHED = False
                CONDITION = (var.get('length'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(0.0)):
                    SWITCHED = True
                    @Js
                    def PyJs_anonymous_408_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get('fn').callprop('call', var.get('that'))
                    PyJs_anonymous_408_._set_name('anonymous')
                    return PyJs_anonymous_408_
                if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                    SWITCHED = True
                    @Js
                    def PyJs_anonymous_409_(a, this, arguments, var=var):
                        var = Scope({'a':a, 'this':this, 'arguments':arguments}, var)
                        var.registers(['a'])
                        return var.get('fn').callprop('call', var.get('that'), var.get('a'))
                    PyJs_anonymous_409_._set_name('anonymous')
                    return PyJs_anonymous_409_
                if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                    SWITCHED = True
                    @Js
                    def PyJs_anonymous_410_(a, b, this, arguments, var=var):
                        var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments}, var)
                        var.registers(['b', 'a'])
                        return var.get('fn').callprop('call', var.get('that'), var.get('a'), var.get('b'))
                    PyJs_anonymous_410_._set_name('anonymous')
                    return PyJs_anonymous_410_
                if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                    SWITCHED = True
                    @Js
                    def PyJs_anonymous_411_(a, b, c, this, arguments, var=var):
                        var = Scope({'a':a, 'b':b, 'c':c, 'this':this, 'arguments':arguments}, var)
                        var.registers(['c', 'b', 'a'])
                        return var.get('fn').callprop('call', var.get('that'), var.get('a'), var.get('b'), var.get('c'))
                    PyJs_anonymous_411_._set_name('anonymous')
                    return PyJs_anonymous_411_
                SWITCHED = True
                break
            @Js
            def PyJs_anonymous_412_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return var.get('fn').callprop('apply', var.get('that'), var.get('arguments'))
            PyJs_anonymous_412_._set_name('anonymous')
            return PyJs_anonymous_412_
        PyJs_anonymous_407_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_407_)
    PyJs_anonymous_406_._set_name('anonymous')
    @Js
    def PyJs_anonymous_413_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'aFunction', 'path', 'exports', 'module', 'global'])
        var.put('path', var.get('require')(Js('../internals/path')))
        var.put('global', var.get('require')(Js('../internals/global')))
        @Js
        def PyJs_anonymous_414_(variable, this, arguments, var=var):
            var = Scope({'variable':variable, 'this':this, 'arguments':arguments}, var)
            var.registers(['variable'])
            return (var.get('variable') if (var.get('variable',throw=False).typeof()==Js('function')) else var.get('undefined'))
        PyJs_anonymous_414_._set_name('anonymous')
        var.put('aFunction', PyJs_anonymous_414_)
        @Js
        def PyJs_anonymous_415_(namespace, method, this, arguments, var=var):
            var = Scope({'namespace':namespace, 'method':method, 'this':this, 'arguments':arguments}, var)
            var.registers(['namespace', 'method'])
            def PyJs_LONG_416_(var=var):
                return ((var.get('aFunction')(var.get('path').get(var.get('namespace'))) or var.get('aFunction')(var.get('global').get(var.get('namespace')))) if (var.get('arguments').get('length')<Js(2.0)) else ((var.get('path').get(var.get('namespace')) and var.get('path').get(var.get('namespace')).get(var.get('method'))) or (var.get('global').get(var.get('namespace')) and var.get('global').get(var.get('namespace')).get(var.get('method')))))
            return PyJs_LONG_416_()
        PyJs_anonymous_415_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_415_)
    PyJs_anonymous_413_._set_name('anonymous')
    @Js
    def PyJs_anonymous_417_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['Iterators', 'require', 'classof', 'exports', 'wellKnownSymbol', 'module', 'ITERATOR'])
        var.put('classof', var.get('require')(Js('../internals/classof')))
        var.put('Iterators', var.get('require')(Js('../internals/iterators')))
        var.put('wellKnownSymbol', var.get('require')(Js('../internals/well-known-symbol')))
        var.put('ITERATOR', var.get('wellKnownSymbol')(Js('iterator')))
        @Js
        def PyJs_anonymous_418_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            if (var.get('it')!=var.get('undefined')):
                return ((var.get('it').get(var.get('ITERATOR')) or var.get('it').get('@@iterator')) or var.get('Iterators').get(var.get('classof')(var.get('it'))))
        PyJs_anonymous_418_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_418_)
    PyJs_anonymous_417_._set_name('anonymous')
    @Js
    def PyJs_anonymous_419_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'exports'])
        @Js
        def PyJs_anonymous_420_(PyJsArg_676c6f62616c_, this, arguments, var=var):
            var = Scope({'global':PyJsArg_676c6f62616c_, 'this':this, 'arguments':arguments}, var)
            var.registers(['check', 'global'])
            @Js
            def PyJs_anonymous_421_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
                var.registers(['it'])
                return ((var.get('it') and (var.get('it').get('Math')==var.get('Math'))) and var.get('it'))
            PyJs_anonymous_421_._set_name('anonymous')
            var.put('check', PyJs_anonymous_421_)
            def PyJs_LONG_422_(var=var):
                return (((var.get('check')(((var.get('globalThis',throw=False).typeof()==Js('object')) and var.get('globalThis'))) or var.get('check')(((var.get('window',throw=False).typeof()==Js('object')) and var.get('window')))) or var.get('check')(((var.get('self',throw=False).typeof()==Js('object')) and var.get('self')))) or var.get('check')(((var.get('global',throw=False).typeof()==Js('object')) and var.get('global'))))
            @Js
            def PyJs_anonymous_423_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return var.get(u"this")
            PyJs_anonymous_423_._set_name('anonymous')
            var.get('module').put('exports', ((PyJs_LONG_422_() or PyJs_anonymous_423_()) or var.get('Function')(Js('return this'))()))
        PyJs_anonymous_420_._set_name('anonymous')
        PyJs_anonymous_420_.callprop('call', var.get(u"this"), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else Js({})))))
    PyJs_anonymous_419_._set_name('anonymous')
    @Js
    def PyJs_anonymous_424_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'hasOwnProperty', 'exports'])
        var.put('hasOwnProperty', Js({}).get('hasOwnProperty'))
        @Js
        def PyJs_anonymous_425_(it, key, this, arguments, var=var):
            var = Scope({'it':it, 'key':key, 'this':this, 'arguments':arguments}, var)
            var.registers(['key', 'it'])
            return var.get('hasOwnProperty').callprop('call', var.get('it'), var.get('key'))
        PyJs_anonymous_425_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_425_)
    PyJs_anonymous_424_._set_name('anonymous')
    @Js
    def PyJs_anonymous_426_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'exports'])
        var.get('module').put('exports', Js({}))
    PyJs_anonymous_426_._set_name('anonymous')
    @Js
    def PyJs_anonymous_427_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'getBuiltIn', 'exports'])
        var.put('getBuiltIn', var.get('require')(Js('../internals/get-built-in')))
        var.get('module').put('exports', var.get('getBuiltIn')(Js('document'), Js('documentElement')))
    PyJs_anonymous_427_._set_name('anonymous')
    @Js
    def PyJs_anonymous_428_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'fails', 'createElement', 'exports', 'DESCRIPTORS', 'module'])
        var.put('DESCRIPTORS', var.get('require')(Js('../internals/descriptors')))
        var.put('fails', var.get('require')(Js('../internals/fails')))
        var.put('createElement', var.get('require')(Js('../internals/document-create-element')))
        @Js
        def PyJs_anonymous_429_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_anonymous_430_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return Js(7.0)
            PyJs_anonymous_430_._set_name('anonymous')
            return (var.get('Object').callprop('defineProperty', var.get('createElement')(Js('div')), Js('a'), Js({'get':PyJs_anonymous_430_})).get('a')!=Js(7.0))
        PyJs_anonymous_429_._set_name('anonymous')
        var.get('module').put('exports', (var.get('DESCRIPTORS').neg() and var.get('fails')(PyJs_anonymous_429_).neg()))
    PyJs_anonymous_428_._set_name('anonymous')
    @Js
    def PyJs_anonymous_431_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'fails', 'classof', 'exports', 'module', 'split'])
        var.put('fails', var.get('require')(Js('../internals/fails')))
        var.put('classof', var.get('require')(Js('../internals/classof-raw')))
        var.put('split', Js('').get('split'))
        @Js
        def PyJs_anonymous_432_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return (var.get('split').callprop('call', var.get('it'), Js('')) if (var.get('classof')(var.get('it'))==Js('String')) else var.get('Object')(var.get('it')))
        PyJs_anonymous_432_._set_name('anonymous')
        @Js
        def PyJs_anonymous_433_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('Object')(Js('z')).callprop('propertyIsEnumerable', Js(0.0)).neg()
        PyJs_anonymous_433_._set_name('anonymous')
        var.get('module').put('exports', (PyJs_anonymous_432_ if var.get('fails')(PyJs_anonymous_433_) else var.get('Object')))
    PyJs_anonymous_431_._set_name('anonymous')
    @Js
    def PyJs_anonymous_434_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['functionToString', 'require', 'store', 'exports', 'module'])
        var.put('store', var.get('require')(Js('../internals/shared-store')))
        var.put('functionToString', var.get('Function').get('toString'))
        if (var.get('store').get('inspectSource').typeof()!=Js('function')):
            @Js
            def PyJs_anonymous_435_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
                var.registers(['it'])
                return var.get('functionToString').callprop('call', var.get('it'))
            PyJs_anonymous_435_._set_name('anonymous')
            var.get('store').put('inspectSource', PyJs_anonymous_435_)
        var.get('module').put('exports', var.get('store').get('inspectSource'))
    PyJs_anonymous_434_._set_name('anonymous')
    @Js
    def PyJs_anonymous_436_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['has', 'hiddenKeys', 'require', 'METADATA', 'isExtensible', 'setMetadata', 'getWeakData', 'uid', 'onFreeze', 'module', 'id', 'exports', 'fastKey', 'isObject', 'FREEZING', 'defineProperty', 'meta'])
        var.put('hiddenKeys', var.get('require')(Js('../internals/hidden-keys')))
        var.put('isObject', var.get('require')(Js('../internals/is-object')))
        var.put('has', var.get('require')(Js('../internals/has')))
        var.put('defineProperty', var.get('require')(Js('../internals/object-define-property')).get('f'))
        var.put('uid', var.get('require')(Js('../internals/uid')))
        var.put('FREEZING', var.get('require')(Js('../internals/freezing')))
        var.put('METADATA', var.get('uid')(Js('meta')))
        var.put('id', Js(0.0))
        @Js
        def PyJs_anonymous_437_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return Js(True)
        PyJs_anonymous_437_._set_name('anonymous')
        var.put('isExtensible', (var.get('Object').get('isExtensible') or PyJs_anonymous_437_))
        @Js
        def PyJs_anonymous_438_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            var.get('defineProperty')(var.get('it'), var.get('METADATA'), Js({'value':Js({'objectID':(Js('O')+var.put('id',Js(var.get('id').to_number())+Js(1))),'weakData':Js({})})}))
        PyJs_anonymous_438_._set_name('anonymous')
        var.put('setMetadata', PyJs_anonymous_438_)
        @Js
        def PyJs_anonymous_439_(it, create, this, arguments, var=var):
            var = Scope({'it':it, 'create':create, 'this':this, 'arguments':arguments}, var)
            var.registers(['it', 'create'])
            if var.get('isObject')(var.get('it')).neg():
                return (var.get('it') if (var.get('it',throw=False).typeof()==Js('symbol')) else ((Js('S') if (var.get('it',throw=False).typeof()==Js('string')) else Js('P'))+var.get('it')))
            if var.get('has')(var.get('it'), var.get('METADATA')).neg():
                if var.get('isExtensible')(var.get('it')).neg():
                    return Js('F')
                if var.get('create').neg():
                    return Js('E')
                var.get('setMetadata')(var.get('it'))
            return var.get('it').get(var.get('METADATA')).get('objectID')
        PyJs_anonymous_439_._set_name('anonymous')
        var.put('fastKey', PyJs_anonymous_439_)
        @Js
        def PyJs_anonymous_440_(it, create, this, arguments, var=var):
            var = Scope({'it':it, 'create':create, 'this':this, 'arguments':arguments}, var)
            var.registers(['it', 'create'])
            if var.get('has')(var.get('it'), var.get('METADATA')).neg():
                if var.get('isExtensible')(var.get('it')).neg():
                    return Js(True)
                if var.get('create').neg():
                    return Js(False)
                var.get('setMetadata')(var.get('it'))
            return var.get('it').get(var.get('METADATA')).get('weakData')
        PyJs_anonymous_440_._set_name('anonymous')
        var.put('getWeakData', PyJs_anonymous_440_)
        @Js
        def PyJs_anonymous_441_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            if (((var.get('FREEZING') and var.get('meta').get('REQUIRED')) and var.get('isExtensible')(var.get('it'))) and var.get('has')(var.get('it'), var.get('METADATA')).neg()):
                var.get('setMetadata')(var.get('it'))
            return var.get('it')
        PyJs_anonymous_441_._set_name('anonymous')
        var.put('onFreeze', PyJs_anonymous_441_)
        var.put('meta', var.get('module').put('exports', Js({'REQUIRED':Js(False),'fastKey':var.get('fastKey'),'getWeakData':var.get('getWeakData'),'onFreeze':var.get('onFreeze')})))
        var.get('hiddenKeys').put(var.get('METADATA'), Js(True))
    PyJs_anonymous_436_._set_name('anonymous')
    @Js
    def PyJs_anonymous_442_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['hiddenKeys', 'NATIVE_WEAK_MAP', 'sharedKey', 'store', 'wmget', 'module', 'global', 'require', 'STATE', 'objectHas', 'has', 'set', 'enforce', 'getterFor', 'wmset', 'wmhas', 'shared', 'get', 'exports', 'createNonEnumerableProperty', 'isObject', 'WeakMap'])
        var.put('NATIVE_WEAK_MAP', var.get('require')(Js('../internals/native-weak-map')))
        var.put('global', var.get('require')(Js('../internals/global')))
        var.put('isObject', var.get('require')(Js('../internals/is-object')))
        var.put('createNonEnumerableProperty', var.get('require')(Js('../internals/create-non-enumerable-property')))
        var.put('objectHas', var.get('require')(Js('../internals/has')))
        var.put('shared', var.get('require')(Js('../internals/shared-store')))
        var.put('sharedKey', var.get('require')(Js('../internals/shared-key')))
        var.put('hiddenKeys', var.get('require')(Js('../internals/hidden-keys')))
        var.put('WeakMap', var.get('global').get('WeakMap'))
        pass
        @Js
        def PyJs_anonymous_443_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return (var.get('get')(var.get('it')) if var.get('has')(var.get('it')) else var.get('set')(var.get('it'), Js({})))
        PyJs_anonymous_443_._set_name('anonymous')
        var.put('enforce', PyJs_anonymous_443_)
        @Js
        def PyJs_anonymous_444_(TYPE, this, arguments, var=var):
            var = Scope({'TYPE':TYPE, 'this':this, 'arguments':arguments}, var)
            var.registers(['TYPE'])
            @Js
            def PyJs_anonymous_445_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
                var.registers(['it', 'state'])
                pass
                if (var.get('isObject')(var.get('it')).neg() or PyJsStrictNeq(var.put('state', var.get('get')(var.get('it'))).get('type'),var.get('TYPE'))):
                    PyJsTempException = JsToPyException(var.get('TypeError')(((Js('Incompatible receiver, ')+var.get('TYPE'))+Js(' required'))))
                    raise PyJsTempException
                return var.get('state')
            PyJs_anonymous_445_._set_name('anonymous')
            return PyJs_anonymous_445_
        PyJs_anonymous_444_._set_name('anonymous')
        var.put('getterFor', PyJs_anonymous_444_)
        if var.get('NATIVE_WEAK_MAP'):
            var.put('store', (var.get('shared').get('state') or var.get('shared').put('state', var.get('WeakMap').create())))
            var.put('wmget', var.get('store').get('get'))
            var.put('wmhas', var.get('store').get('has'))
            var.put('wmset', var.get('store').get('set'))
            @Js
            def PyJs_anonymous_446_(it, metadata, this, arguments, var=var):
                var = Scope({'it':it, 'metadata':metadata, 'this':this, 'arguments':arguments}, var)
                var.registers(['it', 'metadata'])
                var.get('metadata').put('facade', var.get('it'))
                var.get('wmset').callprop('call', var.get('store'), var.get('it'), var.get('metadata'))
                return var.get('metadata')
            PyJs_anonymous_446_._set_name('anonymous')
            var.put('set', PyJs_anonymous_446_)
            @Js
            def PyJs_anonymous_447_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
                var.registers(['it'])
                return (var.get('wmget').callprop('call', var.get('store'), var.get('it')) or Js({}))
            PyJs_anonymous_447_._set_name('anonymous')
            var.put('get', PyJs_anonymous_447_)
            @Js
            def PyJs_anonymous_448_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
                var.registers(['it'])
                return var.get('wmhas').callprop('call', var.get('store'), var.get('it'))
            PyJs_anonymous_448_._set_name('anonymous')
            var.put('has', PyJs_anonymous_448_)
        else:
            var.put('STATE', var.get('sharedKey')(Js('state')))
            var.get('hiddenKeys').put(var.get('STATE'), Js(True))
            @Js
            def PyJs_anonymous_449_(it, metadata, this, arguments, var=var):
                var = Scope({'it':it, 'metadata':metadata, 'this':this, 'arguments':arguments}, var)
                var.registers(['it', 'metadata'])
                var.get('metadata').put('facade', var.get('it'))
                var.get('createNonEnumerableProperty')(var.get('it'), var.get('STATE'), var.get('metadata'))
                return var.get('metadata')
            PyJs_anonymous_449_._set_name('anonymous')
            var.put('set', PyJs_anonymous_449_)
            @Js
            def PyJs_anonymous_450_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
                var.registers(['it'])
                return (var.get('it').get(var.get('STATE')) if var.get('objectHas')(var.get('it'), var.get('STATE')) else Js({}))
            PyJs_anonymous_450_._set_name('anonymous')
            var.put('get', PyJs_anonymous_450_)
            @Js
            def PyJs_anonymous_451_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
                var.registers(['it'])
                return var.get('objectHas')(var.get('it'), var.get('STATE'))
            PyJs_anonymous_451_._set_name('anonymous')
            var.put('has', PyJs_anonymous_451_)
        var.get('module').put('exports', Js({'set':var.get('set'),'get':var.get('get'),'has':var.get('has'),'enforce':var.get('enforce'),'getterFor':var.get('getterFor')}))
    PyJs_anonymous_442_._set_name('anonymous')
    @Js
    def PyJs_anonymous_452_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['Iterators', 'require', 'ArrayPrototype', 'exports', 'wellKnownSymbol', 'module', 'ITERATOR'])
        var.put('wellKnownSymbol', var.get('require')(Js('../internals/well-known-symbol')))
        var.put('Iterators', var.get('require')(Js('../internals/iterators')))
        var.put('ITERATOR', var.get('wellKnownSymbol')(Js('iterator')))
        var.put('ArrayPrototype', var.get('Array').get('prototype'))
        @Js
        def PyJs_anonymous_453_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return (PyJsStrictNeq(var.get('it'),var.get('undefined')) and (PyJsStrictEq(var.get('Iterators').get('Array'),var.get('it')) or PyJsStrictEq(var.get('ArrayPrototype').get(var.get('ITERATOR')),var.get('it'))))
        PyJs_anonymous_453_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_453_)
    PyJs_anonymous_452_._set_name('anonymous')
    @Js
    def PyJs_anonymous_454_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'classof', 'exports'])
        var.put('classof', var.get('require')(Js('../internals/classof-raw')))
        @Js
        def PyJs_isArray_455_(arg, this, arguments, var=var):
            var = Scope({'arg':arg, 'this':this, 'arguments':arguments, 'isArray':PyJs_isArray_455_}, var)
            var.registers(['arg'])
            return (var.get('classof')(var.get('arg'))==Js('Array'))
        PyJs_isArray_455_._set_name('isArray')
        var.get('module').put('exports', (var.get('Array').get('isArray') or PyJs_isArray_455_))
    PyJs_anonymous_454_._set_name('anonymous')
    @Js
    def PyJs_anonymous_456_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['isForced', 'fails', 'NATIVE', 'normalize', 'replacement', 'require', 'POLYFILL', 'exports', 'module', 'data'])
        var.put('fails', var.get('require')(Js('../internals/fails')))
        var.put('replacement', JsRegExp('/#|\\.prototype\\./'))
        @Js
        def PyJs_anonymous_457_(feature, detection, this, arguments, var=var):
            var = Scope({'feature':feature, 'detection':detection, 'this':this, 'arguments':arguments}, var)
            var.registers(['detection', 'value', 'feature'])
            var.put('value', var.get('data').get(var.get('normalize')(var.get('feature'))))
            return (Js(True) if (var.get('value')==var.get('POLYFILL')) else (Js(False) if (var.get('value')==var.get('NATIVE')) else (var.get('fails')(var.get('detection')) if (var.get('detection',throw=False).typeof()==Js('function')) else var.get('detection').neg().neg())))
        PyJs_anonymous_457_._set_name('anonymous')
        var.put('isForced', PyJs_anonymous_457_)
        @Js
        def PyJs_anonymous_458_(string, this, arguments, var=var):
            var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
            var.registers(['string'])
            return var.get('String')(var.get('string')).callprop('replace', var.get('replacement'), Js('.')).callprop('toLowerCase')
        PyJs_anonymous_458_._set_name('anonymous')
        var.put('normalize', var.get('isForced').put('normalize', PyJs_anonymous_458_))
        var.put('data', var.get('isForced').put('data', Js({})))
        var.put('NATIVE', var.get('isForced').put('NATIVE', Js('N')))
        var.put('POLYFILL', var.get('isForced').put('POLYFILL', Js('P')))
        var.get('module').put('exports', var.get('isForced'))
    PyJs_anonymous_456_._set_name('anonymous')
    @Js
    def PyJs_anonymous_459_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'exports'])
        @Js
        def PyJs_anonymous_460_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return (PyJsStrictNeq(var.get('it'),var.get(u"null")) if PyJsStrictEq(var.get('it',throw=False).typeof(),Js('object')) else PyJsStrictEq(var.get('it',throw=False).typeof(),Js('function')))
        PyJs_anonymous_460_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_460_)
    PyJs_anonymous_459_._set_name('anonymous')
    @Js
    def PyJs_anonymous_461_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'exports'])
        var.get('module').put('exports', Js(False))
    PyJs_anonymous_461_._set_name('anonymous')
    @Js
    def PyJs_anonymous_462_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['isArrayIteratorMethod', 'require', 'anObject', 'getIteratorMethod', 'bind', 'iteratorClose', 'exports', 'module', 'Result', 'toLength'])
        var.put('anObject', var.get('require')(Js('../internals/an-object')))
        var.put('isArrayIteratorMethod', var.get('require')(Js('../internals/is-array-iterator-method')))
        var.put('toLength', var.get('require')(Js('../internals/to-length')))
        var.put('bind', var.get('require')(Js('../internals/function-bind-context')))
        var.put('getIteratorMethod', var.get('require')(Js('../internals/get-iterator-method')))
        var.put('iteratorClose', var.get('require')(Js('../internals/iterator-close')))
        @Js
        def PyJs_anonymous_463_(stopped, result, this, arguments, var=var):
            var = Scope({'stopped':stopped, 'result':result, 'this':this, 'arguments':arguments}, var)
            var.registers(['result', 'stopped'])
            var.get(u"this").put('stopped', var.get('stopped'))
            var.get(u"this").put('result', var.get('result'))
        PyJs_anonymous_463_._set_name('anonymous')
        var.put('Result', PyJs_anonymous_463_)
        @Js
        def PyJs_anonymous_464_(iterable, unboundFunction, options, this, arguments, var=var):
            var = Scope({'iterable':iterable, 'unboundFunction':unboundFunction, 'options':options, 'this':this, 'arguments':arguments}, var)
            var.registers(['AS_ENTRIES', 'iterator', 'result', 'step', 'iterable', 'IS_ITERATOR', 'options', 'length', 'fn', 'that', 'index', 'next', 'callFn', 'INTERRUPTED', 'stop', 'iterFn', 'unboundFunction'])
            var.put('that', (var.get('options') and var.get('options').get('that')))
            var.put('AS_ENTRIES', (var.get('options') and var.get('options').get('AS_ENTRIES')).neg().neg())
            var.put('IS_ITERATOR', (var.get('options') and var.get('options').get('IS_ITERATOR')).neg().neg())
            var.put('INTERRUPTED', (var.get('options') and var.get('options').get('INTERRUPTED')).neg().neg())
            var.put('fn', var.get('bind')(var.get('unboundFunction'), var.get('that'), ((Js(1.0)+var.get('AS_ENTRIES'))+var.get('INTERRUPTED'))))
            pass
            @Js
            def PyJs_anonymous_465_(condition, this, arguments, var=var):
                var = Scope({'condition':condition, 'this':this, 'arguments':arguments}, var)
                var.registers(['condition'])
                if var.get('iterator'):
                    var.get('iteratorClose')(var.get('iterator'))
                return var.get('Result').create(Js(True), var.get('condition'))
            PyJs_anonymous_465_._set_name('anonymous')
            var.put('stop', PyJs_anonymous_465_)
            @Js
            def PyJs_anonymous_466_(value, this, arguments, var=var):
                var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                var.registers(['value'])
                if var.get('AS_ENTRIES'):
                    var.get('anObject')(var.get('value'))
                    return (var.get('fn')(var.get('value').get('0'), var.get('value').get('1'), var.get('stop')) if var.get('INTERRUPTED') else var.get('fn')(var.get('value').get('0'), var.get('value').get('1')))
                return (var.get('fn')(var.get('value'), var.get('stop')) if var.get('INTERRUPTED') else var.get('fn')(var.get('value')))
            PyJs_anonymous_466_._set_name('anonymous')
            var.put('callFn', PyJs_anonymous_466_)
            if var.get('IS_ITERATOR'):
                var.put('iterator', var.get('iterable'))
            else:
                var.put('iterFn', var.get('getIteratorMethod')(var.get('iterable')))
                if (var.get('iterFn',throw=False).typeof()!=Js('function')):
                    PyJsTempException = JsToPyException(var.get('TypeError')(Js('Target is not iterable')))
                    raise PyJsTempException
                if var.get('isArrayIteratorMethod')(var.get('iterFn')):
                    #for JS loop
                    PyJsComma(var.put('index', Js(0.0)),var.put('length', var.get('toLength')(var.get('iterable').get('length'))))
                    while (var.get('length')>var.get('index')):
                        try:
                            var.put('result', var.get('callFn')(var.get('iterable').get(var.get('index'))))
                            if (var.get('result') and var.get('result').instanceof(var.get('Result'))):
                                return var.get('result')
                        finally:
                                (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
                    return var.get('Result').create(Js(False))
                var.put('iterator', var.get('iterFn').callprop('call', var.get('iterable')))
            var.put('next', var.get('iterator').get('next'))
            while var.put('step', var.get('next').callprop('call', var.get('iterator'))).get('done').neg():
                try:
                    var.put('result', var.get('callFn')(var.get('step').get('value')))
                except PyJsException as PyJsTempException:
                    PyJsHolder_6572726f72_77205808 = var.own.get('error')
                    var.force_own_put('error', PyExceptionToJs(PyJsTempException))
                    try:
                        var.get('iteratorClose')(var.get('iterator'))
                        PyJsTempException = JsToPyException(var.get('error'))
                        raise PyJsTempException
                    finally:
                        if PyJsHolder_6572726f72_77205808 is not None:
                            var.own['error'] = PyJsHolder_6572726f72_77205808
                        else:
                            del var.own['error']
                        del PyJsHolder_6572726f72_77205808
                if (((var.get('result',throw=False).typeof()==Js('object')) and var.get('result')) and var.get('result').instanceof(var.get('Result'))):
                    return var.get('result')
            return var.get('Result').create(Js(False))
        PyJs_anonymous_464_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_464_)
    PyJs_anonymous_462_._set_name('anonymous')
    @Js
    def PyJs_anonymous_467_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'anObject', 'exports'])
        var.put('anObject', var.get('require')(Js('../internals/an-object')))
        @Js
        def PyJs_anonymous_468_(iterator, this, arguments, var=var):
            var = Scope({'iterator':iterator, 'this':this, 'arguments':arguments}, var)
            var.registers(['iterator', 'returnMethod'])
            var.put('returnMethod', var.get('iterator').get('return'))
            if PyJsStrictNeq(var.get('returnMethod'),var.get('undefined')):
                return var.get('anObject')(var.get('returnMethod').callprop('call', var.get('iterator'))).get('value')
        PyJs_anonymous_468_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_468_)
    PyJs_anonymous_467_._set_name('anonymous')
    @Js
    def PyJs_anonymous_469_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['PrototypeOfArrayIteratorPrototype', 'has', 'IteratorPrototype', 'BUGGY_SAFARI_ITERATORS', 'require', 'exports', 'createNonEnumerableProperty', 'wellKnownSymbol', 'arrayIterator', 'getPrototypeOf', 'ITERATOR', 'module', 'returnThis', 'IS_PURE'])
        Js('use strict')
        var.put('getPrototypeOf', var.get('require')(Js('../internals/object-get-prototype-of')))
        var.put('createNonEnumerableProperty', var.get('require')(Js('../internals/create-non-enumerable-property')))
        var.put('has', var.get('require')(Js('../internals/has')))
        var.put('wellKnownSymbol', var.get('require')(Js('../internals/well-known-symbol')))
        var.put('IS_PURE', var.get('require')(Js('../internals/is-pure')))
        var.put('ITERATOR', var.get('wellKnownSymbol')(Js('iterator')))
        var.put('BUGGY_SAFARI_ITERATORS', Js(False))
        @Js
        def PyJs_anonymous_470_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get(u"this")
        PyJs_anonymous_470_._set_name('anonymous')
        var.put('returnThis', PyJs_anonymous_470_)
        pass
        if Js([]).get('keys'):
            var.put('arrayIterator', Js([]).callprop('keys'))
            if var.get('arrayIterator').contains(Js('next')).neg():
                var.put('BUGGY_SAFARI_ITERATORS', Js(True))
            else:
                var.put('PrototypeOfArrayIteratorPrototype', var.get('getPrototypeOf')(var.get('getPrototypeOf')(var.get('arrayIterator'))))
                if PyJsStrictNeq(var.get('PrototypeOfArrayIteratorPrototype'),var.get('Object').get('prototype')):
                    var.put('IteratorPrototype', var.get('PrototypeOfArrayIteratorPrototype'))
        if (var.get('IteratorPrototype')==var.get('undefined')):
            var.put('IteratorPrototype', Js({}))
        if (var.get('IS_PURE').neg() and var.get('has')(var.get('IteratorPrototype'), var.get('ITERATOR')).neg()):
            var.get('createNonEnumerableProperty')(var.get('IteratorPrototype'), var.get('ITERATOR'), var.get('returnThis'))
        var.get('module').put('exports', Js({'IteratorPrototype':var.get('IteratorPrototype'),'BUGGY_SAFARI_ITERATORS':var.get('BUGGY_SAFARI_ITERATORS')}))
    PyJs_anonymous_469_._set_name('anonymous')
    @Js
    def PyJs_anonymous_471_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'exports'])
        var.get('arguments').get('4').get('58').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_471_._set_name('anonymous')
    @Js
    def PyJs_anonymous_472_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'fails', 'exports'])
        var.put('fails', var.get('require')(Js('../internals/fails')))
        @Js
        def PyJs_anonymous_473_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('String')(var.get('Symbol')()).neg()
        PyJs_anonymous_473_._set_name('anonymous')
        var.get('module').put('exports', (var.get('Object').get('getOwnPropertySymbols').neg().neg() and var.get('fails')(PyJs_anonymous_473_).neg()))
    PyJs_anonymous_472_._set_name('anonymous')
    @Js
    def PyJs_anonymous_474_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'WeakMap', 'exports', 'module', 'global', 'inspectSource'])
        var.put('global', var.get('require')(Js('../internals/global')))
        var.put('inspectSource', var.get('require')(Js('../internals/inspect-source')))
        var.put('WeakMap', var.get('global').get('WeakMap'))
        var.get('module').put('exports', (PyJsStrictEq(var.get('WeakMap',throw=False).typeof(),Js('function')) and JsRegExp('/native code/').callprop('test', var.get('inspectSource')(var.get('WeakMap')))))
    PyJs_anonymous_474_._set_name('anonymous')
    @Js
    def PyJs_anonymous_475_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['fails', 'require', 'exports', 'DESCRIPTORS', 'nativeAssign', 'getOwnPropertySymbolsModule', 'toObject', 'objectKeys', 'IndexedObject', 'module', 'propertyIsEnumerableModule', 'defineProperty'])
        Js('use strict')
        var.put('DESCRIPTORS', var.get('require')(Js('../internals/descriptors')))
        var.put('fails', var.get('require')(Js('../internals/fails')))
        var.put('objectKeys', var.get('require')(Js('../internals/object-keys')))
        var.put('getOwnPropertySymbolsModule', var.get('require')(Js('../internals/object-get-own-property-symbols')))
        var.put('propertyIsEnumerableModule', var.get('require')(Js('../internals/object-property-is-enumerable')))
        var.put('toObject', var.get('require')(Js('../internals/to-object')))
        var.put('IndexedObject', var.get('require')(Js('../internals/indexed-object')))
        var.put('nativeAssign', var.get('Object').get('assign'))
        var.put('defineProperty', var.get('Object').get('defineProperty'))
        @Js
        def PyJs_assign_476_(target, source, this, arguments, var=var):
            var = Scope({'target':target, 'source':source, 'this':this, 'arguments':arguments, 'assign':PyJs_assign_476_}, var)
            var.registers(['keys', 'length', 'index', 'T', 'S', 'getOwnPropertySymbols', 'j', 'source', 'argumentsLength', 'target', 'key', 'propertyIsEnumerable'])
            var.put('T', var.get('toObject')(var.get('target')))
            var.put('argumentsLength', var.get('arguments').get('length'))
            var.put('index', Js(1.0))
            var.put('getOwnPropertySymbols', var.get('getOwnPropertySymbolsModule').get('f'))
            var.put('propertyIsEnumerable', var.get('propertyIsEnumerableModule').get('f'))
            while (var.get('argumentsLength')>var.get('index')):
                var.put('S', var.get('IndexedObject')(var.get('arguments').get((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1)))))
                var.put('keys', (var.get('objectKeys')(var.get('S')).callprop('concat', var.get('getOwnPropertySymbols')(var.get('S'))) if var.get('getOwnPropertySymbols') else var.get('objectKeys')(var.get('S'))))
                var.put('length', var.get('keys').get('length'))
                var.put('j', Js(0.0))
                pass
                while (var.get('length')>var.get('j')):
                    var.put('key', var.get('keys').get((var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))))
                    if (var.get('DESCRIPTORS').neg() or var.get('propertyIsEnumerable').callprop('call', var.get('S'), var.get('key'))):
                        var.get('T').put(var.get('key'), var.get('S').get(var.get('key')))
            return var.get('T')
        PyJs_assign_476_._set_name('assign')
        @Js
        def PyJs_anonymous_477_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['alphabet', 'symbol', 'A', 'B'])
            @Js
            def PyJs_anonymous_478_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('defineProperty')(var.get(u"this"), Js('b'), Js({'value':Js(3.0),'enumerable':Js(False)}))
            PyJs_anonymous_478_._set_name('anonymous')
            if (var.get('DESCRIPTORS') and PyJsStrictNeq(var.get('nativeAssign')(Js({'b':Js(1.0)}), var.get('nativeAssign')(var.get('defineProperty')(Js({}), Js('a'), Js({'enumerable':Js(True),'get':PyJs_anonymous_478_})), Js({'b':Js(2.0)}))).get('b'),Js(1.0))):
                return Js(True)
            var.put('A', Js({}))
            var.put('B', Js({}))
            var.put('symbol', var.get('Symbol')())
            var.put('alphabet', Js('abcdefghijklmnopqrst'))
            var.get('A').put(var.get('symbol'), Js(7.0))
            @Js
            def PyJs_anonymous_479_(chr, this, arguments, var=var):
                var = Scope({'chr':chr, 'this':this, 'arguments':arguments}, var)
                var.registers(['chr'])
                var.get('B').put(var.get('chr'), var.get('chr'))
            PyJs_anonymous_479_._set_name('anonymous')
            var.get('alphabet').callprop('split', Js('')).callprop('forEach', PyJs_anonymous_479_)
            return ((var.get('nativeAssign')(Js({}), var.get('A')).get(var.get('symbol'))!=Js(7.0)) or (var.get('objectKeys')(var.get('nativeAssign')(Js({}), var.get('B'))).callprop('join', Js(''))!=var.get('alphabet')))
        PyJs_anonymous_477_._set_name('anonymous')
        var.get('module').put('exports', (PyJs_assign_476_ if (var.get('nativeAssign').neg() or var.get('fails')(PyJs_anonymous_477_)) else var.get('nativeAssign')))
    PyJs_anonymous_475_._set_name('anonymous')
    @Js
    def PyJs_anonymous_480_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['hiddenKeys', 'NullProtoObjectViaActiveX', 'sharedKey', 'LT', 'module', 'documentCreateElement', 'enumBugKeys', 'SCRIPT', 'require', 'GT', 'PROTOTYPE', 'EmptyConstructor', 'activeXDocument', 'scriptTag', 'NullProtoObjectViaIFrame', 'NullProtoObject', 'anObject', 'defineProperties', 'IE_PROTO', 'html', 'exports'])
        var.put('anObject', var.get('require')(Js('../internals/an-object')))
        var.put('defineProperties', var.get('require')(Js('../internals/object-define-properties')))
        var.put('enumBugKeys', var.get('require')(Js('../internals/enum-bug-keys')))
        var.put('hiddenKeys', var.get('require')(Js('../internals/hidden-keys')))
        var.put('html', var.get('require')(Js('../internals/html')))
        var.put('documentCreateElement', var.get('require')(Js('../internals/document-create-element')))
        var.put('sharedKey', var.get('require')(Js('../internals/shared-key')))
        var.put('GT', Js('>'))
        var.put('LT', Js('<'))
        var.put('PROTOTYPE', Js('prototype'))
        var.put('SCRIPT', Js('script'))
        var.put('IE_PROTO', var.get('sharedKey')(Js('IE_PROTO')))
        @Js
        def PyJs_anonymous_481_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            pass
        PyJs_anonymous_481_._set_name('anonymous')
        var.put('EmptyConstructor', PyJs_anonymous_481_)
        @Js
        def PyJs_anonymous_482_(content, this, arguments, var=var):
            var = Scope({'content':content, 'this':this, 'arguments':arguments}, var)
            var.registers(['content'])
            return (((((((var.get('LT')+var.get('SCRIPT'))+var.get('GT'))+var.get('content'))+var.get('LT'))+Js('/'))+var.get('SCRIPT'))+var.get('GT'))
        PyJs_anonymous_482_._set_name('anonymous')
        var.put('scriptTag', PyJs_anonymous_482_)
        @Js
        def PyJs_anonymous_483_(activeXDocument, this, arguments, var=var):
            var = Scope({'activeXDocument':activeXDocument, 'this':this, 'arguments':arguments}, var)
            var.registers(['temp', 'activeXDocument'])
            var.get('activeXDocument').callprop('write', var.get('scriptTag')(Js('')))
            var.get('activeXDocument').callprop('close')
            var.put('temp', var.get('activeXDocument').get('parentWindow').get('Object'))
            var.put('activeXDocument', var.get(u"null"))
            return var.get('temp')
        PyJs_anonymous_483_._set_name('anonymous')
        var.put('NullProtoObjectViaActiveX', PyJs_anonymous_483_)
        @Js
        def PyJs_anonymous_484_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['JS', 'iframeDocument', 'iframe'])
            var.put('iframe', var.get('documentCreateElement')(Js('iframe')))
            var.put('JS', ((Js('java')+var.get('SCRIPT'))+Js(':')))
            pass
            var.get('iframe').get('style').put('display', Js('none'))
            var.get('html').callprop('appendChild', var.get('iframe'))
            var.get('iframe').put('src', var.get('String')(var.get('JS')))
            var.put('iframeDocument', var.get('iframe').get('contentWindow').get('document'))
            var.get('iframeDocument').callprop('open')
            var.get('iframeDocument').callprop('write', var.get('scriptTag')(Js('document.F=Object')))
            var.get('iframeDocument').callprop('close')
            return var.get('iframeDocument').get('F')
        PyJs_anonymous_484_._set_name('anonymous')
        var.put('NullProtoObjectViaIFrame', PyJs_anonymous_484_)
        pass
        @Js
        def PyJs_anonymous_485_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['length'])
            try:
                var.put('activeXDocument', (var.get('document').get('domain') and var.get('ActiveXObject').create(Js('htmlfile'))))
            except PyJsException as PyJsTempException:
                PyJsHolder_6572726f72_12270708 = var.own.get('error')
                var.force_own_put('error', PyExceptionToJs(PyJsTempException))
                try:
                    pass
                finally:
                    if PyJsHolder_6572726f72_12270708 is not None:
                        var.own['error'] = PyJsHolder_6572726f72_12270708
                    else:
                        del var.own['error']
                    del PyJsHolder_6572726f72_12270708
            var.put('NullProtoObject', (var.get('NullProtoObjectViaActiveX')(var.get('activeXDocument')) if var.get('activeXDocument') else var.get('NullProtoObjectViaIFrame')()))
            var.put('length', var.get('enumBugKeys').get('length'))
            while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
                var.get('NullProtoObject').get(var.get('PROTOTYPE')).delete(var.get('enumBugKeys').get(var.get('length')))
            return var.get('NullProtoObject')()
        PyJs_anonymous_485_._set_name('anonymous')
        var.put('NullProtoObject', PyJs_anonymous_485_)
        var.get('hiddenKeys').put(var.get('IE_PROTO'), Js(True))
        @Js
        def PyJs_create_486_(O, Properties, this, arguments, var=var):
            var = Scope({'O':O, 'Properties':Properties, 'this':this, 'arguments':arguments, 'create':PyJs_create_486_}, var)
            var.registers(['result', 'O', 'Properties'])
            pass
            if PyJsStrictNeq(var.get('O'),var.get(u"null")):
                var.get('EmptyConstructor').put(var.get('PROTOTYPE'), var.get('anObject')(var.get('O')))
                var.put('result', var.get('EmptyConstructor').create())
                var.get('EmptyConstructor').put(var.get('PROTOTYPE'), var.get(u"null"))
                var.get('result').put(var.get('IE_PROTO'), var.get('O'))
            else:
                var.put('result', var.get('NullProtoObject')())
            return (var.get('result') if PyJsStrictEq(var.get('Properties'),var.get('undefined')) else var.get('defineProperties')(var.get('result'), var.get('Properties')))
        PyJs_create_486_._set_name('create')
        var.get('module').put('exports', (var.get('Object').get('create') or PyJs_create_486_))
    PyJs_anonymous_480_._set_name('anonymous')
    @Js
    def PyJs_anonymous_487_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'anObject', 'definePropertyModule', 'exports', 'DESCRIPTORS', 'module', 'objectKeys'])
        var.put('DESCRIPTORS', var.get('require')(Js('../internals/descriptors')))
        var.put('definePropertyModule', var.get('require')(Js('../internals/object-define-property')))
        var.put('anObject', var.get('require')(Js('../internals/an-object')))
        var.put('objectKeys', var.get('require')(Js('../internals/object-keys')))
        @Js
        def PyJs_defineProperties_488_(O, Properties, this, arguments, var=var):
            var = Scope({'O':O, 'Properties':Properties, 'this':this, 'arguments':arguments, 'defineProperties':PyJs_defineProperties_488_}, var)
            var.registers(['keys', 'O', 'Properties', 'length', 'index', 'key'])
            var.get('anObject')(var.get('O'))
            var.put('keys', var.get('objectKeys')(var.get('Properties')))
            var.put('length', var.get('keys').get('length'))
            var.put('index', Js(0.0))
            pass
            while (var.get('length')>var.get('index')):
                var.get('definePropertyModule').callprop('f', var.get('O'), var.put('key', var.get('keys').get((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1)))), var.get('Properties').get(var.get('key')))
            return var.get('O')
        PyJs_defineProperties_488_._set_name('defineProperties')
        var.get('module').put('exports', (var.get('Object').get('defineProperties') if var.get('DESCRIPTORS') else PyJs_defineProperties_488_))
    PyJs_anonymous_487_._set_name('anonymous')
    @Js
    def PyJs_anonymous_489_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['IE8_DOM_DEFINE', 'require', 'anObject', 'toPrimitive', 'DESCRIPTORS', 'exports', 'module', 'nativeDefineProperty'])
        var.put('DESCRIPTORS', var.get('require')(Js('../internals/descriptors')))
        var.put('IE8_DOM_DEFINE', var.get('require')(Js('../internals/ie8-dom-define')))
        var.put('anObject', var.get('require')(Js('../internals/an-object')))
        var.put('toPrimitive', var.get('require')(Js('../internals/to-primitive')))
        var.put('nativeDefineProperty', var.get('Object').get('defineProperty'))
        @Js
        def PyJs_defineProperty_490_(O, P, Attributes, this, arguments, var=var):
            var = Scope({'O':O, 'P':P, 'Attributes':Attributes, 'this':this, 'arguments':arguments, 'defineProperty':PyJs_defineProperty_490_}, var)
            var.registers(['Attributes', 'O', 'P'])
            var.get('anObject')(var.get('O'))
            var.put('P', var.get('toPrimitive')(var.get('P'), Js(True)))
            var.get('anObject')(var.get('Attributes'))
            if var.get('IE8_DOM_DEFINE'):
                try:
                    return var.get('nativeDefineProperty')(var.get('O'), var.get('P'), var.get('Attributes'))
                except PyJsException as PyJsTempException:
                    PyJsHolder_6572726f72_44437051 = var.own.get('error')
                    var.force_own_put('error', PyExceptionToJs(PyJsTempException))
                    try:
                        pass
                    finally:
                        if PyJsHolder_6572726f72_44437051 is not None:
                            var.own['error'] = PyJsHolder_6572726f72_44437051
                        else:
                            del var.own['error']
                        del PyJsHolder_6572726f72_44437051
            if (var.get('Attributes').contains(Js('get')) or var.get('Attributes').contains(Js('set'))):
                PyJsTempException = JsToPyException(var.get('TypeError')(Js('Accessors not supported')))
                raise PyJsTempException
            if var.get('Attributes').contains(Js('value')):
                var.get('O').put(var.get('P'), var.get('Attributes').get('value'))
            return var.get('O')
        PyJs_defineProperty_490_._set_name('defineProperty')
        var.get('exports').put('f', (var.get('nativeDefineProperty') if var.get('DESCRIPTORS') else PyJs_defineProperty_490_))
    PyJs_anonymous_489_._set_name('anonymous')
    @Js
    def PyJs_anonymous_491_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['has', 'IE8_DOM_DEFINE', 'nativeGetOwnPropertyDescriptor', 'require', 'toPrimitive', 'DESCRIPTORS', 'toIndexedObject', 'createPropertyDescriptor', 'exports', 'module', 'propertyIsEnumerableModule'])
        var.put('DESCRIPTORS', var.get('require')(Js('../internals/descriptors')))
        var.put('propertyIsEnumerableModule', var.get('require')(Js('../internals/object-property-is-enumerable')))
        var.put('createPropertyDescriptor', var.get('require')(Js('../internals/create-property-descriptor')))
        var.put('toIndexedObject', var.get('require')(Js('../internals/to-indexed-object')))
        var.put('toPrimitive', var.get('require')(Js('../internals/to-primitive')))
        var.put('has', var.get('require')(Js('../internals/has')))
        var.put('IE8_DOM_DEFINE', var.get('require')(Js('../internals/ie8-dom-define')))
        var.put('nativeGetOwnPropertyDescriptor', var.get('Object').get('getOwnPropertyDescriptor'))
        @Js
        def PyJs_getOwnPropertyDescriptor_492_(O, P, this, arguments, var=var):
            var = Scope({'O':O, 'P':P, 'this':this, 'arguments':arguments, 'getOwnPropertyDescriptor':PyJs_getOwnPropertyDescriptor_492_}, var)
            var.registers(['O', 'P'])
            var.put('O', var.get('toIndexedObject')(var.get('O')))
            var.put('P', var.get('toPrimitive')(var.get('P'), Js(True)))
            if var.get('IE8_DOM_DEFINE'):
                try:
                    return var.get('nativeGetOwnPropertyDescriptor')(var.get('O'), var.get('P'))
                except PyJsException as PyJsTempException:
                    PyJsHolder_6572726f72_82779108 = var.own.get('error')
                    var.force_own_put('error', PyExceptionToJs(PyJsTempException))
                    try:
                        pass
                    finally:
                        if PyJsHolder_6572726f72_82779108 is not None:
                            var.own['error'] = PyJsHolder_6572726f72_82779108
                        else:
                            del var.own['error']
                        del PyJsHolder_6572726f72_82779108
            if var.get('has')(var.get('O'), var.get('P')):
                return var.get('createPropertyDescriptor')(var.get('propertyIsEnumerableModule').get('f').callprop('call', var.get('O'), var.get('P')).neg(), var.get('O').get(var.get('P')))
        PyJs_getOwnPropertyDescriptor_492_._set_name('getOwnPropertyDescriptor')
        var.get('exports').put('f', (var.get('nativeGetOwnPropertyDescriptor') if var.get('DESCRIPTORS') else PyJs_getOwnPropertyDescriptor_492_))
    PyJs_anonymous_491_._set_name('anonymous')
    @Js
    def PyJs_anonymous_493_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'getWindowNames', 'toString', 'toIndexedObject', 'exports', 'module', 'nativeGetOwnPropertyNames', 'windowNames'])
        var.put('toIndexedObject', var.get('require')(Js('../internals/to-indexed-object')))
        var.put('nativeGetOwnPropertyNames', var.get('require')(Js('../internals/object-get-own-property-names')).get('f'))
        var.put('toString', Js({}).get('toString'))
        var.put('windowNames', (var.get('Object').callprop('getOwnPropertyNames', var.get('window')) if (((var.get('window',throw=False).typeof()==Js('object')) and var.get('window')) and var.get('Object').get('getOwnPropertyNames')) else Js([])))
        @Js
        def PyJs_anonymous_494_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            try:
                return var.get('nativeGetOwnPropertyNames')(var.get('it'))
            except PyJsException as PyJsTempException:
                PyJsHolder_6572726f72_70973158 = var.own.get('error')
                var.force_own_put('error', PyExceptionToJs(PyJsTempException))
                try:
                    return var.get('windowNames').callprop('slice')
                finally:
                    if PyJsHolder_6572726f72_70973158 is not None:
                        var.own['error'] = PyJsHolder_6572726f72_70973158
                    else:
                        del var.own['error']
                    del PyJsHolder_6572726f72_70973158
        PyJs_anonymous_494_._set_name('anonymous')
        var.put('getWindowNames', PyJs_anonymous_494_)
        @Js
        def PyJs_getOwnPropertyNames_495_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'getOwnPropertyNames':PyJs_getOwnPropertyNames_495_}, var)
            var.registers(['it'])
            return (var.get('getWindowNames')(var.get('it')) if (var.get('windowNames') and (var.get('toString').callprop('call', var.get('it'))==Js('[object Window]'))) else var.get('nativeGetOwnPropertyNames')(var.get('toIndexedObject')(var.get('it'))))
        PyJs_getOwnPropertyNames_495_._set_name('getOwnPropertyNames')
        var.get('module').get('exports').put('f', PyJs_getOwnPropertyNames_495_)
    PyJs_anonymous_493_._set_name('anonymous')
    @Js
    def PyJs_anonymous_496_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['hiddenKeys', 'require', 'internalObjectKeys', 'exports', 'module', 'enumBugKeys'])
        var.put('internalObjectKeys', var.get('require')(Js('../internals/object-keys-internal')))
        var.put('enumBugKeys', var.get('require')(Js('../internals/enum-bug-keys')))
        var.put('hiddenKeys', var.get('enumBugKeys').callprop('concat', Js('length'), Js('prototype')))
        @Js
        def PyJs_getOwnPropertyNames_497_(O, this, arguments, var=var):
            var = Scope({'O':O, 'this':this, 'arguments':arguments, 'getOwnPropertyNames':PyJs_getOwnPropertyNames_497_}, var)
            var.registers(['O'])
            return var.get('internalObjectKeys')(var.get('O'), var.get('hiddenKeys'))
        PyJs_getOwnPropertyNames_497_._set_name('getOwnPropertyNames')
        var.get('exports').put('f', (var.get('Object').get('getOwnPropertyNames') or PyJs_getOwnPropertyNames_497_))
    PyJs_anonymous_496_._set_name('anonymous')
    @Js
    def PyJs_anonymous_498_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'exports'])
        var.get('exports').put('f', var.get('Object').get('getOwnPropertySymbols'))
    PyJs_anonymous_498_._set_name('anonymous')
    @Js
    def PyJs_anonymous_499_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['has', 'require', 'IE_PROTO', 'sharedKey', 'exports', 'module', 'toObject', 'ObjectPrototype', 'CORRECT_PROTOTYPE_GETTER'])
        var.put('has', var.get('require')(Js('../internals/has')))
        var.put('toObject', var.get('require')(Js('../internals/to-object')))
        var.put('sharedKey', var.get('require')(Js('../internals/shared-key')))
        var.put('CORRECT_PROTOTYPE_GETTER', var.get('require')(Js('../internals/correct-prototype-getter')))
        var.put('IE_PROTO', var.get('sharedKey')(Js('IE_PROTO')))
        var.put('ObjectPrototype', var.get('Object').get('prototype'))
        @Js
        def PyJs_anonymous_500_(O, this, arguments, var=var):
            var = Scope({'O':O, 'this':this, 'arguments':arguments}, var)
            var.registers(['O'])
            var.put('O', var.get('toObject')(var.get('O')))
            if var.get('has')(var.get('O'), var.get('IE_PROTO')):
                return var.get('O').get(var.get('IE_PROTO'))
            if ((var.get('O').get('constructor').typeof()==Js('function')) and var.get('O').instanceof(var.get('O').get('constructor'))):
                return var.get('O').get('constructor').get('prototype')
            return (var.get('ObjectPrototype') if var.get('O').instanceof(var.get('Object')) else var.get(u"null"))
        PyJs_anonymous_500_._set_name('anonymous')
        var.get('module').put('exports', (var.get('Object').get('getPrototypeOf') if var.get('CORRECT_PROTOTYPE_GETTER') else PyJs_anonymous_500_))
    PyJs_anonymous_499_._set_name('anonymous')
    @Js
    def PyJs_anonymous_501_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['has', 'hiddenKeys', 'require', 'toIndexedObject', 'exports', 'indexOf', 'module'])
        var.put('has', var.get('require')(Js('../internals/has')))
        var.put('toIndexedObject', var.get('require')(Js('../internals/to-indexed-object')))
        var.put('indexOf', var.get('require')(Js('../internals/array-includes')).get('indexOf'))
        var.put('hiddenKeys', var.get('require')(Js('../internals/hidden-keys')))
        @Js
        def PyJs_anonymous_502_(object, names, this, arguments, var=var):
            var = Scope({'object':object, 'names':names, 'this':this, 'arguments':arguments}, var)
            var.registers(['result', 'O', 'names', 'i', 'object', 'key'])
            var.put('O', var.get('toIndexedObject')(var.get('object')))
            var.put('i', Js(0.0))
            var.put('result', Js([]))
            pass
            for PyJsTemp in var.get('O'):
                var.put('key', PyJsTemp)
                ((var.get('has')(var.get('hiddenKeys'), var.get('key')).neg() and var.get('has')(var.get('O'), var.get('key'))) and var.get('result').callprop('push', var.get('key')))
            while (var.get('names').get('length')>var.get('i')):
                if var.get('has')(var.get('O'), var.put('key', var.get('names').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))):
                    ((~var.get('indexOf')(var.get('result'), var.get('key'))) or var.get('result').callprop('push', var.get('key')))
            return var.get('result')
        PyJs_anonymous_502_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_502_)
    PyJs_anonymous_501_._set_name('anonymous')
    @Js
    def PyJs_anonymous_503_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'internalObjectKeys', 'exports', 'module', 'enumBugKeys'])
        var.put('internalObjectKeys', var.get('require')(Js('../internals/object-keys-internal')))
        var.put('enumBugKeys', var.get('require')(Js('../internals/enum-bug-keys')))
        @Js
        def PyJs_keys_504_(O, this, arguments, var=var):
            var = Scope({'O':O, 'this':this, 'arguments':arguments, 'keys':PyJs_keys_504_}, var)
            var.registers(['O'])
            return var.get('internalObjectKeys')(var.get('O'), var.get('enumBugKeys'))
        PyJs_keys_504_._set_name('keys')
        var.get('module').put('exports', (var.get('Object').get('keys') or PyJs_keys_504_))
    PyJs_anonymous_503_._set_name('anonymous')
    @Js
    def PyJs_anonymous_505_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'getOwnPropertyDescriptor', 'exports', 'nativePropertyIsEnumerable', 'module', 'NASHORN_BUG'])
        Js('use strict')
        var.put('nativePropertyIsEnumerable', Js({}).get('propertyIsEnumerable'))
        var.put('getOwnPropertyDescriptor', var.get('Object').get('getOwnPropertyDescriptor'))
        var.put('NASHORN_BUG', (var.get('getOwnPropertyDescriptor') and var.get('nativePropertyIsEnumerable').callprop('call', Js({'1':Js(2.0)}), Js(1.0)).neg()))
        @Js
        def PyJs_propertyIsEnumerable_506_(V, this, arguments, var=var):
            var = Scope({'V':V, 'this':this, 'arguments':arguments, 'propertyIsEnumerable':PyJs_propertyIsEnumerable_506_}, var)
            var.registers(['descriptor', 'V'])
            var.put('descriptor', var.get('getOwnPropertyDescriptor')(var.get(u"this"), var.get('V')))
            return (var.get('descriptor').neg().neg() and var.get('descriptor').get('enumerable'))
        PyJs_propertyIsEnumerable_506_._set_name('propertyIsEnumerable')
        var.get('exports').put('f', (PyJs_propertyIsEnumerable_506_ if var.get('NASHORN_BUG') else var.get('nativePropertyIsEnumerable')))
    PyJs_anonymous_505_._set_name('anonymous')
    @Js
    def PyJs_anonymous_507_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'fails', 'exports', 'module', 'global', 'IS_PURE'])
        Js('use strict')
        var.put('IS_PURE', var.get('require')(Js('../internals/is-pure')))
        var.put('global', var.get('require')(Js('../internals/global')))
        var.put('fails', var.get('require')(Js('../internals/fails')))
        @Js
        def PyJs_anonymous_508_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['key'])
            var.put('key', var.get('Math').callprop('random'))
            @Js
            def PyJs_anonymous_509_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                pass
            PyJs_anonymous_509_._set_name('anonymous')
            var.get('__defineSetter__').callprop('call', var.get(u"null"), var.get('key'), PyJs_anonymous_509_)
            var.get('global').delete(var.get('key'))
        PyJs_anonymous_508_._set_name('anonymous')
        var.get('module').put('exports', (var.get('IS_PURE') or var.get('fails')(PyJs_anonymous_508_).neg()))
    PyJs_anonymous_507_._set_name('anonymous')
    @Js
    def PyJs_anonymous_510_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'anObject', 'exports', 'module', 'aPossiblePrototype'])
        var.put('anObject', var.get('require')(Js('../internals/an-object')))
        var.put('aPossiblePrototype', var.get('require')(Js('../internals/a-possible-prototype')))
        @Js
        def PyJs_anonymous_511_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['CORRECT_SETTER', 'setter', 'test'])
            var.put('CORRECT_SETTER', Js(False))
            var.put('test', Js({}))
            pass
            try:
                var.put('setter', var.get('Object').callprop('getOwnPropertyDescriptor', var.get('Object').get('prototype'), Js('__proto__')).get('set'))
                var.get('setter').callprop('call', var.get('test'), Js([]))
                var.put('CORRECT_SETTER', var.get('test').instanceof(var.get('Array')))
            except PyJsException as PyJsTempException:
                PyJsHolder_6572726f72_91370774 = var.own.get('error')
                var.force_own_put('error', PyExceptionToJs(PyJsTempException))
                try:
                    pass
                finally:
                    if PyJsHolder_6572726f72_91370774 is not None:
                        var.own['error'] = PyJsHolder_6572726f72_91370774
                    else:
                        del var.own['error']
                    del PyJsHolder_6572726f72_91370774
            @Js
            def PyJs_setPrototypeOf_512_(O, proto, this, arguments, var=var):
                var = Scope({'O':O, 'proto':proto, 'this':this, 'arguments':arguments, 'setPrototypeOf':PyJs_setPrototypeOf_512_}, var)
                var.registers(['O', 'proto'])
                var.get('anObject')(var.get('O'))
                var.get('aPossiblePrototype')(var.get('proto'))
                if var.get('CORRECT_SETTER'):
                    var.get('setter').callprop('call', var.get('O'), var.get('proto'))
                else:
                    var.get('O').put('__proto__', var.get('proto'))
                return var.get('O')
            PyJs_setPrototypeOf_512_._set_name('setPrototypeOf')
            return PyJs_setPrototypeOf_512_
        PyJs_anonymous_511_._set_name('anonymous')
        var.get('module').put('exports', (var.get('Object').get('setPrototypeOf') or (PyJs_anonymous_511_() if Js({}).contains(Js('__proto__')) else var.get('undefined'))))
    PyJs_anonymous_510_._set_name('anonymous')
    @Js
    def PyJs_anonymous_513_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'createMethod', 'toIndexedObject', 'DESCRIPTORS', 'exports', 'module', 'objectKeys', 'propertyIsEnumerable'])
        var.put('DESCRIPTORS', var.get('require')(Js('../internals/descriptors')))
        var.put('objectKeys', var.get('require')(Js('../internals/object-keys')))
        var.put('toIndexedObject', var.get('require')(Js('../internals/to-indexed-object')))
        var.put('propertyIsEnumerable', var.get('require')(Js('../internals/object-property-is-enumerable')).get('f'))
        @Js
        def PyJs_anonymous_514_(TO_ENTRIES, this, arguments, var=var):
            var = Scope({'TO_ENTRIES':TO_ENTRIES, 'this':this, 'arguments':arguments}, var)
            var.registers(['TO_ENTRIES'])
            @Js
            def PyJs_anonymous_515_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
                var.registers(['keys', 'result', 'O', 'i', 'it', 'length', 'key'])
                var.put('O', var.get('toIndexedObject')(var.get('it')))
                var.put('keys', var.get('objectKeys')(var.get('O')))
                var.put('length', var.get('keys').get('length'))
                var.put('i', Js(0.0))
                var.put('result', Js([]))
                pass
                while (var.get('length')>var.get('i')):
                    var.put('key', var.get('keys').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
                    if (var.get('DESCRIPTORS').neg() or var.get('propertyIsEnumerable').callprop('call', var.get('O'), var.get('key'))):
                        var.get('result').callprop('push', (Js([var.get('key'), var.get('O').get(var.get('key'))]) if var.get('TO_ENTRIES') else var.get('O').get(var.get('key'))))
                return var.get('result')
            PyJs_anonymous_515_._set_name('anonymous')
            return PyJs_anonymous_515_
        PyJs_anonymous_514_._set_name('anonymous')
        var.put('createMethod', PyJs_anonymous_514_)
        var.get('module').put('exports', Js({'entries':var.get('createMethod')(Js(True)),'values':var.get('createMethod')(Js(False))}))
    PyJs_anonymous_513_._set_name('anonymous')
    @Js
    def PyJs_anonymous_516_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'classof', 'exports', 'module', 'TO_STRING_TAG_SUPPORT'])
        Js('use strict')
        var.put('TO_STRING_TAG_SUPPORT', var.get('require')(Js('../internals/to-string-tag-support')))
        var.put('classof', var.get('require')(Js('../internals/classof')))
        @Js
        def PyJs_toString_517_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'toString':PyJs_toString_517_}, var)
            var.registers([])
            return ((Js('[object ')+var.get('classof')(var.get(u"this")))+Js(']'))
        PyJs_toString_517_._set_name('toString')
        var.get('module').put('exports', (Js({}).get('toString') if var.get('TO_STRING_TAG_SUPPORT') else PyJs_toString_517_))
    PyJs_anonymous_516_._set_name('anonymous')
    @Js
    def PyJs_anonymous_518_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'anObject', 'getOwnPropertyNamesModule', 'getBuiltIn', 'exports', 'getOwnPropertySymbolsModule', 'module'])
        var.put('getBuiltIn', var.get('require')(Js('../internals/get-built-in')))
        var.put('getOwnPropertyNamesModule', var.get('require')(Js('../internals/object-get-own-property-names')))
        var.put('getOwnPropertySymbolsModule', var.get('require')(Js('../internals/object-get-own-property-symbols')))
        var.put('anObject', var.get('require')(Js('../internals/an-object')))
        @Js
        def PyJs_ownKeys_519_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'ownKeys':PyJs_ownKeys_519_}, var)
            var.registers(['keys', 'getOwnPropertySymbols', 'it'])
            var.put('keys', var.get('getOwnPropertyNamesModule').callprop('f', var.get('anObject')(var.get('it'))))
            var.put('getOwnPropertySymbols', var.get('getOwnPropertySymbolsModule').get('f'))
            return (var.get('keys').callprop('concat', var.get('getOwnPropertySymbols')(var.get('it'))) if var.get('getOwnPropertySymbols') else var.get('keys'))
        PyJs_ownKeys_519_._set_name('ownKeys')
        var.get('module').put('exports', (var.get('getBuiltIn')(Js('Reflect'), Js('ownKeys')) or PyJs_ownKeys_519_))
    PyJs_anonymous_518_._set_name('anonymous')
    @Js
    def PyJs_anonymous_520_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'global', 'exports'])
        var.put('global', var.get('require')(Js('../internals/global')))
        var.get('module').put('exports', var.get('global'))
    PyJs_anonymous_520_._set_name('anonymous')
    @Js
    def PyJs_anonymous_521_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['has', 'require', 'setGlobal', 'getInternalState', 'InternalStateModule', 'TEMPLATE', 'exports', 'createNonEnumerableProperty', 'module', 'global', 'enforceInternalState', 'inspectSource'])
        var.put('global', var.get('require')(Js('../internals/global')))
        var.put('createNonEnumerableProperty', var.get('require')(Js('../internals/create-non-enumerable-property')))
        var.put('has', var.get('require')(Js('../internals/has')))
        var.put('setGlobal', var.get('require')(Js('../internals/set-global')))
        var.put('inspectSource', var.get('require')(Js('../internals/inspect-source')))
        var.put('InternalStateModule', var.get('require')(Js('../internals/internal-state')))
        var.put('getInternalState', var.get('InternalStateModule').get('get'))
        var.put('enforceInternalState', var.get('InternalStateModule').get('enforce'))
        var.put('TEMPLATE', var.get('String')(var.get('String')).callprop('split', Js('String')))
        @Js
        def PyJs_toString_522_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'toString':PyJs_toString_522_}, var)
            var.registers([])
            return (((var.get(u"this",throw=False).typeof()==Js('function')) and var.get('getInternalState')(var.get(u"this")).get('source')) or var.get('inspectSource')(var.get(u"this")))
        PyJs_toString_522_._set_name('toString')
        @Js
        def PyJs_anonymous_523_(O, key, value, options, this, arguments, var=var):
            var = Scope({'O':O, 'key':key, 'value':value, 'options':options, 'this':this, 'arguments':arguments}, var)
            var.registers(['O', 'value', 'options', 'simple', 'unsafe', 'key', 'state', 'noTargetGet'])
            var.put('unsafe', (var.get('options').get('unsafe').neg().neg() if var.get('options') else Js(False)))
            var.put('simple', (var.get('options').get('enumerable').neg().neg() if var.get('options') else Js(False)))
            var.put('noTargetGet', (var.get('options').get('noTargetGet').neg().neg() if var.get('options') else Js(False)))
            pass
            if (var.get('value',throw=False).typeof()==Js('function')):
                if ((var.get('key',throw=False).typeof()==Js('string')) and var.get('has')(var.get('value'), Js('name')).neg()):
                    var.get('createNonEnumerableProperty')(var.get('value'), Js('name'), var.get('key'))
                var.put('state', var.get('enforceInternalState')(var.get('value')))
                if var.get('state').get('source').neg():
                    var.get('state').put('source', var.get('TEMPLATE').callprop('join', (var.get('key') if (var.get('key',throw=False).typeof()==Js('string')) else Js(''))))
            if PyJsStrictEq(var.get('O'),var.get('global')):
                if var.get('simple'):
                    var.get('O').put(var.get('key'), var.get('value'))
                else:
                    var.get('setGlobal')(var.get('key'), var.get('value'))
                return var.get('undefined')
            else:
                if var.get('unsafe').neg():
                    var.get('O').delete(var.get('key'))
                else:
                    if (var.get('noTargetGet').neg() and var.get('O').get(var.get('key'))):
                        var.put('simple', Js(True))
            if var.get('simple'):
                var.get('O').put(var.get('key'), var.get('value'))
            else:
                var.get('createNonEnumerableProperty')(var.get('O'), var.get('key'), var.get('value'))
        PyJs_anonymous_523_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_523_)(var.get('Function').get('prototype'), Js('toString'), PyJs_toString_522_)
    PyJs_anonymous_521_._set_name('anonymous')
    @Js
    def PyJs_anonymous_524_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'exports'])
        @Js
        def PyJs_anonymous_525_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            if (var.get('it')==var.get('undefined')):
                PyJsTempException = JsToPyException(var.get('TypeError')((Js("Can't call method on ")+var.get('it'))))
                raise PyJsTempException
            return var.get('it')
        PyJs_anonymous_525_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_525_)
    PyJs_anonymous_524_._set_name('anonymous')
    @Js
    def PyJs_anonymous_526_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'exports'])
        @Js
        def PyJs_InlineNonPyName_527_(x, y, this, arguments, var=var):
            var = Scope({'x':x, 'y':y, 'this':this, 'arguments':arguments, 'is':PyJs_InlineNonPyName_527_}, var)
            var.registers(['x', 'y'])
            return ((PyJsStrictNeq(var.get('x'),Js(0.0)) or PyJsStrictEq((Js(1.0)/var.get('x')),(Js(1.0)/var.get('y')))) if PyJsStrictEq(var.get('x'),var.get('y')) else ((var.get('x')!=var.get('x')) and (var.get('y')!=var.get('y'))))
        PyJs_InlineNonPyName_527_._set_name('is')
        var.get('module').put('exports', (var.get('Object').get('is') or PyJs_InlineNonPyName_527_))
    PyJs_anonymous_526_._set_name('anonymous')
    @Js
    def PyJs_anonymous_528_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'exports', 'createNonEnumerableProperty', 'module', 'global'])
        var.put('global', var.get('require')(Js('../internals/global')))
        var.put('createNonEnumerableProperty', var.get('require')(Js('../internals/create-non-enumerable-property')))
        @Js
        def PyJs_anonymous_529_(key, value, this, arguments, var=var):
            var = Scope({'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['key', 'value'])
            try:
                var.get('createNonEnumerableProperty')(var.get('global'), var.get('key'), var.get('value'))
            except PyJsException as PyJsTempException:
                PyJsHolder_6572726f72_11485649 = var.own.get('error')
                var.force_own_put('error', PyExceptionToJs(PyJsTempException))
                try:
                    var.get('global').put(var.get('key'), var.get('value'))
                finally:
                    if PyJsHolder_6572726f72_11485649 is not None:
                        var.own['error'] = PyJsHolder_6572726f72_11485649
                    else:
                        del var.own['error']
                    del PyJsHolder_6572726f72_11485649
            return var.get('value')
        PyJs_anonymous_529_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_529_)
    PyJs_anonymous_528_._set_name('anonymous')
    @Js
    def PyJs_anonymous_530_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['SPECIES', 'require', 'definePropertyModule', 'getBuiltIn', 'exports', 'DESCRIPTORS', 'wellKnownSymbol', 'module'])
        Js('use strict')
        var.put('getBuiltIn', var.get('require')(Js('../internals/get-built-in')))
        var.put('definePropertyModule', var.get('require')(Js('../internals/object-define-property')))
        var.put('wellKnownSymbol', var.get('require')(Js('../internals/well-known-symbol')))
        var.put('DESCRIPTORS', var.get('require')(Js('../internals/descriptors')))
        var.put('SPECIES', var.get('wellKnownSymbol')(Js('species')))
        @Js
        def PyJs_anonymous_531_(CONSTRUCTOR_NAME, this, arguments, var=var):
            var = Scope({'CONSTRUCTOR_NAME':CONSTRUCTOR_NAME, 'this':this, 'arguments':arguments}, var)
            var.registers(['Constructor', 'defineProperty', 'CONSTRUCTOR_NAME'])
            var.put('Constructor', var.get('getBuiltIn')(var.get('CONSTRUCTOR_NAME')))
            var.put('defineProperty', var.get('definePropertyModule').get('f'))
            if ((var.get('DESCRIPTORS') and var.get('Constructor')) and var.get('Constructor').get(var.get('SPECIES')).neg()):
                @Js
                def PyJs_anonymous_532_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return var.get(u"this")
                PyJs_anonymous_532_._set_name('anonymous')
                var.get('defineProperty')(var.get('Constructor'), var.get('SPECIES'), Js({'configurable':Js(True),'get':PyJs_anonymous_532_}))
        PyJs_anonymous_531_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_531_)
    PyJs_anonymous_530_._set_name('anonymous')
    @Js
    def PyJs_anonymous_533_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['has', 'require', 'TO_STRING_TAG', 'exports', 'wellKnownSymbol', 'module', 'defineProperty'])
        var.put('defineProperty', var.get('require')(Js('../internals/object-define-property')).get('f'))
        var.put('has', var.get('require')(Js('../internals/has')))
        var.put('wellKnownSymbol', var.get('require')(Js('../internals/well-known-symbol')))
        var.put('TO_STRING_TAG', var.get('wellKnownSymbol')(Js('toStringTag')))
        @Js
        def PyJs_anonymous_534_(it, TAG, STATIC, this, arguments, var=var):
            var = Scope({'it':it, 'TAG':TAG, 'STATIC':STATIC, 'this':this, 'arguments':arguments}, var)
            var.registers(['it', 'STATIC', 'TAG'])
            if (var.get('it') and var.get('has')(var.put('it', (var.get('it') if var.get('STATIC') else var.get('it').get('prototype'))), var.get('TO_STRING_TAG')).neg()):
                var.get('defineProperty')(var.get('it'), var.get('TO_STRING_TAG'), Js({'configurable':Js(True),'value':var.get('TAG')}))
        PyJs_anonymous_534_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_534_)
    PyJs_anonymous_533_._set_name('anonymous')
    @Js
    def PyJs_anonymous_535_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['keys', 'require', 'exports', 'uid', 'module', 'shared'])
        var.put('shared', var.get('require')(Js('../internals/shared')))
        var.put('uid', var.get('require')(Js('../internals/uid')))
        var.put('keys', var.get('shared')(Js('keys')))
        @Js
        def PyJs_anonymous_536_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
            var.registers(['key'])
            return (var.get('keys').get(var.get('key')) or var.get('keys').put(var.get('key'), var.get('uid')(var.get('key'))))
        PyJs_anonymous_536_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_536_)
    PyJs_anonymous_535_._set_name('anonymous')
    @Js
    def PyJs_anonymous_537_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'SHARED', 'setGlobal', 'store', 'exports', 'module', 'global'])
        var.put('global', var.get('require')(Js('../internals/global')))
        var.put('setGlobal', var.get('require')(Js('../internals/set-global')))
        var.put('SHARED', Js('__core-js_shared__'))
        var.put('store', (var.get('global').get(var.get('SHARED')) or var.get('setGlobal')(var.get('SHARED'), Js({}))))
        var.get('module').put('exports', var.get('store'))
    PyJs_anonymous_537_._set_name('anonymous')
    @Js
    def PyJs_anonymous_538_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'store', 'exports', 'module', 'IS_PURE'])
        var.put('IS_PURE', var.get('require')(Js('../internals/is-pure')))
        var.put('store', var.get('require')(Js('../internals/shared-store')))
        @Js
        def PyJs_anonymous_539_(key, value, this, arguments, var=var):
            var = Scope({'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['key', 'value'])
            return (var.get('store').get(var.get('key')) or var.get('store').put(var.get('key'), (var.get('value') if PyJsStrictNeq(var.get('value'),var.get('undefined')) else Js({}))))
        PyJs_anonymous_539_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_539_)(Js('versions'), Js([])).callprop('push', Js({'version':Js('3.8.1'),'mode':(Js('pure') if var.get('IS_PURE') else Js('global')),'copyright':Js('© 2020 Denis Pushkarev (zloirock.ru)')}))
    PyJs_anonymous_538_._set_name('anonymous')
    @Js
    def PyJs_anonymous_540_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'createMethod', 'requireObjectCoercible', 'exports', 'module', 'toInteger'])
        var.put('toInteger', var.get('require')(Js('../internals/to-integer')))
        var.put('requireObjectCoercible', var.get('require')(Js('../internals/require-object-coercible')))
        @Js
        def PyJs_anonymous_541_(CONVERT_TO_STRING, this, arguments, var=var):
            var = Scope({'CONVERT_TO_STRING':CONVERT_TO_STRING, 'this':this, 'arguments':arguments}, var)
            var.registers(['CONVERT_TO_STRING'])
            @Js
            def PyJs_anonymous_542_(PyJsArg_2474686973_, pos, this, arguments, var=var):
                var = Scope({'$this':PyJsArg_2474686973_, 'pos':pos, 'this':this, 'arguments':arguments}, var)
                var.registers(['position', 'size', 'second', 'S', 'first', '$this', 'pos'])
                var.put('S', var.get('String')(var.get('requireObjectCoercible')(var.get('$this'))))
                var.put('position', var.get('toInteger')(var.get('pos')))
                var.put('size', var.get('S').get('length'))
                pass
                if ((var.get('position')<Js(0.0)) or (var.get('position')>=var.get('size'))):
                    return (Js('') if var.get('CONVERT_TO_STRING') else var.get('undefined'))
                var.put('first', var.get('S').callprop('charCodeAt', var.get('position')))
                def PyJs_LONG_543_(var=var):
                    return ((var.get('S').callprop('charAt', var.get('position')) if var.get('CONVERT_TO_STRING') else var.get('first')) if (((((var.get('first')<Js(55296)) or (var.get('first')>Js(56319))) or PyJsStrictEq((var.get('position')+Js(1.0)),var.get('size'))) or (var.put('second', var.get('S').callprop('charCodeAt', (var.get('position')+Js(1.0))))<Js(56320))) or (var.get('second')>Js(57343))) else (var.get('S').callprop('slice', var.get('position'), (var.get('position')+Js(2.0))) if var.get('CONVERT_TO_STRING') else ((((var.get('first')-Js(55296))<<Js(10.0))+(var.get('second')-Js(56320)))+Js(65536))))
                return PyJs_LONG_543_()
            PyJs_anonymous_542_._set_name('anonymous')
            return PyJs_anonymous_542_
        PyJs_anonymous_541_._set_name('anonymous')
        var.put('createMethod', PyJs_anonymous_541_)
        var.get('module').put('exports', Js({'codeAt':var.get('createMethod')(Js(False)),'charAt':var.get('createMethod')(Js(True))}))
    PyJs_anonymous_540_._set_name('anonymous')
    @Js
    def PyJs_anonymous_544_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['min', 'require', 'exports', 'module', 'toInteger', 'max'])
        var.put('toInteger', var.get('require')(Js('../internals/to-integer')))
        var.put('max', var.get('Math').get('max'))
        var.put('min', var.get('Math').get('min'))
        @Js
        def PyJs_anonymous_545_(index, length, this, arguments, var=var):
            var = Scope({'index':index, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['length', 'index', 'integer'])
            var.put('integer', var.get('toInteger')(var.get('index')))
            return (var.get('max')((var.get('integer')+var.get('length')), Js(0.0)) if (var.get('integer')<Js(0.0)) else var.get('min')(var.get('integer'), var.get('length')))
        PyJs_anonymous_545_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_545_)
    PyJs_anonymous_544_._set_name('anonymous')
    @Js
    def PyJs_anonymous_546_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'requireObjectCoercible', 'exports', 'module', 'IndexedObject'])
        var.put('IndexedObject', var.get('require')(Js('../internals/indexed-object')))
        var.put('requireObjectCoercible', var.get('require')(Js('../internals/require-object-coercible')))
        @Js
        def PyJs_anonymous_547_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return var.get('IndexedObject')(var.get('requireObjectCoercible')(var.get('it')))
        PyJs_anonymous_547_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_547_)
    PyJs_anonymous_546_._set_name('anonymous')
    @Js
    def PyJs_anonymous_548_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['ceil', 'require', 'exports', 'module', 'floor'])
        var.put('ceil', var.get('Math').get('ceil'))
        var.put('floor', var.get('Math').get('floor'))
        @Js
        def PyJs_anonymous_549_(argument, this, arguments, var=var):
            var = Scope({'argument':argument, 'this':this, 'arguments':arguments}, var)
            var.registers(['argument'])
            return (Js(0.0) if var.get('isNaN')(var.put('argument', (+var.get('argument')))) else (var.get('floor') if (var.get('argument')>Js(0.0)) else var.get('ceil'))(var.get('argument')))
        PyJs_anonymous_549_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_549_)
    PyJs_anonymous_548_._set_name('anonymous')
    @Js
    def PyJs_anonymous_550_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['min', 'require', 'exports', 'module', 'toInteger'])
        var.put('toInteger', var.get('require')(Js('../internals/to-integer')))
        var.put('min', var.get('Math').get('min'))
        @Js
        def PyJs_anonymous_551_(argument, this, arguments, var=var):
            var = Scope({'argument':argument, 'this':this, 'arguments':arguments}, var)
            var.registers(['argument'])
            return (var.get('min')(var.get('toInteger')(var.get('argument')), Js(9007199254740991)) if (var.get('argument')>Js(0.0)) else Js(0.0))
        PyJs_anonymous_551_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_551_)
    PyJs_anonymous_550_._set_name('anonymous')
    @Js
    def PyJs_anonymous_552_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'requireObjectCoercible', 'exports'])
        var.put('requireObjectCoercible', var.get('require')(Js('../internals/require-object-coercible')))
        @Js
        def PyJs_anonymous_553_(argument, this, arguments, var=var):
            var = Scope({'argument':argument, 'this':this, 'arguments':arguments}, var)
            var.registers(['argument'])
            return var.get('Object')(var.get('requireObjectCoercible')(var.get('argument')))
        PyJs_anonymous_553_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_553_)
    PyJs_anonymous_552_._set_name('anonymous')
    @Js
    def PyJs_anonymous_554_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'isObject', 'require', 'exports'])
        var.put('isObject', var.get('require')(Js('../internals/is-object')))
        @Js
        def PyJs_anonymous_555_(input, PREFERRED_STRING, this, arguments, var=var):
            var = Scope({'input':input, 'PREFERRED_STRING':PREFERRED_STRING, 'this':this, 'arguments':arguments}, var)
            var.registers(['PREFERRED_STRING', 'input', 'val', 'fn'])
            if var.get('isObject')(var.get('input')).neg():
                return var.get('input')
            pass
            if ((var.get('PREFERRED_STRING') and (var.put('fn', var.get('input').get('toString')).typeof()==Js('function'))) and var.get('isObject')(var.put('val', var.get('fn').callprop('call', var.get('input')))).neg()):
                return var.get('val')
            if ((var.put('fn', var.get('input').get('valueOf')).typeof()==Js('function')) and var.get('isObject')(var.put('val', var.get('fn').callprop('call', var.get('input')))).neg()):
                return var.get('val')
            if ((var.get('PREFERRED_STRING').neg() and (var.put('fn', var.get('input').get('toString')).typeof()==Js('function'))) and var.get('isObject')(var.put('val', var.get('fn').callprop('call', var.get('input')))).neg()):
                return var.get('val')
            PyJsTempException = JsToPyException(var.get('TypeError')(Js("Can't convert object to primitive value")))
            raise PyJsTempException
        PyJs_anonymous_555_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_555_)
    PyJs_anonymous_554_._set_name('anonymous')
    @Js
    def PyJs_anonymous_556_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'TO_STRING_TAG', 'exports', 'wellKnownSymbol', 'test', 'module'])
        var.put('wellKnownSymbol', var.get('require')(Js('../internals/well-known-symbol')))
        var.put('TO_STRING_TAG', var.get('wellKnownSymbol')(Js('toStringTag')))
        var.put('test', Js({}))
        var.get('test').put(var.get('TO_STRING_TAG'), Js('z'))
        var.get('module').put('exports', PyJsStrictEq(var.get('String')(var.get('test')),Js('[object z]')))
    PyJs_anonymous_556_._set_name('anonymous')
    @Js
    def PyJs_anonymous_557_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'exports', 'module', 'id', 'postfix'])
        var.put('id', Js(0.0))
        var.put('postfix', var.get('Math').callprop('random'))
        @Js
        def PyJs_anonymous_558_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
            var.registers(['key'])
            return (((Js('Symbol(')+var.get('String')((Js('') if PyJsStrictEq(var.get('key'),var.get('undefined')) else var.get('key'))))+Js(')_'))+(var.put('id',Js(var.get('id').to_number())+Js(1))+var.get('postfix')).callprop('toString', Js(36.0)))
        PyJs_anonymous_558_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_558_)
    PyJs_anonymous_557_._set_name('anonymous')
    @Js
    def PyJs_anonymous_559_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['NATIVE_SYMBOL', 'module', 'require', 'exports'])
        var.put('NATIVE_SYMBOL', var.get('require')(Js('../internals/native-symbol')))
        var.get('module').put('exports', ((var.get('NATIVE_SYMBOL') and var.get('Symbol').get('sham').neg()) and (var.get('Symbol').get('iterator').typeof()==Js('symbol'))))
    PyJs_anonymous_559_._set_name('anonymous')
    @Js
    def PyJs_anonymous_560_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'wellKnownSymbol', 'require', 'module'])
        var.put('wellKnownSymbol', var.get('require')(Js('../internals/well-known-symbol')))
        var.get('exports').put('f', var.get('wellKnownSymbol'))
    PyJs_anonymous_560_._set_name('anonymous')
    @Js
    def PyJs_anonymous_561_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['has', 'require', 'Symbol', 'NATIVE_SYMBOL', 'exports', 'uid', 'module', 'USE_SYMBOL_AS_UID', 'global', 'createWellKnownSymbol', 'shared', 'WellKnownSymbolsStore'])
        var.put('global', var.get('require')(Js('../internals/global')))
        var.put('shared', var.get('require')(Js('../internals/shared')))
        var.put('has', var.get('require')(Js('../internals/has')))
        var.put('uid', var.get('require')(Js('../internals/uid')))
        var.put('NATIVE_SYMBOL', var.get('require')(Js('../internals/native-symbol')))
        var.put('USE_SYMBOL_AS_UID', var.get('require')(Js('../internals/use-symbol-as-uid')))
        var.put('WellKnownSymbolsStore', var.get('shared')(Js('wks')))
        var.put('Symbol', var.get('global').get('Symbol'))
        var.put('createWellKnownSymbol', (var.get('Symbol') if var.get('USE_SYMBOL_AS_UID') else ((var.get('Symbol') and var.get('Symbol').get('withoutSetter')) or var.get('uid'))))
        @Js
        def PyJs_anonymous_562_(name, this, arguments, var=var):
            var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
            var.registers(['name'])
            if var.get('has')(var.get('WellKnownSymbolsStore'), var.get('name')).neg():
                if (var.get('NATIVE_SYMBOL') and var.get('has')(var.get('Symbol'), var.get('name'))):
                    var.get('WellKnownSymbolsStore').put(var.get('name'), var.get('Symbol').get(var.get('name')))
                else:
                    var.get('WellKnownSymbolsStore').put(var.get('name'), var.get('createWellKnownSymbol')((Js('Symbol.')+var.get('name'))))
            return var.get('WellKnownSymbolsStore').get(var.get('name'))
        PyJs_anonymous_562_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_562_)
    PyJs_anonymous_561_._set_name('anonymous')
    @Js
    def PyJs_anonymous_563_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['arrayMethodHasSpeciesSupport', 'arraySpeciesCreate', 'isArray', 'module', 'MAXIMUM_ALLOWED_INDEX_EXCEEDED', 'createProperty', 'toLength', '$', 'fails', 'IS_CONCAT_SPREADABLE_SUPPORT', 'require', 'MAX_SAFE_INTEGER', 'FORCED', 'isConcatSpreadable', 'IS_CONCAT_SPREADABLE', 'SPECIES_SUPPORT', 'wellKnownSymbol', 'V8_VERSION', 'exports', 'toObject', 'isObject'])
        Js('use strict')
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('fails', var.get('require')(Js('../internals/fails')))
        var.put('isArray', var.get('require')(Js('../internals/is-array')))
        var.put('isObject', var.get('require')(Js('../internals/is-object')))
        var.put('toObject', var.get('require')(Js('../internals/to-object')))
        var.put('toLength', var.get('require')(Js('../internals/to-length')))
        var.put('createProperty', var.get('require')(Js('../internals/create-property')))
        var.put('arraySpeciesCreate', var.get('require')(Js('../internals/array-species-create')))
        var.put('arrayMethodHasSpeciesSupport', var.get('require')(Js('../internals/array-method-has-species-support')))
        var.put('wellKnownSymbol', var.get('require')(Js('../internals/well-known-symbol')))
        var.put('V8_VERSION', var.get('require')(Js('../internals/engine-v8-version')))
        var.put('IS_CONCAT_SPREADABLE', var.get('wellKnownSymbol')(Js('isConcatSpreadable')))
        var.put('MAX_SAFE_INTEGER', Js(9007199254740991))
        var.put('MAXIMUM_ALLOWED_INDEX_EXCEEDED', Js('Maximum allowed index exceeded'))
        @Js
        def PyJs_anonymous_564_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['array'])
            var.put('array', Js([]))
            var.get('array').put(var.get('IS_CONCAT_SPREADABLE'), Js(False))
            return PyJsStrictNeq(var.get('array').callprop('concat').get('0'),var.get('array'))
        PyJs_anonymous_564_._set_name('anonymous')
        var.put('IS_CONCAT_SPREADABLE_SUPPORT', ((var.get('V8_VERSION')>=Js(51.0)) or var.get('fails')(PyJs_anonymous_564_).neg()))
        var.put('SPECIES_SUPPORT', var.get('arrayMethodHasSpeciesSupport')(Js('concat')))
        @Js
        def PyJs_anonymous_565_(O, this, arguments, var=var):
            var = Scope({'O':O, 'this':this, 'arguments':arguments}, var)
            var.registers(['O', 'spreadable'])
            if var.get('isObject')(var.get('O')).neg():
                return Js(False)
            var.put('spreadable', var.get('O').get(var.get('IS_CONCAT_SPREADABLE')))
            return (var.get('spreadable').neg().neg() if PyJsStrictNeq(var.get('spreadable'),var.get('undefined')) else var.get('isArray')(var.get('O')))
        PyJs_anonymous_565_._set_name('anonymous')
        var.put('isConcatSpreadable', PyJs_anonymous_565_)
        var.put('FORCED', (var.get('IS_CONCAT_SPREADABLE_SUPPORT').neg() or var.get('SPECIES_SUPPORT').neg()))
        @Js
        def PyJs_concat_566_(arg, this, arguments, var=var):
            var = Scope({'arg':arg, 'this':this, 'arguments':arguments, 'concat':PyJs_concat_566_}, var)
            var.registers(['arg', 'O', 'n', 'i', 'len', 'length', 'A', 'E', 'k'])
            var.put('O', var.get('toObject')(var.get(u"this")))
            var.put('A', var.get('arraySpeciesCreate')(var.get('O'), Js(0.0)))
            var.put('n', Js(0.0))
            pass
            #for JS loop
            PyJsComma(var.put('i', (-Js(1.0))),var.put('length', var.get('arguments').get('length')))
            while (var.get('i')<var.get('length')):
                try:
                    var.put('E', (var.get('O') if PyJsStrictEq(var.get('i'),(-Js(1.0))) else var.get('arguments').get(var.get('i'))))
                    if var.get('isConcatSpreadable')(var.get('E')):
                        var.put('len', var.get('toLength')(var.get('E').get('length')))
                        if ((var.get('n')+var.get('len'))>var.get('MAX_SAFE_INTEGER')):
                            PyJsTempException = JsToPyException(var.get('TypeError')(var.get('MAXIMUM_ALLOWED_INDEX_EXCEEDED')))
                            raise PyJsTempException
                        #for JS loop
                        var.put('k', Js(0.0))
                        while (var.get('k')<var.get('len')):
                            try:
                                if var.get('E').contains(var.get('k')):
                                    var.get('createProperty')(var.get('A'), var.get('n'), var.get('E').get(var.get('k')))
                            finally:
                                    PyJsComma((var.put('k',Js(var.get('k').to_number())+Js(1))-Js(1)),(var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1)))
                    else:
                        if (var.get('n')>=var.get('MAX_SAFE_INTEGER')):
                            PyJsTempException = JsToPyException(var.get('TypeError')(var.get('MAXIMUM_ALLOWED_INDEX_EXCEEDED')))
                            raise PyJsTempException
                        var.get('createProperty')(var.get('A'), (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1)), var.get('E'))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            var.get('A').put('length', var.get('n'))
            return var.get('A')
        PyJs_concat_566_._set_name('concat')
        var.get('$')(Js({'target':Js('Array'),'proto':Js(True),'forced':var.get('FORCED')}), Js({'concat':PyJs_concat_566_}))
    PyJs_anonymous_563_._set_name('anonymous')
    @Js
    def PyJs_anonymous_567_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'copyWithin', 'require', 'addToUnscopables', 'exports', 'module'])
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('copyWithin', var.get('require')(Js('../internals/array-copy-within')))
        var.put('addToUnscopables', var.get('require')(Js('../internals/add-to-unscopables')))
        var.get('$')(Js({'target':Js('Array'),'proto':Js(True)}), Js({'copyWithin':var.get('copyWithin')}))
        var.get('addToUnscopables')(Js('copyWithin'))
    PyJs_anonymous_567_._set_name('anonymous')
    @Js
    def PyJs_anonymous_568_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['STRICT_METHOD', '$', 'require', 'USES_TO_LENGTH', 'exports', 'arrayMethodUsesToLength', 'module', '$every', 'arrayMethodIsStrict'])
        Js('use strict')
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('$every', var.get('require')(Js('../internals/array-iteration')).get('every'))
        var.put('arrayMethodIsStrict', var.get('require')(Js('../internals/array-method-is-strict')))
        var.put('arrayMethodUsesToLength', var.get('require')(Js('../internals/array-method-uses-to-length')))
        var.put('STRICT_METHOD', var.get('arrayMethodIsStrict')(Js('every')))
        var.put('USES_TO_LENGTH', var.get('arrayMethodUsesToLength')(Js('every')))
        @Js
        def PyJs_every_569_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'every':PyJs_every_569_}, var)
            var.registers(['callbackfn'])
            return var.get('$every')(var.get(u"this"), var.get('callbackfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
        PyJs_every_569_._set_name('every')
        var.get('$')(Js({'target':Js('Array'),'proto':Js(True),'forced':(var.get('STRICT_METHOD').neg() or var.get('USES_TO_LENGTH').neg())}), Js({'every':PyJs_every_569_}))
    PyJs_anonymous_568_._set_name('anonymous')
    @Js
    def PyJs_anonymous_570_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'require', 'addToUnscopables', 'exports', 'module', 'fill'])
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('fill', var.get('require')(Js('../internals/array-fill')))
        var.put('addToUnscopables', var.get('require')(Js('../internals/add-to-unscopables')))
        var.get('$')(Js({'target':Js('Array'),'proto':Js(True)}), Js({'fill':var.get('fill')}))
        var.get('addToUnscopables')(Js('fill'))
    PyJs_anonymous_570_._set_name('anonymous')
    @Js
    def PyJs_anonymous_571_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'require', 'USES_TO_LENGTH', 'HAS_SPECIES_SUPPORT', 'arrayMethodHasSpeciesSupport', 'exports', 'arrayMethodUsesToLength', 'module', '$filter'])
        Js('use strict')
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('$filter', var.get('require')(Js('../internals/array-iteration')).get('filter'))
        var.put('arrayMethodHasSpeciesSupport', var.get('require')(Js('../internals/array-method-has-species-support')))
        var.put('arrayMethodUsesToLength', var.get('require')(Js('../internals/array-method-uses-to-length')))
        var.put('HAS_SPECIES_SUPPORT', var.get('arrayMethodHasSpeciesSupport')(Js('filter')))
        var.put('USES_TO_LENGTH', var.get('arrayMethodUsesToLength')(Js('filter')))
        @Js
        def PyJs_filter_572_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'filter':PyJs_filter_572_}, var)
            var.registers(['callbackfn'])
            return var.get('$filter')(var.get(u"this"), var.get('callbackfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
        PyJs_filter_572_._set_name('filter')
        var.get('$')(Js({'target':Js('Array'),'proto':Js(True),'forced':(var.get('HAS_SPECIES_SUPPORT').neg() or var.get('USES_TO_LENGTH').neg())}), Js({'filter':PyJs_filter_572_}))
    PyJs_anonymous_571_._set_name('anonymous')
    @Js
    def PyJs_anonymous_573_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'require', 'addToUnscopables', 'USES_TO_LENGTH', 'exports', 'FIND_INDEX', 'arrayMethodUsesToLength', '$findIndex', 'SKIPS_HOLES', 'module'])
        Js('use strict')
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('$findIndex', var.get('require')(Js('../internals/array-iteration')).get('findIndex'))
        var.put('addToUnscopables', var.get('require')(Js('../internals/add-to-unscopables')))
        var.put('arrayMethodUsesToLength', var.get('require')(Js('../internals/array-method-uses-to-length')))
        var.put('FIND_INDEX', Js('findIndex'))
        var.put('SKIPS_HOLES', Js(True))
        var.put('USES_TO_LENGTH', var.get('arrayMethodUsesToLength')(var.get('FIND_INDEX')))
        if Js([]).contains(var.get('FIND_INDEX')):
            @Js
            def PyJs_anonymous_574_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.put('SKIPS_HOLES', Js(False))
            PyJs_anonymous_574_._set_name('anonymous')
            var.get('Array')(Js(1.0)).callprop(var.get('FIND_INDEX'), PyJs_anonymous_574_)
        @Js
        def PyJs_findIndex_575_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'findIndex':PyJs_findIndex_575_}, var)
            var.registers(['callbackfn'])
            return var.get('$findIndex')(var.get(u"this"), var.get('callbackfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
        PyJs_findIndex_575_._set_name('findIndex')
        var.get('$')(Js({'target':Js('Array'),'proto':Js(True),'forced':(var.get('SKIPS_HOLES') or var.get('USES_TO_LENGTH').neg())}), Js({'findIndex':PyJs_findIndex_575_}))
        var.get('addToUnscopables')(var.get('FIND_INDEX'))
    PyJs_anonymous_573_._set_name('anonymous')
    @Js
    def PyJs_anonymous_576_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'require', 'FIND', 'addToUnscopables', 'USES_TO_LENGTH', '$find', 'exports', 'arrayMethodUsesToLength', 'SKIPS_HOLES', 'module'])
        Js('use strict')
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('$find', var.get('require')(Js('../internals/array-iteration')).get('find'))
        var.put('addToUnscopables', var.get('require')(Js('../internals/add-to-unscopables')))
        var.put('arrayMethodUsesToLength', var.get('require')(Js('../internals/array-method-uses-to-length')))
        var.put('FIND', Js('find'))
        var.put('SKIPS_HOLES', Js(True))
        var.put('USES_TO_LENGTH', var.get('arrayMethodUsesToLength')(var.get('FIND')))
        if Js([]).contains(var.get('FIND')):
            @Js
            def PyJs_anonymous_577_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.put('SKIPS_HOLES', Js(False))
            PyJs_anonymous_577_._set_name('anonymous')
            var.get('Array')(Js(1.0)).callprop(var.get('FIND'), PyJs_anonymous_577_)
        @Js
        def PyJs_find_578_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'find':PyJs_find_578_}, var)
            var.registers(['callbackfn'])
            return var.get('$find')(var.get(u"this"), var.get('callbackfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
        PyJs_find_578_._set_name('find')
        var.get('$')(Js({'target':Js('Array'),'proto':Js(True),'forced':(var.get('SKIPS_HOLES') or var.get('USES_TO_LENGTH').neg())}), Js({'find':PyJs_find_578_}))
        var.get('addToUnscopables')(var.get('FIND'))
    PyJs_anonymous_576_._set_name('anonymous')
    @Js
    def PyJs_anonymous_579_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'require', 'aFunction', 'arraySpeciesCreate', 'exports', 'module', 'toObject', 'toLength', 'flattenIntoArray'])
        Js('use strict')
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('flattenIntoArray', var.get('require')(Js('../internals/flatten-into-array')))
        var.put('toObject', var.get('require')(Js('../internals/to-object')))
        var.put('toLength', var.get('require')(Js('../internals/to-length')))
        var.put('aFunction', var.get('require')(Js('../internals/a-function')))
        var.put('arraySpeciesCreate', var.get('require')(Js('../internals/array-species-create')))
        @Js
        def PyJs_flatMap_580_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'flatMap':PyJs_flatMap_580_}, var)
            var.registers(['callbackfn', 'O', 'A', 'sourceLen'])
            var.put('O', var.get('toObject')(var.get(u"this")))
            var.put('sourceLen', var.get('toLength')(var.get('O').get('length')))
            pass
            var.get('aFunction')(var.get('callbackfn'))
            var.put('A', var.get('arraySpeciesCreate')(var.get('O'), Js(0.0)))
            var.get('A').put('length', var.get('flattenIntoArray')(var.get('A'), var.get('O'), var.get('O'), var.get('sourceLen'), Js(0.0), Js(1.0), var.get('callbackfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined'))))
            return var.get('A')
        PyJs_flatMap_580_._set_name('flatMap')
        var.get('$')(Js({'target':Js('Array'),'proto':Js(True)}), Js({'flatMap':PyJs_flatMap_580_}))
    PyJs_anonymous_579_._set_name('anonymous')
    @Js
    def PyJs_anonymous_581_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'require', 'arraySpeciesCreate', 'exports', 'module', 'toObject', 'toInteger', 'toLength', 'flattenIntoArray'])
        Js('use strict')
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('flattenIntoArray', var.get('require')(Js('../internals/flatten-into-array')))
        var.put('toObject', var.get('require')(Js('../internals/to-object')))
        var.put('toLength', var.get('require')(Js('../internals/to-length')))
        var.put('toInteger', var.get('require')(Js('../internals/to-integer')))
        var.put('arraySpeciesCreate', var.get('require')(Js('../internals/array-species-create')))
        @Js
        def PyJs_flat_582_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'flat':PyJs_flat_582_}, var)
            var.registers(['depthArg', 'O', 'A', 'sourceLen'])
            var.put('depthArg', (var.get('arguments').get('0') if var.get('arguments').get('length') else var.get('undefined')))
            var.put('O', var.get('toObject')(var.get(u"this")))
            var.put('sourceLen', var.get('toLength')(var.get('O').get('length')))
            var.put('A', var.get('arraySpeciesCreate')(var.get('O'), Js(0.0)))
            var.get('A').put('length', var.get('flattenIntoArray')(var.get('A'), var.get('O'), var.get('O'), var.get('sourceLen'), Js(0.0), (Js(1.0) if PyJsStrictEq(var.get('depthArg'),var.get('undefined')) else var.get('toInteger')(var.get('depthArg')))))
            return var.get('A')
        PyJs_flat_582_._set_name('flat')
        var.get('$')(Js({'target':Js('Array'),'proto':Js(True)}), Js({'flat':PyJs_flat_582_}))
    PyJs_anonymous_581_._set_name('anonymous')
    @Js
    def PyJs_anonymous_583_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'forEach', 'require', 'exports', 'module'])
        Js('use strict')
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('forEach', var.get('require')(Js('../internals/array-for-each')))
        var.get('$')(Js({'target':Js('Array'),'proto':Js(True),'forced':(Js([]).get('forEach')!=var.get('forEach'))}), Js({'forEach':var.get('forEach')}))
    PyJs_anonymous_583_._set_name('anonymous')
    @Js
    def PyJs_anonymous_584_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'require', 'from', 'exports', 'checkCorrectnessOfIteration', 'module', 'INCORRECT_ITERATION'])
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('from', var.get('require')(Js('../internals/array-from')))
        var.put('checkCorrectnessOfIteration', var.get('require')(Js('../internals/check-correctness-of-iteration')))
        @Js
        def PyJs_anonymous_585_(iterable, this, arguments, var=var):
            var = Scope({'iterable':iterable, 'this':this, 'arguments':arguments}, var)
            var.registers(['iterable'])
            var.get('Array').callprop('from', var.get('iterable'))
        PyJs_anonymous_585_._set_name('anonymous')
        var.put('INCORRECT_ITERATION', var.get('checkCorrectnessOfIteration')(PyJs_anonymous_585_).neg())
        var.get('$')(Js({'target':Js('Array'),'stat':Js(True),'forced':var.get('INCORRECT_ITERATION')}), Js({'from':var.get('from')}))
    PyJs_anonymous_584_._set_name('anonymous')
    @Js
    def PyJs_anonymous_586_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$includes', '$', 'require', 'addToUnscopables', 'USES_TO_LENGTH', 'exports', 'arrayMethodUsesToLength', 'module'])
        Js('use strict')
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('$includes', var.get('require')(Js('../internals/array-includes')).get('includes'))
        var.put('addToUnscopables', var.get('require')(Js('../internals/add-to-unscopables')))
        var.put('arrayMethodUsesToLength', var.get('require')(Js('../internals/array-method-uses-to-length')))
        var.put('USES_TO_LENGTH', var.get('arrayMethodUsesToLength')(Js('indexOf'), Js({'ACCESSORS':Js(True),'1':Js(0.0)})))
        @Js
        def PyJs_includes_587_(el, this, arguments, var=var):
            var = Scope({'el':el, 'this':this, 'arguments':arguments, 'includes':PyJs_includes_587_}, var)
            var.registers(['el'])
            return var.get('$includes')(var.get(u"this"), var.get('el'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
        PyJs_includes_587_._set_name('includes')
        var.get('$')(Js({'target':Js('Array'),'proto':Js(True),'forced':var.get('USES_TO_LENGTH').neg()}), Js({'includes':PyJs_includes_587_}))
        var.get('addToUnscopables')(Js('includes'))
    PyJs_anonymous_586_._set_name('anonymous')
    @Js
    def PyJs_anonymous_588_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['STRICT_METHOD', '$', 'nativeIndexOf', 'require', 'USES_TO_LENGTH', 'NEGATIVE_ZERO', 'exports', 'arrayMethodUsesToLength', 'module', 'arrayMethodIsStrict', '$indexOf'])
        Js('use strict')
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('$indexOf', var.get('require')(Js('../internals/array-includes')).get('indexOf'))
        var.put('arrayMethodIsStrict', var.get('require')(Js('../internals/array-method-is-strict')))
        var.put('arrayMethodUsesToLength', var.get('require')(Js('../internals/array-method-uses-to-length')))
        var.put('nativeIndexOf', Js([]).get('indexOf'))
        var.put('NEGATIVE_ZERO', (var.get('nativeIndexOf').neg().neg() and ((Js(1.0)/Js([Js(1.0)]).callprop('indexOf', Js(1.0), (-Js(0.0))))<Js(0.0))))
        var.put('STRICT_METHOD', var.get('arrayMethodIsStrict')(Js('indexOf')))
        var.put('USES_TO_LENGTH', var.get('arrayMethodUsesToLength')(Js('indexOf'), Js({'ACCESSORS':Js(True),'1':Js(0.0)})))
        @Js
        def PyJs_indexOf_589_(searchElement, this, arguments, var=var):
            var = Scope({'searchElement':searchElement, 'this':this, 'arguments':arguments, 'indexOf':PyJs_indexOf_589_}, var)
            var.registers(['searchElement'])
            return ((var.get('nativeIndexOf').callprop('apply', var.get(u"this"), var.get('arguments')) or Js(0.0)) if var.get('NEGATIVE_ZERO') else var.get('$indexOf')(var.get(u"this"), var.get('searchElement'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined'))))
        PyJs_indexOf_589_._set_name('indexOf')
        var.get('$')(Js({'target':Js('Array'),'proto':Js(True),'forced':((var.get('NEGATIVE_ZERO') or var.get('STRICT_METHOD').neg()) or var.get('USES_TO_LENGTH').neg())}), Js({'indexOf':PyJs_indexOf_589_}))
    PyJs_anonymous_588_._set_name('anonymous')
    @Js
    def PyJs_anonymous_590_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'require', 'exports', 'isArray', 'module'])
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('isArray', var.get('require')(Js('../internals/is-array')))
        var.get('$')(Js({'target':Js('Array'),'stat':Js(True)}), Js({'isArray':var.get('isArray')}))
    PyJs_anonymous_590_._set_name('anonymous')
    @Js
    def PyJs_anonymous_591_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['Iterators', 'ARRAY_ITERATOR', 'require', 'addToUnscopables', 'getInternalState', 'InternalStateModule', 'toIndexedObject', 'exports', 'module', 'defineIterator', 'setInternalState'])
        Js('use strict')
        var.put('toIndexedObject', var.get('require')(Js('../internals/to-indexed-object')))
        var.put('addToUnscopables', var.get('require')(Js('../internals/add-to-unscopables')))
        var.put('Iterators', var.get('require')(Js('../internals/iterators')))
        var.put('InternalStateModule', var.get('require')(Js('../internals/internal-state')))
        var.put('defineIterator', var.get('require')(Js('../internals/define-iterator')))
        var.put('ARRAY_ITERATOR', Js('Array Iterator'))
        var.put('setInternalState', var.get('InternalStateModule').get('set'))
        var.put('getInternalState', var.get('InternalStateModule').callprop('getterFor', var.get('ARRAY_ITERATOR')))
        @Js
        def PyJs_anonymous_592_(iterated, kind, this, arguments, var=var):
            var = Scope({'iterated':iterated, 'kind':kind, 'this':this, 'arguments':arguments}, var)
            var.registers(['kind', 'iterated'])
            var.get('setInternalState')(var.get(u"this"), Js({'type':var.get('ARRAY_ITERATOR'),'target':var.get('toIndexedObject')(var.get('iterated')),'index':Js(0.0),'kind':var.get('kind')}))
        PyJs_anonymous_592_._set_name('anonymous')
        @Js
        def PyJs_anonymous_593_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['kind', 'index', 'state', 'target'])
            var.put('state', var.get('getInternalState')(var.get(u"this")))
            var.put('target', var.get('state').get('target'))
            var.put('kind', var.get('state').get('kind'))
            var.put('index', (var.get('state').put('index',Js(var.get('state').get('index').to_number())+Js(1))-Js(1)))
            if (var.get('target').neg() or (var.get('index')>=var.get('target').get('length'))):
                var.get('state').put('target', var.get('undefined'))
                return Js({'value':var.get('undefined'),'done':Js(True)})
            if (var.get('kind')==Js('keys')):
                return Js({'value':var.get('index'),'done':Js(False)})
            if (var.get('kind')==Js('values')):
                return Js({'value':var.get('target').get(var.get('index')),'done':Js(False)})
            return Js({'value':Js([var.get('index'), var.get('target').get(var.get('index'))]),'done':Js(False)})
        PyJs_anonymous_593_._set_name('anonymous')
        var.get('module').put('exports', var.get('defineIterator')(var.get('Array'), Js('Array'), PyJs_anonymous_592_, PyJs_anonymous_593_, Js('values')))
        var.get('Iterators').put('Arguments', var.get('Iterators').get('Array'))
        var.get('addToUnscopables')(Js('keys'))
        var.get('addToUnscopables')(Js('values'))
        var.get('addToUnscopables')(Js('entries'))
    PyJs_anonymous_591_._set_name('anonymous')
    @Js
    def PyJs_anonymous_594_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['STRICT_METHOD', 'nativeJoin', '$', 'require', 'toIndexedObject', 'exports', 'module', 'IndexedObject', 'ES3_STRINGS', 'arrayMethodIsStrict'])
        Js('use strict')
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('IndexedObject', var.get('require')(Js('../internals/indexed-object')))
        var.put('toIndexedObject', var.get('require')(Js('../internals/to-indexed-object')))
        var.put('arrayMethodIsStrict', var.get('require')(Js('../internals/array-method-is-strict')))
        var.put('nativeJoin', Js([]).get('join'))
        var.put('ES3_STRINGS', (var.get('IndexedObject')!=var.get('Object')))
        var.put('STRICT_METHOD', var.get('arrayMethodIsStrict')(Js('join'), Js(',')))
        @Js
        def PyJs_join_595_(separator, this, arguments, var=var):
            var = Scope({'separator':separator, 'this':this, 'arguments':arguments, 'join':PyJs_join_595_}, var)
            var.registers(['separator'])
            return var.get('nativeJoin').callprop('call', var.get('toIndexedObject')(var.get(u"this")), (Js(',') if PyJsStrictEq(var.get('separator'),var.get('undefined')) else var.get('separator')))
        PyJs_join_595_._set_name('join')
        var.get('$')(Js({'target':Js('Array'),'proto':Js(True),'forced':(var.get('ES3_STRINGS') or var.get('STRICT_METHOD').neg())}), Js({'join':PyJs_join_595_}))
    PyJs_anonymous_594_._set_name('anonymous')
    @Js
    def PyJs_anonymous_596_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'require', 'lastIndexOf', 'exports', 'module'])
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('lastIndexOf', var.get('require')(Js('../internals/array-last-index-of')))
        var.get('$')(Js({'target':Js('Array'),'proto':Js(True),'forced':PyJsStrictNeq(var.get('lastIndexOf'),Js([]).get('lastIndexOf'))}), Js({'lastIndexOf':var.get('lastIndexOf')}))
    PyJs_anonymous_596_._set_name('anonymous')
    @Js
    def PyJs_anonymous_597_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', '$map', 'require', 'USES_TO_LENGTH', 'HAS_SPECIES_SUPPORT', 'arrayMethodHasSpeciesSupport', 'exports', 'arrayMethodUsesToLength', 'module'])
        Js('use strict')
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('$map', var.get('require')(Js('../internals/array-iteration')).get('map'))
        var.put('arrayMethodHasSpeciesSupport', var.get('require')(Js('../internals/array-method-has-species-support')))
        var.put('arrayMethodUsesToLength', var.get('require')(Js('../internals/array-method-uses-to-length')))
        var.put('HAS_SPECIES_SUPPORT', var.get('arrayMethodHasSpeciesSupport')(Js('map')))
        var.put('USES_TO_LENGTH', var.get('arrayMethodUsesToLength')(Js('map')))
        @Js
        def PyJs_map_598_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'map':PyJs_map_598_}, var)
            var.registers(['callbackfn'])
            return var.get('$map')(var.get(u"this"), var.get('callbackfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
        PyJs_map_598_._set_name('map')
        var.get('$')(Js({'target':Js('Array'),'proto':Js(True),'forced':(var.get('HAS_SPECIES_SUPPORT').neg() or var.get('USES_TO_LENGTH').neg())}), Js({'map':PyJs_map_598_}))
    PyJs_anonymous_597_._set_name('anonymous')
    @Js
    def PyJs_anonymous_599_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'require', 'fails', 'exports', 'module', 'createProperty', 'ISNT_GENERIC'])
        Js('use strict')
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('fails', var.get('require')(Js('../internals/fails')))
        var.put('createProperty', var.get('require')(Js('../internals/create-property')))
        @Js
        def PyJs_anonymous_600_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['F'])
            @Js
            def PyJsHoisted_F_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                pass
            PyJsHoisted_F_.func_name = 'F'
            var.put('F', PyJsHoisted_F_)
            pass
            return var.get('Array').get('of').callprop('call', var.get('F')).instanceof(var.get('F')).neg()
        PyJs_anonymous_600_._set_name('anonymous')
        var.put('ISNT_GENERIC', var.get('fails')(PyJs_anonymous_600_))
        @Js
        def PyJs_of_601_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'of':PyJs_of_601_}, var)
            var.registers(['result', 'index', 'argumentsLength'])
            var.put('index', Js(0.0))
            var.put('argumentsLength', var.get('arguments').get('length'))
            var.put('result', (var.get(u"this") if (var.get(u"this",throw=False).typeof()==Js('function')) else var.get('Array')).create(var.get('argumentsLength')))
            while (var.get('argumentsLength')>var.get('index')):
                var.get('createProperty')(var.get('result'), var.get('index'), var.get('arguments').get((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))))
            var.get('result').put('length', var.get('argumentsLength'))
            return var.get('result')
        PyJs_of_601_._set_name('of')
        var.get('$')(Js({'target':Js('Array'),'stat':Js(True),'forced':var.get('ISNT_GENERIC')}), Js({'of':PyJs_of_601_}))
    PyJs_anonymous_599_._set_name('anonymous')
    @Js
    def PyJs_anonymous_602_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['IS_NODE', 'STRICT_METHOD', '$', 'require', 'USES_TO_LENGTH', 'exports', 'arrayMethodUsesToLength', 'module', '$reduceRight', 'CHROME_BUG', 'arrayMethodIsStrict', 'CHROME_VERSION'])
        Js('use strict')
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('$reduceRight', var.get('require')(Js('../internals/array-reduce')).get('right'))
        var.put('arrayMethodIsStrict', var.get('require')(Js('../internals/array-method-is-strict')))
        var.put('arrayMethodUsesToLength', var.get('require')(Js('../internals/array-method-uses-to-length')))
        var.put('CHROME_VERSION', var.get('require')(Js('../internals/engine-v8-version')))
        var.put('IS_NODE', var.get('require')(Js('../internals/engine-is-node')))
        var.put('STRICT_METHOD', var.get('arrayMethodIsStrict')(Js('reduceRight')))
        var.put('USES_TO_LENGTH', var.get('arrayMethodUsesToLength')(Js('reduce'), Js({'1':Js(0.0)})))
        var.put('CHROME_BUG', ((var.get('IS_NODE').neg() and (var.get('CHROME_VERSION')>Js(79.0))) and (var.get('CHROME_VERSION')<Js(83.0))))
        @Js
        def PyJs_reduceRight_603_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'reduceRight':PyJs_reduceRight_603_}, var)
            var.registers(['callbackfn'])
            return var.get('$reduceRight')(var.get(u"this"), var.get('callbackfn'), var.get('arguments').get('length'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
        PyJs_reduceRight_603_._set_name('reduceRight')
        var.get('$')(Js({'target':Js('Array'),'proto':Js(True),'forced':((var.get('STRICT_METHOD').neg() or var.get('USES_TO_LENGTH').neg()) or var.get('CHROME_BUG'))}), Js({'reduceRight':PyJs_reduceRight_603_}))
    PyJs_anonymous_602_._set_name('anonymous')
    @Js
    def PyJs_anonymous_604_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['IS_NODE', 'STRICT_METHOD', '$', 'require', 'USES_TO_LENGTH', '$reduce', 'exports', 'arrayMethodUsesToLength', 'module', 'CHROME_BUG', 'arrayMethodIsStrict', 'CHROME_VERSION'])
        Js('use strict')
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('$reduce', var.get('require')(Js('../internals/array-reduce')).get('left'))
        var.put('arrayMethodIsStrict', var.get('require')(Js('../internals/array-method-is-strict')))
        var.put('arrayMethodUsesToLength', var.get('require')(Js('../internals/array-method-uses-to-length')))
        var.put('CHROME_VERSION', var.get('require')(Js('../internals/engine-v8-version')))
        var.put('IS_NODE', var.get('require')(Js('../internals/engine-is-node')))
        var.put('STRICT_METHOD', var.get('arrayMethodIsStrict')(Js('reduce')))
        var.put('USES_TO_LENGTH', var.get('arrayMethodUsesToLength')(Js('reduce'), Js({'1':Js(0.0)})))
        var.put('CHROME_BUG', ((var.get('IS_NODE').neg() and (var.get('CHROME_VERSION')>Js(79.0))) and (var.get('CHROME_VERSION')<Js(83.0))))
        @Js
        def PyJs_reduce_605_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'reduce':PyJs_reduce_605_}, var)
            var.registers(['callbackfn'])
            return var.get('$reduce')(var.get(u"this"), var.get('callbackfn'), var.get('arguments').get('length'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
        PyJs_reduce_605_._set_name('reduce')
        var.get('$')(Js({'target':Js('Array'),'proto':Js(True),'forced':((var.get('STRICT_METHOD').neg() or var.get('USES_TO_LENGTH').neg()) or var.get('CHROME_BUG'))}), Js({'reduce':PyJs_reduce_605_}))
    PyJs_anonymous_604_._set_name('anonymous')
    @Js
    def PyJs_anonymous_606_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'require', 'exports', 'test', 'isArray', 'module', 'nativeReverse'])
        Js('use strict')
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('isArray', var.get('require')(Js('../internals/is-array')))
        var.put('nativeReverse', Js([]).get('reverse'))
        var.put('test', Js([Js(1.0), Js(2.0)]))
        @Js
        def PyJs_reverse_607_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'reverse':PyJs_reverse_607_}, var)
            var.registers([])
            if var.get('isArray')(var.get(u"this")):
                var.get(u"this").put('length', var.get(u"this").get('length'))
            return var.get('nativeReverse').callprop('call', var.get(u"this"))
        PyJs_reverse_607_._set_name('reverse')
        var.get('$')(Js({'target':Js('Array'),'proto':Js(True),'forced':PyJsStrictEq(var.get('String')(var.get('test')),var.get('String')(var.get('test').callprop('reverse')))}), Js({'reverse':PyJs_reverse_607_}))
    PyJs_anonymous_606_._set_name('anonymous')
    @Js
    def PyJs_anonymous_608_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['SPECIES', '$', 'require', 'USES_TO_LENGTH', 'HAS_SPECIES_SUPPORT', 'nativeSlice', 'toAbsoluteIndex', 'arrayMethodHasSpeciesSupport', 'toIndexedObject', 'exports', 'wellKnownSymbol', 'max', 'arrayMethodUsesToLength', 'isArray', 'module', 'isObject', 'toLength', 'createProperty'])
        Js('use strict')
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('isObject', var.get('require')(Js('../internals/is-object')))
        var.put('isArray', var.get('require')(Js('../internals/is-array')))
        var.put('toAbsoluteIndex', var.get('require')(Js('../internals/to-absolute-index')))
        var.put('toLength', var.get('require')(Js('../internals/to-length')))
        var.put('toIndexedObject', var.get('require')(Js('../internals/to-indexed-object')))
        var.put('createProperty', var.get('require')(Js('../internals/create-property')))
        var.put('wellKnownSymbol', var.get('require')(Js('../internals/well-known-symbol')))
        var.put('arrayMethodHasSpeciesSupport', var.get('require')(Js('../internals/array-method-has-species-support')))
        var.put('arrayMethodUsesToLength', var.get('require')(Js('../internals/array-method-uses-to-length')))
        var.put('HAS_SPECIES_SUPPORT', var.get('arrayMethodHasSpeciesSupport')(Js('slice')))
        var.put('USES_TO_LENGTH', var.get('arrayMethodUsesToLength')(Js('slice'), Js({'ACCESSORS':Js(True),'0':Js(0.0),'1':Js(2.0)})))
        var.put('SPECIES', var.get('wellKnownSymbol')(Js('species')))
        var.put('nativeSlice', Js([]).get('slice'))
        var.put('max', var.get('Math').get('max'))
        @Js
        def PyJs_slice_609_(start, end, this, arguments, var=var):
            var = Scope({'start':start, 'end':end, 'this':this, 'arguments':arguments, 'slice':PyJs_slice_609_}, var)
            var.registers(['result', 'O', 'start', 'n', 'end', 'Constructor', 'length', 'fin', 'k'])
            var.put('O', var.get('toIndexedObject')(var.get(u"this")))
            var.put('length', var.get('toLength')(var.get('O').get('length')))
            var.put('k', var.get('toAbsoluteIndex')(var.get('start'), var.get('length')))
            var.put('fin', var.get('toAbsoluteIndex')((var.get('length') if PyJsStrictEq(var.get('end'),var.get('undefined')) else var.get('end')), var.get('length')))
            pass
            if var.get('isArray')(var.get('O')):
                var.put('Constructor', var.get('O').get('constructor'))
                if ((var.get('Constructor',throw=False).typeof()==Js('function')) and (PyJsStrictEq(var.get('Constructor'),var.get('Array')) or var.get('isArray')(var.get('Constructor').get('prototype')))):
                    var.put('Constructor', var.get('undefined'))
                else:
                    if var.get('isObject')(var.get('Constructor')):
                        var.put('Constructor', var.get('Constructor').get(var.get('SPECIES')))
                        if PyJsStrictEq(var.get('Constructor'),var.get(u"null")):
                            var.put('Constructor', var.get('undefined'))
                if (PyJsStrictEq(var.get('Constructor'),var.get('Array')) or PyJsStrictEq(var.get('Constructor'),var.get('undefined'))):
                    return var.get('nativeSlice').callprop('call', var.get('O'), var.get('k'), var.get('fin'))
            var.put('result', (var.get('Array') if PyJsStrictEq(var.get('Constructor'),var.get('undefined')) else var.get('Constructor')).create(var.get('max')((var.get('fin')-var.get('k')), Js(0.0))))
            #for JS loop
            var.put('n', Js(0.0))
            while (var.get('k')<var.get('fin')):
                try:
                    if var.get('O').contains(var.get('k')):
                        var.get('createProperty')(var.get('result'), var.get('n'), var.get('O').get(var.get('k')))
                finally:
                        PyJsComma((var.put('k',Js(var.get('k').to_number())+Js(1))-Js(1)),(var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1)))
            var.get('result').put('length', var.get('n'))
            return var.get('result')
        PyJs_slice_609_._set_name('slice')
        var.get('$')(Js({'target':Js('Array'),'proto':Js(True),'forced':(var.get('HAS_SPECIES_SUPPORT').neg() or var.get('USES_TO_LENGTH').neg())}), Js({'slice':PyJs_slice_609_}))
    PyJs_anonymous_608_._set_name('anonymous')
    @Js
    def PyJs_anonymous_610_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['STRICT_METHOD', '$', 'require', 'USES_TO_LENGTH', 'exports', 'arrayMethodUsesToLength', 'module', '$some', 'arrayMethodIsStrict'])
        Js('use strict')
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('$some', var.get('require')(Js('../internals/array-iteration')).get('some'))
        var.put('arrayMethodIsStrict', var.get('require')(Js('../internals/array-method-is-strict')))
        var.put('arrayMethodUsesToLength', var.get('require')(Js('../internals/array-method-uses-to-length')))
        var.put('STRICT_METHOD', var.get('arrayMethodIsStrict')(Js('some')))
        var.put('USES_TO_LENGTH', var.get('arrayMethodUsesToLength')(Js('some')))
        @Js
        def PyJs_some_611_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'some':PyJs_some_611_}, var)
            var.registers(['callbackfn'])
            return var.get('$some')(var.get(u"this"), var.get('callbackfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
        PyJs_some_611_._set_name('some')
        var.get('$')(Js({'target':Js('Array'),'proto':Js(True),'forced':(var.get('STRICT_METHOD').neg() or var.get('USES_TO_LENGTH').neg())}), Js({'some':PyJs_some_611_}))
    PyJs_anonymous_610_._set_name('anonymous')
    @Js
    def PyJs_anonymous_612_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['STRICT_METHOD', '$', 'fails', 'require', 'nativeSort', 'FORCED', 'aFunction', 'FAILS_ON_NULL', 'FAILS_ON_UNDEFINED', 'exports', 'test', 'module', 'toObject', 'arrayMethodIsStrict'])
        Js('use strict')
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('aFunction', var.get('require')(Js('../internals/a-function')))
        var.put('toObject', var.get('require')(Js('../internals/to-object')))
        var.put('fails', var.get('require')(Js('../internals/fails')))
        var.put('arrayMethodIsStrict', var.get('require')(Js('../internals/array-method-is-strict')))
        var.put('test', Js([]))
        var.put('nativeSort', var.get('test').get('sort'))
        @Js
        def PyJs_anonymous_613_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('test').callprop('sort', var.get('undefined'))
        PyJs_anonymous_613_._set_name('anonymous')
        var.put('FAILS_ON_UNDEFINED', var.get('fails')(PyJs_anonymous_613_))
        @Js
        def PyJs_anonymous_614_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('test').callprop('sort', var.get(u"null"))
        PyJs_anonymous_614_._set_name('anonymous')
        var.put('FAILS_ON_NULL', var.get('fails')(PyJs_anonymous_614_))
        var.put('STRICT_METHOD', var.get('arrayMethodIsStrict')(Js('sort')))
        var.put('FORCED', ((var.get('FAILS_ON_UNDEFINED') or var.get('FAILS_ON_NULL').neg()) or var.get('STRICT_METHOD').neg()))
        @Js
        def PyJs_sort_615_(comparefn, this, arguments, var=var):
            var = Scope({'comparefn':comparefn, 'this':this, 'arguments':arguments, 'sort':PyJs_sort_615_}, var)
            var.registers(['comparefn'])
            return (var.get('nativeSort').callprop('call', var.get('toObject')(var.get(u"this"))) if PyJsStrictEq(var.get('comparefn'),var.get('undefined')) else var.get('nativeSort').callprop('call', var.get('toObject')(var.get(u"this")), var.get('aFunction')(var.get('comparefn'))))
        PyJs_sort_615_._set_name('sort')
        var.get('$')(Js({'target':Js('Array'),'proto':Js(True),'forced':var.get('FORCED')}), Js({'sort':PyJs_sort_615_}))
    PyJs_anonymous_612_._set_name('anonymous')
    @Js
    def PyJs_anonymous_616_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'setSpecies', 'exports'])
        var.put('setSpecies', var.get('require')(Js('../internals/set-species')))
        var.get('setSpecies')(Js('Array'))
    PyJs_anonymous_616_._set_name('anonymous')
    @Js
    def PyJs_anonymous_617_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'min', 'MAXIMUM_ALLOWED_LENGTH_EXCEEDED', 'require', 'USES_TO_LENGTH', 'HAS_SPECIES_SUPPORT', 'MAX_SAFE_INTEGER', 'toAbsoluteIndex', 'arraySpeciesCreate', 'arrayMethodHasSpeciesSupport', 'exports', 'arrayMethodUsesToLength', 'module', 'toObject', 'createProperty', 'toInteger', 'toLength', 'max'])
        Js('use strict')
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('toAbsoluteIndex', var.get('require')(Js('../internals/to-absolute-index')))
        var.put('toInteger', var.get('require')(Js('../internals/to-integer')))
        var.put('toLength', var.get('require')(Js('../internals/to-length')))
        var.put('toObject', var.get('require')(Js('../internals/to-object')))
        var.put('arraySpeciesCreate', var.get('require')(Js('../internals/array-species-create')))
        var.put('createProperty', var.get('require')(Js('../internals/create-property')))
        var.put('arrayMethodHasSpeciesSupport', var.get('require')(Js('../internals/array-method-has-species-support')))
        var.put('arrayMethodUsesToLength', var.get('require')(Js('../internals/array-method-uses-to-length')))
        var.put('HAS_SPECIES_SUPPORT', var.get('arrayMethodHasSpeciesSupport')(Js('splice')))
        var.put('USES_TO_LENGTH', var.get('arrayMethodUsesToLength')(Js('splice'), Js({'ACCESSORS':Js(True),'0':Js(0.0),'1':Js(2.0)})))
        var.put('max', var.get('Math').get('max'))
        var.put('min', var.get('Math').get('min'))
        var.put('MAX_SAFE_INTEGER', Js(9007199254740991))
        var.put('MAXIMUM_ALLOWED_LENGTH_EXCEEDED', Js('Maximum allowed length exceeded'))
        @Js
        def PyJs_splice_618_(start, deleteCount, this, arguments, var=var):
            var = Scope({'start':start, 'deleteCount':deleteCount, 'this':this, 'arguments':arguments, 'splice':PyJs_splice_618_}, var)
            var.registers(['insertCount', 'O', 'start', 'actualDeleteCount', 'from', 'len', 'actualStart', 'A', 'deleteCount', 'argumentsLength', 'k', 'to'])
            var.put('O', var.get('toObject')(var.get(u"this")))
            var.put('len', var.get('toLength')(var.get('O').get('length')))
            var.put('actualStart', var.get('toAbsoluteIndex')(var.get('start'), var.get('len')))
            var.put('argumentsLength', var.get('arguments').get('length'))
            pass
            if PyJsStrictEq(var.get('argumentsLength'),Js(0.0)):
                var.put('insertCount', var.put('actualDeleteCount', Js(0.0)))
            else:
                if PyJsStrictEq(var.get('argumentsLength'),Js(1.0)):
                    var.put('insertCount', Js(0.0))
                    var.put('actualDeleteCount', (var.get('len')-var.get('actualStart')))
                else:
                    var.put('insertCount', (var.get('argumentsLength')-Js(2.0)))
                    var.put('actualDeleteCount', var.get('min')(var.get('max')(var.get('toInteger')(var.get('deleteCount')), Js(0.0)), (var.get('len')-var.get('actualStart'))))
            if (((var.get('len')+var.get('insertCount'))-var.get('actualDeleteCount'))>var.get('MAX_SAFE_INTEGER')):
                PyJsTempException = JsToPyException(var.get('TypeError')(var.get('MAXIMUM_ALLOWED_LENGTH_EXCEEDED')))
                raise PyJsTempException
            var.put('A', var.get('arraySpeciesCreate')(var.get('O'), var.get('actualDeleteCount')))
            #for JS loop
            var.put('k', Js(0.0))
            while (var.get('k')<var.get('actualDeleteCount')):
                try:
                    var.put('from', (var.get('actualStart')+var.get('k')))
                    if var.get('O').contains(var.get('from')):
                        var.get('createProperty')(var.get('A'), var.get('k'), var.get('O').get(var.get('from')))
                finally:
                        (var.put('k',Js(var.get('k').to_number())+Js(1))-Js(1))
            var.get('A').put('length', var.get('actualDeleteCount'))
            if (var.get('insertCount')<var.get('actualDeleteCount')):
                #for JS loop
                var.put('k', var.get('actualStart'))
                while (var.get('k')<(var.get('len')-var.get('actualDeleteCount'))):
                    try:
                        var.put('from', (var.get('k')+var.get('actualDeleteCount')))
                        var.put('to', (var.get('k')+var.get('insertCount')))
                        if var.get('O').contains(var.get('from')):
                            var.get('O').put(var.get('to'), var.get('O').get(var.get('from')))
                        else:
                            var.get('O').delete(var.get('to'))
                    finally:
                            (var.put('k',Js(var.get('k').to_number())+Js(1))-Js(1))
                #for JS loop
                var.put('k', var.get('len'))
                while (var.get('k')>((var.get('len')-var.get('actualDeleteCount'))+var.get('insertCount'))):
                    try:
                        var.get('O').delete((var.get('k')-Js(1.0)))
                    finally:
                            (var.put('k',Js(var.get('k').to_number())-Js(1))+Js(1))
            else:
                if (var.get('insertCount')>var.get('actualDeleteCount')):
                    #for JS loop
                    var.put('k', (var.get('len')-var.get('actualDeleteCount')))
                    while (var.get('k')>var.get('actualStart')):
                        try:
                            var.put('from', ((var.get('k')+var.get('actualDeleteCount'))-Js(1.0)))
                            var.put('to', ((var.get('k')+var.get('insertCount'))-Js(1.0)))
                            if var.get('O').contains(var.get('from')):
                                var.get('O').put(var.get('to'), var.get('O').get(var.get('from')))
                            else:
                                var.get('O').delete(var.get('to'))
                        finally:
                                (var.put('k',Js(var.get('k').to_number())-Js(1))+Js(1))
            #for JS loop
            var.put('k', Js(0.0))
            while (var.get('k')<var.get('insertCount')):
                try:
                    var.get('O').put((var.get('k')+var.get('actualStart')), var.get('arguments').get((var.get('k')+Js(2.0))))
                finally:
                        (var.put('k',Js(var.get('k').to_number())+Js(1))-Js(1))
            var.get('O').put('length', ((var.get('len')-var.get('actualDeleteCount'))+var.get('insertCount')))
            return var.get('A')
        PyJs_splice_618_._set_name('splice')
        var.get('$')(Js({'target':Js('Array'),'proto':Js(True),'forced':(var.get('HAS_SPECIES_SUPPORT').neg() or var.get('USES_TO_LENGTH').neg())}), Js({'splice':PyJs_splice_618_}))
    PyJs_anonymous_617_._set_name('anonymous')
    @Js
    def PyJs_anonymous_619_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'addToUnscopables', 'exports'])
        var.put('addToUnscopables', var.get('require')(Js('../internals/add-to-unscopables')))
        var.get('addToUnscopables')(Js('flatMap'))
    PyJs_anonymous_619_._set_name('anonymous')
    @Js
    def PyJs_anonymous_620_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'addToUnscopables', 'exports'])
        var.put('addToUnscopables', var.get('require')(Js('../internals/add-to-unscopables')))
        var.get('addToUnscopables')(Js('flat'))
    PyJs_anonymous_620_._set_name('anonymous')
    @Js
    def PyJs_anonymous_621_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'setToStringTag', 'exports', 'module', 'global'])
        var.put('global', var.get('require')(Js('../internals/global')))
        var.put('setToStringTag', var.get('require')(Js('../internals/set-to-string-tag')))
        var.get('setToStringTag')(var.get('global').get('JSON'), Js('JSON'), Js(True))
    PyJs_anonymous_621_._set_name('anonymous')
    @Js
    def PyJs_anonymous_622_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'setToStringTag', 'exports'])
        var.put('setToStringTag', var.get('require')(Js('../internals/set-to-string-tag')))
        var.get('setToStringTag')(var.get('Math'), Js('Math'), Js(True))
    PyJs_anonymous_622_._set_name('anonymous')
    @Js
    def PyJs_anonymous_623_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'require', 'exports', 'assign', 'module'])
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('assign', var.get('require')(Js('../internals/object-assign')))
        var.get('$')(Js({'target':Js('Object'),'stat':Js(True),'forced':PyJsStrictNeq(var.get('Object').get('assign'),var.get('assign'))}), Js({'assign':var.get('assign')}))
    PyJs_anonymous_623_._set_name('anonymous')
    @Js
    def PyJs_anonymous_624_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'require', 'exports', 'DESCRIPTORS', 'module', 'create'])
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('DESCRIPTORS', var.get('require')(Js('../internals/descriptors')))
        var.put('create', var.get('require')(Js('../internals/object-create')))
        var.get('$')(Js({'target':Js('Object'),'stat':Js(True),'sham':var.get('DESCRIPTORS').neg()}), Js({'create':var.get('create')}))
    PyJs_anonymous_624_._set_name('anonymous')
    @Js
    def PyJs_anonymous_625_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'require', 'FORCED', 'aFunction', 'definePropertyModule', 'exports', 'DESCRIPTORS', 'module', 'toObject'])
        Js('use strict')
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('DESCRIPTORS', var.get('require')(Js('../internals/descriptors')))
        var.put('FORCED', var.get('require')(Js('../internals/object-prototype-accessors-forced')))
        var.put('toObject', var.get('require')(Js('../internals/to-object')))
        var.put('aFunction', var.get('require')(Js('../internals/a-function')))
        var.put('definePropertyModule', var.get('require')(Js('../internals/object-define-property')))
        if var.get('DESCRIPTORS'):
            @Js
            def PyJs___defineGetter___626_(P, getter, this, arguments, var=var):
                var = Scope({'P':P, 'getter':getter, 'this':this, 'arguments':arguments, '__defineGetter__':PyJs___defineGetter___626_}, var)
                var.registers(['getter', 'P'])
                var.get('definePropertyModule').callprop('f', var.get('toObject')(var.get(u"this")), var.get('P'), Js({'get':var.get('aFunction')(var.get('getter')),'enumerable':Js(True),'configurable':Js(True)}))
            PyJs___defineGetter___626_._set_name('__defineGetter__')
            var.get('$')(Js({'target':Js('Object'),'proto':Js(True),'forced':var.get('FORCED')}), Js({'__defineGetter__':PyJs___defineGetter___626_}))
    PyJs_anonymous_625_._set_name('anonymous')
    @Js
    def PyJs_anonymous_627_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'require', 'defineProperties', 'exports', 'DESCRIPTORS', 'module'])
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('DESCRIPTORS', var.get('require')(Js('../internals/descriptors')))
        var.put('defineProperties', var.get('require')(Js('../internals/object-define-properties')))
        var.get('$')(Js({'target':Js('Object'),'stat':Js(True),'forced':var.get('DESCRIPTORS').neg(),'sham':var.get('DESCRIPTORS').neg()}), Js({'defineProperties':var.get('defineProperties')}))
    PyJs_anonymous_627_._set_name('anonymous')
    @Js
    def PyJs_anonymous_628_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'require', 'exports', 'DESCRIPTORS', 'module', 'objectDefinePropertyModile'])
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('DESCRIPTORS', var.get('require')(Js('../internals/descriptors')))
        var.put('objectDefinePropertyModile', var.get('require')(Js('../internals/object-define-property')))
        var.get('$')(Js({'target':Js('Object'),'stat':Js(True),'forced':var.get('DESCRIPTORS').neg(),'sham':var.get('DESCRIPTORS').neg()}), Js({'defineProperty':var.get('objectDefinePropertyModile').get('f')}))
    PyJs_anonymous_628_._set_name('anonymous')
    @Js
    def PyJs_anonymous_629_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'require', 'FORCED', 'aFunction', 'definePropertyModule', 'exports', 'DESCRIPTORS', 'module', 'toObject'])
        Js('use strict')
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('DESCRIPTORS', var.get('require')(Js('../internals/descriptors')))
        var.put('FORCED', var.get('require')(Js('../internals/object-prototype-accessors-forced')))
        var.put('toObject', var.get('require')(Js('../internals/to-object')))
        var.put('aFunction', var.get('require')(Js('../internals/a-function')))
        var.put('definePropertyModule', var.get('require')(Js('../internals/object-define-property')))
        if var.get('DESCRIPTORS'):
            @Js
            def PyJs___defineSetter___630_(P, setter, this, arguments, var=var):
                var = Scope({'P':P, 'setter':setter, 'this':this, 'arguments':arguments, '__defineSetter__':PyJs___defineSetter___630_}, var)
                var.registers(['setter', 'P'])
                var.get('definePropertyModule').callprop('f', var.get('toObject')(var.get(u"this")), var.get('P'), Js({'set':var.get('aFunction')(var.get('setter')),'enumerable':Js(True),'configurable':Js(True)}))
            PyJs___defineSetter___630_._set_name('__defineSetter__')
            var.get('$')(Js({'target':Js('Object'),'proto':Js(True),'forced':var.get('FORCED')}), Js({'__defineSetter__':PyJs___defineSetter___630_}))
    PyJs_anonymous_629_._set_name('anonymous')
    @Js
    def PyJs_anonymous_631_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'require', '$entries', 'exports', 'module'])
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('$entries', var.get('require')(Js('../internals/object-to-array')).get('entries'))
        @Js
        def PyJs_entries_632_(O, this, arguments, var=var):
            var = Scope({'O':O, 'this':this, 'arguments':arguments, 'entries':PyJs_entries_632_}, var)
            var.registers(['O'])
            return var.get('$entries')(var.get('O'))
        PyJs_entries_632_._set_name('entries')
        var.get('$')(Js({'target':Js('Object'),'stat':Js(True)}), Js({'entries':PyJs_entries_632_}))
    PyJs_anonymous_631_._set_name('anonymous')
    @Js
    def PyJs_anonymous_633_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'fails', 'require', 'nativeFreeze', 'FAILS_ON_PRIMITIVES', 'onFreeze', 'exports', 'module', 'isObject', 'FREEZING'])
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('FREEZING', var.get('require')(Js('../internals/freezing')))
        var.put('fails', var.get('require')(Js('../internals/fails')))
        var.put('isObject', var.get('require')(Js('../internals/is-object')))
        var.put('onFreeze', var.get('require')(Js('../internals/internal-metadata')).get('onFreeze'))
        var.put('nativeFreeze', var.get('Object').get('freeze'))
        @Js
        def PyJs_anonymous_634_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('nativeFreeze')(Js(1.0))
        PyJs_anonymous_634_._set_name('anonymous')
        var.put('FAILS_ON_PRIMITIVES', var.get('fails')(PyJs_anonymous_634_))
        @Js
        def PyJs_freeze_635_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'freeze':PyJs_freeze_635_}, var)
            var.registers(['it'])
            return (var.get('nativeFreeze')(var.get('onFreeze')(var.get('it'))) if (var.get('nativeFreeze') and var.get('isObject')(var.get('it'))) else var.get('it'))
        PyJs_freeze_635_._set_name('freeze')
        var.get('$')(Js({'target':Js('Object'),'stat':Js(True),'forced':var.get('FAILS_ON_PRIMITIVES'),'sham':var.get('FREEZING').neg()}), Js({'freeze':PyJs_freeze_635_}))
    PyJs_anonymous_633_._set_name('anonymous')
    @Js
    def PyJs_anonymous_636_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'require', 'exports', 'module', 'iterate', 'createProperty'])
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('iterate', var.get('require')(Js('../internals/iterate')))
        var.put('createProperty', var.get('require')(Js('../internals/create-property')))
        @Js
        def PyJs_fromEntries_637_(iterable, this, arguments, var=var):
            var = Scope({'iterable':iterable, 'this':this, 'arguments':arguments, 'fromEntries':PyJs_fromEntries_637_}, var)
            var.registers(['iterable', 'obj'])
            var.put('obj', Js({}))
            @Js
            def PyJs_anonymous_638_(k, v, this, arguments, var=var):
                var = Scope({'k':k, 'v':v, 'this':this, 'arguments':arguments}, var)
                var.registers(['v', 'k'])
                var.get('createProperty')(var.get('obj'), var.get('k'), var.get('v'))
            PyJs_anonymous_638_._set_name('anonymous')
            var.get('iterate')(var.get('iterable'), PyJs_anonymous_638_, Js({'AS_ENTRIES':Js(True)}))
            return var.get('obj')
        PyJs_fromEntries_637_._set_name('fromEntries')
        var.get('$')(Js({'target':Js('Object'),'stat':Js(True)}), Js({'fromEntries':PyJs_fromEntries_637_}))
    PyJs_anonymous_636_._set_name('anonymous')
    @Js
    def PyJs_anonymous_639_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['nativeGetOwnPropertyDescriptor', '$', 'fails', 'require', 'FORCED', 'FAILS_ON_PRIMITIVES', 'toIndexedObject', 'DESCRIPTORS', 'exports', 'module'])
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('fails', var.get('require')(Js('../internals/fails')))
        var.put('toIndexedObject', var.get('require')(Js('../internals/to-indexed-object')))
        var.put('nativeGetOwnPropertyDescriptor', var.get('require')(Js('../internals/object-get-own-property-descriptor')).get('f'))
        var.put('DESCRIPTORS', var.get('require')(Js('../internals/descriptors')))
        @Js
        def PyJs_anonymous_640_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('nativeGetOwnPropertyDescriptor')(Js(1.0))
        PyJs_anonymous_640_._set_name('anonymous')
        var.put('FAILS_ON_PRIMITIVES', var.get('fails')(PyJs_anonymous_640_))
        var.put('FORCED', (var.get('DESCRIPTORS').neg() or var.get('FAILS_ON_PRIMITIVES')))
        @Js
        def PyJs_getOwnPropertyDescriptor_641_(it, key, this, arguments, var=var):
            var = Scope({'it':it, 'key':key, 'this':this, 'arguments':arguments, 'getOwnPropertyDescriptor':PyJs_getOwnPropertyDescriptor_641_}, var)
            var.registers(['key', 'it'])
            return var.get('nativeGetOwnPropertyDescriptor')(var.get('toIndexedObject')(var.get('it')), var.get('key'))
        PyJs_getOwnPropertyDescriptor_641_._set_name('getOwnPropertyDescriptor')
        var.get('$')(Js({'target':Js('Object'),'stat':Js(True),'forced':var.get('FORCED'),'sham':var.get('DESCRIPTORS').neg()}), Js({'getOwnPropertyDescriptor':PyJs_getOwnPropertyDescriptor_641_}))
    PyJs_anonymous_639_._set_name('anonymous')
    @Js
    def PyJs_anonymous_642_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'ownKeys', 'require', 'toIndexedObject', 'DESCRIPTORS', 'exports', 'module', 'createProperty', 'getOwnPropertyDescriptorModule'])
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('DESCRIPTORS', var.get('require')(Js('../internals/descriptors')))
        var.put('ownKeys', var.get('require')(Js('../internals/own-keys')))
        var.put('toIndexedObject', var.get('require')(Js('../internals/to-indexed-object')))
        var.put('getOwnPropertyDescriptorModule', var.get('require')(Js('../internals/object-get-own-property-descriptor')))
        var.put('createProperty', var.get('require')(Js('../internals/create-property')))
        @Js
        def PyJs_getOwnPropertyDescriptors_643_(object, this, arguments, var=var):
            var = Scope({'object':object, 'this':this, 'arguments':arguments, 'getOwnPropertyDescriptors':PyJs_getOwnPropertyDescriptors_643_}, var)
            var.registers(['keys', 'descriptor', 'result', 'O', 'object', 'index', 'getOwnPropertyDescriptor', 'key'])
            var.put('O', var.get('toIndexedObject')(var.get('object')))
            var.put('getOwnPropertyDescriptor', var.get('getOwnPropertyDescriptorModule').get('f'))
            var.put('keys', var.get('ownKeys')(var.get('O')))
            var.put('result', Js({}))
            var.put('index', Js(0.0))
            pass
            while (var.get('keys').get('length')>var.get('index')):
                var.put('descriptor', var.get('getOwnPropertyDescriptor')(var.get('O'), var.put('key', var.get('keys').get((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))))))
                if PyJsStrictNeq(var.get('descriptor'),var.get('undefined')):
                    var.get('createProperty')(var.get('result'), var.get('key'), var.get('descriptor'))
            return var.get('result')
        PyJs_getOwnPropertyDescriptors_643_._set_name('getOwnPropertyDescriptors')
        var.get('$')(Js({'target':Js('Object'),'stat':Js(True),'sham':var.get('DESCRIPTORS').neg()}), Js({'getOwnPropertyDescriptors':PyJs_getOwnPropertyDescriptors_643_}))
    PyJs_anonymous_642_._set_name('anonymous')
    @Js
    def PyJs_anonymous_644_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'require', 'fails', 'FAILS_ON_PRIMITIVES', 'exports', 'module', 'nativeGetOwnPropertyNames'])
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('fails', var.get('require')(Js('../internals/fails')))
        var.put('nativeGetOwnPropertyNames', var.get('require')(Js('../internals/object-get-own-property-names-external')).get('f'))
        @Js
        def PyJs_anonymous_645_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('Object').callprop('getOwnPropertyNames', Js(1.0)).neg()
        PyJs_anonymous_645_._set_name('anonymous')
        var.put('FAILS_ON_PRIMITIVES', var.get('fails')(PyJs_anonymous_645_))
        var.get('$')(Js({'target':Js('Object'),'stat':Js(True),'forced':var.get('FAILS_ON_PRIMITIVES')}), Js({'getOwnPropertyNames':var.get('nativeGetOwnPropertyNames')}))
    PyJs_anonymous_644_._set_name('anonymous')
    @Js
    def PyJs_anonymous_646_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'nativeGetPrototypeOf', 'fails', 'require', 'FAILS_ON_PRIMITIVES', 'exports', 'module', 'toObject', 'CORRECT_PROTOTYPE_GETTER'])
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('fails', var.get('require')(Js('../internals/fails')))
        var.put('toObject', var.get('require')(Js('../internals/to-object')))
        var.put('nativeGetPrototypeOf', var.get('require')(Js('../internals/object-get-prototype-of')))
        var.put('CORRECT_PROTOTYPE_GETTER', var.get('require')(Js('../internals/correct-prototype-getter')))
        @Js
        def PyJs_anonymous_647_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('nativeGetPrototypeOf')(Js(1.0))
        PyJs_anonymous_647_._set_name('anonymous')
        var.put('FAILS_ON_PRIMITIVES', var.get('fails')(PyJs_anonymous_647_))
        @Js
        def PyJs_getPrototypeOf_648_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'getPrototypeOf':PyJs_getPrototypeOf_648_}, var)
            var.registers(['it'])
            return var.get('nativeGetPrototypeOf')(var.get('toObject')(var.get('it')))
        PyJs_getPrototypeOf_648_._set_name('getPrototypeOf')
        var.get('$')(Js({'target':Js('Object'),'stat':Js(True),'forced':var.get('FAILS_ON_PRIMITIVES'),'sham':var.get('CORRECT_PROTOTYPE_GETTER').neg()}), Js({'getPrototypeOf':PyJs_getPrototypeOf_648_}))
    PyJs_anonymous_646_._set_name('anonymous')
    @Js
    def PyJs_anonymous_649_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'fails', 'require', 'nativeIsExtensible', 'FAILS_ON_PRIMITIVES', 'exports', 'module', 'isObject'])
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('fails', var.get('require')(Js('../internals/fails')))
        var.put('isObject', var.get('require')(Js('../internals/is-object')))
        var.put('nativeIsExtensible', var.get('Object').get('isExtensible'))
        @Js
        def PyJs_anonymous_650_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('nativeIsExtensible')(Js(1.0))
        PyJs_anonymous_650_._set_name('anonymous')
        var.put('FAILS_ON_PRIMITIVES', var.get('fails')(PyJs_anonymous_650_))
        @Js
        def PyJs_isExtensible_651_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'isExtensible':PyJs_isExtensible_651_}, var)
            var.registers(['it'])
            return ((var.get('nativeIsExtensible')(var.get('it')) if var.get('nativeIsExtensible') else Js(True)) if var.get('isObject')(var.get('it')) else Js(False))
        PyJs_isExtensible_651_._set_name('isExtensible')
        var.get('$')(Js({'target':Js('Object'),'stat':Js(True),'forced':var.get('FAILS_ON_PRIMITIVES')}), Js({'isExtensible':PyJs_isExtensible_651_}))
    PyJs_anonymous_649_._set_name('anonymous')
    @Js
    def PyJs_anonymous_652_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'fails', 'require', 'FAILS_ON_PRIMITIVES', 'exports', 'nativeIsFrozen', 'module', 'isObject'])
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('fails', var.get('require')(Js('../internals/fails')))
        var.put('isObject', var.get('require')(Js('../internals/is-object')))
        var.put('nativeIsFrozen', var.get('Object').get('isFrozen'))
        @Js
        def PyJs_anonymous_653_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('nativeIsFrozen')(Js(1.0))
        PyJs_anonymous_653_._set_name('anonymous')
        var.put('FAILS_ON_PRIMITIVES', var.get('fails')(PyJs_anonymous_653_))
        @Js
        def PyJs_isFrozen_654_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'isFrozen':PyJs_isFrozen_654_}, var)
            var.registers(['it'])
            return ((var.get('nativeIsFrozen')(var.get('it')) if var.get('nativeIsFrozen') else Js(False)) if var.get('isObject')(var.get('it')) else Js(True))
        PyJs_isFrozen_654_._set_name('isFrozen')
        var.get('$')(Js({'target':Js('Object'),'stat':Js(True),'forced':var.get('FAILS_ON_PRIMITIVES')}), Js({'isFrozen':PyJs_isFrozen_654_}))
    PyJs_anonymous_652_._set_name('anonymous')
    @Js
    def PyJs_anonymous_655_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['nativeIsSealed', '$', 'fails', 'require', 'FAILS_ON_PRIMITIVES', 'exports', 'module', 'isObject'])
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('fails', var.get('require')(Js('../internals/fails')))
        var.put('isObject', var.get('require')(Js('../internals/is-object')))
        var.put('nativeIsSealed', var.get('Object').get('isSealed'))
        @Js
        def PyJs_anonymous_656_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('nativeIsSealed')(Js(1.0))
        PyJs_anonymous_656_._set_name('anonymous')
        var.put('FAILS_ON_PRIMITIVES', var.get('fails')(PyJs_anonymous_656_))
        @Js
        def PyJs_isSealed_657_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'isSealed':PyJs_isSealed_657_}, var)
            var.registers(['it'])
            return ((var.get('nativeIsSealed')(var.get('it')) if var.get('nativeIsSealed') else Js(False)) if var.get('isObject')(var.get('it')) else Js(True))
        PyJs_isSealed_657_._set_name('isSealed')
        var.get('$')(Js({'target':Js('Object'),'stat':Js(True),'forced':var.get('FAILS_ON_PRIMITIVES')}), Js({'isSealed':PyJs_isSealed_657_}))
    PyJs_anonymous_655_._set_name('anonymous')
    @Js
    def PyJs_anonymous_658_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'require', 'exports', 'is', 'module'])
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('is', var.get('require')(Js('../internals/same-value')))
        var.get('$')(Js({'target':Js('Object'),'stat':Js(True)}), Js({'is':var.get('is')}))
    PyJs_anonymous_658_._set_name('anonymous')
    @Js
    def PyJs_anonymous_659_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'fails', 'require', 'FAILS_ON_PRIMITIVES', 'exports', 'module', 'toObject', 'nativeKeys'])
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('toObject', var.get('require')(Js('../internals/to-object')))
        var.put('nativeKeys', var.get('require')(Js('../internals/object-keys')))
        var.put('fails', var.get('require')(Js('../internals/fails')))
        @Js
        def PyJs_anonymous_660_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('nativeKeys')(Js(1.0))
        PyJs_anonymous_660_._set_name('anonymous')
        var.put('FAILS_ON_PRIMITIVES', var.get('fails')(PyJs_anonymous_660_))
        @Js
        def PyJs_keys_661_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'keys':PyJs_keys_661_}, var)
            var.registers(['it'])
            return var.get('nativeKeys')(var.get('toObject')(var.get('it')))
        PyJs_keys_661_._set_name('keys')
        var.get('$')(Js({'target':Js('Object'),'stat':Js(True),'forced':var.get('FAILS_ON_PRIMITIVES')}), Js({'keys':PyJs_keys_661_}))
    PyJs_anonymous_659_._set_name('anonymous')
    @Js
    def PyJs_anonymous_662_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'require', 'FORCED', 'toPrimitive', 'DESCRIPTORS', 'getOwnPropertyDescriptor', 'exports', 'module', 'toObject', 'getPrototypeOf'])
        Js('use strict')
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('DESCRIPTORS', var.get('require')(Js('../internals/descriptors')))
        var.put('FORCED', var.get('require')(Js('../internals/object-prototype-accessors-forced')))
        var.put('toObject', var.get('require')(Js('../internals/to-object')))
        var.put('toPrimitive', var.get('require')(Js('../internals/to-primitive')))
        var.put('getPrototypeOf', var.get('require')(Js('../internals/object-get-prototype-of')))
        var.put('getOwnPropertyDescriptor', var.get('require')(Js('../internals/object-get-own-property-descriptor')).get('f'))
        if var.get('DESCRIPTORS'):
            @Js
            def PyJs___lookupGetter___663_(P, this, arguments, var=var):
                var = Scope({'P':P, 'this':this, 'arguments':arguments, '__lookupGetter__':PyJs___lookupGetter___663_}, var)
                var.registers(['key', 'O', 'desc', 'P'])
                var.put('O', var.get('toObject')(var.get(u"this")))
                var.put('key', var.get('toPrimitive')(var.get('P'), Js(True)))
                pass
                while 1:
                    if var.put('desc', var.get('getOwnPropertyDescriptor')(var.get('O'), var.get('key'))):
                        return var.get('desc').get('get')
                    if not var.put('O', var.get('getPrototypeOf')(var.get('O'))):
                        break
            PyJs___lookupGetter___663_._set_name('__lookupGetter__')
            var.get('$')(Js({'target':Js('Object'),'proto':Js(True),'forced':var.get('FORCED')}), Js({'__lookupGetter__':PyJs___lookupGetter___663_}))
    PyJs_anonymous_662_._set_name('anonymous')
    @Js
    def PyJs_anonymous_664_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'require', 'FORCED', 'toPrimitive', 'DESCRIPTORS', 'getOwnPropertyDescriptor', 'exports', 'module', 'toObject', 'getPrototypeOf'])
        Js('use strict')
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('DESCRIPTORS', var.get('require')(Js('../internals/descriptors')))
        var.put('FORCED', var.get('require')(Js('../internals/object-prototype-accessors-forced')))
        var.put('toObject', var.get('require')(Js('../internals/to-object')))
        var.put('toPrimitive', var.get('require')(Js('../internals/to-primitive')))
        var.put('getPrototypeOf', var.get('require')(Js('../internals/object-get-prototype-of')))
        var.put('getOwnPropertyDescriptor', var.get('require')(Js('../internals/object-get-own-property-descriptor')).get('f'))
        if var.get('DESCRIPTORS'):
            @Js
            def PyJs___lookupSetter___665_(P, this, arguments, var=var):
                var = Scope({'P':P, 'this':this, 'arguments':arguments, '__lookupSetter__':PyJs___lookupSetter___665_}, var)
                var.registers(['key', 'O', 'desc', 'P'])
                var.put('O', var.get('toObject')(var.get(u"this")))
                var.put('key', var.get('toPrimitive')(var.get('P'), Js(True)))
                pass
                while 1:
                    if var.put('desc', var.get('getOwnPropertyDescriptor')(var.get('O'), var.get('key'))):
                        return var.get('desc').get('set')
                    if not var.put('O', var.get('getPrototypeOf')(var.get('O'))):
                        break
            PyJs___lookupSetter___665_._set_name('__lookupSetter__')
            var.get('$')(Js({'target':Js('Object'),'proto':Js(True),'forced':var.get('FORCED')}), Js({'__lookupSetter__':PyJs___lookupSetter___665_}))
    PyJs_anonymous_664_._set_name('anonymous')
    @Js
    def PyJs_anonymous_666_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'fails', 'require', 'FAILS_ON_PRIMITIVES', 'onFreeze', 'exports', 'module', 'nativePreventExtensions', 'isObject', 'FREEZING'])
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('isObject', var.get('require')(Js('../internals/is-object')))
        var.put('onFreeze', var.get('require')(Js('../internals/internal-metadata')).get('onFreeze'))
        var.put('FREEZING', var.get('require')(Js('../internals/freezing')))
        var.put('fails', var.get('require')(Js('../internals/fails')))
        var.put('nativePreventExtensions', var.get('Object').get('preventExtensions'))
        @Js
        def PyJs_anonymous_667_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('nativePreventExtensions')(Js(1.0))
        PyJs_anonymous_667_._set_name('anonymous')
        var.put('FAILS_ON_PRIMITIVES', var.get('fails')(PyJs_anonymous_667_))
        @Js
        def PyJs_preventExtensions_668_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'preventExtensions':PyJs_preventExtensions_668_}, var)
            var.registers(['it'])
            return (var.get('nativePreventExtensions')(var.get('onFreeze')(var.get('it'))) if (var.get('nativePreventExtensions') and var.get('isObject')(var.get('it'))) else var.get('it'))
        PyJs_preventExtensions_668_._set_name('preventExtensions')
        var.get('$')(Js({'target':Js('Object'),'stat':Js(True),'forced':var.get('FAILS_ON_PRIMITIVES'),'sham':var.get('FREEZING').neg()}), Js({'preventExtensions':PyJs_preventExtensions_668_}))
    PyJs_anonymous_666_._set_name('anonymous')
    @Js
    def PyJs_anonymous_669_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'fails', 'require', 'nativeSeal', 'FAILS_ON_PRIMITIVES', 'onFreeze', 'exports', 'module', 'isObject', 'FREEZING'])
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('isObject', var.get('require')(Js('../internals/is-object')))
        var.put('onFreeze', var.get('require')(Js('../internals/internal-metadata')).get('onFreeze'))
        var.put('FREEZING', var.get('require')(Js('../internals/freezing')))
        var.put('fails', var.get('require')(Js('../internals/fails')))
        var.put('nativeSeal', var.get('Object').get('seal'))
        @Js
        def PyJs_anonymous_670_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('nativeSeal')(Js(1.0))
        PyJs_anonymous_670_._set_name('anonymous')
        var.put('FAILS_ON_PRIMITIVES', var.get('fails')(PyJs_anonymous_670_))
        @Js
        def PyJs_seal_671_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'seal':PyJs_seal_671_}, var)
            var.registers(['it'])
            return (var.get('nativeSeal')(var.get('onFreeze')(var.get('it'))) if (var.get('nativeSeal') and var.get('isObject')(var.get('it'))) else var.get('it'))
        PyJs_seal_671_._set_name('seal')
        var.get('$')(Js({'target':Js('Object'),'stat':Js(True),'forced':var.get('FAILS_ON_PRIMITIVES'),'sham':var.get('FREEZING').neg()}), Js({'seal':PyJs_seal_671_}))
    PyJs_anonymous_669_._set_name('anonymous')
    @Js
    def PyJs_anonymous_672_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'require', 'setPrototypeOf', 'exports', 'module'])
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('setPrototypeOf', var.get('require')(Js('../internals/object-set-prototype-of')))
        var.get('$')(Js({'target':Js('Object'),'stat':Js(True)}), Js({'setPrototypeOf':var.get('setPrototypeOf')}))
    PyJs_anonymous_672_._set_name('anonymous')
    @Js
    def PyJs_anonymous_673_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toString', 'exports', 'module', 'TO_STRING_TAG_SUPPORT', 'redefine'])
        var.put('TO_STRING_TAG_SUPPORT', var.get('require')(Js('../internals/to-string-tag-support')))
        var.put('redefine', var.get('require')(Js('../internals/redefine')))
        var.put('toString', var.get('require')(Js('../internals/object-to-string')))
        if var.get('TO_STRING_TAG_SUPPORT').neg():
            var.get('redefine')(var.get('Object').get('prototype'), Js('toString'), var.get('toString'), Js({'unsafe':Js(True)}))
    PyJs_anonymous_673_._set_name('anonymous')
    @Js
    def PyJs_anonymous_674_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'require', '$values', 'exports', 'module'])
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('$values', var.get('require')(Js('../internals/object-to-array')).get('values'))
        @Js
        def PyJs_values_675_(O, this, arguments, var=var):
            var = Scope({'O':O, 'this':this, 'arguments':arguments, 'values':PyJs_values_675_}, var)
            var.registers(['O'])
            return var.get('$values')(var.get('O'))
        PyJs_values_675_._set_name('values')
        var.get('$')(Js({'target':Js('Object'),'stat':Js(True)}), Js({'values':PyJs_values_675_}))
    PyJs_anonymous_674_._set_name('anonymous')
    @Js
    def PyJs_anonymous_676_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$', 'require', 'setToStringTag', 'exports', 'module', 'global'])
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('global', var.get('require')(Js('../internals/global')))
        var.put('setToStringTag', var.get('require')(Js('../internals/set-to-string-tag')))
        var.get('$')(Js({'global':Js(True)}), Js({'Reflect':Js({})}))
        var.get('setToStringTag')(var.get('global').get('Reflect'), Js('Reflect'), Js(True))
    PyJs_anonymous_676_._set_name('anonymous')
    @Js
    def PyJs_anonymous_677_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['STRING_ITERATOR', 'require', 'getInternalState', 'InternalStateModule', 'exports', 'charAt', 'defineIterator', 'module', 'setInternalState'])
        Js('use strict')
        var.put('charAt', var.get('require')(Js('../internals/string-multibyte')).get('charAt'))
        var.put('InternalStateModule', var.get('require')(Js('../internals/internal-state')))
        var.put('defineIterator', var.get('require')(Js('../internals/define-iterator')))
        var.put('STRING_ITERATOR', Js('String Iterator'))
        var.put('setInternalState', var.get('InternalStateModule').get('set'))
        var.put('getInternalState', var.get('InternalStateModule').callprop('getterFor', var.get('STRING_ITERATOR')))
        @Js
        def PyJs_anonymous_678_(iterated, this, arguments, var=var):
            var = Scope({'iterated':iterated, 'this':this, 'arguments':arguments}, var)
            var.registers(['iterated'])
            var.get('setInternalState')(var.get(u"this"), Js({'type':var.get('STRING_ITERATOR'),'string':var.get('String')(var.get('iterated')),'index':Js(0.0)}))
        PyJs_anonymous_678_._set_name('anonymous')
        @Js
        def PyJs_next_679_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'next':PyJs_next_679_}, var)
            var.registers(['point', 'index', 'state', 'string'])
            var.put('state', var.get('getInternalState')(var.get(u"this")))
            var.put('string', var.get('state').get('string'))
            var.put('index', var.get('state').get('index'))
            pass
            if (var.get('index')>=var.get('string').get('length')):
                return Js({'value':var.get('undefined'),'done':Js(True)})
            var.put('point', var.get('charAt')(var.get('string'), var.get('index')))
            var.get('state').put('index', var.get('point').get('length'), '+')
            return Js({'value':var.get('point'),'done':Js(False)})
        PyJs_next_679_._set_name('next')
        var.get('defineIterator')(var.get('String'), Js('String'), PyJs_anonymous_678_, PyJs_next_679_)
    PyJs_anonymous_677_._set_name('anonymous')
    @Js
    def PyJs_anonymous_680_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['hiddenKeys', '$Symbol', 'sharedKey', 'definePropertyModule', 'defineWellKnownSymbol', 'StringToSymbolRegistry', 'toPrimitive', 'wrap', 'nativePropertyIsEnumerable', 'isArray', 'module', 'global', 'objectKeys', 'setInternalState', 'nativeDefineProperty', 'nativeGetOwnPropertyNames', '$defineProperty', 'nativeObjectCreate', '$getOwnPropertySymbols', 'redefine', 'TO_PRIMITIVE', 'isSymbol', 'HIDDEN', '$', 'fails', 'require', 'setToStringTag', 'PROTOTYPE', 'QObject', 'setSymbolDescriptor', '$create', '$getOwnPropertyDescriptor', 'getOwnPropertySymbolsModule', 'USE_SYMBOL_AS_UID', 'ObjectPrototype', 'WellKnownSymbolsStore', 'SYMBOL', 'has', 'getInternalState', 'ObjectPrototypeSymbols', '$propertyIsEnumerable', 'toIndexedObject', 'DESCRIPTORS', 'createPropertyDescriptor', 'getOwnPropertyNamesExternal', 'wellKnownSymbol', 'AllSymbols', 'FORCED_JSON_STRINGIFY', 'NATIVE_SYMBOL', 'shared', 'USE_SETTER', 'SymbolToStringRegistry', '$stringify', 'IS_PURE', 'getOwnPropertyDescriptorModule', 'nativeGetOwnPropertyDescriptor', 'anObject', 'getOwnPropertyNamesModule', 'InternalStateModule', '$getOwnPropertyNames', 'getBuiltIn', 'exports', '$forEach', 'createNonEnumerableProperty', 'uid', 'wrappedWellKnownSymbolModule', 'toObject', '$defineProperties', 'isObject', 'propertyIsEnumerableModule'])
        Js('use strict')
        var.put('$', var.get('require')(Js('../internals/export')))
        var.put('global', var.get('require')(Js('../internals/global')))
        var.put('getBuiltIn', var.get('require')(Js('../internals/get-built-in')))
        var.put('IS_PURE', var.get('require')(Js('../internals/is-pure')))
        var.put('DESCRIPTORS', var.get('require')(Js('../internals/descriptors')))
        var.put('NATIVE_SYMBOL', var.get('require')(Js('../internals/native-symbol')))
        var.put('USE_SYMBOL_AS_UID', var.get('require')(Js('../internals/use-symbol-as-uid')))
        var.put('fails', var.get('require')(Js('../internals/fails')))
        var.put('has', var.get('require')(Js('../internals/has')))
        var.put('isArray', var.get('require')(Js('../internals/is-array')))
        var.put('isObject', var.get('require')(Js('../internals/is-object')))
        var.put('anObject', var.get('require')(Js('../internals/an-object')))
        var.put('toObject', var.get('require')(Js('../internals/to-object')))
        var.put('toIndexedObject', var.get('require')(Js('../internals/to-indexed-object')))
        var.put('toPrimitive', var.get('require')(Js('../internals/to-primitive')))
        var.put('createPropertyDescriptor', var.get('require')(Js('../internals/create-property-descriptor')))
        var.put('nativeObjectCreate', var.get('require')(Js('../internals/object-create')))
        var.put('objectKeys', var.get('require')(Js('../internals/object-keys')))
        var.put('getOwnPropertyNamesModule', var.get('require')(Js('../internals/object-get-own-property-names')))
        var.put('getOwnPropertyNamesExternal', var.get('require')(Js('../internals/object-get-own-property-names-external')))
        var.put('getOwnPropertySymbolsModule', var.get('require')(Js('../internals/object-get-own-property-symbols')))
        var.put('getOwnPropertyDescriptorModule', var.get('require')(Js('../internals/object-get-own-property-descriptor')))
        var.put('definePropertyModule', var.get('require')(Js('../internals/object-define-property')))
        var.put('propertyIsEnumerableModule', var.get('require')(Js('../internals/object-property-is-enumerable')))
        var.put('createNonEnumerableProperty', var.get('require')(Js('../internals/create-non-enumerable-property')))
        var.put('redefine', var.get('require')(Js('../internals/redefine')))
        var.put('shared', var.get('require')(Js('../internals/shared')))
        var.put('sharedKey', var.get('require')(Js('../internals/shared-key')))
        var.put('hiddenKeys', var.get('require')(Js('../internals/hidden-keys')))
        var.put('uid', var.get('require')(Js('../internals/uid')))
        var.put('wellKnownSymbol', var.get('require')(Js('../internals/well-known-symbol')))
        var.put('wrappedWellKnownSymbolModule', var.get('require')(Js('../internals/well-known-symbol-wrapped')))
        var.put('defineWellKnownSymbol', var.get('require')(Js('../internals/define-well-known-symbol')))
        var.put('setToStringTag', var.get('require')(Js('../internals/set-to-string-tag')))
        var.put('InternalStateModule', var.get('require')(Js('../internals/internal-state')))
        var.put('$forEach', var.get('require')(Js('../internals/array-iteration')).get('forEach'))
        var.put('HIDDEN', var.get('sharedKey')(Js('hidden')))
        var.put('SYMBOL', Js('Symbol'))
        var.put('PROTOTYPE', Js('prototype'))
        var.put('TO_PRIMITIVE', var.get('wellKnownSymbol')(Js('toPrimitive')))
        var.put('setInternalState', var.get('InternalStateModule').get('set'))
        var.put('getInternalState', var.get('InternalStateModule').callprop('getterFor', var.get('SYMBOL')))
        var.put('ObjectPrototype', var.get('Object').get(var.get('PROTOTYPE')))
        var.put('$Symbol', var.get('global').get('Symbol'))
        var.put('$stringify', var.get('getBuiltIn')(Js('JSON'), Js('stringify')))
        var.put('nativeGetOwnPropertyDescriptor', var.get('getOwnPropertyDescriptorModule').get('f'))
        var.put('nativeDefineProperty', var.get('definePropertyModule').get('f'))
        var.put('nativeGetOwnPropertyNames', var.get('getOwnPropertyNamesExternal').get('f'))
        var.put('nativePropertyIsEnumerable', var.get('propertyIsEnumerableModule').get('f'))
        var.put('AllSymbols', var.get('shared')(Js('symbols')))
        var.put('ObjectPrototypeSymbols', var.get('shared')(Js('op-symbols')))
        var.put('StringToSymbolRegistry', var.get('shared')(Js('string-to-symbol-registry')))
        var.put('SymbolToStringRegistry', var.get('shared')(Js('symbol-to-string-registry')))
        var.put('WellKnownSymbolsStore', var.get('shared')(Js('wks')))
        var.put('QObject', var.get('global').get('QObject'))
        var.put('USE_SETTER', ((var.get('QObject').neg() or var.get('QObject').get(var.get('PROTOTYPE')).neg()) or var.get('QObject').get(var.get('PROTOTYPE')).get('findChild').neg()))
        @Js
        def PyJs_anonymous_681_(O, P, Attributes, this, arguments, var=var):
            var = Scope({'O':O, 'P':P, 'Attributes':Attributes, 'this':this, 'arguments':arguments}, var)
            var.registers(['Attributes', 'O', 'ObjectPrototypeDescriptor', 'P'])
            var.put('ObjectPrototypeDescriptor', var.get('nativeGetOwnPropertyDescriptor')(var.get('ObjectPrototype'), var.get('P')))
            if var.get('ObjectPrototypeDescriptor'):
                var.get('ObjectPrototype').delete(var.get('P'))
            var.get('nativeDefineProperty')(var.get('O'), var.get('P'), var.get('Attributes'))
            if (var.get('ObjectPrototypeDescriptor') and PyJsStrictNeq(var.get('O'),var.get('ObjectPrototype'))):
                var.get('nativeDefineProperty')(var.get('ObjectPrototype'), var.get('P'), var.get('ObjectPrototypeDescriptor'))
        PyJs_anonymous_681_._set_name('anonymous')
        @Js
        def PyJs_anonymous_682_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_anonymous_683_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return var.get('nativeDefineProperty')(var.get(u"this"), Js('a'), Js({'value':Js(7.0)})).get('a')
            PyJs_anonymous_683_._set_name('anonymous')
            return (var.get('nativeObjectCreate')(var.get('nativeDefineProperty')(Js({}), Js('a'), Js({'get':PyJs_anonymous_683_}))).get('a')!=Js(7.0))
        PyJs_anonymous_682_._set_name('anonymous')
        var.put('setSymbolDescriptor', (PyJs_anonymous_681_ if (var.get('DESCRIPTORS') and var.get('fails')(PyJs_anonymous_682_)) else var.get('nativeDefineProperty')))
        @Js
        def PyJs_anonymous_684_(tag, description, this, arguments, var=var):
            var = Scope({'tag':tag, 'description':description, 'this':this, 'arguments':arguments}, var)
            var.registers(['symbol', 'description', 'tag'])
            var.put('symbol', var.get('AllSymbols').put(var.get('tag'), var.get('nativeObjectCreate')(var.get('$Symbol').get(var.get('PROTOTYPE')))))
            var.get('setInternalState')(var.get('symbol'), Js({'type':var.get('SYMBOL'),'tag':var.get('tag'),'description':var.get('description')}))
            if var.get('DESCRIPTORS').neg():
                var.get('symbol').put('description', var.get('description'))
            return var.get('symbol')
        PyJs_anonymous_684_._set_name('anonymous')
        var.put('wrap', PyJs_anonymous_684_)
        @Js
        def PyJs_anonymous_685_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return (var.get('it',throw=False).typeof()==Js('symbol'))
        PyJs_anonymous_685_._set_name('anonymous')
        @Js
        def PyJs_anonymous_686_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return var.get('Object')(var.get('it')).instanceof(var.get('$Symbol'))
        PyJs_anonymous_686_._set_name('anonymous')
        var.put('isSymbol', (PyJs_anonymous_685_ if var.get('USE_SYMBOL_AS_UID') else PyJs_anonymous_686_))
        @Js
        def PyJs_defineProperty_687_(O, P, Attributes, this, arguments, var=var):
            var = Scope({'O':O, 'P':P, 'Attributes':Attributes, 'this':this, 'arguments':arguments, 'defineProperty':PyJs_defineProperty_687_}, var)
            var.registers(['key', 'O', 'P', 'Attributes'])
            if PyJsStrictEq(var.get('O'),var.get('ObjectPrototype')):
                var.get('$defineProperty')(var.get('ObjectPrototypeSymbols'), var.get('P'), var.get('Attributes'))
            var.get('anObject')(var.get('O'))
            var.put('key', var.get('toPrimitive')(var.get('P'), Js(True)))
            var.get('anObject')(var.get('Attributes'))
            if var.get('has')(var.get('AllSymbols'), var.get('key')):
                if var.get('Attributes').get('enumerable').neg():
                    if var.get('has')(var.get('O'), var.get('HIDDEN')).neg():
                        var.get('nativeDefineProperty')(var.get('O'), var.get('HIDDEN'), var.get('createPropertyDescriptor')(Js(1.0), Js({})))
                    var.get('O').get(var.get('HIDDEN')).put(var.get('key'), Js(True))
                else:
                    if (var.get('has')(var.get('O'), var.get('HIDDEN')) and var.get('O').get(var.get('HIDDEN')).get(var.get('key'))):
                        var.get('O').get(var.get('HIDDEN')).put(var.get('key'), Js(False))
                    var.put('Attributes', var.get('nativeObjectCreate')(var.get('Attributes'), Js({'enumerable':var.get('createPropertyDescriptor')(Js(0.0), Js(False))})))
                return var.get('setSymbolDescriptor')(var.get('O'), var.get('key'), var.get('Attributes'))
            return var.get('nativeDefineProperty')(var.get('O'), var.get('key'), var.get('Attributes'))
        PyJs_defineProperty_687_._set_name('defineProperty')
        var.put('$defineProperty', PyJs_defineProperty_687_)
        @Js
        def PyJs_defineProperties_688_(O, Properties, this, arguments, var=var):
            var = Scope({'O':O, 'Properties':Properties, 'this':this, 'arguments':arguments, 'defineProperties':PyJs_defineProperties_688_}, var)
            var.registers(['keys', 'O', 'Properties', 'properties'])
            var.get('anObject')(var.get('O'))
            var.put('properties', var.get('toIndexedObject')(var.get('Properties')))
            var.put('keys', var.get('objectKeys')(var.get('properties')).callprop('concat', var.get('$getOwnPropertySymbols')(var.get('properties'))))
            @Js
            def PyJs_anonymous_689_(key, this, arguments, var=var):
                var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                var.registers(['key'])
                if (var.get('DESCRIPTORS').neg() or var.get('$propertyIsEnumerable').callprop('call', var.get('properties'), var.get('key'))):
                    var.get('$defineProperty')(var.get('O'), var.get('key'), var.get('properties').get(var.get('key')))
            PyJs_anonymous_689_._set_name('anonymous')
            var.get('$forEach')(var.get('keys'), PyJs_anonymous_689_)
            return var.get('O')
        PyJs_defineProperties_688_._set_name('defineProperties')
        var.put('$defineProperties', PyJs_defineProperties_688_)
        @Js
        def PyJs_create_690_(O, Properties, this, arguments, var=var):
            var = Scope({'O':O, 'Properties':Properties, 'this':this, 'arguments':arguments, 'create':PyJs_create_690_}, var)
            var.registers(['O', 'Properties'])
            return (var.get('nativeObjectCreate')(var.get('O')) if PyJsStrictEq(var.get('Properties'),var.get('undefined')) else var.get('$defineProperties')(var.get('nativeObjectCreate')(var.get('O')), var.get('Properties')))
        PyJs_create_690_._set_name('create')
        var.put('$create', PyJs_create_690_)
        @Js
        def PyJs_propertyIsEnumerable_691_(V, this, arguments, var=var):
            var = Scope({'V':V, 'this':this, 'arguments':arguments, 'propertyIsEnumerable':PyJs_propertyIsEnumerable_691_}, var)
            var.registers(['enumerable', 'P', 'V'])
            var.put('P', var.get('toPrimitive')(var.get('V'), Js(True)))
            var.put('enumerable', var.get('nativePropertyIsEnumerable').callprop('call', var.get(u"this"), var.get('P')))
            if ((PyJsStrictEq(var.get(u"this"),var.get('ObjectPrototype')) and var.get('has')(var.get('AllSymbols'), var.get('P'))) and var.get('has')(var.get('ObjectPrototypeSymbols'), var.get('P')).neg()):
                return Js(False)
            return (var.get('enumerable') if (((var.get('enumerable') or var.get('has')(var.get(u"this"), var.get('P')).neg()) or var.get('has')(var.get('AllSymbols'), var.get('P')).neg()) or (var.get('has')(var.get(u"this"), var.get('HIDDEN')) and var.get(u"this").get(var.get('HIDDEN')).get(var.get('P')))) else Js(True))
        PyJs_propertyIsEnumerable_691_._set_name('propertyIsEnumerable')
        var.put('$propertyIsEnumerable', PyJs_propertyIsEnumerable_691_)
        @Js
        def PyJs_getOwnPropertyDescriptor_692_(O, P, this, arguments, var=var):
            var = Scope({'O':O, 'P':P, 'this':this, 'arguments':arguments, 'getOwnPropertyDescriptor':PyJs_getOwnPropertyDescriptor_692_}, var)
            var.registers(['descriptor', 'O', 'it', 'P', 'key'])
            var.put('it', var.get('toIndexedObject')(var.get('O')))
            var.put('key', var.get('toPrimitive')(var.get('P'), Js(True)))
            if ((PyJsStrictEq(var.get('it'),var.get('ObjectPrototype')) and var.get('has')(var.get('AllSymbols'), var.get('key'))) and var.get('has')(var.get('ObjectPrototypeSymbols'), var.get('key')).neg()):
                return var.get('undefined')
            var.put('descriptor', var.get('nativeGetOwnPropertyDescriptor')(var.get('it'), var.get('key')))
            if ((var.get('descriptor') and var.get('has')(var.get('AllSymbols'), var.get('key'))) and (var.get('has')(var.get('it'), var.get('HIDDEN')) and var.get('it').get(var.get('HIDDEN')).get(var.get('key'))).neg()):
                var.get('descriptor').put('enumerable', Js(True))
            return var.get('descriptor')
        PyJs_getOwnPropertyDescriptor_692_._set_name('getOwnPropertyDescriptor')
        var.put('$getOwnPropertyDescriptor', PyJs_getOwnPropertyDescriptor_692_)
        @Js
        def PyJs_getOwnPropertyNames_693_(O, this, arguments, var=var):
            var = Scope({'O':O, 'this':this, 'arguments':arguments, 'getOwnPropertyNames':PyJs_getOwnPropertyNames_693_}, var)
            var.registers(['names', 'O', 'result'])
            var.put('names', var.get('nativeGetOwnPropertyNames')(var.get('toIndexedObject')(var.get('O'))))
            var.put('result', Js([]))
            @Js
            def PyJs_anonymous_694_(key, this, arguments, var=var):
                var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                var.registers(['key'])
                if (var.get('has')(var.get('AllSymbols'), var.get('key')).neg() and var.get('has')(var.get('hiddenKeys'), var.get('key')).neg()):
                    var.get('result').callprop('push', var.get('key'))
            PyJs_anonymous_694_._set_name('anonymous')
            var.get('$forEach')(var.get('names'), PyJs_anonymous_694_)
            return var.get('result')
        PyJs_getOwnPropertyNames_693_._set_name('getOwnPropertyNames')
        var.put('$getOwnPropertyNames', PyJs_getOwnPropertyNames_693_)
        @Js
        def PyJs_getOwnPropertySymbols_695_(O, this, arguments, var=var):
            var = Scope({'O':O, 'this':this, 'arguments':arguments, 'getOwnPropertySymbols':PyJs_getOwnPropertySymbols_695_}, var)
            var.registers(['result', 'names', 'O', 'IS_OBJECT_PROTOTYPE'])
            var.put('IS_OBJECT_PROTOTYPE', PyJsStrictEq(var.get('O'),var.get('ObjectPrototype')))
            var.put('names', var.get('nativeGetOwnPropertyNames')((var.get('ObjectPrototypeSymbols') if var.get('IS_OBJECT_PROTOTYPE') else var.get('toIndexedObject')(var.get('O')))))
            var.put('result', Js([]))
            @Js
            def PyJs_anonymous_696_(key, this, arguments, var=var):
                var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                var.registers(['key'])
                if (var.get('has')(var.get('AllSymbols'), var.get('key')) and (var.get('IS_OBJECT_PROTOTYPE').neg() or var.get('has')(var.get('ObjectPrototype'), var.get('key')))):
                    var.get('result').callprop('push', var.get('AllSymbols').get(var.get('key')))
            PyJs_anonymous_696_._set_name('anonymous')
            var.get('$forEach')(var.get('names'), PyJs_anonymous_696_)
            return var.get('result')
        PyJs_getOwnPropertySymbols_695_._set_name('getOwnPropertySymbols')
        var.put('$getOwnPropertySymbols', PyJs_getOwnPropertySymbols_695_)
        if var.get('NATIVE_SYMBOL').neg():
            @Js
            def PyJs_Symbol_697_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'Symbol':PyJs_Symbol_697_}, var)
                var.registers(['tag', 'setter', 'description'])
                if var.get(u"this").instanceof(var.get('$Symbol')):
                    PyJsTempException = JsToPyException(var.get('TypeError')(Js('Symbol is not a constructor')))
                    raise PyJsTempException
                var.put('description', (var.get('undefined') if (var.get('arguments').get('length').neg() or PyJsStrictEq(var.get('arguments').get('0'),var.get('undefined'))) else var.get('String')(var.get('arguments').get('0'))))
                var.put('tag', var.get('uid')(var.get('description')))
                @Js
                def PyJs_anonymous_698_(value, this, arguments, var=var):
                    var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                    var.registers(['value'])
                    if PyJsStrictEq(var.get(u"this"),var.get('ObjectPrototype')):
                        var.get('setter').callprop('call', var.get('ObjectPrototypeSymbols'), var.get('value'))
                    if (var.get('has')(var.get(u"this"), var.get('HIDDEN')) and var.get('has')(var.get(u"this").get(var.get('HIDDEN')), var.get('tag'))):
                        var.get(u"this").get(var.get('HIDDEN')).put(var.get('tag'), Js(False))
                    var.get('setSymbolDescriptor')(var.get(u"this"), var.get('tag'), var.get('createPropertyDescriptor')(Js(1.0), var.get('value')))
                PyJs_anonymous_698_._set_name('anonymous')
                var.put('setter', PyJs_anonymous_698_)
                if (var.get('DESCRIPTORS') and var.get('USE_SETTER')):
                    var.get('setSymbolDescriptor')(var.get('ObjectPrototype'), var.get('tag'), Js({'configurable':Js(True),'set':var.get('setter')}))
                return var.get('wrap')(var.get('tag'), var.get('description'))
            PyJs_Symbol_697_._set_name('Symbol')
            var.put('$Symbol', PyJs_Symbol_697_)
            @Js
            def PyJs_toString_699_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'toString':PyJs_toString_699_}, var)
                var.registers([])
                return var.get('getInternalState')(var.get(u"this")).get('tag')
            PyJs_toString_699_._set_name('toString')
            var.get('redefine')(var.get('$Symbol').get(var.get('PROTOTYPE')), Js('toString'), PyJs_toString_699_)
            @Js
            def PyJs_anonymous_700_(description, this, arguments, var=var):
                var = Scope({'description':description, 'this':this, 'arguments':arguments}, var)
                var.registers(['description'])
                return var.get('wrap')(var.get('uid')(var.get('description')), var.get('description'))
            PyJs_anonymous_700_._set_name('anonymous')
            var.get('redefine')(var.get('$Symbol'), Js('withoutSetter'), PyJs_anonymous_700_)
            var.get('propertyIsEnumerableModule').put('f', var.get('$propertyIsEnumerable'))
            var.get('definePropertyModule').put('f', var.get('$defineProperty'))
            var.get('getOwnPropertyDescriptorModule').put('f', var.get('$getOwnPropertyDescriptor'))
            var.get('getOwnPropertyNamesModule').put('f', var.get('getOwnPropertyNamesExternal').put('f', var.get('$getOwnPropertyNames')))
            var.get('getOwnPropertySymbolsModule').put('f', var.get('$getOwnPropertySymbols'))
            @Js
            def PyJs_anonymous_701_(name, this, arguments, var=var):
                var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
                var.registers(['name'])
                return var.get('wrap')(var.get('wellKnownSymbol')(var.get('name')), var.get('name'))
            PyJs_anonymous_701_._set_name('anonymous')
            var.get('wrappedWellKnownSymbolModule').put('f', PyJs_anonymous_701_)
            if var.get('DESCRIPTORS'):
                @Js
                def PyJs_description_702_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'description':PyJs_description_702_}, var)
                    var.registers([])
                    return var.get('getInternalState')(var.get(u"this")).get('description')
                PyJs_description_702_._set_name('description')
                var.get('nativeDefineProperty')(var.get('$Symbol').get(var.get('PROTOTYPE')), Js('description'), Js({'configurable':Js(True),'get':PyJs_description_702_}))
                if var.get('IS_PURE').neg():
                    var.get('redefine')(var.get('ObjectPrototype'), Js('propertyIsEnumerable'), var.get('$propertyIsEnumerable'), Js({'unsafe':Js(True)}))
        var.get('$')(Js({'global':Js(True),'wrap':Js(True),'forced':var.get('NATIVE_SYMBOL').neg(),'sham':var.get('NATIVE_SYMBOL').neg()}), Js({'Symbol':var.get('$Symbol')}))
        @Js
        def PyJs_anonymous_703_(name, this, arguments, var=var):
            var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
            var.registers(['name'])
            var.get('defineWellKnownSymbol')(var.get('name'))
        PyJs_anonymous_703_._set_name('anonymous')
        var.get('$forEach')(var.get('objectKeys')(var.get('WellKnownSymbolsStore')), PyJs_anonymous_703_)
        @Js
        def PyJs_anonymous_704_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
            var.registers(['symbol', 'string', 'key'])
            var.put('string', var.get('String')(var.get('key')))
            if var.get('has')(var.get('StringToSymbolRegistry'), var.get('string')):
                return var.get('StringToSymbolRegistry').get(var.get('string'))
            var.put('symbol', var.get('$Symbol')(var.get('string')))
            var.get('StringToSymbolRegistry').put(var.get('string'), var.get('symbol'))
            var.get('SymbolToStringRegistry').put(var.get('symbol'), var.get('string'))
            return var.get('symbol')
        PyJs_anonymous_704_._set_name('anonymous')
        @Js
        def PyJs_keyFor_705_(sym, this, arguments, var=var):
            var = Scope({'sym':sym, 'this':this, 'arguments':arguments, 'keyFor':PyJs_keyFor_705_}, var)
            var.registers(['sym'])
            if var.get('isSymbol')(var.get('sym')).neg():
                PyJsTempException = JsToPyException(var.get('TypeError')((var.get('sym')+Js(' is not a symbol'))))
                raise PyJsTempException
            if var.get('has')(var.get('SymbolToStringRegistry'), var.get('sym')):
                return var.get('SymbolToStringRegistry').get(var.get('sym'))
        PyJs_keyFor_705_._set_name('keyFor')
        @Js
        def PyJs_anonymous_706_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.put('USE_SETTER', Js(True))
        PyJs_anonymous_706_._set_name('anonymous')
        @Js
        def PyJs_anonymous_707_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.put('USE_SETTER', Js(False))
        PyJs_anonymous_707_._set_name('anonymous')
        var.get('$')(Js({'target':var.get('SYMBOL'),'stat':Js(True),'forced':var.get('NATIVE_SYMBOL').neg()}), Js({'for':PyJs_anonymous_704_,'keyFor':PyJs_keyFor_705_,'useSetter':PyJs_anonymous_706_,'useSimple':PyJs_anonymous_707_}))
        var.get('$')(Js({'target':Js('Object'),'stat':Js(True),'forced':var.get('NATIVE_SYMBOL').neg(),'sham':var.get('DESCRIPTORS').neg()}), Js({'create':var.get('$create'),'defineProperty':var.get('$defineProperty'),'defineProperties':var.get('$defineProperties'),'getOwnPropertyDescriptor':var.get('$getOwnPropertyDescriptor')}))
        var.get('$')(Js({'target':Js('Object'),'stat':Js(True),'forced':var.get('NATIVE_SYMBOL').neg()}), Js({'getOwnPropertyNames':var.get('$getOwnPropertyNames'),'getOwnPropertySymbols':var.get('$getOwnPropertySymbols')}))
        @Js
        def PyJs_anonymous_708_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('getOwnPropertySymbolsModule').callprop('f', Js(1.0))
        PyJs_anonymous_708_._set_name('anonymous')
        @Js
        def PyJs_getOwnPropertySymbols_709_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'getOwnPropertySymbols':PyJs_getOwnPropertySymbols_709_}, var)
            var.registers(['it'])
            return var.get('getOwnPropertySymbolsModule').callprop('f', var.get('toObject')(var.get('it')))
        PyJs_getOwnPropertySymbols_709_._set_name('getOwnPropertySymbols')
        var.get('$')(Js({'target':Js('Object'),'stat':Js(True),'forced':var.get('fails')(PyJs_anonymous_708_)}), Js({'getOwnPropertySymbols':PyJs_getOwnPropertySymbols_709_}))
        if var.get('$stringify'):
            @Js
            def PyJs_anonymous_710_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['symbol'])
                var.put('symbol', var.get('$Symbol')())
                return (((var.get('$stringify')(Js([var.get('symbol')]))!=Js('[null]')) or (var.get('$stringify')(Js({'a':var.get('symbol')}))!=Js('{}'))) or (var.get('$stringify')(var.get('Object')(var.get('symbol')))!=Js('{}')))
            PyJs_anonymous_710_._set_name('anonymous')
            var.put('FORCED_JSON_STRINGIFY', (var.get('NATIVE_SYMBOL').neg() or var.get('fails')(PyJs_anonymous_710_)))
            @Js
            def PyJs_stringify_711_(it, replacer, space, this, arguments, var=var):
                var = Scope({'it':it, 'replacer':replacer, 'space':space, 'this':this, 'arguments':arguments, 'stringify':PyJs_stringify_711_}, var)
                var.registers(['args', 'it', 'index', '$replacer', 'space', 'replacer'])
                var.put('args', Js([var.get('it')]))
                var.put('index', Js(1.0))
                pass
                while (var.get('arguments').get('length')>var.get('index')):
                    var.get('args').callprop('push', var.get('arguments').get((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))))
                var.put('$replacer', var.get('replacer'))
                if ((var.get('isObject')(var.get('replacer')).neg() and PyJsStrictEq(var.get('it'),var.get('undefined'))) or var.get('isSymbol')(var.get('it'))):
                    return var.get('undefined')
                if var.get('isArray')(var.get('replacer')).neg():
                    @Js
                    def PyJs_anonymous_712_(key, value, this, arguments, var=var):
                        var = Scope({'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'value'])
                        if (var.get('$replacer',throw=False).typeof()==Js('function')):
                            var.put('value', var.get('$replacer').callprop('call', var.get(u"this"), var.get('key'), var.get('value')))
                        if var.get('isSymbol')(var.get('value')).neg():
                            return var.get('value')
                    PyJs_anonymous_712_._set_name('anonymous')
                    var.put('replacer', PyJs_anonymous_712_)
                var.get('args').put('1', var.get('replacer'))
                return var.get('$stringify').callprop('apply', var.get(u"null"), var.get('args'))
            PyJs_stringify_711_._set_name('stringify')
            var.get('$')(Js({'target':Js('JSON'),'stat':Js(True),'forced':var.get('FORCED_JSON_STRINGIFY')}), Js({'stringify':PyJs_stringify_711_}))
        if var.get('$Symbol').get(var.get('PROTOTYPE')).get(var.get('TO_PRIMITIVE')).neg():
            var.get('createNonEnumerableProperty')(var.get('$Symbol').get(var.get('PROTOTYPE')), var.get('TO_PRIMITIVE'), var.get('$Symbol').get(var.get('PROTOTYPE')).get('valueOf'))
        var.get('setToStringTag')(var.get('$Symbol'), var.get('SYMBOL'))
        var.get('hiddenKeys').put(var.get('HIDDEN'), Js(True))
    PyJs_anonymous_680_._set_name('anonymous')
    @Js
    def PyJs_anonymous_713_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'Symbol', 'exports', 'module', 'root'])
        var.put('root', var.get('require')(Js('./_root')))
        var.put('Symbol', var.get('root').get('Symbol'))
        var.get('module').put('exports', var.get('Symbol'))
    PyJs_anonymous_713_._set_name('anonymous')
    @Js
    def PyJs_anonymous_714_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'arrayMap', 'require', 'exports'])
        @Js
        def PyJsHoisted_arrayMap_(array, iteratee, this, arguments, var=var):
            var = Scope({'array':array, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
            var.registers(['array', 'result', 'length', 'index', 'iteratee'])
            var.put('index', (-Js(1.0)))
            var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
            var.put('result', var.get('Array')(var.get('length')))
            while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                var.get('result').put(var.get('index'), var.get('iteratee')(var.get('array').get(var.get('index')), var.get('index'), var.get('array')))
            return var.get('result')
        PyJsHoisted_arrayMap_.func_name = 'arrayMap'
        var.put('arrayMap', PyJsHoisted_arrayMap_)
        pass
        var.get('module').put('exports', var.get('arrayMap'))
    PyJs_anonymous_714_._set_name('anonymous')
    @Js
    def PyJs_anonymous_715_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['arrayReduce', 'module', 'require', 'exports'])
        @Js
        def PyJsHoisted_arrayReduce_(array, iteratee, accumulator, initAccum, this, arguments, var=var):
            var = Scope({'array':array, 'iteratee':iteratee, 'accumulator':accumulator, 'initAccum':initAccum, 'this':this, 'arguments':arguments}, var)
            var.registers(['array', 'length', 'index', 'initAccum', 'accumulator', 'iteratee'])
            var.put('index', (-Js(1.0)))
            var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
            if (var.get('initAccum') and var.get('length')):
                var.put('accumulator', var.get('array').get(var.put('index',Js(var.get('index').to_number())+Js(1))))
            while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                var.put('accumulator', var.get('iteratee')(var.get('accumulator'), var.get('array').get(var.get('index')), var.get('index'), var.get('array')))
            return var.get('accumulator')
        PyJsHoisted_arrayReduce_.func_name = 'arrayReduce'
        var.put('arrayReduce', PyJsHoisted_arrayReduce_)
        pass
        var.get('module').put('exports', var.get('arrayReduce'))
    PyJs_anonymous_715_._set_name('anonymous')
    @Js
    def PyJs_anonymous_716_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'asciiWords', 'reAsciiWord', 'exports', 'module'])
        @Js
        def PyJsHoisted_asciiWords_(string, this, arguments, var=var):
            var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
            var.registers(['string'])
            return (var.get('string').callprop('match', var.get('reAsciiWord')) or Js([]))
        PyJsHoisted_asciiWords_.func_name = 'asciiWords'
        var.put('asciiWords', PyJsHoisted_asciiWords_)
        var.put('reAsciiWord', JsRegExp('/[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g'))
        pass
        var.get('module').put('exports', var.get('asciiWords'))
    PyJs_anonymous_716_._set_name('anonymous')
    @Js
    def PyJs_anonymous_717_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['undefinedTag', 'require', 'symToStringTag', 'Symbol', 'baseGetTag', 'exports', 'getRawTag', 'module', 'nullTag', 'objectToString'])
        @Js
        def PyJsHoisted_baseGetTag_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            if (var.get('value')==var.get(u"null")):
                return (var.get('undefinedTag') if PyJsStrictEq(var.get('value'),var.get('undefined')) else var.get('nullTag'))
            return (var.get('getRawTag')(var.get('value')) if (var.get('symToStringTag') and var.get('Object')(var.get('value')).contains(var.get('symToStringTag'))) else var.get('objectToString')(var.get('value')))
        PyJsHoisted_baseGetTag_.func_name = 'baseGetTag'
        var.put('baseGetTag', PyJsHoisted_baseGetTag_)
        var.put('Symbol', var.get('require')(Js('./_Symbol')))
        var.put('getRawTag', var.get('require')(Js('./_getRawTag')))
        var.put('objectToString', var.get('require')(Js('./_objectToString')))
        var.put('nullTag', Js('[object Null]'))
        var.put('undefinedTag', Js('[object Undefined]'))
        var.put('symToStringTag', (var.get('Symbol').get('toStringTag') if var.get('Symbol') else var.get('undefined')))
        pass
        var.get('module').put('exports', var.get('baseGetTag'))
    PyJs_anonymous_717_._set_name('anonymous')
    @Js
    def PyJs_anonymous_718_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'basePropertyOf', 'require', 'module'])
        @Js
        def PyJsHoisted_basePropertyOf_(object, this, arguments, var=var):
            var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
            var.registers(['object'])
            @Js
            def PyJs_anonymous_719_(key, this, arguments, var=var):
                var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                var.registers(['key'])
                return (var.get('undefined') if (var.get('object')==var.get(u"null")) else var.get('object').get(var.get('key')))
            PyJs_anonymous_719_._set_name('anonymous')
            return PyJs_anonymous_719_
        PyJsHoisted_basePropertyOf_.func_name = 'basePropertyOf'
        var.put('basePropertyOf', PyJsHoisted_basePropertyOf_)
        pass
        var.get('module').put('exports', var.get('basePropertyOf'))
    PyJs_anonymous_718_._set_name('anonymous')
    @Js
    def PyJs_anonymous_720_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['symbolProto', 'require', 'Symbol', 'INFINITY', 'exports', 'arrayMap', 'isArray', 'module', 'baseToString', 'symbolToString', 'isSymbol'])
        @Js
        def PyJsHoisted_baseToString_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['result', 'value'])
            if (var.get('value',throw=False).typeof()==Js('string')):
                return var.get('value')
            if var.get('isArray')(var.get('value')):
                return (var.get('arrayMap')(var.get('value'), var.get('baseToString'))+Js(''))
            if var.get('isSymbol')(var.get('value')):
                return (var.get('symbolToString').callprop('call', var.get('value')) if var.get('symbolToString') else Js(''))
            var.put('result', (var.get('value')+Js('')))
            return (Js('-0') if ((var.get('result')==Js('0')) and ((Js(1.0)/var.get('value'))==(-var.get('INFINITY')))) else var.get('result'))
        PyJsHoisted_baseToString_.func_name = 'baseToString'
        var.put('baseToString', PyJsHoisted_baseToString_)
        var.put('Symbol', var.get('require')(Js('./_Symbol')))
        var.put('arrayMap', var.get('require')(Js('./_arrayMap')))
        var.put('isArray', var.get('require')(Js('./isArray')))
        var.put('isSymbol', var.get('require')(Js('./isSymbol')))
        var.put('INFINITY', (Js(1.0)/Js(0.0)))
        var.put('symbolProto', (var.get('Symbol').get('prototype') if var.get('Symbol') else var.get('undefined')))
        var.put('symbolToString', (var.get('symbolProto').get('toString') if var.get('symbolProto') else var.get('undefined')))
        pass
        var.get('module').put('exports', var.get('baseToString'))
    PyJs_anonymous_720_._set_name('anonymous')
    @Js
    def PyJs_anonymous_721_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['arrayReduce', 'rsApos', 'deburr', 'require', 'createCompounder', 'words', 'exports', 'module', 'reApos'])
        @Js
        def PyJsHoisted_createCompounder_(callback, this, arguments, var=var):
            var = Scope({'callback':callback, 'this':this, 'arguments':arguments}, var)
            var.registers(['callback'])
            @Js
            def PyJs_anonymous_722_(string, this, arguments, var=var):
                var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                var.registers(['string'])
                return var.get('arrayReduce')(var.get('words')(var.get('deburr')(var.get('string')).callprop('replace', var.get('reApos'), Js(''))), var.get('callback'), Js(''))
            PyJs_anonymous_722_._set_name('anonymous')
            return PyJs_anonymous_722_
        PyJsHoisted_createCompounder_.func_name = 'createCompounder'
        var.put('createCompounder', PyJsHoisted_createCompounder_)
        var.put('arrayReduce', var.get('require')(Js('./_arrayReduce')))
        var.put('deburr', var.get('require')(Js('./deburr')))
        var.put('words', var.get('require')(Js('./words')))
        var.put('rsApos', Js("['’]"))
        var.put('reApos', var.get('RegExp')(var.get('rsApos'), Js('g')))
        pass
        var.get('module').put('exports', var.get('createCompounder'))
    PyJs_anonymous_721_._set_name('anonymous')
    @Js
    def PyJs_anonymous_723_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['basePropertyOf', 'require', 'deburrLetter', 'exports', 'deburredLetters', 'module'])
        var.put('basePropertyOf', var.get('require')(Js('./_basePropertyOf')))
        var.put('deburredLetters', Js({'À':Js('A'),'Á':Js('A'),'Â':Js('A'),'Ã':Js('A'),'Ä':Js('A'),'Å':Js('A'),'à':Js('a'),'á':Js('a'),'â':Js('a'),'ã':Js('a'),'ä':Js('a'),'å':Js('a'),'Ç':Js('C'),'ç':Js('c'),'Ð':Js('D'),'ð':Js('d'),'È':Js('E'),'É':Js('E'),'Ê':Js('E'),'Ë':Js('E'),'è':Js('e'),'é':Js('e'),'ê':Js('e'),'ë':Js('e'),'Ì':Js('I'),'Í':Js('I'),'Î':Js('I'),'Ï':Js('I'),'ì':Js('i'),'í':Js('i'),'î':Js('i'),'ï':Js('i'),'Ñ':Js('N'),'ñ':Js('n'),'Ò':Js('O'),'Ó':Js('O'),'Ô':Js('O'),'Õ':Js('O'),'Ö':Js('O'),'Ø':Js('O'),'ò':Js('o'),'ó':Js('o'),'ô':Js('o'),'õ':Js('o'),'ö':Js('o'),'ø':Js('o'),'Ù':Js('U'),'Ú':Js('U'),'Û':Js('U'),'Ü':Js('U'),'ù':Js('u'),'ú':Js('u'),'û':Js('u'),'ü':Js('u'),'Ý':Js('Y'),'ý':Js('y'),'ÿ':Js('y'),'Æ':Js('Ae'),'æ':Js('ae'),'Þ':Js('Th'),'þ':Js('th'),'ß':Js('ss'),'Ā':Js('A'),'Ă':Js('A'),'Ą':Js('A'),'ā':Js('a'),'ă':Js('a'),'ą':Js('a'),'Ć':Js('C'),'Ĉ':Js('C'),'Ċ':Js('C'),'Č':Js('C'),'ć':Js('c'),'ĉ':Js('c'),'ċ':Js('c'),'č':Js('c'),'Ď':Js('D'),'Đ':Js('D'),'ď':Js('d'),'đ':Js('d'),'Ē':Js('E'),'Ĕ':Js('E'),'Ė':Js('E'),'Ę':Js('E'),'Ě':Js('E'),'ē':Js('e'),'ĕ':Js('e'),'ė':Js('e'),'ę':Js('e'),'ě':Js('e'),'Ĝ':Js('G'),'Ğ':Js('G'),'Ġ':Js('G'),'Ģ':Js('G'),'ĝ':Js('g'),'ğ':Js('g'),'ġ':Js('g'),'ģ':Js('g'),'Ĥ':Js('H'),'Ħ':Js('H'),'ĥ':Js('h'),'ħ':Js('h'),'Ĩ':Js('I'),'Ī':Js('I'),'Ĭ':Js('I'),'Į':Js('I'),'İ':Js('I'),'ĩ':Js('i'),'ī':Js('i'),'ĭ':Js('i'),'į':Js('i'),'ı':Js('i'),'Ĵ':Js('J'),'ĵ':Js('j'),'Ķ':Js('K'),'ķ':Js('k'),'ĸ':Js('k'),'Ĺ':Js('L'),'Ļ':Js('L'),'Ľ':Js('L'),'Ŀ':Js('L'),'Ł':Js('L'),'ĺ':Js('l'),'ļ':Js('l'),'ľ':Js('l'),'ŀ':Js('l'),'ł':Js('l'),'Ń':Js('N'),'Ņ':Js('N'),'Ň':Js('N'),'Ŋ':Js('N'),'ń':Js('n'),'ņ':Js('n'),'ň':Js('n'),'ŋ':Js('n'),'Ō':Js('O'),'Ŏ':Js('O'),'Ő':Js('O'),'ō':Js('o'),'ŏ':Js('o'),'ő':Js('o'),'Ŕ':Js('R'),'Ŗ':Js('R'),'Ř':Js('R'),'ŕ':Js('r'),'ŗ':Js('r'),'ř':Js('r'),'Ś':Js('S'),'Ŝ':Js('S'),'Ş':Js('S'),'Š':Js('S'),'ś':Js('s'),'ŝ':Js('s'),'ş':Js('s'),'š':Js('s'),'Ţ':Js('T'),'Ť':Js('T'),'Ŧ':Js('T'),'ţ':Js('t'),'ť':Js('t'),'ŧ':Js('t'),'Ũ':Js('U'),'Ū':Js('U'),'Ŭ':Js('U'),'Ů':Js('U'),'Ű':Js('U'),'Ų':Js('U'),'ũ':Js('u'),'ū':Js('u'),'ŭ':Js('u'),'ů':Js('u'),'ű':Js('u'),'ų':Js('u'),'Ŵ':Js('W'),'ŵ':Js('w'),'Ŷ':Js('Y'),'ŷ':Js('y'),'Ÿ':Js('Y'),'Ź':Js('Z'),'Ż':Js('Z'),'Ž':Js('Z'),'ź':Js('z'),'ż':Js('z'),'ž':Js('z'),'Ĳ':Js('IJ'),'ĳ':Js('ij'),'Œ':Js('Oe'),'œ':Js('oe'),'ŉ':Js("'n"),'ſ':Js('s')}))
        var.put('deburrLetter', var.get('basePropertyOf')(var.get('deburredLetters')))
        var.get('module').put('exports', var.get('deburrLetter'))
    PyJs_anonymous_723_._set_name('anonymous')
    @Js
    def PyJs_anonymous_724_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'exports'])
        @Js
        def PyJs_anonymous_725_(PyJsArg_676c6f62616c_, this, arguments, var=var):
            var = Scope({'global':PyJsArg_676c6f62616c_, 'this':this, 'arguments':arguments}, var)
            var.registers(['freeGlobal', 'global'])
            var.put('freeGlobal', ((((var.get('global',throw=False).typeof()==Js('object')) and var.get('global')) and PyJsStrictEq(var.get('global').get('Object'),var.get('Object'))) and var.get('global')))
            var.get('module').put('exports', var.get('freeGlobal'))
        PyJs_anonymous_725_._set_name('anonymous')
        PyJs_anonymous_725_.callprop('call', var.get(u"this"), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else Js({})))))
    PyJs_anonymous_724_._set_name('anonymous')
    @Js
    def PyJs_anonymous_726_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'hasOwnProperty', 'nativeObjectToString', 'symToStringTag', 'objectProto', 'Symbol', 'exports', 'getRawTag', 'module'])
        @Js
        def PyJsHoisted_getRawTag_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['isOwn', 'result', 'value', 'tag', 'unmasked'])
            var.put('isOwn', var.get('hasOwnProperty').callprop('call', var.get('value'), var.get('symToStringTag')))
            var.put('tag', var.get('value').get(var.get('symToStringTag')))
            try:
                var.get('value').put(var.get('symToStringTag'), var.get('undefined'))
                var.put('unmasked', Js(True))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_44333225 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    pass
                finally:
                    if PyJsHolder_65_44333225 is not None:
                        var.own['e'] = PyJsHolder_65_44333225
                    else:
                        del var.own['e']
                    del PyJsHolder_65_44333225
            var.put('result', var.get('nativeObjectToString').callprop('call', var.get('value')))
            if var.get('unmasked'):
                if var.get('isOwn'):
                    var.get('value').put(var.get('symToStringTag'), var.get('tag'))
                else:
                    var.get('value').delete(var.get('symToStringTag'))
            return var.get('result')
        PyJsHoisted_getRawTag_.func_name = 'getRawTag'
        var.put('getRawTag', PyJsHoisted_getRawTag_)
        var.put('Symbol', var.get('require')(Js('./_Symbol')))
        var.put('objectProto', var.get('Object').get('prototype'))
        var.put('hasOwnProperty', var.get('objectProto').get('hasOwnProperty'))
        var.put('nativeObjectToString', var.get('objectProto').get('toString'))
        var.put('symToStringTag', (var.get('Symbol').get('toStringTag') if var.get('Symbol') else var.get('undefined')))
        pass
        var.get('module').put('exports', var.get('getRawTag'))
    PyJs_anonymous_726_._set_name('anonymous')
    @Js
    def PyJs_anonymous_727_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['reHasUnicodeWord', 'hasUnicodeWord', 'require', 'exports', 'module'])
        @Js
        def PyJsHoisted_hasUnicodeWord_(string, this, arguments, var=var):
            var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
            var.registers(['string'])
            return var.get('reHasUnicodeWord').callprop('test', var.get('string'))
        PyJsHoisted_hasUnicodeWord_.func_name = 'hasUnicodeWord'
        var.put('hasUnicodeWord', PyJsHoisted_hasUnicodeWord_)
        var.put('reHasUnicodeWord', JsRegExp('/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/'))
        pass
        var.get('module').put('exports', var.get('hasUnicodeWord'))
    PyJs_anonymous_727_._set_name('anonymous')
    @Js
    def PyJs_anonymous_728_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'nativeObjectToString', 'objectProto', 'exports', 'module', 'objectToString'])
        @Js
        def PyJsHoisted_objectToString_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return var.get('nativeObjectToString').callprop('call', var.get('value'))
        PyJsHoisted_objectToString_.func_name = 'objectToString'
        var.put('objectToString', PyJsHoisted_objectToString_)
        var.put('objectProto', var.get('Object').get('prototype'))
        var.put('nativeObjectToString', var.get('objectProto').get('toString'))
        pass
        var.get('module').put('exports', var.get('objectToString'))
    PyJs_anonymous_728_._set_name('anonymous')
    @Js
    def PyJs_anonymous_729_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'exports', 'freeGlobal', 'root', 'module', 'freeSelf'])
        var.put('freeGlobal', var.get('require')(Js('./_freeGlobal')))
        var.put('freeSelf', ((((var.get('self',throw=False).typeof()==Js('object')) and var.get('self')) and PyJsStrictEq(var.get('self').get('Object'),var.get('Object'))) and var.get('self')))
        var.put('root', ((var.get('freeGlobal') or var.get('freeSelf')) or var.get('Function')(Js('return this'))()))
        var.get('module').put('exports', var.get('root'))
    PyJs_anonymous_729_._set_name('anonymous')
    @Js
    def PyJs_anonymous_730_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['rsComboSymbolsRange', 'rsBreak', 'rsModifier', 'rsZWJ', 'rsUpperRange', 'reComboHalfMarksRange', 'rsMiscUpper', 'rsEmoji', 'module', 'rsDingbatRange', 'rsPunctuationRange', 'rsAstralRange', 'rsSurrPair', 'rsCombo', 'require', 'rsOptJoin', 'unicodeWords', 'rsOrdLower', 'rsDingbat', 'rsFitz', 'rsNonCharRange', 'rsComboRange', 'rsOptContrUpper', 'reUnicodeWord', 'rsComboMarksRange', 'rsMiscLower', 'rsNonAstral', 'reOptMod', 'rsMisc', 'rsOptContrLower', 'rsDigits', 'rsApos', 'rsLowerRange', 'rsOptVar', 'rsSeq', 'rsLower', 'exports', 'rsVarRange', 'rsBreakRange', 'rsMathOpRange', 'rsUpper', 'rsRegional', 'rsOrdUpper', 'rsSpaceRange'])
        @Js
        def PyJsHoisted_unicodeWords_(string, this, arguments, var=var):
            var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
            var.registers(['string'])
            return (var.get('string').callprop('match', var.get('reUnicodeWord')) or Js([]))
        PyJsHoisted_unicodeWords_.func_name = 'unicodeWords'
        var.put('unicodeWords', PyJsHoisted_unicodeWords_)
        var.put('rsAstralRange', Js('\\ud800-\\udfff'))
        var.put('rsComboMarksRange', Js('\\u0300-\\u036f'))
        var.put('reComboHalfMarksRange', Js('\\ufe20-\\ufe2f'))
        var.put('rsComboSymbolsRange', Js('\\u20d0-\\u20ff'))
        var.put('rsComboRange', ((var.get('rsComboMarksRange')+var.get('reComboHalfMarksRange'))+var.get('rsComboSymbolsRange')))
        var.put('rsDingbatRange', Js('\\u2700-\\u27bf'))
        var.put('rsLowerRange', Js('a-z\\xdf-\\xf6\\xf8-\\xff'))
        var.put('rsMathOpRange', Js('\\xac\\xb1\\xd7\\xf7'))
        var.put('rsNonCharRange', Js('\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf'))
        var.put('rsPunctuationRange', Js('\\u2000-\\u206f'))
        var.put('rsSpaceRange', Js(' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000'))
        var.put('rsUpperRange', Js('A-Z\\xc0-\\xd6\\xd8-\\xde'))
        var.put('rsVarRange', Js('\\ufe0e\\ufe0f'))
        var.put('rsBreakRange', (((var.get('rsMathOpRange')+var.get('rsNonCharRange'))+var.get('rsPunctuationRange'))+var.get('rsSpaceRange')))
        var.put('rsApos', Js("['’]"))
        var.put('rsBreak', ((Js('[')+var.get('rsBreakRange'))+Js(']')))
        var.put('rsCombo', ((Js('[')+var.get('rsComboRange'))+Js(']')))
        var.put('rsDigits', Js('\\d+'))
        var.put('rsDingbat', ((Js('[')+var.get('rsDingbatRange'))+Js(']')))
        var.put('rsLower', ((Js('[')+var.get('rsLowerRange'))+Js(']')))
        var.put('rsMisc', (((((((Js('[^')+var.get('rsAstralRange'))+var.get('rsBreakRange'))+var.get('rsDigits'))+var.get('rsDingbatRange'))+var.get('rsLowerRange'))+var.get('rsUpperRange'))+Js(']')))
        var.put('rsFitz', Js('\\ud83c[\\udffb-\\udfff]'))
        var.put('rsModifier', ((((Js('(?:')+var.get('rsCombo'))+Js('|'))+var.get('rsFitz'))+Js(')')))
        var.put('rsNonAstral', ((Js('[^')+var.get('rsAstralRange'))+Js(']')))
        var.put('rsRegional', Js('(?:\\ud83c[\\udde6-\\uddff]){2}'))
        var.put('rsSurrPair', Js('[\\ud800-\\udbff][\\udc00-\\udfff]'))
        var.put('rsUpper', ((Js('[')+var.get('rsUpperRange'))+Js(']')))
        var.put('rsZWJ', Js('\\u200d'))
        var.put('rsMiscLower', ((((Js('(?:')+var.get('rsLower'))+Js('|'))+var.get('rsMisc'))+Js(')')))
        var.put('rsMiscUpper', ((((Js('(?:')+var.get('rsUpper'))+Js('|'))+var.get('rsMisc'))+Js(')')))
        var.put('rsOptContrLower', ((Js('(?:')+var.get('rsApos'))+Js('(?:d|ll|m|re|s|t|ve))?')))
        var.put('rsOptContrUpper', ((Js('(?:')+var.get('rsApos'))+Js('(?:D|LL|M|RE|S|T|VE))?')))
        var.put('reOptMod', (var.get('rsModifier')+Js('?')))
        var.put('rsOptVar', ((Js('[')+var.get('rsVarRange'))+Js(']?')))
        var.put('rsOptJoin', (((((((Js('(?:')+var.get('rsZWJ'))+Js('(?:'))+Js([var.get('rsNonAstral'), var.get('rsRegional'), var.get('rsSurrPair')]).callprop('join', Js('|')))+Js(')'))+var.get('rsOptVar'))+var.get('reOptMod'))+Js(')*')))
        var.put('rsOrdLower', Js('\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])'))
        var.put('rsOrdUpper', Js('\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])'))
        var.put('rsSeq', ((var.get('rsOptVar')+var.get('reOptMod'))+var.get('rsOptJoin')))
        var.put('rsEmoji', (((Js('(?:')+Js([var.get('rsDingbat'), var.get('rsRegional'), var.get('rsSurrPair')]).callprop('join', Js('|')))+Js(')'))+var.get('rsSeq')))
        def PyJs_LONG_731_(var=var):
            return Js([(((((((var.get('rsUpper')+Js('?'))+var.get('rsLower'))+Js('+'))+var.get('rsOptContrLower'))+Js('(?='))+Js([var.get('rsBreak'), var.get('rsUpper'), Js('$')]).callprop('join', Js('|')))+Js(')')), (((((var.get('rsMiscUpper')+Js('+'))+var.get('rsOptContrUpper'))+Js('(?='))+Js([var.get('rsBreak'), (var.get('rsUpper')+var.get('rsMiscLower')), Js('$')]).callprop('join', Js('|')))+Js(')')), ((((var.get('rsUpper')+Js('?'))+var.get('rsMiscLower'))+Js('+'))+var.get('rsOptContrLower')), ((var.get('rsUpper')+Js('+'))+var.get('rsOptContrUpper')), var.get('rsOrdUpper'), var.get('rsOrdLower'), var.get('rsDigits'), var.get('rsEmoji')]).callprop('join', Js('|'))
        var.put('reUnicodeWord', var.get('RegExp')(PyJs_LONG_731_(), Js('g')))
        pass
        var.get('module').put('exports', var.get('unicodeWords'))
    PyJs_anonymous_730_._set_name('anonymous')
    @Js
    def PyJs_anonymous_732_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['rsComboSymbolsRange', 'deburr', 'rsCombo', 'require', 'toString', 'deburrLetter', 'rsComboRange', 'reComboHalfMarksRange', 'rsComboMarksRange', 'exports', 'module', 'reLatin', 'reComboMark'])
        @Js
        def PyJsHoisted_deburr_(string, this, arguments, var=var):
            var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
            var.registers(['string'])
            var.put('string', var.get('toString')(var.get('string')))
            return (var.get('string') and var.get('string').callprop('replace', var.get('reLatin'), var.get('deburrLetter')).callprop('replace', var.get('reComboMark'), Js('')))
        PyJsHoisted_deburr_.func_name = 'deburr'
        var.put('deburr', PyJsHoisted_deburr_)
        var.put('deburrLetter', var.get('require')(Js('./_deburrLetter')))
        var.put('toString', var.get('require')(Js('./toString')))
        var.put('reLatin', JsRegExp('/[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g'))
        var.put('rsComboMarksRange', Js('\\u0300-\\u036f'))
        var.put('reComboHalfMarksRange', Js('\\ufe20-\\ufe2f'))
        var.put('rsComboSymbolsRange', Js('\\u20d0-\\u20ff'))
        var.put('rsComboRange', ((var.get('rsComboMarksRange')+var.get('reComboHalfMarksRange'))+var.get('rsComboSymbolsRange')))
        var.put('rsCombo', ((Js('[')+var.get('rsComboRange'))+Js(']')))
        var.put('reComboMark', var.get('RegExp')(var.get('rsCombo'), Js('g')))
        pass
        var.get('module').put('exports', var.get('deburr'))
    PyJs_anonymous_732_._set_name('anonymous')
    @Js
    def PyJs_anonymous_733_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'isArray', 'exports'])
        var.put('isArray', var.get('Array').get('isArray'))
        var.get('module').put('exports', var.get('isArray'))
    PyJs_anonymous_733_._set_name('anonymous')
    @Js
    def PyJs_anonymous_734_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'isObjectLike', 'exports'])
        @Js
        def PyJsHoisted_isObjectLike_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return ((var.get('value')!=var.get(u"null")) and (var.get('value',throw=False).typeof()==Js('object')))
        PyJsHoisted_isObjectLike_.func_name = 'isObjectLike'
        var.put('isObjectLike', PyJsHoisted_isObjectLike_)
        pass
        var.get('module').put('exports', var.get('isObjectLike'))
    PyJs_anonymous_734_._set_name('anonymous')
    @Js
    def PyJs_anonymous_735_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'baseGetTag', 'exports', 'module', 'symbolTag', 'isObjectLike', 'isSymbol'])
        @Js
        def PyJsHoisted_isSymbol_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return ((var.get('value',throw=False).typeof()==Js('symbol')) or (var.get('isObjectLike')(var.get('value')) and (var.get('baseGetTag')(var.get('value'))==var.get('symbolTag'))))
        PyJsHoisted_isSymbol_.func_name = 'isSymbol'
        var.put('isSymbol', PyJsHoisted_isSymbol_)
        var.put('baseGetTag', var.get('require')(Js('./_baseGetTag')))
        var.put('isObjectLike', var.get('require')(Js('./isObjectLike')))
        var.put('symbolTag', Js('[object Symbol]'))
        pass
        var.get('module').put('exports', var.get('isSymbol'))
    PyJs_anonymous_735_._set_name('anonymous')
    @Js
    def PyJs_anonymous_736_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'exports'])
        @Js
        def PyJs_anonymous_737_(PyJsArg_676c6f62616c_, this, arguments, var=var):
            var = Scope({'global':PyJsArg_676c6f62616c_, 'this':this, 'arguments':arguments}, var)
            var.registers(['global'])
            pass
            @Js
            def PyJs_anonymous_738_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['rsComboSymbolsRange', 'WRAP_CURRY_BOUND_FLAG', 'rsUpperRange', 'freeParseInt', 'reComboMark', 'reEscapeChar', 'basePropertyOf', 'baseFindIndex', 'overArg', 'rsOptJoin', 'reAsciiWord', 'funcTag', 'reIsPlainProp', 'reEmptyStringTrailing', 'rsDingbat', 'rsNonCharRange', 'int8Tag', 'COMPARE_PARTIAL_FLAG', 'CORE_ERROR_TEXT', 'float64Tag', 'asciiWords', 'rsOptContrUpper', 'strictIndexOf', 'rsComboMarksRange', 'rsMiscLower', 'rsNonAstral', 'contextProps', 'arrayMap', 'mapTag', 'stringToArray', 'nullTag', 'reApos', 'rsDigits', 'reHasUnescapedHtml', 'reIsHostCtor', 'HALF_MAX_ARRAY_LENGTH', 'rsRegional', 'rsSeq', 'rsAstral', 'cloneableTags', 'rsUpper', 'reEmptyStringLeading', 'reIsDeepProp', 'nodeIsDate', 'baseUnary', 'runInContext', 'promiseTag', 'uint8Tag', 'rsMiscUpper', 'INFINITY', 'stringEscapes', 'reTrim', 'countHolders', 'WRAP_PARTIAL_FLAG', 'asciiSize', 'baseValues', 'NAN', 'rsAstralRange', 'MAX_INTEGER', 'reIsOctal', 'arrayEachRight', 'escapeHtmlChar', 'numberTag', 'undefinedTag', 'rsCombo', 'getValue', 'MAX_SAFE_INTEGER', 'argsTag', 'iteratorToArray', 'FUNC_ERROR_TEXT', 'freeProcess', 'HOT_COUNT', 'unicodeWords', 'reEscape', 'arrayPush', 'baseToPairs', 'rsSymbol', 'LAZY_FILTER_FLAG', 'reHasUnicode', 'hasUnicodeWord', 'MAX_ARRAY_INDEX', 'baseTimes', 'setTag', 'rsComboRange', 'dataViewTag', 'reOptMod', 'rsMisc', 'freeGlobal', 'genTag', 'escapeStringChar', 'setToArray', 'WRAP_CURRY_FLAG', 'CLONE_SYMBOLS_FLAG', 'dateTag', 'rsApos', 'LARGE_ARRAY_SIZE', 'htmlEscapes', 'rsLowerRange', 'deburrLetter', 'reIsUint', 'domExcTag', 'reEsTemplate', 'rsBreakRange', 'rsOrdUpper', 'rsSpaceRange', 'reUnicodeWord', 'arraySome', 'nodeIsMap', 'CLONE_FLAT_FLAG', 'baseReduce', 'arrayTag', 'reIsBadHex', 'MAX_MEMOIZE_SIZE', 'reWrapDetails', 'rsDingbatRange', 'objectTag', 'rsPunctuationRange', 'WRAP_PARTIAL_RIGHT_FLAG', 'moduleExports', 'charsEndIndex', 'rsSurrPair', 'strictLastIndexOf', 'reEvaluate', 'reTrimStart', 'setToPairs', 'boolTag', 'nodeUtil', 'VERSION', 'baseFindKey', 'uint16Tag', 'cacheHas', 'reRegExpChar', 'rsOrdLower', 'freeParseFloat', 'rsFitz', 'weakMapTag', 'unicodeSize', 'WRAP_ARY_FLAG', 'arrayEvery', 'reHasUnicodeWord', 'arrayReduce', 'WRAP_FLIP_FLAG', 'asciiToArray', 'reIsBinary', 'mapToArray', 'PLACEHOLDER', 'DEFAULT_TRUNC_LENGTH', 'LAZY_WHILE_FLAG', 'reEmptyStringMiddle', 'baseIsNaN', 'unescapeHtmlChar', 'symbolTag', 'reUnescapedString', 'DEFAULT_TRUNC_OMISSION', 'rsOptContrLower', 'templateCounter', 'reUnescapedHtml', 'reHasRegExpChar', 'WRAP_CURRY_RIGHT_FLAG', 'baseSum', 'HASH_UNDEFINED', 'reHasEscapedHtml', 'uint8ClampedTag', 'rsLower', 'proxyTag', 'WRAP_BIND_KEY_FLAG', 'reTrimEnd', 'arrayReduceRight', 'baseProperty', 'nodeIsSet', 'hasUnicode', 'LAZY_MAP_FLAG', 'reWrapComment', 'rsModifier', 'rsBreak', 'reUnicode', 'arrayAggregator', 'rsZWJ', 'reComboHalfMarksRange', 'MAX_ARRAY_LENGTH', 'reInterpolate', 'htmlUnescapes', 'nodeIsRegExp', 'rsEmoji', 'arrayBufferTag', 'typedArrayTags', 'reNoMatch', 'undefined', 'freeModule', 'float32Tag', 'arrayFilter', 'charsStartIndex', 'nodeIsTypedArray', 'reFlags', 'reSplitDetails', 'WRAP_REARG_FLAG', 'errorTag', 'uint32Tag', 'deburredLetters', 'root', 'baseSortBy', 'reEscapedHtml', 'int16Tag', 'int32Tag', 'apply', 'COMPARE_UNORDERED_FLAG', 'HOT_SPAN', 'unicodeToArray', 'stringSize', 'arrayEach', 'arrayIncludes', 'WRAP_BIND_FLAG', 'baseMean', 'nodeIsArrayBuffer', 'replaceHolders', '_', 'asyncTag', 'weakSetTag', 'rePropName', 'regexpTag', 'freeSelf', 'freeExports', 'arrayIncludesWith', 'baseIndexOf', 'wrapFlags', 'rsOptVar', 'baseIndexOfWith', 'rsVarRange', 'rsMathOpRange', 'reLatin', 'stringTag', 'CLONE_DEEP_FLAG'])
                @Js
                def PyJsHoisted_apply_(func, thisArg, args, this, arguments, var=var):
                    var = Scope({'func':func, 'thisArg':thisArg, 'args':args, 'this':this, 'arguments':arguments}, var)
                    var.registers(['args', 'func', 'thisArg'])
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get('args').get('length'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(0.0)):
                            SWITCHED = True
                            return var.get('func').callprop('call', var.get('thisArg'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                            SWITCHED = True
                            return var.get('func').callprop('call', var.get('thisArg'), var.get('args').get('0'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                            SWITCHED = True
                            return var.get('func').callprop('call', var.get('thisArg'), var.get('args').get('0'), var.get('args').get('1'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                            SWITCHED = True
                            return var.get('func').callprop('call', var.get('thisArg'), var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2'))
                        SWITCHED = True
                        break
                    return var.get('func').callprop('apply', var.get('thisArg'), var.get('args'))
                PyJsHoisted_apply_.func_name = 'apply'
                var.put('apply', PyJsHoisted_apply_)
                @Js
                def PyJsHoisted_arrayAggregator_(array, setter, iteratee, accumulator, this, arguments, var=var):
                    var = Scope({'array':array, 'setter':setter, 'iteratee':iteratee, 'accumulator':accumulator, 'this':this, 'arguments':arguments}, var)
                    var.registers(['array', 'value', 'setter', 'length', 'index', 'accumulator', 'iteratee'])
                    var.put('index', (-Js(1.0)))
                    var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                    while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                        var.put('value', var.get('array').get(var.get('index')))
                        var.get('setter')(var.get('accumulator'), var.get('value'), var.get('iteratee')(var.get('value')), var.get('array'))
                    return var.get('accumulator')
                PyJsHoisted_arrayAggregator_.func_name = 'arrayAggregator'
                var.put('arrayAggregator', PyJsHoisted_arrayAggregator_)
                @Js
                def PyJsHoisted_arrayEach_(array, iteratee, this, arguments, var=var):
                    var = Scope({'array':array, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                    var.registers(['array', 'length', 'index', 'iteratee'])
                    var.put('index', (-Js(1.0)))
                    var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                    while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                        if PyJsStrictEq(var.get('iteratee')(var.get('array').get(var.get('index')), var.get('index'), var.get('array')),Js(False)):
                            break
                    return var.get('array')
                PyJsHoisted_arrayEach_.func_name = 'arrayEach'
                var.put('arrayEach', PyJsHoisted_arrayEach_)
                @Js
                def PyJsHoisted_arrayEachRight_(array, iteratee, this, arguments, var=var):
                    var = Scope({'array':array, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                    var.registers(['array', 'length', 'iteratee'])
                    var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                    while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
                        if PyJsStrictEq(var.get('iteratee')(var.get('array').get(var.get('length')), var.get('length'), var.get('array')),Js(False)):
                            break
                    return var.get('array')
                PyJsHoisted_arrayEachRight_.func_name = 'arrayEachRight'
                var.put('arrayEachRight', PyJsHoisted_arrayEachRight_)
                @Js
                def PyJsHoisted_arrayEvery_(array, predicate, this, arguments, var=var):
                    var = Scope({'array':array, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                    var.registers(['array', 'length', 'index', 'predicate'])
                    var.put('index', (-Js(1.0)))
                    var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                    while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                        if var.get('predicate')(var.get('array').get(var.get('index')), var.get('index'), var.get('array')).neg():
                            return Js(False)
                    return Js(True)
                PyJsHoisted_arrayEvery_.func_name = 'arrayEvery'
                var.put('arrayEvery', PyJsHoisted_arrayEvery_)
                @Js
                def PyJsHoisted_arrayFilter_(array, predicate, this, arguments, var=var):
                    var = Scope({'array':array, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                    var.registers(['array', 'result', 'value', 'predicate', 'length', 'index', 'resIndex'])
                    var.put('index', (-Js(1.0)))
                    var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                    var.put('resIndex', Js(0.0))
                    var.put('result', Js([]))
                    while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                        var.put('value', var.get('array').get(var.get('index')))
                        if var.get('predicate')(var.get('value'), var.get('index'), var.get('array')):
                            var.get('result').put((var.put('resIndex',Js(var.get('resIndex').to_number())+Js(1))-Js(1)), var.get('value'))
                    return var.get('result')
                PyJsHoisted_arrayFilter_.func_name = 'arrayFilter'
                var.put('arrayFilter', PyJsHoisted_arrayFilter_)
                @Js
                def PyJsHoisted_arrayIncludes_(array, value, this, arguments, var=var):
                    var = Scope({'array':array, 'value':value, 'this':this, 'arguments':arguments}, var)
                    var.registers(['array', 'value', 'length'])
                    var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                    return (var.get('length').neg().neg() and (var.get('baseIndexOf')(var.get('array'), var.get('value'), Js(0.0))>(-Js(1.0))))
                PyJsHoisted_arrayIncludes_.func_name = 'arrayIncludes'
                var.put('arrayIncludes', PyJsHoisted_arrayIncludes_)
                @Js
                def PyJsHoisted_arrayIncludesWith_(array, value, comparator, this, arguments, var=var):
                    var = Scope({'array':array, 'value':value, 'comparator':comparator, 'this':this, 'arguments':arguments}, var)
                    var.registers(['array', 'value', 'length', 'index', 'comparator'])
                    var.put('index', (-Js(1.0)))
                    var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                    while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                        if var.get('comparator')(var.get('value'), var.get('array').get(var.get('index'))):
                            return Js(True)
                    return Js(False)
                PyJsHoisted_arrayIncludesWith_.func_name = 'arrayIncludesWith'
                var.put('arrayIncludesWith', PyJsHoisted_arrayIncludesWith_)
                @Js
                def PyJsHoisted_arrayMap_(array, iteratee, this, arguments, var=var):
                    var = Scope({'array':array, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                    var.registers(['array', 'result', 'length', 'index', 'iteratee'])
                    var.put('index', (-Js(1.0)))
                    var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                    var.put('result', var.get('Array')(var.get('length')))
                    while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                        var.get('result').put(var.get('index'), var.get('iteratee')(var.get('array').get(var.get('index')), var.get('index'), var.get('array')))
                    return var.get('result')
                PyJsHoisted_arrayMap_.func_name = 'arrayMap'
                var.put('arrayMap', PyJsHoisted_arrayMap_)
                @Js
                def PyJsHoisted_arrayPush_(array, values, this, arguments, var=var):
                    var = Scope({'array':array, 'values':values, 'this':this, 'arguments':arguments}, var)
                    var.registers(['array', 'offset', 'length', 'index', 'values'])
                    var.put('index', (-Js(1.0)))
                    var.put('length', var.get('values').get('length'))
                    var.put('offset', var.get('array').get('length'))
                    while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                        var.get('array').put((var.get('offset')+var.get('index')), var.get('values').get(var.get('index')))
                    return var.get('array')
                PyJsHoisted_arrayPush_.func_name = 'arrayPush'
                var.put('arrayPush', PyJsHoisted_arrayPush_)
                @Js
                def PyJsHoisted_arrayReduce_(array, iteratee, accumulator, initAccum, this, arguments, var=var):
                    var = Scope({'array':array, 'iteratee':iteratee, 'accumulator':accumulator, 'initAccum':initAccum, 'this':this, 'arguments':arguments}, var)
                    var.registers(['array', 'length', 'index', 'initAccum', 'accumulator', 'iteratee'])
                    var.put('index', (-Js(1.0)))
                    var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                    if (var.get('initAccum') and var.get('length')):
                        var.put('accumulator', var.get('array').get(var.put('index',Js(var.get('index').to_number())+Js(1))))
                    while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                        var.put('accumulator', var.get('iteratee')(var.get('accumulator'), var.get('array').get(var.get('index')), var.get('index'), var.get('array')))
                    return var.get('accumulator')
                PyJsHoisted_arrayReduce_.func_name = 'arrayReduce'
                var.put('arrayReduce', PyJsHoisted_arrayReduce_)
                @Js
                def PyJsHoisted_arrayReduceRight_(array, iteratee, accumulator, initAccum, this, arguments, var=var):
                    var = Scope({'array':array, 'iteratee':iteratee, 'accumulator':accumulator, 'initAccum':initAccum, 'this':this, 'arguments':arguments}, var)
                    var.registers(['array', 'length', 'initAccum', 'accumulator', 'iteratee'])
                    var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                    if (var.get('initAccum') and var.get('length')):
                        var.put('accumulator', var.get('array').get(var.put('length',Js(var.get('length').to_number())-Js(1))))
                    while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
                        var.put('accumulator', var.get('iteratee')(var.get('accumulator'), var.get('array').get(var.get('length')), var.get('length'), var.get('array')))
                    return var.get('accumulator')
                PyJsHoisted_arrayReduceRight_.func_name = 'arrayReduceRight'
                var.put('arrayReduceRight', PyJsHoisted_arrayReduceRight_)
                @Js
                def PyJsHoisted_arraySome_(array, predicate, this, arguments, var=var):
                    var = Scope({'array':array, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                    var.registers(['array', 'length', 'index', 'predicate'])
                    var.put('index', (-Js(1.0)))
                    var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                    while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                        if var.get('predicate')(var.get('array').get(var.get('index')), var.get('index'), var.get('array')):
                            return Js(True)
                    return Js(False)
                PyJsHoisted_arraySome_.func_name = 'arraySome'
                var.put('arraySome', PyJsHoisted_arraySome_)
                @Js
                def PyJsHoisted_asciiToArray_(string, this, arguments, var=var):
                    var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                    var.registers(['string'])
                    return var.get('string').callprop('split', Js(''))
                PyJsHoisted_asciiToArray_.func_name = 'asciiToArray'
                var.put('asciiToArray', PyJsHoisted_asciiToArray_)
                @Js
                def PyJsHoisted_asciiWords_(string, this, arguments, var=var):
                    var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                    var.registers(['string'])
                    return (var.get('string').callprop('match', var.get('reAsciiWord')) or Js([]))
                PyJsHoisted_asciiWords_.func_name = 'asciiWords'
                var.put('asciiWords', PyJsHoisted_asciiWords_)
                @Js
                def PyJsHoisted_baseFindKey_(collection, predicate, eachFunc, this, arguments, var=var):
                    var = Scope({'collection':collection, 'predicate':predicate, 'eachFunc':eachFunc, 'this':this, 'arguments':arguments}, var)
                    var.registers(['eachFunc', 'result', 'predicate', 'collection'])
                    pass
                    @Js
                    def PyJs_anonymous_745_(value, key, collection, this, arguments, var=var):
                        var = Scope({'value':value, 'key':key, 'collection':collection, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'value', 'collection'])
                        if var.get('predicate')(var.get('value'), var.get('key'), var.get('collection')):
                            var.put('result', var.get('key'))
                            return Js(False)
                    PyJs_anonymous_745_._set_name('anonymous')
                    var.get('eachFunc')(var.get('collection'), PyJs_anonymous_745_)
                    return var.get('result')
                PyJsHoisted_baseFindKey_.func_name = 'baseFindKey'
                var.put('baseFindKey', PyJsHoisted_baseFindKey_)
                @Js
                def PyJsHoisted_baseFindIndex_(array, predicate, fromIndex, fromRight, this, arguments, var=var):
                    var = Scope({'array':array, 'predicate':predicate, 'fromIndex':fromIndex, 'fromRight':fromRight, 'this':this, 'arguments':arguments}, var)
                    var.registers(['array', 'predicate', 'fromRight', 'fromIndex', 'length', 'index'])
                    var.put('length', var.get('array').get('length'))
                    var.put('index', (var.get('fromIndex')+(Js(1.0) if var.get('fromRight') else (-Js(1.0)))))
                    while ((var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1)) if var.get('fromRight') else (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length'))):
                        if var.get('predicate')(var.get('array').get(var.get('index')), var.get('index'), var.get('array')):
                            return var.get('index')
                    return (-Js(1.0))
                PyJsHoisted_baseFindIndex_.func_name = 'baseFindIndex'
                var.put('baseFindIndex', PyJsHoisted_baseFindIndex_)
                @Js
                def PyJsHoisted_baseIndexOf_(array, value, fromIndex, this, arguments, var=var):
                    var = Scope({'array':array, 'value':value, 'fromIndex':fromIndex, 'this':this, 'arguments':arguments}, var)
                    var.registers(['array', 'value', 'fromIndex'])
                    return (var.get('strictIndexOf')(var.get('array'), var.get('value'), var.get('fromIndex')) if PyJsStrictEq(var.get('value'),var.get('value')) else var.get('baseFindIndex')(var.get('array'), var.get('baseIsNaN'), var.get('fromIndex')))
                PyJsHoisted_baseIndexOf_.func_name = 'baseIndexOf'
                var.put('baseIndexOf', PyJsHoisted_baseIndexOf_)
                @Js
                def PyJsHoisted_baseIndexOfWith_(array, value, fromIndex, comparator, this, arguments, var=var):
                    var = Scope({'array':array, 'value':value, 'fromIndex':fromIndex, 'comparator':comparator, 'this':this, 'arguments':arguments}, var)
                    var.registers(['array', 'value', 'fromIndex', 'length', 'index', 'comparator'])
                    var.put('index', (var.get('fromIndex')-Js(1.0)))
                    var.put('length', var.get('array').get('length'))
                    while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                        if var.get('comparator')(var.get('array').get(var.get('index')), var.get('value')):
                            return var.get('index')
                    return (-Js(1.0))
                PyJsHoisted_baseIndexOfWith_.func_name = 'baseIndexOfWith'
                var.put('baseIndexOfWith', PyJsHoisted_baseIndexOfWith_)
                @Js
                def PyJsHoisted_baseIsNaN_(value, this, arguments, var=var):
                    var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                    var.registers(['value'])
                    return PyJsStrictNeq(var.get('value'),var.get('value'))
                PyJsHoisted_baseIsNaN_.func_name = 'baseIsNaN'
                var.put('baseIsNaN', PyJsHoisted_baseIsNaN_)
                @Js
                def PyJsHoisted_baseMean_(array, iteratee, this, arguments, var=var):
                    var = Scope({'array':array, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                    var.registers(['array', 'length', 'iteratee'])
                    var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                    return ((var.get('baseSum')(var.get('array'), var.get('iteratee'))/var.get('length')) if var.get('length') else var.get('NAN'))
                PyJsHoisted_baseMean_.func_name = 'baseMean'
                var.put('baseMean', PyJsHoisted_baseMean_)
                @Js
                def PyJsHoisted_baseProperty_(key, this, arguments, var=var):
                    var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                    var.registers(['key'])
                    @Js
                    def PyJs_anonymous_746_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object'])
                        return (var.get('undefined') if (var.get('object')==var.get(u"null")) else var.get('object').get(var.get('key')))
                    PyJs_anonymous_746_._set_name('anonymous')
                    return PyJs_anonymous_746_
                PyJsHoisted_baseProperty_.func_name = 'baseProperty'
                var.put('baseProperty', PyJsHoisted_baseProperty_)
                @Js
                def PyJsHoisted_basePropertyOf_(object, this, arguments, var=var):
                    var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                    var.registers(['object'])
                    @Js
                    def PyJs_anonymous_747_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key'])
                        return (var.get('undefined') if (var.get('object')==var.get(u"null")) else var.get('object').get(var.get('key')))
                    PyJs_anonymous_747_._set_name('anonymous')
                    return PyJs_anonymous_747_
                PyJsHoisted_basePropertyOf_.func_name = 'basePropertyOf'
                var.put('basePropertyOf', PyJsHoisted_basePropertyOf_)
                @Js
                def PyJsHoisted_baseReduce_(collection, iteratee, accumulator, initAccum, eachFunc, this, arguments, var=var):
                    var = Scope({'collection':collection, 'iteratee':iteratee, 'accumulator':accumulator, 'initAccum':initAccum, 'eachFunc':eachFunc, 'this':this, 'arguments':arguments}, var)
                    var.registers(['collection', 'eachFunc', 'initAccum', 'accumulator', 'iteratee'])
                    @Js
                    def PyJs_anonymous_748_(value, index, collection, this, arguments, var=var):
                        var = Scope({'value':value, 'index':index, 'collection':collection, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'index', 'collection'])
                        var.put('accumulator', (PyJsComma(var.put('initAccum', Js(False)),var.get('value')) if var.get('initAccum') else var.get('iteratee')(var.get('accumulator'), var.get('value'), var.get('index'), var.get('collection'))))
                    PyJs_anonymous_748_._set_name('anonymous')
                    var.get('eachFunc')(var.get('collection'), PyJs_anonymous_748_)
                    return var.get('accumulator')
                PyJsHoisted_baseReduce_.func_name = 'baseReduce'
                var.put('baseReduce', PyJsHoisted_baseReduce_)
                @Js
                def PyJsHoisted_baseSortBy_(array, comparer, this, arguments, var=var):
                    var = Scope({'array':array, 'comparer':comparer, 'this':this, 'arguments':arguments}, var)
                    var.registers(['array', 'comparer', 'length'])
                    var.put('length', var.get('array').get('length'))
                    var.get('array').callprop('sort', var.get('comparer'))
                    while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
                        var.get('array').put(var.get('length'), var.get('array').get(var.get('length')).get('value'))
                    return var.get('array')
                PyJsHoisted_baseSortBy_.func_name = 'baseSortBy'
                var.put('baseSortBy', PyJsHoisted_baseSortBy_)
                @Js
                def PyJsHoisted_baseSum_(array, iteratee, this, arguments, var=var):
                    var = Scope({'array':array, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                    var.registers(['array', 'result', 'length', 'index', 'current', 'iteratee'])
                    var.put('index', (-Js(1.0)))
                    var.put('length', var.get('array').get('length'))
                    while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                        var.put('current', var.get('iteratee')(var.get('array').get(var.get('index'))))
                        if PyJsStrictNeq(var.get('current'),var.get('undefined')):
                            var.put('result', (var.get('current') if PyJsStrictEq(var.get('result'),var.get('undefined')) else (var.get('result')+var.get('current'))))
                    return var.get('result')
                PyJsHoisted_baseSum_.func_name = 'baseSum'
                var.put('baseSum', PyJsHoisted_baseSum_)
                @Js
                def PyJsHoisted_baseTimes_(n, iteratee, this, arguments, var=var):
                    var = Scope({'n':n, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                    var.registers(['n', 'iteratee', 'result', 'index'])
                    var.put('index', (-Js(1.0)))
                    var.put('result', var.get('Array')(var.get('n')))
                    while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('n')):
                        var.get('result').put(var.get('index'), var.get('iteratee')(var.get('index')))
                    return var.get('result')
                PyJsHoisted_baseTimes_.func_name = 'baseTimes'
                var.put('baseTimes', PyJsHoisted_baseTimes_)
                @Js
                def PyJsHoisted_baseToPairs_(object, props, this, arguments, var=var):
                    var = Scope({'object':object, 'props':props, 'this':this, 'arguments':arguments}, var)
                    var.registers(['object', 'props'])
                    @Js
                    def PyJs_anonymous_749_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key'])
                        return Js([var.get('key'), var.get('object').get(var.get('key'))])
                    PyJs_anonymous_749_._set_name('anonymous')
                    return var.get('arrayMap')(var.get('props'), PyJs_anonymous_749_)
                PyJsHoisted_baseToPairs_.func_name = 'baseToPairs'
                var.put('baseToPairs', PyJsHoisted_baseToPairs_)
                @Js
                def PyJsHoisted_baseUnary_(func, this, arguments, var=var):
                    var = Scope({'func':func, 'this':this, 'arguments':arguments}, var)
                    var.registers(['func'])
                    @Js
                    def PyJs_anonymous_750_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return var.get('func')(var.get('value'))
                    PyJs_anonymous_750_._set_name('anonymous')
                    return PyJs_anonymous_750_
                PyJsHoisted_baseUnary_.func_name = 'baseUnary'
                var.put('baseUnary', PyJsHoisted_baseUnary_)
                @Js
                def PyJsHoisted_baseValues_(object, props, this, arguments, var=var):
                    var = Scope({'object':object, 'props':props, 'this':this, 'arguments':arguments}, var)
                    var.registers(['object', 'props'])
                    @Js
                    def PyJs_anonymous_751_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key'])
                        return var.get('object').get(var.get('key'))
                    PyJs_anonymous_751_._set_name('anonymous')
                    return var.get('arrayMap')(var.get('props'), PyJs_anonymous_751_)
                PyJsHoisted_baseValues_.func_name = 'baseValues'
                var.put('baseValues', PyJsHoisted_baseValues_)
                @Js
                def PyJsHoisted_cacheHas_(cache, key, this, arguments, var=var):
                    var = Scope({'cache':cache, 'key':key, 'this':this, 'arguments':arguments}, var)
                    var.registers(['key', 'cache'])
                    return var.get('cache').callprop('has', var.get('key'))
                PyJsHoisted_cacheHas_.func_name = 'cacheHas'
                var.put('cacheHas', PyJsHoisted_cacheHas_)
                @Js
                def PyJsHoisted_charsStartIndex_(strSymbols, chrSymbols, this, arguments, var=var):
                    var = Scope({'strSymbols':strSymbols, 'chrSymbols':chrSymbols, 'this':this, 'arguments':arguments}, var)
                    var.registers(['strSymbols', 'chrSymbols', 'length', 'index'])
                    var.put('index', (-Js(1.0)))
                    var.put('length', var.get('strSymbols').get('length'))
                    while ((var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')) and (var.get('baseIndexOf')(var.get('chrSymbols'), var.get('strSymbols').get(var.get('index')), Js(0.0))>(-Js(1.0)))):
                        pass
                    return var.get('index')
                PyJsHoisted_charsStartIndex_.func_name = 'charsStartIndex'
                var.put('charsStartIndex', PyJsHoisted_charsStartIndex_)
                @Js
                def PyJsHoisted_charsEndIndex_(strSymbols, chrSymbols, this, arguments, var=var):
                    var = Scope({'strSymbols':strSymbols, 'chrSymbols':chrSymbols, 'this':this, 'arguments':arguments}, var)
                    var.registers(['strSymbols', 'chrSymbols', 'index'])
                    var.put('index', var.get('strSymbols').get('length'))
                    while ((var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1)) and (var.get('baseIndexOf')(var.get('chrSymbols'), var.get('strSymbols').get(var.get('index')), Js(0.0))>(-Js(1.0)))):
                        pass
                    return var.get('index')
                PyJsHoisted_charsEndIndex_.func_name = 'charsEndIndex'
                var.put('charsEndIndex', PyJsHoisted_charsEndIndex_)
                @Js
                def PyJsHoisted_countHolders_(array, placeholder, this, arguments, var=var):
                    var = Scope({'array':array, 'placeholder':placeholder, 'this':this, 'arguments':arguments}, var)
                    var.registers(['placeholder', 'array', 'result', 'length'])
                    var.put('length', var.get('array').get('length'))
                    var.put('result', Js(0.0))
                    while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
                        if PyJsStrictEq(var.get('array').get(var.get('length')),var.get('placeholder')):
                            var.put('result',Js(var.get('result').to_number())+Js(1))
                    return var.get('result')
                PyJsHoisted_countHolders_.func_name = 'countHolders'
                var.put('countHolders', PyJsHoisted_countHolders_)
                @Js
                def PyJsHoisted_escapeStringChar_(chr, this, arguments, var=var):
                    var = Scope({'chr':chr, 'this':this, 'arguments':arguments}, var)
                    var.registers(['chr'])
                    return (Js('\\')+var.get('stringEscapes').get(var.get('chr')))
                PyJsHoisted_escapeStringChar_.func_name = 'escapeStringChar'
                var.put('escapeStringChar', PyJsHoisted_escapeStringChar_)
                @Js
                def PyJsHoisted_getValue_(object, key, this, arguments, var=var):
                    var = Scope({'object':object, 'key':key, 'this':this, 'arguments':arguments}, var)
                    var.registers(['object', 'key'])
                    return (var.get('undefined') if (var.get('object')==var.get(u"null")) else var.get('object').get(var.get('key')))
                PyJsHoisted_getValue_.func_name = 'getValue'
                var.put('getValue', PyJsHoisted_getValue_)
                @Js
                def PyJsHoisted_hasUnicode_(string, this, arguments, var=var):
                    var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                    var.registers(['string'])
                    return var.get('reHasUnicode').callprop('test', var.get('string'))
                PyJsHoisted_hasUnicode_.func_name = 'hasUnicode'
                var.put('hasUnicode', PyJsHoisted_hasUnicode_)
                @Js
                def PyJsHoisted_hasUnicodeWord_(string, this, arguments, var=var):
                    var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                    var.registers(['string'])
                    return var.get('reHasUnicodeWord').callprop('test', var.get('string'))
                PyJsHoisted_hasUnicodeWord_.func_name = 'hasUnicodeWord'
                var.put('hasUnicodeWord', PyJsHoisted_hasUnicodeWord_)
                @Js
                def PyJsHoisted_iteratorToArray_(iterator, this, arguments, var=var):
                    var = Scope({'iterator':iterator, 'this':this, 'arguments':arguments}, var)
                    var.registers(['iterator', 'result', 'data'])
                    var.put('result', Js([]))
                    while var.put('data', var.get('iterator').callprop('next')).get('done').neg():
                        var.get('result').callprop('push', var.get('data').get('value'))
                    return var.get('result')
                PyJsHoisted_iteratorToArray_.func_name = 'iteratorToArray'
                var.put('iteratorToArray', PyJsHoisted_iteratorToArray_)
                @Js
                def PyJsHoisted_mapToArray_(map, this, arguments, var=var):
                    var = Scope({'map':map, 'this':this, 'arguments':arguments}, var)
                    var.registers(['map', 'result', 'index'])
                    var.put('index', (-Js(1.0)))
                    var.put('result', var.get('Array')(var.get('map').get('size')))
                    @Js
                    def PyJs_anonymous_752_(value, key, this, arguments, var=var):
                        var = Scope({'value':value, 'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'value'])
                        var.get('result').put(var.put('index',Js(var.get('index').to_number())+Js(1)), Js([var.get('key'), var.get('value')]))
                    PyJs_anonymous_752_._set_name('anonymous')
                    var.get('map').callprop('forEach', PyJs_anonymous_752_)
                    return var.get('result')
                PyJsHoisted_mapToArray_.func_name = 'mapToArray'
                var.put('mapToArray', PyJsHoisted_mapToArray_)
                @Js
                def PyJsHoisted_overArg_(func, transform, this, arguments, var=var):
                    var = Scope({'func':func, 'transform':transform, 'this':this, 'arguments':arguments}, var)
                    var.registers(['func', 'transform'])
                    @Js
                    def PyJs_anonymous_753_(arg, this, arguments, var=var):
                        var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
                        var.registers(['arg'])
                        return var.get('func')(var.get('transform')(var.get('arg')))
                    PyJs_anonymous_753_._set_name('anonymous')
                    return PyJs_anonymous_753_
                PyJsHoisted_overArg_.func_name = 'overArg'
                var.put('overArg', PyJsHoisted_overArg_)
                @Js
                def PyJsHoisted_replaceHolders_(array, placeholder, this, arguments, var=var):
                    var = Scope({'array':array, 'placeholder':placeholder, 'this':this, 'arguments':arguments}, var)
                    var.registers(['array', 'result', 'value', 'length', 'index', 'placeholder', 'resIndex'])
                    var.put('index', (-Js(1.0)))
                    var.put('length', var.get('array').get('length'))
                    var.put('resIndex', Js(0.0))
                    var.put('result', Js([]))
                    while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                        var.put('value', var.get('array').get(var.get('index')))
                        if (PyJsStrictEq(var.get('value'),var.get('placeholder')) or PyJsStrictEq(var.get('value'),var.get('PLACEHOLDER'))):
                            var.get('array').put(var.get('index'), var.get('PLACEHOLDER'))
                            var.get('result').put((var.put('resIndex',Js(var.get('resIndex').to_number())+Js(1))-Js(1)), var.get('index'))
                    return var.get('result')
                PyJsHoisted_replaceHolders_.func_name = 'replaceHolders'
                var.put('replaceHolders', PyJsHoisted_replaceHolders_)
                @Js
                def PyJsHoisted_setToArray_(set, this, arguments, var=var):
                    var = Scope({'set':set, 'this':this, 'arguments':arguments}, var)
                    var.registers(['result', 'index', 'set'])
                    var.put('index', (-Js(1.0)))
                    var.put('result', var.get('Array')(var.get('set').get('size')))
                    @Js
                    def PyJs_anonymous_754_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        var.get('result').put(var.put('index',Js(var.get('index').to_number())+Js(1)), var.get('value'))
                    PyJs_anonymous_754_._set_name('anonymous')
                    var.get('set').callprop('forEach', PyJs_anonymous_754_)
                    return var.get('result')
                PyJsHoisted_setToArray_.func_name = 'setToArray'
                var.put('setToArray', PyJsHoisted_setToArray_)
                @Js
                def PyJsHoisted_setToPairs_(set, this, arguments, var=var):
                    var = Scope({'set':set, 'this':this, 'arguments':arguments}, var)
                    var.registers(['result', 'index', 'set'])
                    var.put('index', (-Js(1.0)))
                    var.put('result', var.get('Array')(var.get('set').get('size')))
                    @Js
                    def PyJs_anonymous_755_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        var.get('result').put(var.put('index',Js(var.get('index').to_number())+Js(1)), Js([var.get('value'), var.get('value')]))
                    PyJs_anonymous_755_._set_name('anonymous')
                    var.get('set').callprop('forEach', PyJs_anonymous_755_)
                    return var.get('result')
                PyJsHoisted_setToPairs_.func_name = 'setToPairs'
                var.put('setToPairs', PyJsHoisted_setToPairs_)
                @Js
                def PyJsHoisted_strictIndexOf_(array, value, fromIndex, this, arguments, var=var):
                    var = Scope({'array':array, 'value':value, 'fromIndex':fromIndex, 'this':this, 'arguments':arguments}, var)
                    var.registers(['array', 'value', 'fromIndex', 'length', 'index'])
                    var.put('index', (var.get('fromIndex')-Js(1.0)))
                    var.put('length', var.get('array').get('length'))
                    while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                        if PyJsStrictEq(var.get('array').get(var.get('index')),var.get('value')):
                            return var.get('index')
                    return (-Js(1.0))
                PyJsHoisted_strictIndexOf_.func_name = 'strictIndexOf'
                var.put('strictIndexOf', PyJsHoisted_strictIndexOf_)
                @Js
                def PyJsHoisted_strictLastIndexOf_(array, value, fromIndex, this, arguments, var=var):
                    var = Scope({'array':array, 'value':value, 'fromIndex':fromIndex, 'this':this, 'arguments':arguments}, var)
                    var.registers(['array', 'value', 'index', 'fromIndex'])
                    var.put('index', (var.get('fromIndex')+Js(1.0)))
                    while (var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1)):
                        if PyJsStrictEq(var.get('array').get(var.get('index')),var.get('value')):
                            return var.get('index')
                    return var.get('index')
                PyJsHoisted_strictLastIndexOf_.func_name = 'strictLastIndexOf'
                var.put('strictLastIndexOf', PyJsHoisted_strictLastIndexOf_)
                @Js
                def PyJsHoisted_stringSize_(string, this, arguments, var=var):
                    var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                    var.registers(['string'])
                    return (var.get('unicodeSize')(var.get('string')) if var.get('hasUnicode')(var.get('string')) else var.get('asciiSize')(var.get('string')))
                PyJsHoisted_stringSize_.func_name = 'stringSize'
                var.put('stringSize', PyJsHoisted_stringSize_)
                @Js
                def PyJsHoisted_stringToArray_(string, this, arguments, var=var):
                    var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                    var.registers(['string'])
                    return (var.get('unicodeToArray')(var.get('string')) if var.get('hasUnicode')(var.get('string')) else var.get('asciiToArray')(var.get('string')))
                PyJsHoisted_stringToArray_.func_name = 'stringToArray'
                var.put('stringToArray', PyJsHoisted_stringToArray_)
                @Js
                def PyJsHoisted_unicodeSize_(string, this, arguments, var=var):
                    var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                    var.registers(['result', 'string'])
                    var.put('result', var.get('reUnicode').put('lastIndex', Js(0.0)))
                    while var.get('reUnicode').callprop('test', var.get('string')):
                        var.put('result',Js(var.get('result').to_number())+Js(1))
                    return var.get('result')
                PyJsHoisted_unicodeSize_.func_name = 'unicodeSize'
                var.put('unicodeSize', PyJsHoisted_unicodeSize_)
                @Js
                def PyJsHoisted_unicodeToArray_(string, this, arguments, var=var):
                    var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                    var.registers(['string'])
                    return (var.get('string').callprop('match', var.get('reUnicode')) or Js([]))
                PyJsHoisted_unicodeToArray_.func_name = 'unicodeToArray'
                var.put('unicodeToArray', PyJsHoisted_unicodeToArray_)
                @Js
                def PyJsHoisted_unicodeWords_(string, this, arguments, var=var):
                    var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                    var.registers(['string'])
                    return (var.get('string').callprop('match', var.get('reUnicodeWord')) or Js([]))
                PyJsHoisted_unicodeWords_.func_name = 'unicodeWords'
                var.put('unicodeWords', PyJsHoisted_unicodeWords_)
                pass
                var.put('VERSION', Js('4.17.15'))
                var.put('LARGE_ARRAY_SIZE', Js(200.0))
                var.put('CORE_ERROR_TEXT', Js('Unsupported core-js use. Try https://npms.io/search?q=ponyfill.'))
                var.put('FUNC_ERROR_TEXT', Js('Expected a function'))
                var.put('HASH_UNDEFINED', Js('__lodash_hash_undefined__'))
                var.put('MAX_MEMOIZE_SIZE', Js(500.0))
                var.put('PLACEHOLDER', Js('__lodash_placeholder__'))
                var.put('CLONE_DEEP_FLAG', Js(1.0))
                var.put('CLONE_FLAT_FLAG', Js(2.0))
                var.put('CLONE_SYMBOLS_FLAG', Js(4.0))
                var.put('COMPARE_PARTIAL_FLAG', Js(1.0))
                var.put('COMPARE_UNORDERED_FLAG', Js(2.0))
                var.put('WRAP_BIND_FLAG', Js(1.0))
                var.put('WRAP_BIND_KEY_FLAG', Js(2.0))
                var.put('WRAP_CURRY_BOUND_FLAG', Js(4.0))
                var.put('WRAP_CURRY_FLAG', Js(8.0))
                var.put('WRAP_CURRY_RIGHT_FLAG', Js(16.0))
                var.put('WRAP_PARTIAL_FLAG', Js(32.0))
                var.put('WRAP_PARTIAL_RIGHT_FLAG', Js(64.0))
                var.put('WRAP_ARY_FLAG', Js(128.0))
                var.put('WRAP_REARG_FLAG', Js(256.0))
                var.put('WRAP_FLIP_FLAG', Js(512.0))
                var.put('DEFAULT_TRUNC_LENGTH', Js(30.0))
                var.put('DEFAULT_TRUNC_OMISSION', Js('...'))
                var.put('HOT_COUNT', Js(800.0))
                var.put('HOT_SPAN', Js(16.0))
                var.put('LAZY_FILTER_FLAG', Js(1.0))
                var.put('LAZY_MAP_FLAG', Js(2.0))
                var.put('LAZY_WHILE_FLAG', Js(3.0))
                var.put('INFINITY', (Js(1.0)/Js(0.0)))
                var.put('MAX_SAFE_INTEGER', Js(9007199254740991.0))
                var.put('MAX_INTEGER', Js(1.7976931348623157e+308))
                var.put('NAN', (Js(0.0)/Js(0.0)))
                var.put('MAX_ARRAY_LENGTH', Js(4294967295.0))
                var.put('MAX_ARRAY_INDEX', (var.get('MAX_ARRAY_LENGTH')-Js(1.0)))
                var.put('HALF_MAX_ARRAY_LENGTH', PyJsBshift(var.get('MAX_ARRAY_LENGTH'),Js(1.0)))
                var.put('wrapFlags', Js([Js([Js('ary'), var.get('WRAP_ARY_FLAG')]), Js([Js('bind'), var.get('WRAP_BIND_FLAG')]), Js([Js('bindKey'), var.get('WRAP_BIND_KEY_FLAG')]), Js([Js('curry'), var.get('WRAP_CURRY_FLAG')]), Js([Js('curryRight'), var.get('WRAP_CURRY_RIGHT_FLAG')]), Js([Js('flip'), var.get('WRAP_FLIP_FLAG')]), Js([Js('partial'), var.get('WRAP_PARTIAL_FLAG')]), Js([Js('partialRight'), var.get('WRAP_PARTIAL_RIGHT_FLAG')]), Js([Js('rearg'), var.get('WRAP_REARG_FLAG')])]))
                var.put('argsTag', Js('[object Arguments]'))
                var.put('arrayTag', Js('[object Array]'))
                var.put('asyncTag', Js('[object AsyncFunction]'))
                var.put('boolTag', Js('[object Boolean]'))
                var.put('dateTag', Js('[object Date]'))
                var.put('domExcTag', Js('[object DOMException]'))
                var.put('errorTag', Js('[object Error]'))
                var.put('funcTag', Js('[object Function]'))
                var.put('genTag', Js('[object GeneratorFunction]'))
                var.put('mapTag', Js('[object Map]'))
                var.put('numberTag', Js('[object Number]'))
                var.put('nullTag', Js('[object Null]'))
                var.put('objectTag', Js('[object Object]'))
                var.put('promiseTag', Js('[object Promise]'))
                var.put('proxyTag', Js('[object Proxy]'))
                var.put('regexpTag', Js('[object RegExp]'))
                var.put('setTag', Js('[object Set]'))
                var.put('stringTag', Js('[object String]'))
                var.put('symbolTag', Js('[object Symbol]'))
                var.put('undefinedTag', Js('[object Undefined]'))
                var.put('weakMapTag', Js('[object WeakMap]'))
                var.put('weakSetTag', Js('[object WeakSet]'))
                var.put('arrayBufferTag', Js('[object ArrayBuffer]'))
                var.put('dataViewTag', Js('[object DataView]'))
                var.put('float32Tag', Js('[object Float32Array]'))
                var.put('float64Tag', Js('[object Float64Array]'))
                var.put('int8Tag', Js('[object Int8Array]'))
                var.put('int16Tag', Js('[object Int16Array]'))
                var.put('int32Tag', Js('[object Int32Array]'))
                var.put('uint8Tag', Js('[object Uint8Array]'))
                var.put('uint8ClampedTag', Js('[object Uint8ClampedArray]'))
                var.put('uint16Tag', Js('[object Uint16Array]'))
                var.put('uint32Tag', Js('[object Uint32Array]'))
                var.put('reEmptyStringLeading', JsRegExp("/\\b__p \\+= '';/g"))
                var.put('reEmptyStringMiddle', JsRegExp("/\\b(__p \\+=) '' \\+/g"))
                var.put('reEmptyStringTrailing', JsRegExp("/(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g"))
                var.put('reEscapedHtml', JsRegExp('/&(?:amp|lt|gt|quot|#39);/g'))
                var.put('reUnescapedHtml', JsRegExp('/[&<>"\']/g'))
                var.put('reHasEscapedHtml', var.get('RegExp')(var.get('reEscapedHtml').get('source')))
                var.put('reHasUnescapedHtml', var.get('RegExp')(var.get('reUnescapedHtml').get('source')))
                var.put('reEscape', JsRegExp('/<%-([\\s\\S]+?)%>/g'))
                var.put('reEvaluate', JsRegExp('/<%([\\s\\S]+?)%>/g'))
                var.put('reInterpolate', JsRegExp('/<%=([\\s\\S]+?)%>/g'))
                var.put('reIsDeepProp', JsRegExp('/\\.|\\[(?:[^[\\]]*|(["\'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/'))
                var.put('reIsPlainProp', JsRegExp('/^\\w*$/'))
                var.put('rePropName', JsRegExp('/[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|(["\'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g'))
                var.put('reRegExpChar', JsRegExp('/[\\\\^$.*+?()[\\]{}|]/g'))
                var.put('reHasRegExpChar', var.get('RegExp')(var.get('reRegExpChar').get('source')))
                var.put('reTrim', JsRegExp('/^\\s+|\\s+$/g'))
                var.put('reTrimStart', JsRegExp('/^\\s+/'))
                var.put('reTrimEnd', JsRegExp('/\\s+$/'))
                var.put('reWrapComment', JsRegExp('/\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/'))
                var.put('reWrapDetails', JsRegExp('/\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/'))
                var.put('reSplitDetails', JsRegExp('/,? & /'))
                var.put('reAsciiWord', JsRegExp('/[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g'))
                var.put('reEscapeChar', JsRegExp('/\\\\(\\\\)?/g'))
                var.put('reEsTemplate', JsRegExp('/\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g'))
                var.put('reFlags', JsRegExp('/\\w*$/'))
                var.put('reIsBadHex', JsRegExp('/^[-+]0x[0-9a-f]+$/i'))
                var.put('reIsBinary', JsRegExp('/^0b[01]+$/i'))
                var.put('reIsHostCtor', JsRegExp('/^\\[object .+?Constructor\\]$/'))
                var.put('reIsOctal', JsRegExp('/^0o[0-7]+$/i'))
                var.put('reIsUint', JsRegExp('/^(?:0|[1-9]\\d*)$/'))
                var.put('reLatin', JsRegExp('/[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g'))
                var.put('reNoMatch', JsRegExp('/($^)/'))
                var.put('reUnescapedString', JsRegExp("/['\\n\\r\\u2028\\u2029\\\\]/g"))
                var.put('rsAstralRange', Js('\\ud800-\\udfff'))
                var.put('rsComboMarksRange', Js('\\u0300-\\u036f'))
                var.put('reComboHalfMarksRange', Js('\\ufe20-\\ufe2f'))
                var.put('rsComboSymbolsRange', Js('\\u20d0-\\u20ff'))
                var.put('rsComboRange', ((var.get('rsComboMarksRange')+var.get('reComboHalfMarksRange'))+var.get('rsComboSymbolsRange')))
                var.put('rsDingbatRange', Js('\\u2700-\\u27bf'))
                var.put('rsLowerRange', Js('a-z\\xdf-\\xf6\\xf8-\\xff'))
                var.put('rsMathOpRange', Js('\\xac\\xb1\\xd7\\xf7'))
                var.put('rsNonCharRange', Js('\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf'))
                var.put('rsPunctuationRange', Js('\\u2000-\\u206f'))
                var.put('rsSpaceRange', Js(' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000'))
                var.put('rsUpperRange', Js('A-Z\\xc0-\\xd6\\xd8-\\xde'))
                var.put('rsVarRange', Js('\\ufe0e\\ufe0f'))
                var.put('rsBreakRange', (((var.get('rsMathOpRange')+var.get('rsNonCharRange'))+var.get('rsPunctuationRange'))+var.get('rsSpaceRange')))
                var.put('rsApos', Js("['’]"))
                var.put('rsAstral', ((Js('[')+var.get('rsAstralRange'))+Js(']')))
                var.put('rsBreak', ((Js('[')+var.get('rsBreakRange'))+Js(']')))
                var.put('rsCombo', ((Js('[')+var.get('rsComboRange'))+Js(']')))
                var.put('rsDigits', Js('\\d+'))
                var.put('rsDingbat', ((Js('[')+var.get('rsDingbatRange'))+Js(']')))
                var.put('rsLower', ((Js('[')+var.get('rsLowerRange'))+Js(']')))
                var.put('rsMisc', (((((((Js('[^')+var.get('rsAstralRange'))+var.get('rsBreakRange'))+var.get('rsDigits'))+var.get('rsDingbatRange'))+var.get('rsLowerRange'))+var.get('rsUpperRange'))+Js(']')))
                var.put('rsFitz', Js('\\ud83c[\\udffb-\\udfff]'))
                var.put('rsModifier', ((((Js('(?:')+var.get('rsCombo'))+Js('|'))+var.get('rsFitz'))+Js(')')))
                var.put('rsNonAstral', ((Js('[^')+var.get('rsAstralRange'))+Js(']')))
                var.put('rsRegional', Js('(?:\\ud83c[\\udde6-\\uddff]){2}'))
                var.put('rsSurrPair', Js('[\\ud800-\\udbff][\\udc00-\\udfff]'))
                var.put('rsUpper', ((Js('[')+var.get('rsUpperRange'))+Js(']')))
                var.put('rsZWJ', Js('\\u200d'))
                var.put('rsMiscLower', ((((Js('(?:')+var.get('rsLower'))+Js('|'))+var.get('rsMisc'))+Js(')')))
                var.put('rsMiscUpper', ((((Js('(?:')+var.get('rsUpper'))+Js('|'))+var.get('rsMisc'))+Js(')')))
                var.put('rsOptContrLower', ((Js('(?:')+var.get('rsApos'))+Js('(?:d|ll|m|re|s|t|ve))?')))
                var.put('rsOptContrUpper', ((Js('(?:')+var.get('rsApos'))+Js('(?:D|LL|M|RE|S|T|VE))?')))
                var.put('reOptMod', (var.get('rsModifier')+Js('?')))
                var.put('rsOptVar', ((Js('[')+var.get('rsVarRange'))+Js(']?')))
                var.put('rsOptJoin', (((((((Js('(?:')+var.get('rsZWJ'))+Js('(?:'))+Js([var.get('rsNonAstral'), var.get('rsRegional'), var.get('rsSurrPair')]).callprop('join', Js('|')))+Js(')'))+var.get('rsOptVar'))+var.get('reOptMod'))+Js(')*')))
                var.put('rsOrdLower', Js('\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])'))
                var.put('rsOrdUpper', Js('\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])'))
                var.put('rsSeq', ((var.get('rsOptVar')+var.get('reOptMod'))+var.get('rsOptJoin')))
                var.put('rsEmoji', (((Js('(?:')+Js([var.get('rsDingbat'), var.get('rsRegional'), var.get('rsSurrPair')]).callprop('join', Js('|')))+Js(')'))+var.get('rsSeq')))
                var.put('rsSymbol', ((Js('(?:')+Js([((var.get('rsNonAstral')+var.get('rsCombo'))+Js('?')), var.get('rsCombo'), var.get('rsRegional'), var.get('rsSurrPair'), var.get('rsAstral')]).callprop('join', Js('|')))+Js(')')))
                var.put('reApos', var.get('RegExp')(var.get('rsApos'), Js('g')))
                var.put('reComboMark', var.get('RegExp')(var.get('rsCombo'), Js('g')))
                var.put('reUnicode', var.get('RegExp')((((((var.get('rsFitz')+Js('(?='))+var.get('rsFitz'))+Js(')|'))+var.get('rsSymbol'))+var.get('rsSeq')), Js('g')))
                def PyJs_LONG_739_(var=var):
                    return Js([(((((((var.get('rsUpper')+Js('?'))+var.get('rsLower'))+Js('+'))+var.get('rsOptContrLower'))+Js('(?='))+Js([var.get('rsBreak'), var.get('rsUpper'), Js('$')]).callprop('join', Js('|')))+Js(')')), (((((var.get('rsMiscUpper')+Js('+'))+var.get('rsOptContrUpper'))+Js('(?='))+Js([var.get('rsBreak'), (var.get('rsUpper')+var.get('rsMiscLower')), Js('$')]).callprop('join', Js('|')))+Js(')')), ((((var.get('rsUpper')+Js('?'))+var.get('rsMiscLower'))+Js('+'))+var.get('rsOptContrLower')), ((var.get('rsUpper')+Js('+'))+var.get('rsOptContrUpper')), var.get('rsOrdUpper'), var.get('rsOrdLower'), var.get('rsDigits'), var.get('rsEmoji')]).callprop('join', Js('|'))
                var.put('reUnicodeWord', var.get('RegExp')(PyJs_LONG_739_(), Js('g')))
                var.put('reHasUnicode', var.get('RegExp')((((((Js('[')+var.get('rsZWJ'))+var.get('rsAstralRange'))+var.get('rsComboRange'))+var.get('rsVarRange'))+Js(']'))))
                var.put('reHasUnicodeWord', JsRegExp('/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/'))
                var.put('contextProps', Js([Js('Array'), Js('Buffer'), Js('DataView'), Js('Date'), Js('Error'), Js('Float32Array'), Js('Float64Array'), Js('Function'), Js('Int8Array'), Js('Int16Array'), Js('Int32Array'), Js('Map'), Js('Math'), Js('Object'), Js('Promise'), Js('RegExp'), Js('Set'), Js('String'), Js('Symbol'), Js('TypeError'), Js('Uint8Array'), Js('Uint8ClampedArray'), Js('Uint16Array'), Js('Uint32Array'), Js('WeakMap'), Js('_'), Js('clearTimeout'), Js('isFinite'), Js('parseInt'), Js('setTimeout')]))
                var.put('templateCounter', (-Js(1.0)))
                var.put('typedArrayTags', Js({}))
                def PyJs_LONG_740_(var=var):
                    return var.get('typedArrayTags').put(var.get('float64Tag'), var.get('typedArrayTags').put(var.get('int8Tag'), var.get('typedArrayTags').put(var.get('int16Tag'), var.get('typedArrayTags').put(var.get('int32Tag'), var.get('typedArrayTags').put(var.get('uint8Tag'), var.get('typedArrayTags').put(var.get('uint8ClampedTag'), var.get('typedArrayTags').put(var.get('uint16Tag'), var.get('typedArrayTags').put(var.get('uint32Tag'), Js(True)))))))))
                var.get('typedArrayTags').put(var.get('float32Tag'), PyJs_LONG_740_())
                def PyJs_LONG_741_(var=var):
                    return var.get('typedArrayTags').put(var.get('funcTag'), var.get('typedArrayTags').put(var.get('mapTag'), var.get('typedArrayTags').put(var.get('numberTag'), var.get('typedArrayTags').put(var.get('objectTag'), var.get('typedArrayTags').put(var.get('regexpTag'), var.get('typedArrayTags').put(var.get('setTag'), var.get('typedArrayTags').put(var.get('stringTag'), var.get('typedArrayTags').put(var.get('weakMapTag'), Js(False)))))))))
                var.get('typedArrayTags').put(var.get('argsTag'), var.get('typedArrayTags').put(var.get('arrayTag'), var.get('typedArrayTags').put(var.get('arrayBufferTag'), var.get('typedArrayTags').put(var.get('boolTag'), var.get('typedArrayTags').put(var.get('dataViewTag'), var.get('typedArrayTags').put(var.get('dateTag'), var.get('typedArrayTags').put(var.get('errorTag'), PyJs_LONG_741_())))))))
                var.put('cloneableTags', Js({}))
                def PyJs_LONG_743_(var=var):
                    def PyJs_LONG_742_(var=var):
                        return var.get('cloneableTags').put(var.get('regexpTag'), var.get('cloneableTags').put(var.get('setTag'), var.get('cloneableTags').put(var.get('stringTag'), var.get('cloneableTags').put(var.get('symbolTag'), var.get('cloneableTags').put(var.get('uint8Tag'), var.get('cloneableTags').put(var.get('uint8ClampedTag'), var.get('cloneableTags').put(var.get('uint16Tag'), var.get('cloneableTags').put(var.get('uint32Tag'), Js(True)))))))))
                    return var.get('cloneableTags').put(var.get('float32Tag'), var.get('cloneableTags').put(var.get('float64Tag'), var.get('cloneableTags').put(var.get('int8Tag'), var.get('cloneableTags').put(var.get('int16Tag'), var.get('cloneableTags').put(var.get('int32Tag'), var.get('cloneableTags').put(var.get('mapTag'), var.get('cloneableTags').put(var.get('numberTag'), var.get('cloneableTags').put(var.get('objectTag'), PyJs_LONG_742_()))))))))
                var.get('cloneableTags').put(var.get('argsTag'), var.get('cloneableTags').put(var.get('arrayTag'), var.get('cloneableTags').put(var.get('arrayBufferTag'), var.get('cloneableTags').put(var.get('dataViewTag'), var.get('cloneableTags').put(var.get('boolTag'), var.get('cloneableTags').put(var.get('dateTag'), PyJs_LONG_743_()))))))
                var.get('cloneableTags').put(var.get('errorTag'), var.get('cloneableTags').put(var.get('funcTag'), var.get('cloneableTags').put(var.get('weakMapTag'), Js(False))))
                var.put('deburredLetters', Js({'À':Js('A'),'Á':Js('A'),'Â':Js('A'),'Ã':Js('A'),'Ä':Js('A'),'Å':Js('A'),'à':Js('a'),'á':Js('a'),'â':Js('a'),'ã':Js('a'),'ä':Js('a'),'å':Js('a'),'Ç':Js('C'),'ç':Js('c'),'Ð':Js('D'),'ð':Js('d'),'È':Js('E'),'É':Js('E'),'Ê':Js('E'),'Ë':Js('E'),'è':Js('e'),'é':Js('e'),'ê':Js('e'),'ë':Js('e'),'Ì':Js('I'),'Í':Js('I'),'Î':Js('I'),'Ï':Js('I'),'ì':Js('i'),'í':Js('i'),'î':Js('i'),'ï':Js('i'),'Ñ':Js('N'),'ñ':Js('n'),'Ò':Js('O'),'Ó':Js('O'),'Ô':Js('O'),'Õ':Js('O'),'Ö':Js('O'),'Ø':Js('O'),'ò':Js('o'),'ó':Js('o'),'ô':Js('o'),'õ':Js('o'),'ö':Js('o'),'ø':Js('o'),'Ù':Js('U'),'Ú':Js('U'),'Û':Js('U'),'Ü':Js('U'),'ù':Js('u'),'ú':Js('u'),'û':Js('u'),'ü':Js('u'),'Ý':Js('Y'),'ý':Js('y'),'ÿ':Js('y'),'Æ':Js('Ae'),'æ':Js('ae'),'Þ':Js('Th'),'þ':Js('th'),'ß':Js('ss'),'Ā':Js('A'),'Ă':Js('A'),'Ą':Js('A'),'ā':Js('a'),'ă':Js('a'),'ą':Js('a'),'Ć':Js('C'),'Ĉ':Js('C'),'Ċ':Js('C'),'Č':Js('C'),'ć':Js('c'),'ĉ':Js('c'),'ċ':Js('c'),'č':Js('c'),'Ď':Js('D'),'Đ':Js('D'),'ď':Js('d'),'đ':Js('d'),'Ē':Js('E'),'Ĕ':Js('E'),'Ė':Js('E'),'Ę':Js('E'),'Ě':Js('E'),'ē':Js('e'),'ĕ':Js('e'),'ė':Js('e'),'ę':Js('e'),'ě':Js('e'),'Ĝ':Js('G'),'Ğ':Js('G'),'Ġ':Js('G'),'Ģ':Js('G'),'ĝ':Js('g'),'ğ':Js('g'),'ġ':Js('g'),'ģ':Js('g'),'Ĥ':Js('H'),'Ħ':Js('H'),'ĥ':Js('h'),'ħ':Js('h'),'Ĩ':Js('I'),'Ī':Js('I'),'Ĭ':Js('I'),'Į':Js('I'),'İ':Js('I'),'ĩ':Js('i'),'ī':Js('i'),'ĭ':Js('i'),'į':Js('i'),'ı':Js('i'),'Ĵ':Js('J'),'ĵ':Js('j'),'Ķ':Js('K'),'ķ':Js('k'),'ĸ':Js('k'),'Ĺ':Js('L'),'Ļ':Js('L'),'Ľ':Js('L'),'Ŀ':Js('L'),'Ł':Js('L'),'ĺ':Js('l'),'ļ':Js('l'),'ľ':Js('l'),'ŀ':Js('l'),'ł':Js('l'),'Ń':Js('N'),'Ņ':Js('N'),'Ň':Js('N'),'Ŋ':Js('N'),'ń':Js('n'),'ņ':Js('n'),'ň':Js('n'),'ŋ':Js('n'),'Ō':Js('O'),'Ŏ':Js('O'),'Ő':Js('O'),'ō':Js('o'),'ŏ':Js('o'),'ő':Js('o'),'Ŕ':Js('R'),'Ŗ':Js('R'),'Ř':Js('R'),'ŕ':Js('r'),'ŗ':Js('r'),'ř':Js('r'),'Ś':Js('S'),'Ŝ':Js('S'),'Ş':Js('S'),'Š':Js('S'),'ś':Js('s'),'ŝ':Js('s'),'ş':Js('s'),'š':Js('s'),'Ţ':Js('T'),'Ť':Js('T'),'Ŧ':Js('T'),'ţ':Js('t'),'ť':Js('t'),'ŧ':Js('t'),'Ũ':Js('U'),'Ū':Js('U'),'Ŭ':Js('U'),'Ů':Js('U'),'Ű':Js('U'),'Ų':Js('U'),'ũ':Js('u'),'ū':Js('u'),'ŭ':Js('u'),'ů':Js('u'),'ű':Js('u'),'ų':Js('u'),'Ŵ':Js('W'),'ŵ':Js('w'),'Ŷ':Js('Y'),'ŷ':Js('y'),'Ÿ':Js('Y'),'Ź':Js('Z'),'Ż':Js('Z'),'Ž':Js('Z'),'ź':Js('z'),'ż':Js('z'),'ž':Js('z'),'Ĳ':Js('IJ'),'ĳ':Js('ij'),'Œ':Js('Oe'),'œ':Js('oe'),'ŉ':Js("'n"),'ſ':Js('s')}))
                var.put('htmlEscapes', Js({'&':Js('&amp;'),'<':Js('&lt;'),'>':Js('&gt;'),'"':Js('&quot;'),"'":Js('&#39;')}))
                var.put('htmlUnescapes', Js({'&amp;':Js('&'),'&lt;':Js('<'),'&gt;':Js('>'),'&quot;':Js('"'),'&#39;':Js("'")}))
                var.put('stringEscapes', Js({'\\':Js('\\'),"'":Js("'"),'\n':Js('n'),'\r':Js('r'),'\u2028':Js('u2028'),'\u2029':Js('u2029')}))
                var.put('freeParseFloat', var.get('parseFloat'))
                var.put('freeParseInt', var.get('parseInt'))
                var.put('freeGlobal', ((((var.get('global',throw=False).typeof()==Js('object')) and var.get('global')) and PyJsStrictEq(var.get('global').get('Object'),var.get('Object'))) and var.get('global')))
                var.put('freeSelf', ((((var.get('self',throw=False).typeof()==Js('object')) and var.get('self')) and PyJsStrictEq(var.get('self').get('Object'),var.get('Object'))) and var.get('self')))
                var.put('root', ((var.get('freeGlobal') or var.get('freeSelf')) or var.get('Function')(Js('return this'))()))
                var.put('freeExports', ((((var.get('exports',throw=False).typeof()==Js('object')) and var.get('exports')) and var.get('exports').get('nodeType').neg()) and var.get('exports')))
                var.put('freeModule', ((((var.get('freeExports') and (var.get('module',throw=False).typeof()==Js('object'))) and var.get('module')) and var.get('module').get('nodeType').neg()) and var.get('module')))
                var.put('moduleExports', (var.get('freeModule') and PyJsStrictEq(var.get('freeModule').get('exports'),var.get('freeExports'))))
                var.put('freeProcess', (var.get('moduleExports') and var.get('freeGlobal').get('process')))
                @Js
                def PyJs_anonymous_744_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['types'])
                    try:
                        var.put('types', ((var.get('freeModule') and var.get('freeModule').get('require')) and var.get('freeModule').callprop('require', Js('util')).get('types')))
                        if var.get('types'):
                            return var.get('types')
                        return ((var.get('freeProcess') and var.get('freeProcess').get('binding')) and var.get('freeProcess').callprop('binding', Js('util')))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_59501124 = var.own.get('e')
                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                        try:
                            pass
                        finally:
                            if PyJsHolder_65_59501124 is not None:
                                var.own['e'] = PyJsHolder_65_59501124
                            else:
                                del var.own['e']
                            del PyJsHolder_65_59501124
                PyJs_anonymous_744_._set_name('anonymous')
                var.put('nodeUtil', PyJs_anonymous_744_())
                var.put('nodeIsArrayBuffer', (var.get('nodeUtil') and var.get('nodeUtil').get('isArrayBuffer')))
                var.put('nodeIsDate', (var.get('nodeUtil') and var.get('nodeUtil').get('isDate')))
                var.put('nodeIsMap', (var.get('nodeUtil') and var.get('nodeUtil').get('isMap')))
                var.put('nodeIsRegExp', (var.get('nodeUtil') and var.get('nodeUtil').get('isRegExp')))
                var.put('nodeIsSet', (var.get('nodeUtil') and var.get('nodeUtil').get('isSet')))
                var.put('nodeIsTypedArray', (var.get('nodeUtil') and var.get('nodeUtil').get('isTypedArray')))
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                var.put('asciiSize', var.get('baseProperty')(Js('length')))
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                var.put('deburrLetter', var.get('basePropertyOf')(var.get('deburredLetters')))
                var.put('escapeHtmlChar', var.get('basePropertyOf')(var.get('htmlEscapes')))
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                var.put('unescapeHtmlChar', var.get('basePropertyOf')(var.get('htmlUnescapes')))
                pass
                pass
                pass
                @Js
                def PyJs_runInContext_756_(context, this, arguments, var=var):
                    var = Scope({'context':context, 'this':this, 'arguments':arguments, 'runInContext':PyJs_runInContext_756_}, var)
                    var.registers(['baseExtremum', 'setCtorString', 'propertyOf', 'nativeRandom', 'methodOf', 'stubTrue', 'isNaN', 'multiply', 'coreJsData', 'getData', 'matches', 'takeRightWhile', 'baseNth', 'setTimeout', 'orderBy', 'updateWrapDetails', 'wrapperValue', 'Stack', 'findLastKey', 'toLower', 'unescape', 'flattenDepth', 'functionsIn', 'lodash', 'stackDelete', 'initCloneObject', 'unionWith', 'createOver', 'baseCreate', 'baseSome', 'initial', 'conformsTo', 'valuesIn', 'uniq', 'isEqual', 'values', 'sortedLastIndexOf', 'getPrototype', 'transform', 'isRegExp', 'compareMultiple', 'baseFunctions', 'isArrayLike', 'nativeGetSymbols', 'baseIsEqualDeep', 'insertWrapDetails', 'baseEach', 'createMathOperation', 'equalByTag', 'pad', 'repeat', 'isNil', 'zipObject', 'forEachRight', 'isLength', 'createToPairs', 'createRound', 'assocIndexOf', 'hashGet', 'isKeyable', 'findLast', 'gte', 'rearg', 'hashHas', 'join', 'getRawTag', 'isWeakSet', 'floor', 'baseWrapperValue', 'isFunction', 'chunk', 'intersection', 'nativeMin', 'baseMergeDeep', 'safeGet', 'curryRight', 'basePullAll', 'baseWhile', 'sortedLastIndexBy', 'upperFirst', 'assignIn', 'symToStringTag', 'promiseCtorString', 'updateWith', 'nativeCeil', 'defaultTo', 'mapCacheDelete', 'createPartial', 'omitBy', 'symbolValueOf', 'fill', 'setWrapToString', 'negate', 'escape', 'method', 'baseSetToString', 'listCacheSet', 'sortedIndexOf', 'baseToNumber', 'differenceWith', 'once', 'split', 'nativeObjectToString', 'isIterateeCall', 'findLastIndex', 'pickBy', 'shuffle', 'toArray', 'sumBy', 'stubString', 'padEnd', 'partition', 'Symbol', 'flowRight', 'matchesStrictComparable', 'baseMatches', 'createAssigner', 'keyBy', 'Hash', 'propertyIsEnumerable', 'lazyValue', 'thru', 'toFinite', 'baseMerge', 'nth', 'reduce', 'mapCacheClear', 'objectCreate', 'curry', 'toSource', 'isKey', 'setData', 'deburr', 'castPath', 'LodashWrapper', 'nativeIsBuffer', 'over', 'Function', 'property', 'hasPath', 'objectCtorString', 'createFlow', 'overArgs', 'get', 'sortBy', 'functions', 'difference', 'wrapperNext', 'intersectionBy', 'identity', 'defaults', 'wrapperChain', 'mapCacheSet', 'isFinite', 'trimStart', 'merge', 'ceil', 'Array', 'isSafeInteger', 'lastIndexOf', 'isArrayBuffer', 'baseIsEqual', 'indexOf', 'baseIsSet', 'mapCtorString', 'lazyReverse', 'mapCacheGet', 'baseSortedIndex', 'mergeData', 'now', 'mergeWith', 'createHybrid', 'stackGet', 'baseConforms', 'DataView', 'overEvery', 'baseSample', 'customOmitClone', 'noConflict', 'eq', 'memoizeCapped', 'ListCache', 'getAllKeys', 'baseIsRegExp', 'flattenDeep', 'baseKeysIn', 'baseIsArrayBuffer', 'isPlainObject', 'baseFill', 'forOwn', 'Date', 'findKey', 'unzipWith', 'baseEvery', 'round', 'Set', 'hasOwnProperty', 'zipWith', 'uniqueId', 'funcProto', 'defineProperty', 'pull', 'remove', 'dropRightWhile', 'baseMatchesProperty', 'isNative', 'random', 'baseGt', 'bindAll', 'iteratee', 'stubFalse', 'throttle', 'times', 'baseAt', 'partial', 'gt', 'wrapperPlant', 'baseRepeat', 'drop', 'basePropertyDeep', 'idCounter', 'Promise', 'dropWhile', 'Math', 'hashSet', 'mapKeys', 'partialRight', 'nativeKeys', 'isMaskable', 'baseForOwnRight', 'castSlice', 'zip', 'has', 'clearTimeout', 'omit', 'listCacheGet', 'copySymbols', 'maskSrcKey', 'cloneBuffer', 'nativeIsFinite', 'setCacheAdd', 'dropRight', 'range', 'metaMap', 'debounce', 'MapCache', 'objectProto', 'countBy', 'forIn', 'baseIntersection', 'copyArray', 'baseClone', 'upperCase', 'before', 'clamp', 'rangeRight', 'hashClear', 'baseFilter', 'createCaseFirst', 'overSome', 'words', 'baseGet', 'isSet', 'isObjectLike', 'shuffleSelf', 'zipObjectDeep', 'includes', 'ctxClearTimeout', 'isArrayLikeObject', 'isBuffer', 'getMapData', 'lte', 'ctxSetTimeout', 'isNumber', 'bindKey', 'forEach', 'symbolProto', 'cloneTypedArray', 'getSymbolsIn', 'replace', 'unzip', 'conforms', 'baseGetTag', 'arraySample', 'sortedUniq', 'arraySampleSize', 'inRange', 'isMasked', 'isNull', 'wrap', 'wrapperReverse', 'Uint8Array', 'cloneWith', 'assignWith', 'forOwnRight', 'concat', 'createCompounder', 'add', 'assign', 'createAggregator', 'setCacheHas', 'union', 'find', 'forInRight', 'flatMapDepth', 'stackHas', 'createCtor', 'customDefaultsAssignIn', 'xorBy', 'getView', 'basePullAt', 'customDefaultsMerge', 'baseForOwn', 'bind', 'clone', 'isUndefined', 'composeArgs', 'result', 'mean', 'baseIsArguments', 'take', 'unary', 'getMatchData', 'toKey', 'baseToString', 'isEqualWith', 'stubArray', 'baseIsTypedArray', 'getWrapDetails', 'isWeakMap', 'getTag', 'reduceRight', 'lowerFirst', 'baseInvoke', 'isArray', 'SetCache', 'isMatchWith', 'baseSet', 'endsWith', 'TypeError', 'wrapperAt', 'equalObjects', 'castArray', 'baseIsMap', 'context', 'cloneSymbol', 'arrayProto', 'trim', 'capitalize', 'attempt', 'baseRest', 'stackSet', 'uniqWith', 'baseLt', 'nthArg', 'isArguments', 'baseEachRight', 'mapValues', 'parent', 'hashDelete', 'reject', 'WeakMap', 'baseOrderBy', 'baseDifference', 'isMap', 'Error', 'cloneDeepWith', 'baseRandom', 'baseXor', 'isSymbol', 'arrayLikeKeys', 'createFind', 'getAllKeysIn', 'defer', 'castFunction', 'baseIsNative', 'getFuncName', 'createWrap', 'pullAll', 'defaultsDeep', 'weakMapCtorString', 'invoke', 'isElement', 'getSymbols', 'funcToString', 'nativeReverse', 'baseDelay', 'nativeJoin', 'nativeMax', 'cloneRegExp', 'invokeMap', 'isObject', 'basePickBy', 'copyObject', 'head', 'ary', 'baseInRange', 'differenceBy', 'after', 'String', 'some', 'baseUpdate', 'compareAscending', 'sample', 'ctxNow', 'isPrototype', 'sortedLastIndex', 'keys', 'lazyClone', 'baseSlice', 'trimEnd', 'delay', 'baseInverter', 'createBind', 'LazyWrapper', 'intersectionWith', 'baseIteratee', 'toNumber', 'map', 'isError', 'createRecurry', 'lowerCase', 'maxBy', 'baseSortedUniq', 'flip', 'baseKeys', 'setWith', 'castRest', 'nativeNow', 'startCase', 'oldDash', 'baseClamp', 'allocUnsafe', 'copySymbolsIn', 'splice', 'isEmpty', 'symbolToString', 'baseUniq', 'uniqBy', 'camelCase', 'listCacheHas', 'pullAt', 'constant', 'toInteger', 'groupBy', 'at', 'baseShuffle', 'basePick', 'xorWith', 'chain', 'equalArrays', 'spread', 'lt', 'arrayShuffle', 'toUpper', 'kebabCase', 'filter', 'slice', 'startsWith', 'nativeFloor', 'mapCacheHas', 'createRange', 'baseSortedIndexBy', 'flatRest', 'getNative', 'isFlattenable', 'sortedUniqBy', 'takeWhile', 'hasIn', 'wrapperToIterator', 'template', 'parseInt', 'Buffer', 'baseForRight', 'createRelationalOperation', 'composeArgsRight', 'invertBy', 'listCacheClear', 'pullAllWith', 'toPairsIn', 'baseIsMatch', 'castArrayLikeObject', 'max', 'createInverter', 'divide', 'baseSetData', 'dataViewCtorString', 'baseHasIn', 'createBaseFor', 'isTypedArray', 'padStart', 'set', 'Map', 'truncate', 'keysIn', 'getIteratee', 'flow', 'isIndex', 'baseAssign', 'baseLodash', 'isInteger', 'update', 'assignMergeValue', 'baseMap', 'createCurry', 'createBaseEach', 'min', 'symIterator', 'size', 'shortOut', 'pullAllBy', 'cloneDeep', 'baseZipObject', 'meanBy', 'flatMap', 'baseIsDate', 'overRest', 'pick', 'stubObject', 'findIndex', 'nativeParseInt', 'toPairs', 'nativeKeysIn', 'sampleSize', 'assignInWith', 'without', 'cond', 'baseAggregator', 'objectToString', 'cloneDataView', 'nativeCreate', 'isStrictComparable', 'cloneArrayBuffer', 'Object', 'tail', 'unionBy', 'rest', 'isDate', 'reIsNative', 'createSet', 'setToString', 'takeRight', 'reverse', 'sum', 'isLaziable', 'subtract', 'baseRange', 'stringToPath', 'baseUnset', 'baseAssignIn', 'create', 'matchesProperty', 'memoize', 'snakeCase', 'invert', 'listCacheDelete', 'isBoolean', 'sortedIndexBy', 'createPadding', 'baseFlatten', 'last', 'toSafeInteger', 'flatMapDeep', 'wrapperCommit', 'noop', 'toLength', 'baseFor', 'mixin', 'escapeRegExp', 'realNames', 'unset', 'RegExp', 'baseAssignValue', 'reorder', 'spreadableSymbol', 'fromPairs', 'isMatch', 'minBy', 'isString', 'toPath', 'assignValue', 'initCloneArray', 'baseConformsTo', 'wrapperClone', 'every', 'sortedIndex', 'xor', 'toPlainObject', 'flatten', 'baseSampleSize', 'compact', 'getHolder', 'initCloneByTag', 'toString', 'baseHas', 'baseGetAllKeys', 'tap', 'stackClear'])
                    @Js
                    def PyJsHoisted_lodash_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        if ((var.get('isObjectLike')(var.get('value')) and var.get('isArray')(var.get('value')).neg()) and var.get('value').instanceof(var.get('LazyWrapper')).neg()):
                            if var.get('value').instanceof(var.get('LodashWrapper')):
                                return var.get('value')
                            if var.get('hasOwnProperty').callprop('call', var.get('value'), Js('__wrapped__')):
                                return var.get('wrapperClone')(var.get('value'))
                        return var.get('LodashWrapper').create(var.get('value'))
                    PyJsHoisted_lodash_.func_name = 'lodash'
                    var.put('lodash', PyJsHoisted_lodash_)
                    @Js
                    def PyJsHoisted_baseLodash_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        pass
                    PyJsHoisted_baseLodash_.func_name = 'baseLodash'
                    var.put('baseLodash', PyJsHoisted_baseLodash_)
                    @Js
                    def PyJsHoisted_LodashWrapper_(value, chainAll, this, arguments, var=var):
                        var = Scope({'value':value, 'chainAll':chainAll, 'this':this, 'arguments':arguments}, var)
                        var.registers(['chainAll', 'value'])
                        var.get(u"this").put('__wrapped__', var.get('value'))
                        var.get(u"this").put('__actions__', Js([]))
                        var.get(u"this").put('__chain__', var.get('chainAll').neg().neg())
                        var.get(u"this").put('__index__', Js(0.0))
                        var.get(u"this").put('__values__', var.get('undefined'))
                    PyJsHoisted_LodashWrapper_.func_name = 'LodashWrapper'
                    var.put('LodashWrapper', PyJsHoisted_LodashWrapper_)
                    @Js
                    def PyJsHoisted_LazyWrapper_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        var.get(u"this").put('__wrapped__', var.get('value'))
                        var.get(u"this").put('__actions__', Js([]))
                        var.get(u"this").put('__dir__', Js(1.0))
                        var.get(u"this").put('__filtered__', Js(False))
                        var.get(u"this").put('__iteratees__', Js([]))
                        var.get(u"this").put('__takeCount__', var.get('MAX_ARRAY_LENGTH'))
                        var.get(u"this").put('__views__', Js([]))
                    PyJsHoisted_LazyWrapper_.func_name = 'LazyWrapper'
                    var.put('LazyWrapper', PyJsHoisted_LazyWrapper_)
                    @Js
                    def PyJsHoisted_lazyClone_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['result'])
                        var.put('result', var.get('LazyWrapper').create(var.get(u"this").get('__wrapped__')))
                        var.get('result').put('__actions__', var.get('copyArray')(var.get(u"this").get('__actions__')))
                        var.get('result').put('__dir__', var.get(u"this").get('__dir__'))
                        var.get('result').put('__filtered__', var.get(u"this").get('__filtered__'))
                        var.get('result').put('__iteratees__', var.get('copyArray')(var.get(u"this").get('__iteratees__')))
                        var.get('result').put('__takeCount__', var.get(u"this").get('__takeCount__'))
                        var.get('result').put('__views__', var.get('copyArray')(var.get(u"this").get('__views__')))
                        return var.get('result')
                    PyJsHoisted_lazyClone_.func_name = 'lazyClone'
                    var.put('lazyClone', PyJsHoisted_lazyClone_)
                    @Js
                    def PyJsHoisted_lazyReverse_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['result'])
                        if var.get(u"this").get('__filtered__'):
                            var.put('result', var.get('LazyWrapper').create(var.get(u"this")))
                            var.get('result').put('__dir__', (-Js(1.0)))
                            var.get('result').put('__filtered__', Js(True))
                        else:
                            var.put('result', var.get(u"this").callprop('clone'))
                            var.get('result').put('__dir__', (-Js(1.0)), '*')
                        return var.get('result')
                    PyJsHoisted_lazyReverse_.func_name = 'lazyReverse'
                    var.put('lazyReverse', PyJsHoisted_lazyReverse_)
                    @Js
                    def PyJsHoisted_lazyValue_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['iteratees', 'view', 'takeCount', 'isArr', 'resIndex', 'value', 'start', 'array', 'type', 'index', 'dir', 'computed', 'data', 'result', 'end', 'length', 'arrLength', 'iterIndex', 'iteratee', 'isRight', 'iterLength'])
                        var.put('array', var.get(u"this").get('__wrapped__').callprop('value'))
                        var.put('dir', var.get(u"this").get('__dir__'))
                        var.put('isArr', var.get('isArray')(var.get('array')))
                        var.put('isRight', (var.get('dir')<Js(0.0)))
                        var.put('arrLength', (var.get('array').get('length') if var.get('isArr') else Js(0.0)))
                        var.put('view', var.get('getView')(Js(0.0), var.get('arrLength'), var.get(u"this").get('__views__')))
                        var.put('start', var.get('view').get('start'))
                        var.put('end', var.get('view').get('end'))
                        var.put('length', (var.get('end')-var.get('start')))
                        var.put('index', (var.get('end') if var.get('isRight') else (var.get('start')-Js(1.0))))
                        var.put('iteratees', var.get(u"this").get('__iteratees__'))
                        var.put('iterLength', var.get('iteratees').get('length'))
                        var.put('resIndex', Js(0.0))
                        var.put('takeCount', var.get('nativeMin')(var.get('length'), var.get(u"this").get('__takeCount__')))
                        if (var.get('isArr').neg() or ((var.get('isRight').neg() and (var.get('arrLength')==var.get('length'))) and (var.get('takeCount')==var.get('length')))):
                            return var.get('baseWrapperValue')(var.get('array'), var.get(u"this").get('__actions__'))
                        var.put('result', Js([]))
                        class JS_CONTINUE_LABEL_6f75746572(Exception): pass
                        class JS_BREAK_LABEL_6f75746572(Exception): pass
                        try:
                            while ((var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)) and (var.get('resIndex')<var.get('takeCount'))):
                                try:
                                    var.put('index', var.get('dir'), '+')
                                    var.put('iterIndex', (-Js(1.0)))
                                    var.put('value', var.get('array').get(var.get('index')))
                                    while (var.put('iterIndex',Js(var.get('iterIndex').to_number())+Js(1))<var.get('iterLength')):
                                        var.put('data', var.get('iteratees').get(var.get('iterIndex')))
                                        var.put('iteratee', var.get('data').get('iteratee'))
                                        var.put('type', var.get('data').get('type'))
                                        var.put('computed', var.get('iteratee')(var.get('value')))
                                        if (var.get('type')==var.get('LAZY_MAP_FLAG')):
                                            var.put('value', var.get('computed'))
                                        else:
                                            if var.get('computed').neg():
                                                if (var.get('type')==var.get('LAZY_FILTER_FLAG')):
                                                    raise JS_CONTINUE_LABEL_6f75746572("Continued")
                                                else:
                                                    raise JS_BREAK_LABEL_6f75746572("Breaked")
                                    var.get('result').put((var.put('resIndex',Js(var.get('resIndex').to_number())+Js(1))-Js(1)), var.get('value'))
                                except JS_CONTINUE_LABEL_6f75746572:
                                    pass
                        except JS_BREAK_LABEL_6f75746572:
                            pass
                        return var.get('result')
                    PyJsHoisted_lazyValue_.func_name = 'lazyValue'
                    var.put('lazyValue', PyJsHoisted_lazyValue_)
                    @Js
                    def PyJsHoisted_Hash_(entries, this, arguments, var=var):
                        var = Scope({'entries':entries, 'this':this, 'arguments':arguments}, var)
                        var.registers(['entries', 'length', 'index', 'entry'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', (Js(0.0) if (var.get('entries')==var.get(u"null")) else var.get('entries').get('length')))
                        var.get(u"this").callprop('clear')
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('entry', var.get('entries').get(var.get('index')))
                            var.get(u"this").callprop('set', var.get('entry').get('0'), var.get('entry').get('1'))
                    PyJsHoisted_Hash_.func_name = 'Hash'
                    var.put('Hash', PyJsHoisted_Hash_)
                    @Js
                    def PyJsHoisted_hashClear_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get(u"this").put('__data__', (var.get('nativeCreate')(var.get(u"null")) if var.get('nativeCreate') else Js({})))
                        var.get(u"this").put('size', Js(0.0))
                    PyJsHoisted_hashClear_.func_name = 'hashClear'
                    var.put('hashClear', PyJsHoisted_hashClear_)
                    @Js
                    def PyJsHoisted_hashDelete_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'result'])
                        var.put('result', (var.get(u"this").callprop('has', var.get('key')) and var.get(u"this").get('__data__').delete(var.get('key'))))
                        var.get(u"this").put('size', (Js(1.0) if var.get('result') else Js(0.0)), '-')
                        return var.get('result')
                    PyJsHoisted_hashDelete_.func_name = 'hashDelete'
                    var.put('hashDelete', PyJsHoisted_hashDelete_)
                    @Js
                    def PyJsHoisted_hashGet_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'result', 'data'])
                        var.put('data', var.get(u"this").get('__data__'))
                        if var.get('nativeCreate'):
                            var.put('result', var.get('data').get(var.get('key')))
                            return (var.get('undefined') if PyJsStrictEq(var.get('result'),var.get('HASH_UNDEFINED')) else var.get('result'))
                        return (var.get('data').get(var.get('key')) if var.get('hasOwnProperty').callprop('call', var.get('data'), var.get('key')) else var.get('undefined'))
                    PyJsHoisted_hashGet_.func_name = 'hashGet'
                    var.put('hashGet', PyJsHoisted_hashGet_)
                    @Js
                    def PyJsHoisted_hashHas_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'data'])
                        var.put('data', var.get(u"this").get('__data__'))
                        return (PyJsStrictNeq(var.get('data').get(var.get('key')),var.get('undefined')) if var.get('nativeCreate') else var.get('hasOwnProperty').callprop('call', var.get('data'), var.get('key')))
                    PyJsHoisted_hashHas_.func_name = 'hashHas'
                    var.put('hashHas', PyJsHoisted_hashHas_)
                    @Js
                    def PyJsHoisted_hashSet_(key, value, this, arguments, var=var):
                        var = Scope({'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'value', 'data'])
                        var.put('data', var.get(u"this").get('__data__'))
                        var.get(u"this").put('size', (Js(0.0) if var.get(u"this").callprop('has', var.get('key')) else Js(1.0)), '+')
                        var.get('data').put(var.get('key'), (var.get('HASH_UNDEFINED') if (var.get('nativeCreate') and PyJsStrictEq(var.get('value'),var.get('undefined'))) else var.get('value')))
                        return var.get(u"this")
                    PyJsHoisted_hashSet_.func_name = 'hashSet'
                    var.put('hashSet', PyJsHoisted_hashSet_)
                    @Js
                    def PyJsHoisted_ListCache_(entries, this, arguments, var=var):
                        var = Scope({'entries':entries, 'this':this, 'arguments':arguments}, var)
                        var.registers(['entries', 'length', 'index', 'entry'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', (Js(0.0) if (var.get('entries')==var.get(u"null")) else var.get('entries').get('length')))
                        var.get(u"this").callprop('clear')
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('entry', var.get('entries').get(var.get('index')))
                            var.get(u"this").callprop('set', var.get('entry').get('0'), var.get('entry').get('1'))
                    PyJsHoisted_ListCache_.func_name = 'ListCache'
                    var.put('ListCache', PyJsHoisted_ListCache_)
                    @Js
                    def PyJsHoisted_listCacheClear_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get(u"this").put('__data__', Js([]))
                        var.get(u"this").put('size', Js(0.0))
                    PyJsHoisted_listCacheClear_.func_name = 'listCacheClear'
                    var.put('listCacheClear', PyJsHoisted_listCacheClear_)
                    @Js
                    def PyJsHoisted_listCacheDelete_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'lastIndex', 'data', 'index'])
                        var.put('data', var.get(u"this").get('__data__'))
                        var.put('index', var.get('assocIndexOf')(var.get('data'), var.get('key')))
                        if (var.get('index')<Js(0.0)):
                            return Js(False)
                        var.put('lastIndex', (var.get('data').get('length')-Js(1.0)))
                        if (var.get('index')==var.get('lastIndex')):
                            var.get('data').callprop('pop')
                        else:
                            var.get('splice').callprop('call', var.get('data'), var.get('index'), Js(1.0))
                        var.get(u"this").put('size',Js(var.get(u"this").get('size').to_number())-Js(1))
                        return Js(True)
                    PyJsHoisted_listCacheDelete_.func_name = 'listCacheDelete'
                    var.put('listCacheDelete', PyJsHoisted_listCacheDelete_)
                    @Js
                    def PyJsHoisted_listCacheGet_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'data', 'index'])
                        var.put('data', var.get(u"this").get('__data__'))
                        var.put('index', var.get('assocIndexOf')(var.get('data'), var.get('key')))
                        return (var.get('undefined') if (var.get('index')<Js(0.0)) else var.get('data').get(var.get('index')).get('1'))
                    PyJsHoisted_listCacheGet_.func_name = 'listCacheGet'
                    var.put('listCacheGet', PyJsHoisted_listCacheGet_)
                    @Js
                    def PyJsHoisted_listCacheHas_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key'])
                        return (var.get('assocIndexOf')(var.get(u"this").get('__data__'), var.get('key'))>(-Js(1.0)))
                    PyJsHoisted_listCacheHas_.func_name = 'listCacheHas'
                    var.put('listCacheHas', PyJsHoisted_listCacheHas_)
                    @Js
                    def PyJsHoisted_listCacheSet_(key, value, this, arguments, var=var):
                        var = Scope({'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'value', 'data', 'index'])
                        var.put('data', var.get(u"this").get('__data__'))
                        var.put('index', var.get('assocIndexOf')(var.get('data'), var.get('key')))
                        if (var.get('index')<Js(0.0)):
                            var.get(u"this").put('size',Js(var.get(u"this").get('size').to_number())+Js(1))
                            var.get('data').callprop('push', Js([var.get('key'), var.get('value')]))
                        else:
                            var.get('data').get(var.get('index')).put('1', var.get('value'))
                        return var.get(u"this")
                    PyJsHoisted_listCacheSet_.func_name = 'listCacheSet'
                    var.put('listCacheSet', PyJsHoisted_listCacheSet_)
                    @Js
                    def PyJsHoisted_MapCache_(entries, this, arguments, var=var):
                        var = Scope({'entries':entries, 'this':this, 'arguments':arguments}, var)
                        var.registers(['entries', 'length', 'index', 'entry'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', (Js(0.0) if (var.get('entries')==var.get(u"null")) else var.get('entries').get('length')))
                        var.get(u"this").callprop('clear')
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('entry', var.get('entries').get(var.get('index')))
                            var.get(u"this").callprop('set', var.get('entry').get('0'), var.get('entry').get('1'))
                    PyJsHoisted_MapCache_.func_name = 'MapCache'
                    var.put('MapCache', PyJsHoisted_MapCache_)
                    @Js
                    def PyJsHoisted_mapCacheClear_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get(u"this").put('size', Js(0.0))
                        var.get(u"this").put('__data__', Js({'hash':var.get('Hash').create(),'map':(var.get('Map') or var.get('ListCache')).create(),'string':var.get('Hash').create()}))
                    PyJsHoisted_mapCacheClear_.func_name = 'mapCacheClear'
                    var.put('mapCacheClear', PyJsHoisted_mapCacheClear_)
                    @Js
                    def PyJsHoisted_mapCacheDelete_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'result'])
                        var.put('result', var.get('getMapData')(var.get(u"this"), var.get('key')).callprop('delete', var.get('key')))
                        var.get(u"this").put('size', (Js(1.0) if var.get('result') else Js(0.0)), '-')
                        return var.get('result')
                    PyJsHoisted_mapCacheDelete_.func_name = 'mapCacheDelete'
                    var.put('mapCacheDelete', PyJsHoisted_mapCacheDelete_)
                    @Js
                    def PyJsHoisted_mapCacheGet_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key'])
                        return var.get('getMapData')(var.get(u"this"), var.get('key')).callprop('get', var.get('key'))
                    PyJsHoisted_mapCacheGet_.func_name = 'mapCacheGet'
                    var.put('mapCacheGet', PyJsHoisted_mapCacheGet_)
                    @Js
                    def PyJsHoisted_mapCacheHas_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key'])
                        return var.get('getMapData')(var.get(u"this"), var.get('key')).callprop('has', var.get('key'))
                    PyJsHoisted_mapCacheHas_.func_name = 'mapCacheHas'
                    var.put('mapCacheHas', PyJsHoisted_mapCacheHas_)
                    @Js
                    def PyJsHoisted_mapCacheSet_(key, value, this, arguments, var=var):
                        var = Scope({'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'value', 'data', 'size'])
                        var.put('data', var.get('getMapData')(var.get(u"this"), var.get('key')))
                        var.put('size', var.get('data').get('size'))
                        var.get('data').callprop('set', var.get('key'), var.get('value'))
                        var.get(u"this").put('size', (Js(0.0) if (var.get('data').get('size')==var.get('size')) else Js(1.0)), '+')
                        return var.get(u"this")
                    PyJsHoisted_mapCacheSet_.func_name = 'mapCacheSet'
                    var.put('mapCacheSet', PyJsHoisted_mapCacheSet_)
                    @Js
                    def PyJsHoisted_SetCache_(values, this, arguments, var=var):
                        var = Scope({'values':values, 'this':this, 'arguments':arguments}, var)
                        var.registers(['values', 'length', 'index'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', (Js(0.0) if (var.get('values')==var.get(u"null")) else var.get('values').get('length')))
                        var.get(u"this").put('__data__', var.get('MapCache').create())
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.get(u"this").callprop('add', var.get('values').get(var.get('index')))
                    PyJsHoisted_SetCache_.func_name = 'SetCache'
                    var.put('SetCache', PyJsHoisted_SetCache_)
                    @Js
                    def PyJsHoisted_setCacheAdd_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        var.get(u"this").get('__data__').callprop('set', var.get('value'), var.get('HASH_UNDEFINED'))
                        return var.get(u"this")
                    PyJsHoisted_setCacheAdd_.func_name = 'setCacheAdd'
                    var.put('setCacheAdd', PyJsHoisted_setCacheAdd_)
                    @Js
                    def PyJsHoisted_setCacheHas_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return var.get(u"this").get('__data__').callprop('has', var.get('value'))
                    PyJsHoisted_setCacheHas_.func_name = 'setCacheHas'
                    var.put('setCacheHas', PyJsHoisted_setCacheHas_)
                    @Js
                    def PyJsHoisted_Stack_(entries, this, arguments, var=var):
                        var = Scope({'entries':entries, 'this':this, 'arguments':arguments}, var)
                        var.registers(['entries', 'data'])
                        var.put('data', var.get(u"this").put('__data__', var.get('ListCache').create(var.get('entries'))))
                        var.get(u"this").put('size', var.get('data').get('size'))
                    PyJsHoisted_Stack_.func_name = 'Stack'
                    var.put('Stack', PyJsHoisted_Stack_)
                    @Js
                    def PyJsHoisted_stackClear_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get(u"this").put('__data__', var.get('ListCache').create())
                        var.get(u"this").put('size', Js(0.0))
                    PyJsHoisted_stackClear_.func_name = 'stackClear'
                    var.put('stackClear', PyJsHoisted_stackClear_)
                    @Js
                    def PyJsHoisted_stackDelete_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'result', 'data'])
                        var.put('data', var.get(u"this").get('__data__'))
                        var.put('result', var.get('data').callprop('delete', var.get('key')))
                        var.get(u"this").put('size', var.get('data').get('size'))
                        return var.get('result')
                    PyJsHoisted_stackDelete_.func_name = 'stackDelete'
                    var.put('stackDelete', PyJsHoisted_stackDelete_)
                    @Js
                    def PyJsHoisted_stackGet_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key'])
                        return var.get(u"this").get('__data__').callprop('get', var.get('key'))
                    PyJsHoisted_stackGet_.func_name = 'stackGet'
                    var.put('stackGet', PyJsHoisted_stackGet_)
                    @Js
                    def PyJsHoisted_stackHas_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key'])
                        return var.get(u"this").get('__data__').callprop('has', var.get('key'))
                    PyJsHoisted_stackHas_.func_name = 'stackHas'
                    var.put('stackHas', PyJsHoisted_stackHas_)
                    @Js
                    def PyJsHoisted_stackSet_(key, value, this, arguments, var=var):
                        var = Scope({'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['pairs', 'value', 'data', 'key'])
                        var.put('data', var.get(u"this").get('__data__'))
                        if var.get('data').instanceof(var.get('ListCache')):
                            var.put('pairs', var.get('data').get('__data__'))
                            if (var.get('Map').neg() or (var.get('pairs').get('length')<(var.get('LARGE_ARRAY_SIZE')-Js(1.0)))):
                                var.get('pairs').callprop('push', Js([var.get('key'), var.get('value')]))
                                var.get(u"this").put('size', var.get('data').put('size',Js(var.get('data').get('size').to_number())+Js(1)))
                                return var.get(u"this")
                            var.put('data', var.get(u"this").put('__data__', var.get('MapCache').create(var.get('pairs'))))
                        var.get('data').callprop('set', var.get('key'), var.get('value'))
                        var.get(u"this").put('size', var.get('data').get('size'))
                        return var.get(u"this")
                    PyJsHoisted_stackSet_.func_name = 'stackSet'
                    var.put('stackSet', PyJsHoisted_stackSet_)
                    @Js
                    def PyJsHoisted_arrayLikeKeys_(value, inherited, this, arguments, var=var):
                        var = Scope({'value':value, 'inherited':inherited, 'this':this, 'arguments':arguments}, var)
                        var.registers(['skipIndexes', 'result', 'value', 'inherited', 'isArg', 'length', 'isBuff', 'isArr', 'isType', 'key'])
                        var.put('isArr', var.get('isArray')(var.get('value')))
                        var.put('isArg', (var.get('isArr').neg() and var.get('isArguments')(var.get('value'))))
                        var.put('isBuff', ((var.get('isArr').neg() and var.get('isArg').neg()) and var.get('isBuffer')(var.get('value'))))
                        var.put('isType', (((var.get('isArr').neg() and var.get('isArg').neg()) and var.get('isBuff').neg()) and var.get('isTypedArray')(var.get('value'))))
                        var.put('skipIndexes', (((var.get('isArr') or var.get('isArg')) or var.get('isBuff')) or var.get('isType')))
                        var.put('result', (var.get('baseTimes')(var.get('value').get('length'), var.get('String')) if var.get('skipIndexes') else Js([])))
                        var.put('length', var.get('result').get('length'))
                        for PyJsTemp in var.get('value'):
                            var.put('key', PyJsTemp)
                            def PyJs_LONG_761_(var=var):
                                return ((var.get('inherited') or var.get('hasOwnProperty').callprop('call', var.get('value'), var.get('key'))) and (var.get('skipIndexes') and ((((var.get('key')==Js('length')) or (var.get('isBuff') and ((var.get('key')==Js('offset')) or (var.get('key')==Js('parent'))))) or (var.get('isType') and (((var.get('key')==Js('buffer')) or (var.get('key')==Js('byteLength'))) or (var.get('key')==Js('byteOffset'))))) or var.get('isIndex')(var.get('key'), var.get('length')))).neg())
                            if PyJs_LONG_761_():
                                var.get('result').callprop('push', var.get('key'))
                        return var.get('result')
                    PyJsHoisted_arrayLikeKeys_.func_name = 'arrayLikeKeys'
                    var.put('arrayLikeKeys', PyJsHoisted_arrayLikeKeys_)
                    @Js
                    def PyJsHoisted_arraySample_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'length'])
                        var.put('length', var.get('array').get('length'))
                        return (var.get('array').get(var.get('baseRandom')(Js(0.0), (var.get('length')-Js(1.0)))) if var.get('length') else var.get('undefined'))
                    PyJsHoisted_arraySample_.func_name = 'arraySample'
                    var.put('arraySample', PyJsHoisted_arraySample_)
                    @Js
                    def PyJsHoisted_arraySampleSize_(array, n, this, arguments, var=var):
                        var = Scope({'array':array, 'n':n, 'this':this, 'arguments':arguments}, var)
                        var.registers(['n', 'array'])
                        return var.get('shuffleSelf')(var.get('copyArray')(var.get('array')), var.get('baseClamp')(var.get('n'), Js(0.0), var.get('array').get('length')))
                    PyJsHoisted_arraySampleSize_.func_name = 'arraySampleSize'
                    var.put('arraySampleSize', PyJsHoisted_arraySampleSize_)
                    @Js
                    def PyJsHoisted_arrayShuffle_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array'])
                        return var.get('shuffleSelf')(var.get('copyArray')(var.get('array')))
                    PyJsHoisted_arrayShuffle_.func_name = 'arrayShuffle'
                    var.put('arrayShuffle', PyJsHoisted_arrayShuffle_)
                    @Js
                    def PyJsHoisted_assignMergeValue_(object, key, value, this, arguments, var=var):
                        var = Scope({'object':object, 'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'value', 'key'])
                        if ((PyJsStrictNeq(var.get('value'),var.get('undefined')) and var.get('eq')(var.get('object').get(var.get('key')), var.get('value')).neg()) or (PyJsStrictEq(var.get('value'),var.get('undefined')) and var.get('object').contains(var.get('key')).neg())):
                            var.get('baseAssignValue')(var.get('object'), var.get('key'), var.get('value'))
                    PyJsHoisted_assignMergeValue_.func_name = 'assignMergeValue'
                    var.put('assignMergeValue', PyJsHoisted_assignMergeValue_)
                    @Js
                    def PyJsHoisted_assignValue_(object, key, value, this, arguments, var=var):
                        var = Scope({'object':object, 'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'value', 'objValue', 'key'])
                        var.put('objValue', var.get('object').get(var.get('key')))
                        if ((var.get('hasOwnProperty').callprop('call', var.get('object'), var.get('key')) and var.get('eq')(var.get('objValue'), var.get('value'))).neg() or (PyJsStrictEq(var.get('value'),var.get('undefined')) and var.get('object').contains(var.get('key')).neg())):
                            var.get('baseAssignValue')(var.get('object'), var.get('key'), var.get('value'))
                    PyJsHoisted_assignValue_.func_name = 'assignValue'
                    var.put('assignValue', PyJsHoisted_assignValue_)
                    @Js
                    def PyJsHoisted_assocIndexOf_(array, key, this, arguments, var=var):
                        var = Scope({'array':array, 'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'length', 'key'])
                        var.put('length', var.get('array').get('length'))
                        while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
                            if var.get('eq')(var.get('array').get(var.get('length')).get('0'), var.get('key')):
                                return var.get('length')
                        return (-Js(1.0))
                    PyJsHoisted_assocIndexOf_.func_name = 'assocIndexOf'
                    var.put('assocIndexOf', PyJsHoisted_assocIndexOf_)
                    @Js
                    def PyJsHoisted_baseAggregator_(collection, setter, iteratee, accumulator, this, arguments, var=var):
                        var = Scope({'collection':collection, 'setter':setter, 'iteratee':iteratee, 'accumulator':accumulator, 'this':this, 'arguments':arguments}, var)
                        var.registers(['accumulator', 'iteratee', 'setter', 'collection'])
                        @Js
                        def PyJs_anonymous_762_(value, key, collection, this, arguments, var=var):
                            var = Scope({'value':value, 'key':key, 'collection':collection, 'this':this, 'arguments':arguments}, var)
                            var.registers(['key', 'value', 'collection'])
                            var.get('setter')(var.get('accumulator'), var.get('value'), var.get('iteratee')(var.get('value')), var.get('collection'))
                        PyJs_anonymous_762_._set_name('anonymous')
                        var.get('baseEach')(var.get('collection'), PyJs_anonymous_762_)
                        return var.get('accumulator')
                    PyJsHoisted_baseAggregator_.func_name = 'baseAggregator'
                    var.put('baseAggregator', PyJsHoisted_baseAggregator_)
                    @Js
                    def PyJsHoisted_baseAssign_(object, source, this, arguments, var=var):
                        var = Scope({'object':object, 'source':source, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'source'])
                        return (var.get('object') and var.get('copyObject')(var.get('source'), var.get('keys')(var.get('source')), var.get('object')))
                    PyJsHoisted_baseAssign_.func_name = 'baseAssign'
                    var.put('baseAssign', PyJsHoisted_baseAssign_)
                    @Js
                    def PyJsHoisted_baseAssignIn_(object, source, this, arguments, var=var):
                        var = Scope({'object':object, 'source':source, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'source'])
                        return (var.get('object') and var.get('copyObject')(var.get('source'), var.get('keysIn')(var.get('source')), var.get('object')))
                    PyJsHoisted_baseAssignIn_.func_name = 'baseAssignIn'
                    var.put('baseAssignIn', PyJsHoisted_baseAssignIn_)
                    @Js
                    def PyJsHoisted_baseAssignValue_(object, key, value, this, arguments, var=var):
                        var = Scope({'object':object, 'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'value', 'key'])
                        if ((var.get('key')==Js('__proto__')) and var.get('defineProperty')):
                            var.get('defineProperty')(var.get('object'), var.get('key'), Js({'configurable':Js(True),'enumerable':Js(True),'value':var.get('value'),'writable':Js(True)}))
                        else:
                            var.get('object').put(var.get('key'), var.get('value'))
                    PyJsHoisted_baseAssignValue_.func_name = 'baseAssignValue'
                    var.put('baseAssignValue', PyJsHoisted_baseAssignValue_)
                    @Js
                    def PyJsHoisted_baseAt_(object, paths, this, arguments, var=var):
                        var = Scope({'object':object, 'paths':paths, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'paths', 'object', 'length', 'index', 'skip'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('paths').get('length'))
                        var.put('result', var.get('Array')(var.get('length')))
                        var.put('skip', (var.get('object')==var.get(u"null")))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.get('result').put(var.get('index'), (var.get('undefined') if var.get('skip') else var.get('get')(var.get('object'), var.get('paths').get(var.get('index')))))
                        return var.get('result')
                    PyJsHoisted_baseAt_.func_name = 'baseAt'
                    var.put('baseAt', PyJsHoisted_baseAt_)
                    @Js
                    def PyJsHoisted_baseClamp_(number, lower, upper, this, arguments, var=var):
                        var = Scope({'number':number, 'lower':lower, 'upper':upper, 'this':this, 'arguments':arguments}, var)
                        var.registers(['lower', 'upper', 'number'])
                        if PyJsStrictEq(var.get('number'),var.get('number')):
                            if PyJsStrictNeq(var.get('upper'),var.get('undefined')):
                                var.put('number', (var.get('number') if (var.get('number')<=var.get('upper')) else var.get('upper')))
                            if PyJsStrictNeq(var.get('lower'),var.get('undefined')):
                                var.put('number', (var.get('number') if (var.get('number')>=var.get('lower')) else var.get('lower')))
                        return var.get('number')
                    PyJsHoisted_baseClamp_.func_name = 'baseClamp'
                    var.put('baseClamp', PyJsHoisted_baseClamp_)
                    @Js
                    def PyJsHoisted_baseClone_(value, bitmask, customizer, key, object, stack, this, arguments, var=var):
                        var = Scope({'value':value, 'bitmask':bitmask, 'customizer':customizer, 'key':key, 'object':object, 'stack':stack, 'this':this, 'arguments':arguments}, var)
                        var.registers(['stacked', 'result', 'value', 'keysFunc', 'isDeep', 'props', 'key', 'object', 'isArr', 'bitmask', 'tag', 'isFull', 'isFunc', 'customizer', 'isFlat', 'stack'])
                        var.put('isDeep', (var.get('bitmask')&var.get('CLONE_DEEP_FLAG')))
                        var.put('isFlat', (var.get('bitmask')&var.get('CLONE_FLAT_FLAG')))
                        var.put('isFull', (var.get('bitmask')&var.get('CLONE_SYMBOLS_FLAG')))
                        if var.get('customizer'):
                            var.put('result', (var.get('customizer')(var.get('value'), var.get('key'), var.get('object'), var.get('stack')) if var.get('object') else var.get('customizer')(var.get('value'))))
                        if PyJsStrictNeq(var.get('result'),var.get('undefined')):
                            return var.get('result')
                        if var.get('isObject')(var.get('value')).neg():
                            return var.get('value')
                        var.put('isArr', var.get('isArray')(var.get('value')))
                        if var.get('isArr'):
                            var.put('result', var.get('initCloneArray')(var.get('value')))
                            if var.get('isDeep').neg():
                                return var.get('copyArray')(var.get('value'), var.get('result'))
                        else:
                            var.put('tag', var.get('getTag')(var.get('value')))
                            var.put('isFunc', ((var.get('tag')==var.get('funcTag')) or (var.get('tag')==var.get('genTag'))))
                            if var.get('isBuffer')(var.get('value')):
                                return var.get('cloneBuffer')(var.get('value'), var.get('isDeep'))
                            if (((var.get('tag')==var.get('objectTag')) or (var.get('tag')==var.get('argsTag'))) or (var.get('isFunc') and var.get('object').neg())):
                                var.put('result', (Js({}) if (var.get('isFlat') or var.get('isFunc')) else var.get('initCloneObject')(var.get('value'))))
                                if var.get('isDeep').neg():
                                    return (var.get('copySymbolsIn')(var.get('value'), var.get('baseAssignIn')(var.get('result'), var.get('value'))) if var.get('isFlat') else var.get('copySymbols')(var.get('value'), var.get('baseAssign')(var.get('result'), var.get('value'))))
                            else:
                                if var.get('cloneableTags').get(var.get('tag')).neg():
                                    return (var.get('value') if var.get('object') else Js({}))
                                var.put('result', var.get('initCloneByTag')(var.get('value'), var.get('tag'), var.get('isDeep')))
                        (var.get('stack') or var.put('stack', var.get('Stack').create()))
                        var.put('stacked', var.get('stack').callprop('get', var.get('value')))
                        if var.get('stacked'):
                            return var.get('stacked')
                        var.get('stack').callprop('set', var.get('value'), var.get('result'))
                        if var.get('isSet')(var.get('value')):
                            @Js
                            def PyJs_anonymous_763_(subValue, this, arguments, var=var):
                                var = Scope({'subValue':subValue, 'this':this, 'arguments':arguments}, var)
                                var.registers(['subValue'])
                                var.get('result').callprop('add', var.get('baseClone')(var.get('subValue'), var.get('bitmask'), var.get('customizer'), var.get('subValue'), var.get('value'), var.get('stack')))
                            PyJs_anonymous_763_._set_name('anonymous')
                            var.get('value').callprop('forEach', PyJs_anonymous_763_)
                        else:
                            if var.get('isMap')(var.get('value')):
                                @Js
                                def PyJs_anonymous_764_(subValue, key, this, arguments, var=var):
                                    var = Scope({'subValue':subValue, 'key':key, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['key', 'subValue'])
                                    var.get('result').callprop('set', var.get('key'), var.get('baseClone')(var.get('subValue'), var.get('bitmask'), var.get('customizer'), var.get('key'), var.get('value'), var.get('stack')))
                                PyJs_anonymous_764_._set_name('anonymous')
                                var.get('value').callprop('forEach', PyJs_anonymous_764_)
                        var.put('keysFunc', ((var.get('getAllKeysIn') if var.get('isFlat') else var.get('getAllKeys')) if var.get('isFull') else (var.get('keysIn') if var.get('isFlat') else var.get('keys'))))
                        var.put('props', (var.get('undefined') if var.get('isArr') else var.get('keysFunc')(var.get('value'))))
                        @Js
                        def PyJs_anonymous_765_(subValue, key, this, arguments, var=var):
                            var = Scope({'subValue':subValue, 'key':key, 'this':this, 'arguments':arguments}, var)
                            var.registers(['key', 'subValue'])
                            if var.get('props'):
                                var.put('key', var.get('subValue'))
                                var.put('subValue', var.get('value').get(var.get('key')))
                            var.get('assignValue')(var.get('result'), var.get('key'), var.get('baseClone')(var.get('subValue'), var.get('bitmask'), var.get('customizer'), var.get('key'), var.get('value'), var.get('stack')))
                        PyJs_anonymous_765_._set_name('anonymous')
                        var.get('arrayEach')((var.get('props') or var.get('value')), PyJs_anonymous_765_)
                        return var.get('result')
                    PyJsHoisted_baseClone_.func_name = 'baseClone'
                    var.put('baseClone', PyJsHoisted_baseClone_)
                    @Js
                    def PyJsHoisted_baseConforms_(source, this, arguments, var=var):
                        var = Scope({'source':source, 'this':this, 'arguments':arguments}, var)
                        var.registers(['source', 'props'])
                        var.put('props', var.get('keys')(var.get('source')))
                        @Js
                        def PyJs_anonymous_766_(object, this, arguments, var=var):
                            var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                            var.registers(['object'])
                            return var.get('baseConformsTo')(var.get('object'), var.get('source'), var.get('props'))
                        PyJs_anonymous_766_._set_name('anonymous')
                        return PyJs_anonymous_766_
                    PyJsHoisted_baseConforms_.func_name = 'baseConforms'
                    var.put('baseConforms', PyJsHoisted_baseConforms_)
                    @Js
                    def PyJsHoisted_baseConformsTo_(object, source, props, this, arguments, var=var):
                        var = Scope({'object':object, 'source':source, 'props':props, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'props', 'predicate', 'object', 'length', 'source', 'key'])
                        var.put('length', var.get('props').get('length'))
                        if (var.get('object')==var.get(u"null")):
                            return var.get('length').neg()
                        var.put('object', var.get('Object')(var.get('object')))
                        while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
                            var.put('key', var.get('props').get(var.get('length')))
                            var.put('predicate', var.get('source').get(var.get('key')))
                            var.put('value', var.get('object').get(var.get('key')))
                            if ((PyJsStrictEq(var.get('value'),var.get('undefined')) and var.get('object').contains(var.get('key')).neg()) or var.get('predicate')(var.get('value')).neg()):
                                return Js(False)
                        return Js(True)
                    PyJsHoisted_baseConformsTo_.func_name = 'baseConformsTo'
                    var.put('baseConformsTo', PyJsHoisted_baseConformsTo_)
                    @Js
                    def PyJsHoisted_baseDelay_(func, wait, args, this, arguments, var=var):
                        var = Scope({'func':func, 'wait':wait, 'args':args, 'this':this, 'arguments':arguments}, var)
                        var.registers(['args', 'wait', 'func'])
                        if (var.get('func',throw=False).typeof()!=Js('function')):
                            PyJsTempException = JsToPyException(var.get('TypeError').create(var.get('FUNC_ERROR_TEXT')))
                            raise PyJsTempException
                        @Js
                        def PyJs_anonymous_767_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            var.get('func').callprop('apply', var.get('undefined'), var.get('args'))
                        PyJs_anonymous_767_._set_name('anonymous')
                        return var.get('setTimeout')(PyJs_anonymous_767_, var.get('wait'))
                    PyJsHoisted_baseDelay_.func_name = 'baseDelay'
                    var.put('baseDelay', PyJsHoisted_baseDelay_)
                    @Js
                    def PyJsHoisted_baseDifference_(array, values, iteratee, comparator, this, arguments, var=var):
                        var = Scope({'array':array, 'values':values, 'iteratee':iteratee, 'comparator':comparator, 'this':this, 'arguments':arguments}, var)
                        var.registers(['includes', 'result', 'value', 'array', 'length', 'index', 'values', 'comparator', 'isCommon', 'valuesLength', 'iteratee', 'computed', 'valuesIndex'])
                        var.put('index', (-Js(1.0)))
                        var.put('includes', var.get('arrayIncludes'))
                        var.put('isCommon', Js(True))
                        var.put('length', var.get('array').get('length'))
                        var.put('result', Js([]))
                        var.put('valuesLength', var.get('values').get('length'))
                        if var.get('length').neg():
                            return var.get('result')
                        if var.get('iteratee'):
                            var.put('values', var.get('arrayMap')(var.get('values'), var.get('baseUnary')(var.get('iteratee'))))
                        if var.get('comparator'):
                            var.put('includes', var.get('arrayIncludesWith'))
                            var.put('isCommon', Js(False))
                        else:
                            if (var.get('values').get('length')>=var.get('LARGE_ARRAY_SIZE')):
                                var.put('includes', var.get('cacheHas'))
                                var.put('isCommon', Js(False))
                                var.put('values', var.get('SetCache').create(var.get('values')))
                        class JS_CONTINUE_LABEL_6f75746572(Exception): pass
                        class JS_BREAK_LABEL_6f75746572(Exception): pass
                        try:
                            while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                                try:
                                    var.put('value', var.get('array').get(var.get('index')))
                                    var.put('computed', (var.get('value') if (var.get('iteratee')==var.get(u"null")) else var.get('iteratee')(var.get('value'))))
                                    var.put('value', (var.get('value') if (var.get('comparator') or PyJsStrictNeq(var.get('value'),Js(0.0))) else Js(0.0)))
                                    if (var.get('isCommon') and PyJsStrictEq(var.get('computed'),var.get('computed'))):
                                        var.put('valuesIndex', var.get('valuesLength'))
                                        while (var.put('valuesIndex',Js(var.get('valuesIndex').to_number())-Js(1))+Js(1)):
                                            if PyJsStrictEq(var.get('values').get(var.get('valuesIndex')),var.get('computed')):
                                                raise JS_CONTINUE_LABEL_6f75746572("Continued")
                                        var.get('result').callprop('push', var.get('value'))
                                    else:
                                        if var.get('includes')(var.get('values'), var.get('computed'), var.get('comparator')).neg():
                                            var.get('result').callprop('push', var.get('value'))
                                except JS_CONTINUE_LABEL_6f75746572:
                                    pass
                        except JS_BREAK_LABEL_6f75746572:
                            pass
                        return var.get('result')
                    PyJsHoisted_baseDifference_.func_name = 'baseDifference'
                    var.put('baseDifference', PyJsHoisted_baseDifference_)
                    @Js
                    def PyJsHoisted_baseEvery_(collection, predicate, this, arguments, var=var):
                        var = Scope({'collection':collection, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'predicate', 'collection'])
                        var.put('result', Js(True))
                        @Js
                        def PyJs_anonymous_768_(value, index, collection, this, arguments, var=var):
                            var = Scope({'value':value, 'index':index, 'collection':collection, 'this':this, 'arguments':arguments}, var)
                            var.registers(['value', 'index', 'collection'])
                            var.put('result', var.get('predicate')(var.get('value'), var.get('index'), var.get('collection')).neg().neg())
                            return var.get('result')
                        PyJs_anonymous_768_._set_name('anonymous')
                        var.get('baseEach')(var.get('collection'), PyJs_anonymous_768_)
                        return var.get('result')
                    PyJsHoisted_baseEvery_.func_name = 'baseEvery'
                    var.put('baseEvery', PyJsHoisted_baseEvery_)
                    @Js
                    def PyJsHoisted_baseExtremum_(array, iteratee, comparator, this, arguments, var=var):
                        var = Scope({'array':array, 'iteratee':iteratee, 'comparator':comparator, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'result', 'value', 'length', 'index', 'comparator', 'current', 'iteratee', 'computed'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('array').get('length'))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('value', var.get('array').get(var.get('index')))
                            var.put('current', var.get('iteratee')(var.get('value')))
                            if ((var.get('current')!=var.get(u"null")) and ((PyJsStrictEq(var.get('current'),var.get('current')) and var.get('isSymbol')(var.get('current')).neg()) if PyJsStrictEq(var.get('computed'),var.get('undefined')) else var.get('comparator')(var.get('current'), var.get('computed')))):
                                var.put('computed', var.get('current'))
                                var.put('result', var.get('value'))
                        return var.get('result')
                    PyJsHoisted_baseExtremum_.func_name = 'baseExtremum'
                    var.put('baseExtremum', PyJsHoisted_baseExtremum_)
                    @Js
                    def PyJsHoisted_baseFill_(array, value, start, end, this, arguments, var=var):
                        var = Scope({'array':array, 'value':value, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'value', 'start', 'end', 'length'])
                        var.put('length', var.get('array').get('length'))
                        var.put('start', var.get('toInteger')(var.get('start')))
                        if (var.get('start')<Js(0.0)):
                            var.put('start', (Js(0.0) if ((-var.get('start'))>var.get('length')) else (var.get('length')+var.get('start'))))
                        var.put('end', (var.get('length') if (PyJsStrictEq(var.get('end'),var.get('undefined')) or (var.get('end')>var.get('length'))) else var.get('toInteger')(var.get('end'))))
                        if (var.get('end')<Js(0.0)):
                            var.put('end', var.get('length'), '+')
                        var.put('end', (Js(0.0) if (var.get('start')>var.get('end')) else var.get('toLength')(var.get('end'))))
                        while (var.get('start')<var.get('end')):
                            var.get('array').put((var.put('start',Js(var.get('start').to_number())+Js(1))-Js(1)), var.get('value'))
                        return var.get('array')
                    PyJsHoisted_baseFill_.func_name = 'baseFill'
                    var.put('baseFill', PyJsHoisted_baseFill_)
                    @Js
                    def PyJsHoisted_baseFilter_(collection, predicate, this, arguments, var=var):
                        var = Scope({'collection':collection, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'predicate', 'collection'])
                        var.put('result', Js([]))
                        @Js
                        def PyJs_anonymous_769_(value, index, collection, this, arguments, var=var):
                            var = Scope({'value':value, 'index':index, 'collection':collection, 'this':this, 'arguments':arguments}, var)
                            var.registers(['value', 'index', 'collection'])
                            if var.get('predicate')(var.get('value'), var.get('index'), var.get('collection')):
                                var.get('result').callprop('push', var.get('value'))
                        PyJs_anonymous_769_._set_name('anonymous')
                        var.get('baseEach')(var.get('collection'), PyJs_anonymous_769_)
                        return var.get('result')
                    PyJsHoisted_baseFilter_.func_name = 'baseFilter'
                    var.put('baseFilter', PyJsHoisted_baseFilter_)
                    @Js
                    def PyJsHoisted_baseFlatten_(array, depth, predicate, isStrict, result, this, arguments, var=var):
                        var = Scope({'array':array, 'depth':depth, 'predicate':predicate, 'isStrict':isStrict, 'result':result, 'this':this, 'arguments':arguments}, var)
                        var.registers(['depth', 'array', 'result', 'value', 'predicate', 'length', 'index', 'isStrict'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('array').get('length'))
                        (var.get('predicate') or var.put('predicate', var.get('isFlattenable')))
                        (var.get('result') or var.put('result', Js([])))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('value', var.get('array').get(var.get('index')))
                            if ((var.get('depth')>Js(0.0)) and var.get('predicate')(var.get('value'))):
                                if (var.get('depth')>Js(1.0)):
                                    var.get('baseFlatten')(var.get('value'), (var.get('depth')-Js(1.0)), var.get('predicate'), var.get('isStrict'), var.get('result'))
                                else:
                                    var.get('arrayPush')(var.get('result'), var.get('value'))
                            else:
                                if var.get('isStrict').neg():
                                    var.get('result').put(var.get('result').get('length'), var.get('value'))
                        return var.get('result')
                    PyJsHoisted_baseFlatten_.func_name = 'baseFlatten'
                    var.put('baseFlatten', PyJsHoisted_baseFlatten_)
                    @Js
                    def PyJsHoisted_baseForOwn_(object, iteratee, this, arguments, var=var):
                        var = Scope({'object':object, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'iteratee'])
                        return (var.get('object') and var.get('baseFor')(var.get('object'), var.get('iteratee'), var.get('keys')))
                    PyJsHoisted_baseForOwn_.func_name = 'baseForOwn'
                    var.put('baseForOwn', PyJsHoisted_baseForOwn_)
                    @Js
                    def PyJsHoisted_baseForOwnRight_(object, iteratee, this, arguments, var=var):
                        var = Scope({'object':object, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'iteratee'])
                        return (var.get('object') and var.get('baseForRight')(var.get('object'), var.get('iteratee'), var.get('keys')))
                    PyJsHoisted_baseForOwnRight_.func_name = 'baseForOwnRight'
                    var.put('baseForOwnRight', PyJsHoisted_baseForOwnRight_)
                    @Js
                    def PyJsHoisted_baseFunctions_(object, props, this, arguments, var=var):
                        var = Scope({'object':object, 'props':props, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'props'])
                        @Js
                        def PyJs_anonymous_770_(key, this, arguments, var=var):
                            var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                            var.registers(['key'])
                            return var.get('isFunction')(var.get('object').get(var.get('key')))
                        PyJs_anonymous_770_._set_name('anonymous')
                        return var.get('arrayFilter')(var.get('props'), PyJs_anonymous_770_)
                    PyJsHoisted_baseFunctions_.func_name = 'baseFunctions'
                    var.put('baseFunctions', PyJsHoisted_baseFunctions_)
                    @Js
                    def PyJsHoisted_baseGet_(object, path, this, arguments, var=var):
                        var = Scope({'object':object, 'path':path, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'path', 'length', 'index'])
                        var.put('path', var.get('castPath')(var.get('path'), var.get('object')))
                        var.put('index', Js(0.0))
                        var.put('length', var.get('path').get('length'))
                        while ((var.get('object')!=var.get(u"null")) and (var.get('index')<var.get('length'))):
                            var.put('object', var.get('object').get(var.get('toKey')(var.get('path').get((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))))))
                        return (var.get('object') if (var.get('index') and (var.get('index')==var.get('length'))) else var.get('undefined'))
                    PyJsHoisted_baseGet_.func_name = 'baseGet'
                    var.put('baseGet', PyJsHoisted_baseGet_)
                    @Js
                    def PyJsHoisted_baseGetAllKeys_(object, keysFunc, symbolsFunc, this, arguments, var=var):
                        var = Scope({'object':object, 'keysFunc':keysFunc, 'symbolsFunc':symbolsFunc, 'this':this, 'arguments':arguments}, var)
                        var.registers(['symbolsFunc', 'object', 'result', 'keysFunc'])
                        var.put('result', var.get('keysFunc')(var.get('object')))
                        return (var.get('result') if var.get('isArray')(var.get('object')) else var.get('arrayPush')(var.get('result'), var.get('symbolsFunc')(var.get('object'))))
                    PyJsHoisted_baseGetAllKeys_.func_name = 'baseGetAllKeys'
                    var.put('baseGetAllKeys', PyJsHoisted_baseGetAllKeys_)
                    @Js
                    def PyJsHoisted_baseGetTag_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        if (var.get('value')==var.get(u"null")):
                            return (var.get('undefinedTag') if PyJsStrictEq(var.get('value'),var.get('undefined')) else var.get('nullTag'))
                        return (var.get('getRawTag')(var.get('value')) if (var.get('symToStringTag') and var.get('Object')(var.get('value')).contains(var.get('symToStringTag'))) else var.get('objectToString')(var.get('value')))
                    PyJsHoisted_baseGetTag_.func_name = 'baseGetTag'
                    var.put('baseGetTag', PyJsHoisted_baseGetTag_)
                    @Js
                    def PyJsHoisted_baseGt_(value, other, this, arguments, var=var):
                        var = Scope({'value':value, 'other':other, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'other'])
                        return (var.get('value')>var.get('other'))
                    PyJsHoisted_baseGt_.func_name = 'baseGt'
                    var.put('baseGt', PyJsHoisted_baseGt_)
                    @Js
                    def PyJsHoisted_baseHas_(object, key, this, arguments, var=var):
                        var = Scope({'object':object, 'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'key'])
                        return ((var.get('object')!=var.get(u"null")) and var.get('hasOwnProperty').callprop('call', var.get('object'), var.get('key')))
                    PyJsHoisted_baseHas_.func_name = 'baseHas'
                    var.put('baseHas', PyJsHoisted_baseHas_)
                    @Js
                    def PyJsHoisted_baseHasIn_(object, key, this, arguments, var=var):
                        var = Scope({'object':object, 'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'key'])
                        return ((var.get('object')!=var.get(u"null")) and var.get('Object')(var.get('object')).contains(var.get('key')))
                    PyJsHoisted_baseHasIn_.func_name = 'baseHasIn'
                    var.put('baseHasIn', PyJsHoisted_baseHasIn_)
                    @Js
                    def PyJsHoisted_baseInRange_(number, start, end, this, arguments, var=var):
                        var = Scope({'number':number, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
                        var.registers(['end', 'start', 'number'])
                        return ((var.get('number')>=var.get('nativeMin')(var.get('start'), var.get('end'))) and (var.get('number')<var.get('nativeMax')(var.get('start'), var.get('end'))))
                    PyJsHoisted_baseInRange_.func_name = 'baseInRange'
                    var.put('baseInRange', PyJsHoisted_baseInRange_)
                    @Js
                    def PyJsHoisted_baseIntersection_(arrays, iteratee, comparator, this, arguments, var=var):
                        var = Scope({'arrays':arrays, 'iteratee':iteratee, 'comparator':comparator, 'this':this, 'arguments':arguments}, var)
                        var.registers(['includes', 'result', 'array', 'value', 'arrays', 'seen', 'length', 'index', 'maxLength', 'othIndex', 'cache', 'comparator', 'iteratee', 'othLength', 'computed', 'caches'])
                        var.put('includes', (var.get('arrayIncludesWith') if var.get('comparator') else var.get('arrayIncludes')))
                        var.put('length', var.get('arrays').get('0').get('length'))
                        var.put('othLength', var.get('arrays').get('length'))
                        var.put('othIndex', var.get('othLength'))
                        var.put('caches', var.get('Array')(var.get('othLength')))
                        var.put('maxLength', var.get('Infinity'))
                        var.put('result', Js([]))
                        while (var.put('othIndex',Js(var.get('othIndex').to_number())-Js(1))+Js(1)):
                            var.put('array', var.get('arrays').get(var.get('othIndex')))
                            if (var.get('othIndex') and var.get('iteratee')):
                                var.put('array', var.get('arrayMap')(var.get('array'), var.get('baseUnary')(var.get('iteratee'))))
                            var.put('maxLength', var.get('nativeMin')(var.get('array').get('length'), var.get('maxLength')))
                            var.get('caches').put(var.get('othIndex'), (var.get('SetCache').create((var.get('othIndex') and var.get('array'))) if (var.get('comparator').neg() and (var.get('iteratee') or ((var.get('length')>=Js(120.0)) and (var.get('array').get('length')>=Js(120.0))))) else var.get('undefined')))
                        var.put('array', var.get('arrays').get('0'))
                        var.put('index', (-Js(1.0)))
                        var.put('seen', var.get('caches').get('0'))
                        class JS_CONTINUE_LABEL_6f75746572(Exception): pass
                        class JS_BREAK_LABEL_6f75746572(Exception): pass
                        try:
                            while ((var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')) and (var.get('result').get('length')<var.get('maxLength'))):
                                try:
                                    var.put('value', var.get('array').get(var.get('index')))
                                    var.put('computed', (var.get('iteratee')(var.get('value')) if var.get('iteratee') else var.get('value')))
                                    var.put('value', (var.get('value') if (var.get('comparator') or PyJsStrictNeq(var.get('value'),Js(0.0))) else Js(0.0)))
                                    if (var.get('cacheHas')(var.get('seen'), var.get('computed')) if var.get('seen') else var.get('includes')(var.get('result'), var.get('computed'), var.get('comparator'))).neg():
                                        var.put('othIndex', var.get('othLength'))
                                        while var.put('othIndex',Js(var.get('othIndex').to_number())-Js(1)):
                                            var.put('cache', var.get('caches').get(var.get('othIndex')))
                                            if (var.get('cacheHas')(var.get('cache'), var.get('computed')) if var.get('cache') else var.get('includes')(var.get('arrays').get(var.get('othIndex')), var.get('computed'), var.get('comparator'))).neg():
                                                raise JS_CONTINUE_LABEL_6f75746572("Continued")
                                        if var.get('seen'):
                                            var.get('seen').callprop('push', var.get('computed'))
                                        var.get('result').callprop('push', var.get('value'))
                                except JS_CONTINUE_LABEL_6f75746572:
                                    pass
                        except JS_BREAK_LABEL_6f75746572:
                            pass
                        return var.get('result')
                    PyJsHoisted_baseIntersection_.func_name = 'baseIntersection'
                    var.put('baseIntersection', PyJsHoisted_baseIntersection_)
                    @Js
                    def PyJsHoisted_baseInverter_(object, setter, iteratee, accumulator, this, arguments, var=var):
                        var = Scope({'object':object, 'setter':setter, 'iteratee':iteratee, 'accumulator':accumulator, 'this':this, 'arguments':arguments}, var)
                        var.registers(['accumulator', 'object', 'setter', 'iteratee'])
                        @Js
                        def PyJs_anonymous_771_(value, key, object, this, arguments, var=var):
                            var = Scope({'value':value, 'key':key, 'object':object, 'this':this, 'arguments':arguments}, var)
                            var.registers(['key', 'value', 'object'])
                            var.get('setter')(var.get('accumulator'), var.get('iteratee')(var.get('value')), var.get('key'), var.get('object'))
                        PyJs_anonymous_771_._set_name('anonymous')
                        var.get('baseForOwn')(var.get('object'), PyJs_anonymous_771_)
                        return var.get('accumulator')
                    PyJsHoisted_baseInverter_.func_name = 'baseInverter'
                    var.put('baseInverter', PyJsHoisted_baseInverter_)
                    @Js
                    def PyJsHoisted_baseInvoke_(object, path, args, this, arguments, var=var):
                        var = Scope({'object':object, 'path':path, 'args':args, 'this':this, 'arguments':arguments}, var)
                        var.registers(['args', 'object', 'func', 'path'])
                        var.put('path', var.get('castPath')(var.get('path'), var.get('object')))
                        var.put('object', var.get('parent')(var.get('object'), var.get('path')))
                        var.put('func', (var.get('object') if (var.get('object')==var.get(u"null")) else var.get('object').get(var.get('toKey')(var.get('last')(var.get('path'))))))
                        return (var.get('undefined') if (var.get('func')==var.get(u"null")) else var.get('apply')(var.get('func'), var.get('object'), var.get('args')))
                    PyJsHoisted_baseInvoke_.func_name = 'baseInvoke'
                    var.put('baseInvoke', PyJsHoisted_baseInvoke_)
                    @Js
                    def PyJsHoisted_baseIsArguments_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (var.get('isObjectLike')(var.get('value')) and (var.get('baseGetTag')(var.get('value'))==var.get('argsTag')))
                    PyJsHoisted_baseIsArguments_.func_name = 'baseIsArguments'
                    var.put('baseIsArguments', PyJsHoisted_baseIsArguments_)
                    @Js
                    def PyJsHoisted_baseIsArrayBuffer_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (var.get('isObjectLike')(var.get('value')) and (var.get('baseGetTag')(var.get('value'))==var.get('arrayBufferTag')))
                    PyJsHoisted_baseIsArrayBuffer_.func_name = 'baseIsArrayBuffer'
                    var.put('baseIsArrayBuffer', PyJsHoisted_baseIsArrayBuffer_)
                    @Js
                    def PyJsHoisted_baseIsDate_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (var.get('isObjectLike')(var.get('value')) and (var.get('baseGetTag')(var.get('value'))==var.get('dateTag')))
                    PyJsHoisted_baseIsDate_.func_name = 'baseIsDate'
                    var.put('baseIsDate', PyJsHoisted_baseIsDate_)
                    @Js
                    def PyJsHoisted_baseIsEqual_(value, other, bitmask, customizer, stack, this, arguments, var=var):
                        var = Scope({'value':value, 'other':other, 'bitmask':bitmask, 'customizer':customizer, 'stack':stack, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'bitmask', 'other', 'customizer', 'stack'])
                        if PyJsStrictEq(var.get('value'),var.get('other')):
                            return Js(True)
                        if (((var.get('value')==var.get(u"null")) or (var.get('other')==var.get(u"null"))) or (var.get('isObjectLike')(var.get('value')).neg() and var.get('isObjectLike')(var.get('other')).neg())):
                            return (PyJsStrictNeq(var.get('value'),var.get('value')) and PyJsStrictNeq(var.get('other'),var.get('other')))
                        return var.get('baseIsEqualDeep')(var.get('value'), var.get('other'), var.get('bitmask'), var.get('customizer'), var.get('baseIsEqual'), var.get('stack'))
                    PyJsHoisted_baseIsEqual_.func_name = 'baseIsEqual'
                    var.put('baseIsEqual', PyJsHoisted_baseIsEqual_)
                    @Js
                    def PyJsHoisted_baseIsEqualDeep_(object, other, bitmask, customizer, equalFunc, stack, this, arguments, var=var):
                        var = Scope({'object':object, 'other':other, 'bitmask':bitmask, 'customizer':customizer, 'equalFunc':equalFunc, 'stack':stack, 'this':this, 'arguments':arguments}, var)
                        var.registers(['objUnwrapped', 'othIsArr', 'othIsObj', 'othIsWrapped', 'objIsObj', 'othUnwrapped', 'object', 'objIsWrapped', 'objTag', 'isSameTag', 'bitmask', 'objIsArr', 'other', 'customizer', 'othTag', 'equalFunc', 'stack'])
                        var.put('objIsArr', var.get('isArray')(var.get('object')))
                        var.put('othIsArr', var.get('isArray')(var.get('other')))
                        var.put('objTag', (var.get('arrayTag') if var.get('objIsArr') else var.get('getTag')(var.get('object'))))
                        var.put('othTag', (var.get('arrayTag') if var.get('othIsArr') else var.get('getTag')(var.get('other'))))
                        var.put('objTag', (var.get('objectTag') if (var.get('objTag')==var.get('argsTag')) else var.get('objTag')))
                        var.put('othTag', (var.get('objectTag') if (var.get('othTag')==var.get('argsTag')) else var.get('othTag')))
                        var.put('objIsObj', (var.get('objTag')==var.get('objectTag')))
                        var.put('othIsObj', (var.get('othTag')==var.get('objectTag')))
                        var.put('isSameTag', (var.get('objTag')==var.get('othTag')))
                        if (var.get('isSameTag') and var.get('isBuffer')(var.get('object'))):
                            if var.get('isBuffer')(var.get('other')).neg():
                                return Js(False)
                            var.put('objIsArr', Js(True))
                            var.put('objIsObj', Js(False))
                        if (var.get('isSameTag') and var.get('objIsObj').neg()):
                            (var.get('stack') or var.put('stack', var.get('Stack').create()))
                            return (var.get('equalArrays')(var.get('object'), var.get('other'), var.get('bitmask'), var.get('customizer'), var.get('equalFunc'), var.get('stack')) if (var.get('objIsArr') or var.get('isTypedArray')(var.get('object'))) else var.get('equalByTag')(var.get('object'), var.get('other'), var.get('objTag'), var.get('bitmask'), var.get('customizer'), var.get('equalFunc'), var.get('stack')))
                        if (var.get('bitmask')&var.get('COMPARE_PARTIAL_FLAG')).neg():
                            var.put('objIsWrapped', (var.get('objIsObj') and var.get('hasOwnProperty').callprop('call', var.get('object'), Js('__wrapped__'))))
                            var.put('othIsWrapped', (var.get('othIsObj') and var.get('hasOwnProperty').callprop('call', var.get('other'), Js('__wrapped__'))))
                            if (var.get('objIsWrapped') or var.get('othIsWrapped')):
                                var.put('objUnwrapped', (var.get('object').callprop('value') if var.get('objIsWrapped') else var.get('object')))
                                var.put('othUnwrapped', (var.get('other').callprop('value') if var.get('othIsWrapped') else var.get('other')))
                                (var.get('stack') or var.put('stack', var.get('Stack').create()))
                                return var.get('equalFunc')(var.get('objUnwrapped'), var.get('othUnwrapped'), var.get('bitmask'), var.get('customizer'), var.get('stack'))
                        if var.get('isSameTag').neg():
                            return Js(False)
                        (var.get('stack') or var.put('stack', var.get('Stack').create()))
                        return var.get('equalObjects')(var.get('object'), var.get('other'), var.get('bitmask'), var.get('customizer'), var.get('equalFunc'), var.get('stack'))
                    PyJsHoisted_baseIsEqualDeep_.func_name = 'baseIsEqualDeep'
                    var.put('baseIsEqualDeep', PyJsHoisted_baseIsEqualDeep_)
                    @Js
                    def PyJsHoisted_baseIsMap_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (var.get('isObjectLike')(var.get('value')) and (var.get('getTag')(var.get('value'))==var.get('mapTag')))
                    PyJsHoisted_baseIsMap_.func_name = 'baseIsMap'
                    var.put('baseIsMap', PyJsHoisted_baseIsMap_)
                    @Js
                    def PyJsHoisted_baseIsMatch_(object, source, matchData, customizer, this, arguments, var=var):
                        var = Scope({'object':object, 'source':source, 'matchData':matchData, 'customizer':customizer, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'srcValue', 'object', 'length', 'index', 'objValue', 'matchData', 'source', 'customizer', 'key', 'noCustomizer', 'data', 'stack'])
                        var.put('index', var.get('matchData').get('length'))
                        var.put('length', var.get('index'))
                        var.put('noCustomizer', var.get('customizer').neg())
                        if (var.get('object')==var.get(u"null")):
                            return var.get('length').neg()
                        var.put('object', var.get('Object')(var.get('object')))
                        while (var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1)):
                            var.put('data', var.get('matchData').get(var.get('index')))
                            if (PyJsStrictNeq(var.get('data').get('1'),var.get('object').get(var.get('data').get('0'))) if (var.get('noCustomizer') and var.get('data').get('2')) else var.get('object').contains(var.get('data').get('0')).neg()):
                                return Js(False)
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('data', var.get('matchData').get(var.get('index')))
                            var.put('key', var.get('data').get('0'))
                            var.put('objValue', var.get('object').get(var.get('key')))
                            var.put('srcValue', var.get('data').get('1'))
                            if (var.get('noCustomizer') and var.get('data').get('2')):
                                if (PyJsStrictEq(var.get('objValue'),var.get('undefined')) and var.get('object').contains(var.get('key')).neg()):
                                    return Js(False)
                            else:
                                var.put('stack', var.get('Stack').create())
                                if var.get('customizer'):
                                    var.put('result', var.get('customizer')(var.get('objValue'), var.get('srcValue'), var.get('key'), var.get('object'), var.get('source'), var.get('stack')))
                                if (var.get('baseIsEqual')(var.get('srcValue'), var.get('objValue'), (var.get('COMPARE_PARTIAL_FLAG')|var.get('COMPARE_UNORDERED_FLAG')), var.get('customizer'), var.get('stack')) if PyJsStrictEq(var.get('result'),var.get('undefined')) else var.get('result')).neg():
                                    return Js(False)
                        return Js(True)
                    PyJsHoisted_baseIsMatch_.func_name = 'baseIsMatch'
                    var.put('baseIsMatch', PyJsHoisted_baseIsMatch_)
                    @Js
                    def PyJsHoisted_baseIsNative_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'pattern'])
                        if (var.get('isObject')(var.get('value')).neg() or var.get('isMasked')(var.get('value'))):
                            return Js(False)
                        var.put('pattern', (var.get('reIsNative') if var.get('isFunction')(var.get('value')) else var.get('reIsHostCtor')))
                        return var.get('pattern').callprop('test', var.get('toSource')(var.get('value')))
                    PyJsHoisted_baseIsNative_.func_name = 'baseIsNative'
                    var.put('baseIsNative', PyJsHoisted_baseIsNative_)
                    @Js
                    def PyJsHoisted_baseIsRegExp_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (var.get('isObjectLike')(var.get('value')) and (var.get('baseGetTag')(var.get('value'))==var.get('regexpTag')))
                    PyJsHoisted_baseIsRegExp_.func_name = 'baseIsRegExp'
                    var.put('baseIsRegExp', PyJsHoisted_baseIsRegExp_)
                    @Js
                    def PyJsHoisted_baseIsSet_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (var.get('isObjectLike')(var.get('value')) and (var.get('getTag')(var.get('value'))==var.get('setTag')))
                    PyJsHoisted_baseIsSet_.func_name = 'baseIsSet'
                    var.put('baseIsSet', PyJsHoisted_baseIsSet_)
                    @Js
                    def PyJsHoisted_baseIsTypedArray_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return ((var.get('isObjectLike')(var.get('value')) and var.get('isLength')(var.get('value').get('length'))) and var.get('typedArrayTags').get(var.get('baseGetTag')(var.get('value'))).neg().neg())
                    PyJsHoisted_baseIsTypedArray_.func_name = 'baseIsTypedArray'
                    var.put('baseIsTypedArray', PyJsHoisted_baseIsTypedArray_)
                    @Js
                    def PyJsHoisted_baseIteratee_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        if (var.get('value',throw=False).typeof()==Js('function')):
                            return var.get('value')
                        if (var.get('value')==var.get(u"null")):
                            return var.get('identity')
                        if (var.get('value',throw=False).typeof()==Js('object')):
                            return (var.get('baseMatchesProperty')(var.get('value').get('0'), var.get('value').get('1')) if var.get('isArray')(var.get('value')) else var.get('baseMatches')(var.get('value')))
                        return var.get('property')(var.get('value'))
                    PyJsHoisted_baseIteratee_.func_name = 'baseIteratee'
                    var.put('baseIteratee', PyJsHoisted_baseIteratee_)
                    @Js
                    def PyJsHoisted_baseKeys_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'result', 'object'])
                        if var.get('isPrototype')(var.get('object')).neg():
                            return var.get('nativeKeys')(var.get('object'))
                        var.put('result', Js([]))
                        for PyJsTemp in var.get('Object')(var.get('object')):
                            var.put('key', PyJsTemp)
                            if (var.get('hasOwnProperty').callprop('call', var.get('object'), var.get('key')) and (var.get('key')!=Js('constructor'))):
                                var.get('result').callprop('push', var.get('key'))
                        return var.get('result')
                    PyJsHoisted_baseKeys_.func_name = 'baseKeys'
                    var.put('baseKeys', PyJsHoisted_baseKeys_)
                    @Js
                    def PyJsHoisted_baseKeysIn_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'result', 'object', 'isProto'])
                        if var.get('isObject')(var.get('object')).neg():
                            return var.get('nativeKeysIn')(var.get('object'))
                        var.put('isProto', var.get('isPrototype')(var.get('object')))
                        var.put('result', Js([]))
                        for PyJsTemp in var.get('object'):
                            var.put('key', PyJsTemp)
                            if ((var.get('key')==Js('constructor')) and (var.get('isProto') or var.get('hasOwnProperty').callprop('call', var.get('object'), var.get('key')).neg())).neg():
                                var.get('result').callprop('push', var.get('key'))
                        return var.get('result')
                    PyJsHoisted_baseKeysIn_.func_name = 'baseKeysIn'
                    var.put('baseKeysIn', PyJsHoisted_baseKeysIn_)
                    @Js
                    def PyJsHoisted_baseLt_(value, other, this, arguments, var=var):
                        var = Scope({'value':value, 'other':other, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'other'])
                        return (var.get('value')<var.get('other'))
                    PyJsHoisted_baseLt_.func_name = 'baseLt'
                    var.put('baseLt', PyJsHoisted_baseLt_)
                    @Js
                    def PyJsHoisted_baseMap_(collection, iteratee, this, arguments, var=var):
                        var = Scope({'collection':collection, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['iteratee', 'result', 'index', 'collection'])
                        var.put('index', (-Js(1.0)))
                        var.put('result', (var.get('Array')(var.get('collection').get('length')) if var.get('isArrayLike')(var.get('collection')) else Js([])))
                        @Js
                        def PyJs_anonymous_772_(value, key, collection, this, arguments, var=var):
                            var = Scope({'value':value, 'key':key, 'collection':collection, 'this':this, 'arguments':arguments}, var)
                            var.registers(['key', 'value', 'collection'])
                            var.get('result').put(var.put('index',Js(var.get('index').to_number())+Js(1)), var.get('iteratee')(var.get('value'), var.get('key'), var.get('collection')))
                        PyJs_anonymous_772_._set_name('anonymous')
                        var.get('baseEach')(var.get('collection'), PyJs_anonymous_772_)
                        return var.get('result')
                    PyJsHoisted_baseMap_.func_name = 'baseMap'
                    var.put('baseMap', PyJsHoisted_baseMap_)
                    @Js
                    def PyJsHoisted_baseMatches_(source, this, arguments, var=var):
                        var = Scope({'source':source, 'this':this, 'arguments':arguments}, var)
                        var.registers(['matchData', 'source'])
                        var.put('matchData', var.get('getMatchData')(var.get('source')))
                        if ((var.get('matchData').get('length')==Js(1.0)) and var.get('matchData').get('0').get('2')):
                            return var.get('matchesStrictComparable')(var.get('matchData').get('0').get('0'), var.get('matchData').get('0').get('1'))
                        @Js
                        def PyJs_anonymous_773_(object, this, arguments, var=var):
                            var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                            var.registers(['object'])
                            return (PyJsStrictEq(var.get('object'),var.get('source')) or var.get('baseIsMatch')(var.get('object'), var.get('source'), var.get('matchData')))
                        PyJs_anonymous_773_._set_name('anonymous')
                        return PyJs_anonymous_773_
                    PyJsHoisted_baseMatches_.func_name = 'baseMatches'
                    var.put('baseMatches', PyJsHoisted_baseMatches_)
                    @Js
                    def PyJsHoisted_baseMatchesProperty_(path, srcValue, this, arguments, var=var):
                        var = Scope({'path':path, 'srcValue':srcValue, 'this':this, 'arguments':arguments}, var)
                        var.registers(['path', 'srcValue'])
                        if (var.get('isKey')(var.get('path')) and var.get('isStrictComparable')(var.get('srcValue'))):
                            return var.get('matchesStrictComparable')(var.get('toKey')(var.get('path')), var.get('srcValue'))
                        @Js
                        def PyJs_anonymous_774_(object, this, arguments, var=var):
                            var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                            var.registers(['object', 'objValue'])
                            var.put('objValue', var.get('get')(var.get('object'), var.get('path')))
                            return (var.get('hasIn')(var.get('object'), var.get('path')) if (PyJsStrictEq(var.get('objValue'),var.get('undefined')) and PyJsStrictEq(var.get('objValue'),var.get('srcValue'))) else var.get('baseIsEqual')(var.get('srcValue'), var.get('objValue'), (var.get('COMPARE_PARTIAL_FLAG')|var.get('COMPARE_UNORDERED_FLAG'))))
                        PyJs_anonymous_774_._set_name('anonymous')
                        return PyJs_anonymous_774_
                    PyJsHoisted_baseMatchesProperty_.func_name = 'baseMatchesProperty'
                    var.put('baseMatchesProperty', PyJsHoisted_baseMatchesProperty_)
                    @Js
                    def PyJsHoisted_baseMerge_(object, source, srcIndex, customizer, stack, this, arguments, var=var):
                        var = Scope({'object':object, 'source':source, 'srcIndex':srcIndex, 'customizer':customizer, 'stack':stack, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'customizer', 'source', 'srcIndex', 'stack'])
                        if PyJsStrictEq(var.get('object'),var.get('source')):
                            return var.get('undefined')
                        @Js
                        def PyJs_anonymous_775_(srcValue, key, this, arguments, var=var):
                            var = Scope({'srcValue':srcValue, 'key':key, 'this':this, 'arguments':arguments}, var)
                            var.registers(['key', 'newValue', 'srcValue'])
                            (var.get('stack') or var.put('stack', var.get('Stack').create()))
                            if var.get('isObject')(var.get('srcValue')):
                                var.get('baseMergeDeep')(var.get('object'), var.get('source'), var.get('key'), var.get('srcIndex'), var.get('baseMerge'), var.get('customizer'), var.get('stack'))
                            else:
                                var.put('newValue', (var.get('customizer')(var.get('safeGet')(var.get('object'), var.get('key')), var.get('srcValue'), (var.get('key')+Js('')), var.get('object'), var.get('source'), var.get('stack')) if var.get('customizer') else var.get('undefined')))
                                if PyJsStrictEq(var.get('newValue'),var.get('undefined')):
                                    var.put('newValue', var.get('srcValue'))
                                var.get('assignMergeValue')(var.get('object'), var.get('key'), var.get('newValue'))
                        PyJs_anonymous_775_._set_name('anonymous')
                        var.get('baseFor')(var.get('source'), PyJs_anonymous_775_, var.get('keysIn'))
                    PyJsHoisted_baseMerge_.func_name = 'baseMerge'
                    var.put('baseMerge', PyJsHoisted_baseMerge_)
                    @Js
                    def PyJsHoisted_baseMergeDeep_(object, source, key, srcIndex, mergeFunc, customizer, stack, this, arguments, var=var):
                        var = Scope({'object':object, 'source':source, 'key':key, 'srcIndex':srcIndex, 'mergeFunc':mergeFunc, 'customizer':customizer, 'stack':stack, 'this':this, 'arguments':arguments}, var)
                        var.registers(['stacked', 'newValue', 'srcValue', 'object', 'objValue', 'isBuff', 'customizer', 'isArr', 'isCommon', 'isTyped', 'source', 'srcIndex', 'key', 'stack', 'mergeFunc'])
                        var.put('objValue', var.get('safeGet')(var.get('object'), var.get('key')))
                        var.put('srcValue', var.get('safeGet')(var.get('source'), var.get('key')))
                        var.put('stacked', var.get('stack').callprop('get', var.get('srcValue')))
                        if var.get('stacked'):
                            var.get('assignMergeValue')(var.get('object'), var.get('key'), var.get('stacked'))
                            return var.get('undefined')
                        var.put('newValue', (var.get('customizer')(var.get('objValue'), var.get('srcValue'), (var.get('key')+Js('')), var.get('object'), var.get('source'), var.get('stack')) if var.get('customizer') else var.get('undefined')))
                        var.put('isCommon', PyJsStrictEq(var.get('newValue'),var.get('undefined')))
                        if var.get('isCommon'):
                            var.put('isArr', var.get('isArray')(var.get('srcValue')))
                            var.put('isBuff', (var.get('isArr').neg() and var.get('isBuffer')(var.get('srcValue'))))
                            var.put('isTyped', ((var.get('isArr').neg() and var.get('isBuff').neg()) and var.get('isTypedArray')(var.get('srcValue'))))
                            var.put('newValue', var.get('srcValue'))
                            if ((var.get('isArr') or var.get('isBuff')) or var.get('isTyped')):
                                if var.get('isArray')(var.get('objValue')):
                                    var.put('newValue', var.get('objValue'))
                                else:
                                    if var.get('isArrayLikeObject')(var.get('objValue')):
                                        var.put('newValue', var.get('copyArray')(var.get('objValue')))
                                    else:
                                        if var.get('isBuff'):
                                            var.put('isCommon', Js(False))
                                            var.put('newValue', var.get('cloneBuffer')(var.get('srcValue'), Js(True)))
                                        else:
                                            if var.get('isTyped'):
                                                var.put('isCommon', Js(False))
                                                var.put('newValue', var.get('cloneTypedArray')(var.get('srcValue'), Js(True)))
                                            else:
                                                var.put('newValue', Js([]))
                            else:
                                if (var.get('isPlainObject')(var.get('srcValue')) or var.get('isArguments')(var.get('srcValue'))):
                                    var.put('newValue', var.get('objValue'))
                                    if var.get('isArguments')(var.get('objValue')):
                                        var.put('newValue', var.get('toPlainObject')(var.get('objValue')))
                                    else:
                                        if (var.get('isObject')(var.get('objValue')).neg() or var.get('isFunction')(var.get('objValue'))):
                                            var.put('newValue', var.get('initCloneObject')(var.get('srcValue')))
                                else:
                                    var.put('isCommon', Js(False))
                        if var.get('isCommon'):
                            var.get('stack').callprop('set', var.get('srcValue'), var.get('newValue'))
                            var.get('mergeFunc')(var.get('newValue'), var.get('srcValue'), var.get('srcIndex'), var.get('customizer'), var.get('stack'))
                            var.get('stack').callprop('delete', var.get('srcValue'))
                        var.get('assignMergeValue')(var.get('object'), var.get('key'), var.get('newValue'))
                    PyJsHoisted_baseMergeDeep_.func_name = 'baseMergeDeep'
                    var.put('baseMergeDeep', PyJsHoisted_baseMergeDeep_)
                    @Js
                    def PyJsHoisted_baseNth_(array, n, this, arguments, var=var):
                        var = Scope({'array':array, 'n':n, 'this':this, 'arguments':arguments}, var)
                        var.registers(['n', 'array', 'length'])
                        var.put('length', var.get('array').get('length'))
                        if var.get('length').neg():
                            return var.get('undefined')
                        var.put('n', (var.get('length') if (var.get('n')<Js(0.0)) else Js(0.0)), '+')
                        return (var.get('array').get(var.get('n')) if var.get('isIndex')(var.get('n'), var.get('length')) else var.get('undefined'))
                    PyJsHoisted_baseNth_.func_name = 'baseNth'
                    var.put('baseNth', PyJsHoisted_baseNth_)
                    @Js
                    def PyJsHoisted_baseOrderBy_(collection, iteratees, orders, this, arguments, var=var):
                        var = Scope({'collection':collection, 'iteratees':iteratees, 'orders':orders, 'this':this, 'arguments':arguments}, var)
                        var.registers(['iteratees', 'result', 'collection', 'index', 'orders'])
                        var.put('index', (-Js(1.0)))
                        var.put('iteratees', var.get('arrayMap')((var.get('iteratees') if var.get('iteratees').get('length') else Js([var.get('identity')])), var.get('baseUnary')(var.get('getIteratee')())))
                        @Js
                        def PyJs_anonymous_776_(value, key, collection, this, arguments, var=var):
                            var = Scope({'value':value, 'key':key, 'collection':collection, 'this':this, 'arguments':arguments}, var)
                            var.registers(['criteria', 'value', 'key', 'collection'])
                            @Js
                            def PyJs_anonymous_777_(iteratee, this, arguments, var=var):
                                var = Scope({'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                                var.registers(['iteratee'])
                                return var.get('iteratee')(var.get('value'))
                            PyJs_anonymous_777_._set_name('anonymous')
                            var.put('criteria', var.get('arrayMap')(var.get('iteratees'), PyJs_anonymous_777_))
                            return Js({'criteria':var.get('criteria'),'index':var.put('index',Js(var.get('index').to_number())+Js(1)),'value':var.get('value')})
                        PyJs_anonymous_776_._set_name('anonymous')
                        var.put('result', var.get('baseMap')(var.get('collection'), PyJs_anonymous_776_))
                        @Js
                        def PyJs_anonymous_778_(object, other, this, arguments, var=var):
                            var = Scope({'object':object, 'other':other, 'this':this, 'arguments':arguments}, var)
                            var.registers(['object', 'other'])
                            return var.get('compareMultiple')(var.get('object'), var.get('other'), var.get('orders'))
                        PyJs_anonymous_778_._set_name('anonymous')
                        return var.get('baseSortBy')(var.get('result'), PyJs_anonymous_778_)
                    PyJsHoisted_baseOrderBy_.func_name = 'baseOrderBy'
                    var.put('baseOrderBy', PyJsHoisted_baseOrderBy_)
                    @Js
                    def PyJsHoisted_basePick_(object, paths, this, arguments, var=var):
                        var = Scope({'object':object, 'paths':paths, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'paths'])
                        @Js
                        def PyJs_anonymous_779_(value, path, this, arguments, var=var):
                            var = Scope({'value':value, 'path':path, 'this':this, 'arguments':arguments}, var)
                            var.registers(['value', 'path'])
                            return var.get('hasIn')(var.get('object'), var.get('path'))
                        PyJs_anonymous_779_._set_name('anonymous')
                        return var.get('basePickBy')(var.get('object'), var.get('paths'), PyJs_anonymous_779_)
                    PyJsHoisted_basePick_.func_name = 'basePick'
                    var.put('basePick', PyJsHoisted_basePick_)
                    @Js
                    def PyJsHoisted_basePickBy_(object, paths, predicate, this, arguments, var=var):
                        var = Scope({'object':object, 'paths':paths, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'value', 'paths', 'predicate', 'object', 'path', 'length', 'index'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('paths').get('length'))
                        var.put('result', Js({}))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('path', var.get('paths').get(var.get('index')))
                            var.put('value', var.get('baseGet')(var.get('object'), var.get('path')))
                            if var.get('predicate')(var.get('value'), var.get('path')):
                                var.get('baseSet')(var.get('result'), var.get('castPath')(var.get('path'), var.get('object')), var.get('value'))
                        return var.get('result')
                    PyJsHoisted_basePickBy_.func_name = 'basePickBy'
                    var.put('basePickBy', PyJsHoisted_basePickBy_)
                    @Js
                    def PyJsHoisted_basePropertyDeep_(path, this, arguments, var=var):
                        var = Scope({'path':path, 'this':this, 'arguments':arguments}, var)
                        var.registers(['path'])
                        @Js
                        def PyJs_anonymous_780_(object, this, arguments, var=var):
                            var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                            var.registers(['object'])
                            return var.get('baseGet')(var.get('object'), var.get('path'))
                        PyJs_anonymous_780_._set_name('anonymous')
                        return PyJs_anonymous_780_
                    PyJsHoisted_basePropertyDeep_.func_name = 'basePropertyDeep'
                    var.put('basePropertyDeep', PyJsHoisted_basePropertyDeep_)
                    @Js
                    def PyJsHoisted_basePullAll_(array, values, iteratee, comparator, this, arguments, var=var):
                        var = Scope({'array':array, 'values':values, 'iteratee':iteratee, 'comparator':comparator, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'value', 'seen', 'length', 'index', 'fromIndex', 'values', 'indexOf', 'comparator', 'iteratee', 'computed'])
                        var.put('indexOf', (var.get('baseIndexOfWith') if var.get('comparator') else var.get('baseIndexOf')))
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('values').get('length'))
                        var.put('seen', var.get('array'))
                        if PyJsStrictEq(var.get('array'),var.get('values')):
                            var.put('values', var.get('copyArray')(var.get('values')))
                        if var.get('iteratee'):
                            var.put('seen', var.get('arrayMap')(var.get('array'), var.get('baseUnary')(var.get('iteratee'))))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('fromIndex', Js(0.0))
                            var.put('value', var.get('values').get(var.get('index')))
                            var.put('computed', (var.get('iteratee')(var.get('value')) if var.get('iteratee') else var.get('value')))
                            while (var.put('fromIndex', var.get('indexOf')(var.get('seen'), var.get('computed'), var.get('fromIndex'), var.get('comparator')))>(-Js(1.0))):
                                if PyJsStrictNeq(var.get('seen'),var.get('array')):
                                    var.get('splice').callprop('call', var.get('seen'), var.get('fromIndex'), Js(1.0))
                                var.get('splice').callprop('call', var.get('array'), var.get('fromIndex'), Js(1.0))
                        return var.get('array')
                    PyJsHoisted_basePullAll_.func_name = 'basePullAll'
                    var.put('basePullAll', PyJsHoisted_basePullAll_)
                    @Js
                    def PyJsHoisted_basePullAt_(array, indexes, this, arguments, var=var):
                        var = Scope({'array':array, 'indexes':indexes, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'indexes', 'length', 'index', 'previous', 'lastIndex'])
                        var.put('length', (var.get('indexes').get('length') if var.get('array') else Js(0.0)))
                        var.put('lastIndex', (var.get('length')-Js(1.0)))
                        while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
                            var.put('index', var.get('indexes').get(var.get('length')))
                            if ((var.get('length')==var.get('lastIndex')) or PyJsStrictNeq(var.get('index'),var.get('previous'))):
                                var.put('previous', var.get('index'))
                                if var.get('isIndex')(var.get('index')):
                                    var.get('splice').callprop('call', var.get('array'), var.get('index'), Js(1.0))
                                else:
                                    var.get('baseUnset')(var.get('array'), var.get('index'))
                        return var.get('array')
                    PyJsHoisted_basePullAt_.func_name = 'basePullAt'
                    var.put('basePullAt', PyJsHoisted_basePullAt_)
                    @Js
                    def PyJsHoisted_baseRandom_(lower, upper, this, arguments, var=var):
                        var = Scope({'lower':lower, 'upper':upper, 'this':this, 'arguments':arguments}, var)
                        var.registers(['lower', 'upper'])
                        return (var.get('lower')+var.get('nativeFloor')((var.get('nativeRandom')()*((var.get('upper')-var.get('lower'))+Js(1.0)))))
                    PyJsHoisted_baseRandom_.func_name = 'baseRandom'
                    var.put('baseRandom', PyJsHoisted_baseRandom_)
                    @Js
                    def PyJsHoisted_baseRange_(start, end, step, fromRight, this, arguments, var=var):
                        var = Scope({'start':start, 'end':end, 'step':step, 'fromRight':fromRight, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'start', 'step', 'fromRight', 'end', 'length', 'index'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('nativeMax')(var.get('nativeCeil')(((var.get('end')-var.get('start'))/(var.get('step') or Js(1.0)))), Js(0.0)))
                        var.put('result', var.get('Array')(var.get('length')))
                        while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
                            var.get('result').put((var.get('length') if var.get('fromRight') else var.put('index',Js(var.get('index').to_number())+Js(1))), var.get('start'))
                            var.put('start', var.get('step'), '+')
                        return var.get('result')
                    PyJsHoisted_baseRange_.func_name = 'baseRange'
                    var.put('baseRange', PyJsHoisted_baseRange_)
                    @Js
                    def PyJsHoisted_baseRepeat_(string, n, this, arguments, var=var):
                        var = Scope({'string':string, 'n':n, 'this':this, 'arguments':arguments}, var)
                        var.registers(['n', 'result', 'string'])
                        var.put('result', Js(''))
                        if ((var.get('string').neg() or (var.get('n')<Js(1.0))) or (var.get('n')>var.get('MAX_SAFE_INTEGER'))):
                            return var.get('result')
                        while 1:
                            if (var.get('n')%Js(2.0)):
                                var.put('result', var.get('string'), '+')
                            var.put('n', var.get('nativeFloor')((var.get('n')/Js(2.0))))
                            if var.get('n'):
                                var.put('string', var.get('string'), '+')
                            if not var.get('n'):
                                break
                        return var.get('result')
                    PyJsHoisted_baseRepeat_.func_name = 'baseRepeat'
                    var.put('baseRepeat', PyJsHoisted_baseRepeat_)
                    @Js
                    def PyJsHoisted_baseRest_(func, start, this, arguments, var=var):
                        var = Scope({'func':func, 'start':start, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'start'])
                        return var.get('setToString')(var.get('overRest')(var.get('func'), var.get('start'), var.get('identity')), (var.get('func')+Js('')))
                    PyJsHoisted_baseRest_.func_name = 'baseRest'
                    var.put('baseRest', PyJsHoisted_baseRest_)
                    @Js
                    def PyJsHoisted_baseSample_(collection, this, arguments, var=var):
                        var = Scope({'collection':collection, 'this':this, 'arguments':arguments}, var)
                        var.registers(['collection'])
                        return var.get('arraySample')(var.get('values')(var.get('collection')))
                    PyJsHoisted_baseSample_.func_name = 'baseSample'
                    var.put('baseSample', PyJsHoisted_baseSample_)
                    @Js
                    def PyJsHoisted_baseSampleSize_(collection, n, this, arguments, var=var):
                        var = Scope({'collection':collection, 'n':n, 'this':this, 'arguments':arguments}, var)
                        var.registers(['n', 'array', 'collection'])
                        var.put('array', var.get('values')(var.get('collection')))
                        return var.get('shuffleSelf')(var.get('array'), var.get('baseClamp')(var.get('n'), Js(0.0), var.get('array').get('length')))
                    PyJsHoisted_baseSampleSize_.func_name = 'baseSampleSize'
                    var.put('baseSampleSize', PyJsHoisted_baseSampleSize_)
                    @Js
                    def PyJsHoisted_baseSet_(object, path, value, customizer, this, arguments, var=var):
                        var = Scope({'object':object, 'path':path, 'value':value, 'customizer':customizer, 'this':this, 'arguments':arguments}, var)
                        var.registers(['newValue', 'value', 'object', 'length', 'index', 'objValue', 'path', 'nested', 'customizer', 'key', 'lastIndex'])
                        if var.get('isObject')(var.get('object')).neg():
                            return var.get('object')
                        var.put('path', var.get('castPath')(var.get('path'), var.get('object')))
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('path').get('length'))
                        var.put('lastIndex', (var.get('length')-Js(1.0)))
                        var.put('nested', var.get('object'))
                        while ((var.get('nested')!=var.get(u"null")) and (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length'))):
                            var.put('key', var.get('toKey')(var.get('path').get(var.get('index'))))
                            var.put('newValue', var.get('value'))
                            if (var.get('index')!=var.get('lastIndex')):
                                var.put('objValue', var.get('nested').get(var.get('key')))
                                var.put('newValue', (var.get('customizer')(var.get('objValue'), var.get('key'), var.get('nested')) if var.get('customizer') else var.get('undefined')))
                                if PyJsStrictEq(var.get('newValue'),var.get('undefined')):
                                    var.put('newValue', (var.get('objValue') if var.get('isObject')(var.get('objValue')) else (Js([]) if var.get('isIndex')(var.get('path').get((var.get('index')+Js(1.0)))) else Js({}))))
                            var.get('assignValue')(var.get('nested'), var.get('key'), var.get('newValue'))
                            var.put('nested', var.get('nested').get(var.get('key')))
                        return var.get('object')
                    PyJsHoisted_baseSet_.func_name = 'baseSet'
                    var.put('baseSet', PyJsHoisted_baseSet_)
                    @Js
                    def PyJsHoisted_baseShuffle_(collection, this, arguments, var=var):
                        var = Scope({'collection':collection, 'this':this, 'arguments':arguments}, var)
                        var.registers(['collection'])
                        return var.get('shuffleSelf')(var.get('values')(var.get('collection')))
                    PyJsHoisted_baseShuffle_.func_name = 'baseShuffle'
                    var.put('baseShuffle', PyJsHoisted_baseShuffle_)
                    @Js
                    def PyJsHoisted_baseSlice_(array, start, end, this, arguments, var=var):
                        var = Scope({'array':array, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'result', 'start', 'end', 'length', 'index'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('array').get('length'))
                        if (var.get('start')<Js(0.0)):
                            var.put('start', (Js(0.0) if ((-var.get('start'))>var.get('length')) else (var.get('length')+var.get('start'))))
                        var.put('end', (var.get('length') if (var.get('end')>var.get('length')) else var.get('end')))
                        if (var.get('end')<Js(0.0)):
                            var.put('end', var.get('length'), '+')
                        var.put('length', (Js(0.0) if (var.get('start')>var.get('end')) else PyJsBshift((var.get('end')-var.get('start')),Js(0.0))))
                        var.put('start', Js(0.0), '>>>')
                        var.put('result', var.get('Array')(var.get('length')))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.get('result').put(var.get('index'), var.get('array').get((var.get('index')+var.get('start'))))
                        return var.get('result')
                    PyJsHoisted_baseSlice_.func_name = 'baseSlice'
                    var.put('baseSlice', PyJsHoisted_baseSlice_)
                    @Js
                    def PyJsHoisted_baseSome_(collection, predicate, this, arguments, var=var):
                        var = Scope({'collection':collection, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'predicate', 'collection'])
                        pass
                        @Js
                        def PyJs_anonymous_783_(value, index, collection, this, arguments, var=var):
                            var = Scope({'value':value, 'index':index, 'collection':collection, 'this':this, 'arguments':arguments}, var)
                            var.registers(['value', 'index', 'collection'])
                            var.put('result', var.get('predicate')(var.get('value'), var.get('index'), var.get('collection')))
                            return var.get('result').neg()
                        PyJs_anonymous_783_._set_name('anonymous')
                        var.get('baseEach')(var.get('collection'), PyJs_anonymous_783_)
                        return var.get('result').neg().neg()
                    PyJsHoisted_baseSome_.func_name = 'baseSome'
                    var.put('baseSome', PyJsHoisted_baseSome_)
                    @Js
                    def PyJsHoisted_baseSortedIndex_(array, value, retHighest, this, arguments, var=var):
                        var = Scope({'array':array, 'value':value, 'retHighest':retHighest, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'value', 'high', 'retHighest', 'low', 'computed', 'mid'])
                        var.put('low', Js(0.0))
                        var.put('high', (var.get('low') if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        if (((var.get('value',throw=False).typeof()==Js('number')) and PyJsStrictEq(var.get('value'),var.get('value'))) and (var.get('high')<=var.get('HALF_MAX_ARRAY_LENGTH'))):
                            while (var.get('low')<var.get('high')):
                                var.put('mid', PyJsBshift((var.get('low')+var.get('high')),Js(1.0)))
                                var.put('computed', var.get('array').get(var.get('mid')))
                                if ((PyJsStrictNeq(var.get('computed'),var.get(u"null")) and var.get('isSymbol')(var.get('computed')).neg()) and ((var.get('computed')<=var.get('value')) if var.get('retHighest') else (var.get('computed')<var.get('value')))):
                                    var.put('low', (var.get('mid')+Js(1.0)))
                                else:
                                    var.put('high', var.get('mid'))
                            return var.get('high')
                        return var.get('baseSortedIndexBy')(var.get('array'), var.get('value'), var.get('identity'), var.get('retHighest'))
                    PyJsHoisted_baseSortedIndex_.func_name = 'baseSortedIndex'
                    var.put('baseSortedIndex', PyJsHoisted_baseSortedIndex_)
                    @Js
                    def PyJsHoisted_baseSortedIndexBy_(array, value, iteratee, retHighest, this, arguments, var=var):
                        var = Scope({'array':array, 'value':value, 'iteratee':iteratee, 'retHighest':retHighest, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'value', 'othIsSymbol', 'valIsNaN', 'high', 'valIsUndefined', 'valIsSymbol', 'low', 'retHighest', 'valIsNull', 'iteratee', 'othIsReflexive', 'computed', 'othIsNull', 'mid', 'othIsDefined', 'setLow'])
                        var.put('value', var.get('iteratee')(var.get('value')))
                        var.put('low', Js(0.0))
                        var.put('high', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        var.put('valIsNaN', PyJsStrictNeq(var.get('value'),var.get('value')))
                        var.put('valIsNull', PyJsStrictEq(var.get('value'),var.get(u"null")))
                        var.put('valIsSymbol', var.get('isSymbol')(var.get('value')))
                        var.put('valIsUndefined', PyJsStrictEq(var.get('value'),var.get('undefined')))
                        while (var.get('low')<var.get('high')):
                            var.put('mid', var.get('nativeFloor')(((var.get('low')+var.get('high'))/Js(2.0))))
                            var.put('computed', var.get('iteratee')(var.get('array').get(var.get('mid'))))
                            var.put('othIsDefined', PyJsStrictNeq(var.get('computed'),var.get('undefined')))
                            var.put('othIsNull', PyJsStrictEq(var.get('computed'),var.get(u"null")))
                            var.put('othIsReflexive', PyJsStrictEq(var.get('computed'),var.get('computed')))
                            var.put('othIsSymbol', var.get('isSymbol')(var.get('computed')))
                            if var.get('valIsNaN'):
                                var.put('setLow', (var.get('retHighest') or var.get('othIsReflexive')))
                            else:
                                if var.get('valIsUndefined'):
                                    var.put('setLow', (var.get('othIsReflexive') and (var.get('retHighest') or var.get('othIsDefined'))))
                                else:
                                    if var.get('valIsNull'):
                                        var.put('setLow', ((var.get('othIsReflexive') and var.get('othIsDefined')) and (var.get('retHighest') or var.get('othIsNull').neg())))
                                    else:
                                        if var.get('valIsSymbol'):
                                            var.put('setLow', (((var.get('othIsReflexive') and var.get('othIsDefined')) and var.get('othIsNull').neg()) and (var.get('retHighest') or var.get('othIsSymbol').neg())))
                                        else:
                                            if (var.get('othIsNull') or var.get('othIsSymbol')):
                                                var.put('setLow', Js(False))
                                            else:
                                                var.put('setLow', ((var.get('computed')<=var.get('value')) if var.get('retHighest') else (var.get('computed')<var.get('value'))))
                            if var.get('setLow'):
                                var.put('low', (var.get('mid')+Js(1.0)))
                            else:
                                var.put('high', var.get('mid'))
                        return var.get('nativeMin')(var.get('high'), var.get('MAX_ARRAY_INDEX'))
                    PyJsHoisted_baseSortedIndexBy_.func_name = 'baseSortedIndexBy'
                    var.put('baseSortedIndexBy', PyJsHoisted_baseSortedIndexBy_)
                    @Js
                    def PyJsHoisted_baseSortedUniq_(array, iteratee, this, arguments, var=var):
                        var = Scope({'array':array, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'result', 'value', 'seen', 'length', 'index', 'iteratee', 'computed', 'resIndex'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('array').get('length'))
                        var.put('resIndex', Js(0.0))
                        var.put('result', Js([]))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('value', var.get('array').get(var.get('index')))
                            var.put('computed', (var.get('iteratee')(var.get('value')) if var.get('iteratee') else var.get('value')))
                            if (var.get('index').neg() or var.get('eq')(var.get('computed'), var.get('seen')).neg()):
                                var.put('seen', var.get('computed'))
                                var.get('result').put((var.put('resIndex',Js(var.get('resIndex').to_number())+Js(1))-Js(1)), (Js(0.0) if PyJsStrictEq(var.get('value'),Js(0.0)) else var.get('value')))
                        return var.get('result')
                    PyJsHoisted_baseSortedUniq_.func_name = 'baseSortedUniq'
                    var.put('baseSortedUniq', PyJsHoisted_baseSortedUniq_)
                    @Js
                    def PyJsHoisted_baseToNumber_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        if (var.get('value',throw=False).typeof()==Js('number')):
                            return var.get('value')
                        if var.get('isSymbol')(var.get('value')):
                            return var.get('NAN')
                        return (+var.get('value'))
                    PyJsHoisted_baseToNumber_.func_name = 'baseToNumber'
                    var.put('baseToNumber', PyJsHoisted_baseToNumber_)
                    @Js
                    def PyJsHoisted_baseToString_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'value'])
                        if (var.get('value',throw=False).typeof()==Js('string')):
                            return var.get('value')
                        if var.get('isArray')(var.get('value')):
                            return (var.get('arrayMap')(var.get('value'), var.get('baseToString'))+Js(''))
                        if var.get('isSymbol')(var.get('value')):
                            return (var.get('symbolToString').callprop('call', var.get('value')) if var.get('symbolToString') else Js(''))
                        var.put('result', (var.get('value')+Js('')))
                        return (Js('-0') if ((var.get('result')==Js('0')) and ((Js(1.0)/var.get('value'))==(-var.get('INFINITY')))) else var.get('result'))
                    PyJsHoisted_baseToString_.func_name = 'baseToString'
                    var.put('baseToString', PyJsHoisted_baseToString_)
                    @Js
                    def PyJsHoisted_baseUniq_(array, iteratee, comparator, this, arguments, var=var):
                        var = Scope({'array':array, 'iteratee':iteratee, 'comparator':comparator, 'this':this, 'arguments':arguments}, var)
                        var.registers(['includes', 'result', 'value', 'array', 'seen', 'length', 'index', 'set', 'comparator', 'seenIndex', 'isCommon', 'iteratee', 'computed'])
                        var.put('index', (-Js(1.0)))
                        var.put('includes', var.get('arrayIncludes'))
                        var.put('length', var.get('array').get('length'))
                        var.put('isCommon', Js(True))
                        var.put('result', Js([]))
                        var.put('seen', var.get('result'))
                        if var.get('comparator'):
                            var.put('isCommon', Js(False))
                            var.put('includes', var.get('arrayIncludesWith'))
                        else:
                            if (var.get('length')>=var.get('LARGE_ARRAY_SIZE')):
                                var.put('set', (var.get(u"null") if var.get('iteratee') else var.get('createSet')(var.get('array'))))
                                if var.get('set'):
                                    return var.get('setToArray')(var.get('set'))
                                var.put('isCommon', Js(False))
                                var.put('includes', var.get('cacheHas'))
                                var.put('seen', var.get('SetCache').create())
                            else:
                                var.put('seen', (Js([]) if var.get('iteratee') else var.get('result')))
                        class JS_CONTINUE_LABEL_6f75746572(Exception): pass
                        class JS_BREAK_LABEL_6f75746572(Exception): pass
                        try:
                            while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                                try:
                                    var.put('value', var.get('array').get(var.get('index')))
                                    var.put('computed', (var.get('iteratee')(var.get('value')) if var.get('iteratee') else var.get('value')))
                                    var.put('value', (var.get('value') if (var.get('comparator') or PyJsStrictNeq(var.get('value'),Js(0.0))) else Js(0.0)))
                                    if (var.get('isCommon') and PyJsStrictEq(var.get('computed'),var.get('computed'))):
                                        var.put('seenIndex', var.get('seen').get('length'))
                                        while (var.put('seenIndex',Js(var.get('seenIndex').to_number())-Js(1))+Js(1)):
                                            if PyJsStrictEq(var.get('seen').get(var.get('seenIndex')),var.get('computed')):
                                                raise JS_CONTINUE_LABEL_6f75746572("Continued")
                                        if var.get('iteratee'):
                                            var.get('seen').callprop('push', var.get('computed'))
                                        var.get('result').callprop('push', var.get('value'))
                                    else:
                                        if var.get('includes')(var.get('seen'), var.get('computed'), var.get('comparator')).neg():
                                            if PyJsStrictNeq(var.get('seen'),var.get('result')):
                                                var.get('seen').callprop('push', var.get('computed'))
                                            var.get('result').callprop('push', var.get('value'))
                                except JS_CONTINUE_LABEL_6f75746572:
                                    pass
                        except JS_BREAK_LABEL_6f75746572:
                            pass
                        return var.get('result')
                    PyJsHoisted_baseUniq_.func_name = 'baseUniq'
                    var.put('baseUniq', PyJsHoisted_baseUniq_)
                    @Js
                    def PyJsHoisted_baseUnset_(object, path, this, arguments, var=var):
                        var = Scope({'object':object, 'path':path, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'path'])
                        var.put('path', var.get('castPath')(var.get('path'), var.get('object')))
                        var.put('object', var.get('parent')(var.get('object'), var.get('path')))
                        return ((var.get('object')==var.get(u"null")) or var.get('object').delete(var.get('toKey')(var.get('last')(var.get('path')))))
                    PyJsHoisted_baseUnset_.func_name = 'baseUnset'
                    var.put('baseUnset', PyJsHoisted_baseUnset_)
                    @Js
                    def PyJsHoisted_baseUpdate_(object, path, updater, customizer, this, arguments, var=var):
                        var = Scope({'object':object, 'path':path, 'updater':updater, 'customizer':customizer, 'this':this, 'arguments':arguments}, var)
                        var.registers(['customizer', 'object', 'updater', 'path'])
                        return var.get('baseSet')(var.get('object'), var.get('path'), var.get('updater')(var.get('baseGet')(var.get('object'), var.get('path'))), var.get('customizer'))
                    PyJsHoisted_baseUpdate_.func_name = 'baseUpdate'
                    var.put('baseUpdate', PyJsHoisted_baseUpdate_)
                    @Js
                    def PyJsHoisted_baseWhile_(array, predicate, isDrop, fromRight, this, arguments, var=var):
                        var = Scope({'array':array, 'predicate':predicate, 'isDrop':isDrop, 'fromRight':fromRight, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'predicate', 'fromRight', 'length', 'index', 'isDrop'])
                        var.put('length', var.get('array').get('length'))
                        var.put('index', (var.get('length') if var.get('fromRight') else (-Js(1.0))))
                        while (((var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1)) if var.get('fromRight') else (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length'))) and var.get('predicate')(var.get('array').get(var.get('index')), var.get('index'), var.get('array'))):
                            pass
                        return (var.get('baseSlice')(var.get('array'), (Js(0.0) if var.get('fromRight') else var.get('index')), ((var.get('index')+Js(1.0)) if var.get('fromRight') else var.get('length'))) if var.get('isDrop') else var.get('baseSlice')(var.get('array'), ((var.get('index')+Js(1.0)) if var.get('fromRight') else Js(0.0)), (var.get('length') if var.get('fromRight') else var.get('index'))))
                    PyJsHoisted_baseWhile_.func_name = 'baseWhile'
                    var.put('baseWhile', PyJsHoisted_baseWhile_)
                    @Js
                    def PyJsHoisted_baseWrapperValue_(value, actions, this, arguments, var=var):
                        var = Scope({'value':value, 'actions':actions, 'this':this, 'arguments':arguments}, var)
                        var.registers(['actions', 'result', 'value'])
                        var.put('result', var.get('value'))
                        if var.get('result').instanceof(var.get('LazyWrapper')):
                            var.put('result', var.get('result').callprop('value'))
                        @Js
                        def PyJs_anonymous_784_(result, action, this, arguments, var=var):
                            var = Scope({'result':result, 'action':action, 'this':this, 'arguments':arguments}, var)
                            var.registers(['result', 'action'])
                            return var.get('action').get('func').callprop('apply', var.get('action').get('thisArg'), var.get('arrayPush')(Js([var.get('result')]), var.get('action').get('args')))
                        PyJs_anonymous_784_._set_name('anonymous')
                        return var.get('arrayReduce')(var.get('actions'), PyJs_anonymous_784_, var.get('result'))
                    PyJsHoisted_baseWrapperValue_.func_name = 'baseWrapperValue'
                    var.put('baseWrapperValue', PyJsHoisted_baseWrapperValue_)
                    @Js
                    def PyJsHoisted_baseXor_(arrays, iteratee, comparator, this, arguments, var=var):
                        var = Scope({'arrays':arrays, 'iteratee':iteratee, 'comparator':comparator, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'result', 'arrays', 'length', 'index', 'othIndex', 'comparator', 'iteratee'])
                        var.put('length', var.get('arrays').get('length'))
                        if (var.get('length')<Js(2.0)):
                            return (var.get('baseUniq')(var.get('arrays').get('0')) if var.get('length') else Js([]))
                        var.put('index', (-Js(1.0)))
                        var.put('result', var.get('Array')(var.get('length')))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('array', var.get('arrays').get(var.get('index')))
                            var.put('othIndex', (-Js(1.0)))
                            while (var.put('othIndex',Js(var.get('othIndex').to_number())+Js(1))<var.get('length')):
                                if (var.get('othIndex')!=var.get('index')):
                                    var.get('result').put(var.get('index'), var.get('baseDifference')((var.get('result').get(var.get('index')) or var.get('array')), var.get('arrays').get(var.get('othIndex')), var.get('iteratee'), var.get('comparator')))
                        return var.get('baseUniq')(var.get('baseFlatten')(var.get('result'), Js(1.0)), var.get('iteratee'), var.get('comparator'))
                    PyJsHoisted_baseXor_.func_name = 'baseXor'
                    var.put('baseXor', PyJsHoisted_baseXor_)
                    @Js
                    def PyJsHoisted_baseZipObject_(props, values, assignFunc, this, arguments, var=var):
                        var = Scope({'props':props, 'values':values, 'assignFunc':assignFunc, 'this':this, 'arguments':arguments}, var)
                        var.registers(['assignFunc', 'result', 'value', 'props', 'length', 'index', 'values', 'valsLength'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('props').get('length'))
                        var.put('valsLength', var.get('values').get('length'))
                        var.put('result', Js({}))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('value', (var.get('values').get(var.get('index')) if (var.get('index')<var.get('valsLength')) else var.get('undefined')))
                            var.get('assignFunc')(var.get('result'), var.get('props').get(var.get('index')), var.get('value'))
                        return var.get('result')
                    PyJsHoisted_baseZipObject_.func_name = 'baseZipObject'
                    var.put('baseZipObject', PyJsHoisted_baseZipObject_)
                    @Js
                    def PyJsHoisted_castArrayLikeObject_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (var.get('value') if var.get('isArrayLikeObject')(var.get('value')) else Js([]))
                    PyJsHoisted_castArrayLikeObject_.func_name = 'castArrayLikeObject'
                    var.put('castArrayLikeObject', PyJsHoisted_castArrayLikeObject_)
                    @Js
                    def PyJsHoisted_castFunction_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (var.get('value') if (var.get('value',throw=False).typeof()==Js('function')) else var.get('identity'))
                    PyJsHoisted_castFunction_.func_name = 'castFunction'
                    var.put('castFunction', PyJsHoisted_castFunction_)
                    @Js
                    def PyJsHoisted_castPath_(value, object, this, arguments, var=var):
                        var = Scope({'value':value, 'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'value'])
                        if var.get('isArray')(var.get('value')):
                            return var.get('value')
                        return (Js([var.get('value')]) if var.get('isKey')(var.get('value'), var.get('object')) else var.get('stringToPath')(var.get('toString')(var.get('value'))))
                    PyJsHoisted_castPath_.func_name = 'castPath'
                    var.put('castPath', PyJsHoisted_castPath_)
                    @Js
                    def PyJsHoisted_castSlice_(array, start, end, this, arguments, var=var):
                        var = Scope({'array':array, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'end', 'length', 'start'])
                        var.put('length', var.get('array').get('length'))
                        var.put('end', (var.get('length') if PyJsStrictEq(var.get('end'),var.get('undefined')) else var.get('end')))
                        return (var.get('array') if (var.get('start').neg() and (var.get('end')>=var.get('length'))) else var.get('baseSlice')(var.get('array'), var.get('start'), var.get('end')))
                    PyJsHoisted_castSlice_.func_name = 'castSlice'
                    var.put('castSlice', PyJsHoisted_castSlice_)
                    @Js
                    def PyJsHoisted_cloneBuffer_(buffer, isDeep, this, arguments, var=var):
                        var = Scope({'buffer':buffer, 'isDeep':isDeep, 'this':this, 'arguments':arguments}, var)
                        var.registers(['buffer', 'result', 'length', 'isDeep'])
                        if var.get('isDeep'):
                            return var.get('buffer').callprop('slice')
                        var.put('length', var.get('buffer').get('length'))
                        var.put('result', (var.get('allocUnsafe')(var.get('length')) if var.get('allocUnsafe') else var.get('buffer').get('constructor').create(var.get('length'))))
                        var.get('buffer').callprop('copy', var.get('result'))
                        return var.get('result')
                    PyJsHoisted_cloneBuffer_.func_name = 'cloneBuffer'
                    var.put('cloneBuffer', PyJsHoisted_cloneBuffer_)
                    @Js
                    def PyJsHoisted_cloneArrayBuffer_(arrayBuffer, this, arguments, var=var):
                        var = Scope({'arrayBuffer':arrayBuffer, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'arrayBuffer'])
                        var.put('result', var.get('arrayBuffer').get('constructor').create(var.get('arrayBuffer').get('byteLength')))
                        var.get('Uint8Array').create(var.get('result')).callprop('set', var.get('Uint8Array').create(var.get('arrayBuffer')))
                        return var.get('result')
                    PyJsHoisted_cloneArrayBuffer_.func_name = 'cloneArrayBuffer'
                    var.put('cloneArrayBuffer', PyJsHoisted_cloneArrayBuffer_)
                    @Js
                    def PyJsHoisted_cloneDataView_(dataView, isDeep, this, arguments, var=var):
                        var = Scope({'dataView':dataView, 'isDeep':isDeep, 'this':this, 'arguments':arguments}, var)
                        var.registers(['buffer', 'isDeep', 'dataView'])
                        var.put('buffer', (var.get('cloneArrayBuffer')(var.get('dataView').get('buffer')) if var.get('isDeep') else var.get('dataView').get('buffer')))
                        return var.get('dataView').get('constructor').create(var.get('buffer'), var.get('dataView').get('byteOffset'), var.get('dataView').get('byteLength'))
                    PyJsHoisted_cloneDataView_.func_name = 'cloneDataView'
                    var.put('cloneDataView', PyJsHoisted_cloneDataView_)
                    @Js
                    def PyJsHoisted_cloneRegExp_(regexp, this, arguments, var=var):
                        var = Scope({'regexp':regexp, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'regexp'])
                        var.put('result', var.get('regexp').get('constructor').create(var.get('regexp').get('source'), var.get('reFlags').callprop('exec', var.get('regexp'))))
                        var.get('result').put('lastIndex', var.get('regexp').get('lastIndex'))
                        return var.get('result')
                    PyJsHoisted_cloneRegExp_.func_name = 'cloneRegExp'
                    var.put('cloneRegExp', PyJsHoisted_cloneRegExp_)
                    @Js
                    def PyJsHoisted_cloneSymbol_(symbol, this, arguments, var=var):
                        var = Scope({'symbol':symbol, 'this':this, 'arguments':arguments}, var)
                        var.registers(['symbol'])
                        return (var.get('Object')(var.get('symbolValueOf').callprop('call', var.get('symbol'))) if var.get('symbolValueOf') else Js({}))
                    PyJsHoisted_cloneSymbol_.func_name = 'cloneSymbol'
                    var.put('cloneSymbol', PyJsHoisted_cloneSymbol_)
                    @Js
                    def PyJsHoisted_cloneTypedArray_(typedArray, isDeep, this, arguments, var=var):
                        var = Scope({'typedArray':typedArray, 'isDeep':isDeep, 'this':this, 'arguments':arguments}, var)
                        var.registers(['buffer', 'typedArray', 'isDeep'])
                        var.put('buffer', (var.get('cloneArrayBuffer')(var.get('typedArray').get('buffer')) if var.get('isDeep') else var.get('typedArray').get('buffer')))
                        return var.get('typedArray').get('constructor').create(var.get('buffer'), var.get('typedArray').get('byteOffset'), var.get('typedArray').get('length'))
                    PyJsHoisted_cloneTypedArray_.func_name = 'cloneTypedArray'
                    var.put('cloneTypedArray', PyJsHoisted_cloneTypedArray_)
                    @Js
                    def PyJsHoisted_compareAscending_(value, other, this, arguments, var=var):
                        var = Scope({'value':value, 'other':other, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'othIsSymbol', 'othIsNull', 'valIsSymbol', 'valIsNull', 'other', 'valIsReflexive', 'othIsReflexive', 'valIsDefined', 'othIsDefined'])
                        if PyJsStrictNeq(var.get('value'),var.get('other')):
                            var.put('valIsDefined', PyJsStrictNeq(var.get('value'),var.get('undefined')))
                            var.put('valIsNull', PyJsStrictEq(var.get('value'),var.get(u"null")))
                            var.put('valIsReflexive', PyJsStrictEq(var.get('value'),var.get('value')))
                            var.put('valIsSymbol', var.get('isSymbol')(var.get('value')))
                            var.put('othIsDefined', PyJsStrictNeq(var.get('other'),var.get('undefined')))
                            var.put('othIsNull', PyJsStrictEq(var.get('other'),var.get(u"null")))
                            var.put('othIsReflexive', PyJsStrictEq(var.get('other'),var.get('other')))
                            var.put('othIsSymbol', var.get('isSymbol')(var.get('other')))
                            def PyJs_LONG_786_(var=var):
                                return ((((((var.get('othIsNull').neg() and var.get('othIsSymbol').neg()) and var.get('valIsSymbol').neg()) and (var.get('value')>var.get('other'))) or ((((var.get('valIsSymbol') and var.get('othIsDefined')) and var.get('othIsReflexive')) and var.get('othIsNull').neg()) and var.get('othIsSymbol').neg())) or ((var.get('valIsNull') and var.get('othIsDefined')) and var.get('othIsReflexive'))) or (var.get('valIsDefined').neg() and var.get('othIsReflexive')))
                            if (PyJs_LONG_786_() or var.get('valIsReflexive').neg()):
                                return Js(1.0)
                            def PyJs_LONG_787_(var=var):
                                return ((((((var.get('valIsNull').neg() and var.get('valIsSymbol').neg()) and var.get('othIsSymbol').neg()) and (var.get('value')<var.get('other'))) or ((((var.get('othIsSymbol') and var.get('valIsDefined')) and var.get('valIsReflexive')) and var.get('valIsNull').neg()) and var.get('valIsSymbol').neg())) or ((var.get('othIsNull') and var.get('valIsDefined')) and var.get('valIsReflexive'))) or (var.get('othIsDefined').neg() and var.get('valIsReflexive')))
                            if (PyJs_LONG_787_() or var.get('othIsReflexive').neg()):
                                return (-Js(1.0))
                        return Js(0.0)
                    PyJsHoisted_compareAscending_.func_name = 'compareAscending'
                    var.put('compareAscending', PyJsHoisted_compareAscending_)
                    @Js
                    def PyJsHoisted_compareMultiple_(object, other, orders, this, arguments, var=var):
                        var = Scope({'object':object, 'other':other, 'orders':orders, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'object', 'length', 'index', 'objCriteria', 'order', 'orders', 'other', 'othCriteria', 'ordersLength'])
                        var.put('index', (-Js(1.0)))
                        var.put('objCriteria', var.get('object').get('criteria'))
                        var.put('othCriteria', var.get('other').get('criteria'))
                        var.put('length', var.get('objCriteria').get('length'))
                        var.put('ordersLength', var.get('orders').get('length'))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('result', var.get('compareAscending')(var.get('objCriteria').get(var.get('index')), var.get('othCriteria').get(var.get('index'))))
                            if var.get('result'):
                                if (var.get('index')>=var.get('ordersLength')):
                                    return var.get('result')
                                var.put('order', var.get('orders').get(var.get('index')))
                                return (var.get('result')*((-Js(1.0)) if (var.get('order')==Js('desc')) else Js(1.0)))
                        return (var.get('object').get('index')-var.get('other').get('index'))
                    PyJsHoisted_compareMultiple_.func_name = 'compareMultiple'
                    var.put('compareMultiple', PyJsHoisted_compareMultiple_)
                    @Js
                    def PyJsHoisted_composeArgs_(args, partials, holders, isCurried, this, arguments, var=var):
                        var = Scope({'args':args, 'partials':partials, 'holders':holders, 'isCurried':isCurried, 'this':this, 'arguments':arguments}, var)
                        var.registers(['args', 'leftIndex', 'result', 'holders', 'isCurried', 'holdersLength', 'argsIndex', 'isUncurried', 'partials', 'argsLength', 'leftLength', 'rangeLength'])
                        var.put('argsIndex', (-Js(1.0)))
                        var.put('argsLength', var.get('args').get('length'))
                        var.put('holdersLength', var.get('holders').get('length'))
                        var.put('leftIndex', (-Js(1.0)))
                        var.put('leftLength', var.get('partials').get('length'))
                        var.put('rangeLength', var.get('nativeMax')((var.get('argsLength')-var.get('holdersLength')), Js(0.0)))
                        var.put('result', var.get('Array')((var.get('leftLength')+var.get('rangeLength'))))
                        var.put('isUncurried', var.get('isCurried').neg())
                        while (var.put('leftIndex',Js(var.get('leftIndex').to_number())+Js(1))<var.get('leftLength')):
                            var.get('result').put(var.get('leftIndex'), var.get('partials').get(var.get('leftIndex')))
                        while (var.put('argsIndex',Js(var.get('argsIndex').to_number())+Js(1))<var.get('holdersLength')):
                            if (var.get('isUncurried') or (var.get('argsIndex')<var.get('argsLength'))):
                                var.get('result').put(var.get('holders').get(var.get('argsIndex')), var.get('args').get(var.get('argsIndex')))
                        while (var.put('rangeLength',Js(var.get('rangeLength').to_number())-Js(1))+Js(1)):
                            var.get('result').put((var.put('leftIndex',Js(var.get('leftIndex').to_number())+Js(1))-Js(1)), var.get('args').get((var.put('argsIndex',Js(var.get('argsIndex').to_number())+Js(1))-Js(1))))
                        return var.get('result')
                    PyJsHoisted_composeArgs_.func_name = 'composeArgs'
                    var.put('composeArgs', PyJsHoisted_composeArgs_)
                    @Js
                    def PyJsHoisted_composeArgsRight_(args, partials, holders, isCurried, this, arguments, var=var):
                        var = Scope({'args':args, 'partials':partials, 'holders':holders, 'isCurried':isCurried, 'this':this, 'arguments':arguments}, var)
                        var.registers(['args', 'result', 'rangeLength', 'holders', 'isCurried', 'holdersLength', 'argsIndex', 'isUncurried', 'holdersIndex', 'offset', 'partials', 'argsLength', 'rightLength', 'rightIndex'])
                        var.put('argsIndex', (-Js(1.0)))
                        var.put('argsLength', var.get('args').get('length'))
                        var.put('holdersIndex', (-Js(1.0)))
                        var.put('holdersLength', var.get('holders').get('length'))
                        var.put('rightIndex', (-Js(1.0)))
                        var.put('rightLength', var.get('partials').get('length'))
                        var.put('rangeLength', var.get('nativeMax')((var.get('argsLength')-var.get('holdersLength')), Js(0.0)))
                        var.put('result', var.get('Array')((var.get('rangeLength')+var.get('rightLength'))))
                        var.put('isUncurried', var.get('isCurried').neg())
                        while (var.put('argsIndex',Js(var.get('argsIndex').to_number())+Js(1))<var.get('rangeLength')):
                            var.get('result').put(var.get('argsIndex'), var.get('args').get(var.get('argsIndex')))
                        var.put('offset', var.get('argsIndex'))
                        while (var.put('rightIndex',Js(var.get('rightIndex').to_number())+Js(1))<var.get('rightLength')):
                            var.get('result').put((var.get('offset')+var.get('rightIndex')), var.get('partials').get(var.get('rightIndex')))
                        while (var.put('holdersIndex',Js(var.get('holdersIndex').to_number())+Js(1))<var.get('holdersLength')):
                            if (var.get('isUncurried') or (var.get('argsIndex')<var.get('argsLength'))):
                                var.get('result').put((var.get('offset')+var.get('holders').get(var.get('holdersIndex'))), var.get('args').get((var.put('argsIndex',Js(var.get('argsIndex').to_number())+Js(1))-Js(1))))
                        return var.get('result')
                    PyJsHoisted_composeArgsRight_.func_name = 'composeArgsRight'
                    var.put('composeArgsRight', PyJsHoisted_composeArgsRight_)
                    @Js
                    def PyJsHoisted_copyArray_(source, array, this, arguments, var=var):
                        var = Scope({'source':source, 'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['source', 'array', 'length', 'index'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('source').get('length'))
                        (var.get('array') or var.put('array', var.get('Array')(var.get('length'))))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.get('array').put(var.get('index'), var.get('source').get(var.get('index')))
                        return var.get('array')
                    PyJsHoisted_copyArray_.func_name = 'copyArray'
                    var.put('copyArray', PyJsHoisted_copyArray_)
                    @Js
                    def PyJsHoisted_copyObject_(source, props, object, customizer, this, arguments, var=var):
                        var = Scope({'source':source, 'props':props, 'object':object, 'customizer':customizer, 'this':this, 'arguments':arguments}, var)
                        var.registers(['newValue', 'props', 'object', 'isNew', 'length', 'index', 'source', 'customizer', 'key'])
                        var.put('isNew', var.get('object').neg())
                        (var.get('object') or var.put('object', Js({})))
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('props').get('length'))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('key', var.get('props').get(var.get('index')))
                            var.put('newValue', (var.get('customizer')(var.get('object').get(var.get('key')), var.get('source').get(var.get('key')), var.get('key'), var.get('object'), var.get('source')) if var.get('customizer') else var.get('undefined')))
                            if PyJsStrictEq(var.get('newValue'),var.get('undefined')):
                                var.put('newValue', var.get('source').get(var.get('key')))
                            if var.get('isNew'):
                                var.get('baseAssignValue')(var.get('object'), var.get('key'), var.get('newValue'))
                            else:
                                var.get('assignValue')(var.get('object'), var.get('key'), var.get('newValue'))
                        return var.get('object')
                    PyJsHoisted_copyObject_.func_name = 'copyObject'
                    var.put('copyObject', PyJsHoisted_copyObject_)
                    @Js
                    def PyJsHoisted_copySymbols_(source, object, this, arguments, var=var):
                        var = Scope({'source':source, 'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'source'])
                        return var.get('copyObject')(var.get('source'), var.get('getSymbols')(var.get('source')), var.get('object'))
                    PyJsHoisted_copySymbols_.func_name = 'copySymbols'
                    var.put('copySymbols', PyJsHoisted_copySymbols_)
                    @Js
                    def PyJsHoisted_copySymbolsIn_(source, object, this, arguments, var=var):
                        var = Scope({'source':source, 'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'source'])
                        return var.get('copyObject')(var.get('source'), var.get('getSymbolsIn')(var.get('source')), var.get('object'))
                    PyJsHoisted_copySymbolsIn_.func_name = 'copySymbolsIn'
                    var.put('copySymbolsIn', PyJsHoisted_copySymbolsIn_)
                    @Js
                    def PyJsHoisted_createAggregator_(setter, initializer, this, arguments, var=var):
                        var = Scope({'setter':setter, 'initializer':initializer, 'this':this, 'arguments':arguments}, var)
                        var.registers(['initializer', 'setter'])
                        @Js
                        def PyJs_anonymous_788_(collection, iteratee, this, arguments, var=var):
                            var = Scope({'collection':collection, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                            var.registers(['accumulator', 'iteratee', 'func', 'collection'])
                            var.put('func', (var.get('arrayAggregator') if var.get('isArray')(var.get('collection')) else var.get('baseAggregator')))
                            var.put('accumulator', (var.get('initializer')() if var.get('initializer') else Js({})))
                            return var.get('func')(var.get('collection'), var.get('setter'), var.get('getIteratee')(var.get('iteratee'), Js(2.0)), var.get('accumulator'))
                        PyJs_anonymous_788_._set_name('anonymous')
                        return PyJs_anonymous_788_
                    PyJsHoisted_createAggregator_.func_name = 'createAggregator'
                    var.put('createAggregator', PyJsHoisted_createAggregator_)
                    @Js
                    def PyJsHoisted_createAssigner_(assigner, this, arguments, var=var):
                        var = Scope({'assigner':assigner, 'this':this, 'arguments':arguments}, var)
                        var.registers(['assigner'])
                        @Js
                        def PyJs_anonymous_789_(object, sources, this, arguments, var=var):
                            var = Scope({'object':object, 'sources':sources, 'this':this, 'arguments':arguments}, var)
                            var.registers(['object', 'length', 'index', 'sources', 'source', 'customizer', 'guard'])
                            var.put('index', (-Js(1.0)))
                            var.put('length', var.get('sources').get('length'))
                            var.put('customizer', (var.get('sources').get((var.get('length')-Js(1.0))) if (var.get('length')>Js(1.0)) else var.get('undefined')))
                            var.put('guard', (var.get('sources').get('2') if (var.get('length')>Js(2.0)) else var.get('undefined')))
                            var.put('customizer', (PyJsComma((var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)),var.get('customizer')) if ((var.get('assigner').get('length')>Js(3.0)) and (var.get('customizer',throw=False).typeof()==Js('function'))) else var.get('undefined')))
                            if (var.get('guard') and var.get('isIterateeCall')(var.get('sources').get('0'), var.get('sources').get('1'), var.get('guard'))):
                                var.put('customizer', (var.get('undefined') if (var.get('length')<Js(3.0)) else var.get('customizer')))
                                var.put('length', Js(1.0))
                            var.put('object', var.get('Object')(var.get('object')))
                            while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                                var.put('source', var.get('sources').get(var.get('index')))
                                if var.get('source'):
                                    var.get('assigner')(var.get('object'), var.get('source'), var.get('index'), var.get('customizer'))
                            return var.get('object')
                        PyJs_anonymous_789_._set_name('anonymous')
                        return var.get('baseRest')(PyJs_anonymous_789_)
                    PyJsHoisted_createAssigner_.func_name = 'createAssigner'
                    var.put('createAssigner', PyJsHoisted_createAssigner_)
                    @Js
                    def PyJsHoisted_createBaseEach_(eachFunc, fromRight, this, arguments, var=var):
                        var = Scope({'eachFunc':eachFunc, 'fromRight':fromRight, 'this':this, 'arguments':arguments}, var)
                        var.registers(['fromRight', 'eachFunc'])
                        @Js
                        def PyJs_anonymous_790_(collection, iteratee, this, arguments, var=var):
                            var = Scope({'collection':collection, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                            var.registers(['iterable', 'collection', 'length', 'index', 'iteratee'])
                            if (var.get('collection')==var.get(u"null")):
                                return var.get('collection')
                            if var.get('isArrayLike')(var.get('collection')).neg():
                                return var.get('eachFunc')(var.get('collection'), var.get('iteratee'))
                            var.put('length', var.get('collection').get('length'))
                            var.put('index', (var.get('length') if var.get('fromRight') else (-Js(1.0))))
                            var.put('iterable', var.get('Object')(var.get('collection')))
                            while ((var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1)) if var.get('fromRight') else (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length'))):
                                if PyJsStrictEq(var.get('iteratee')(var.get('iterable').get(var.get('index')), var.get('index'), var.get('iterable')),Js(False)):
                                    break
                            return var.get('collection')
                        PyJs_anonymous_790_._set_name('anonymous')
                        return PyJs_anonymous_790_
                    PyJsHoisted_createBaseEach_.func_name = 'createBaseEach'
                    var.put('createBaseEach', PyJsHoisted_createBaseEach_)
                    @Js
                    def PyJsHoisted_createBaseFor_(fromRight, this, arguments, var=var):
                        var = Scope({'fromRight':fromRight, 'this':this, 'arguments':arguments}, var)
                        var.registers(['fromRight'])
                        @Js
                        def PyJs_anonymous_791_(object, iteratee, keysFunc, this, arguments, var=var):
                            var = Scope({'object':object, 'iteratee':iteratee, 'keysFunc':keysFunc, 'this':this, 'arguments':arguments}, var)
                            var.registers(['iterable', 'keysFunc', 'props', 'object', 'length', 'index', 'iteratee', 'key'])
                            var.put('index', (-Js(1.0)))
                            var.put('iterable', var.get('Object')(var.get('object')))
                            var.put('props', var.get('keysFunc')(var.get('object')))
                            var.put('length', var.get('props').get('length'))
                            while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
                                var.put('key', var.get('props').get((var.get('length') if var.get('fromRight') else var.put('index',Js(var.get('index').to_number())+Js(1)))))
                                if PyJsStrictEq(var.get('iteratee')(var.get('iterable').get(var.get('key')), var.get('key'), var.get('iterable')),Js(False)):
                                    break
                            return var.get('object')
                        PyJs_anonymous_791_._set_name('anonymous')
                        return PyJs_anonymous_791_
                    PyJsHoisted_createBaseFor_.func_name = 'createBaseFor'
                    var.put('createBaseFor', PyJsHoisted_createBaseFor_)
                    @Js
                    def PyJsHoisted_createBind_(func, bitmask, thisArg, this, arguments, var=var):
                        var = Scope({'func':func, 'bitmask':bitmask, 'thisArg':thisArg, 'this':this, 'arguments':arguments}, var)
                        var.registers(['Ctor', 'func', 'wrapper', 'bitmask', 'isBind', 'thisArg'])
                        @Js
                        def PyJsHoisted_wrapper_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers(['fn'])
                            var.put('fn', (var.get('Ctor') if ((var.get(u"this") and PyJsStrictNeq(var.get(u"this"),var.get('root'))) and var.get(u"this").instanceof(var.get('wrapper'))) else var.get('func')))
                            return var.get('fn').callprop('apply', (var.get('thisArg') if var.get('isBind') else var.get(u"this")), var.get('arguments'))
                        PyJsHoisted_wrapper_.func_name = 'wrapper'
                        var.put('wrapper', PyJsHoisted_wrapper_)
                        var.put('isBind', (var.get('bitmask')&var.get('WRAP_BIND_FLAG')))
                        var.put('Ctor', var.get('createCtor')(var.get('func')))
                        pass
                        return var.get('wrapper')
                    PyJsHoisted_createBind_.func_name = 'createBind'
                    var.put('createBind', PyJsHoisted_createBind_)
                    @Js
                    def PyJsHoisted_createCaseFirst_(methodName, this, arguments, var=var):
                        var = Scope({'methodName':methodName, 'this':this, 'arguments':arguments}, var)
                        var.registers(['methodName'])
                        @Js
                        def PyJs_anonymous_792_(string, this, arguments, var=var):
                            var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                            var.registers(['string', 'chr', 'trailing', 'strSymbols'])
                            var.put('string', var.get('toString')(var.get('string')))
                            var.put('strSymbols', (var.get('stringToArray')(var.get('string')) if var.get('hasUnicode')(var.get('string')) else var.get('undefined')))
                            var.put('chr', (var.get('strSymbols').get('0') if var.get('strSymbols') else var.get('string').callprop('charAt', Js(0.0))))
                            var.put('trailing', (var.get('castSlice')(var.get('strSymbols'), Js(1.0)).callprop('join', Js('')) if var.get('strSymbols') else var.get('string').callprop('slice', Js(1.0))))
                            return (var.get('chr').callprop(var.get('methodName'))+var.get('trailing'))
                        PyJs_anonymous_792_._set_name('anonymous')
                        return PyJs_anonymous_792_
                    PyJsHoisted_createCaseFirst_.func_name = 'createCaseFirst'
                    var.put('createCaseFirst', PyJsHoisted_createCaseFirst_)
                    @Js
                    def PyJsHoisted_createCompounder_(callback, this, arguments, var=var):
                        var = Scope({'callback':callback, 'this':this, 'arguments':arguments}, var)
                        var.registers(['callback'])
                        @Js
                        def PyJs_anonymous_793_(string, this, arguments, var=var):
                            var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                            var.registers(['string'])
                            return var.get('arrayReduce')(var.get('words')(var.get('deburr')(var.get('string')).callprop('replace', var.get('reApos'), Js(''))), var.get('callback'), Js(''))
                        PyJs_anonymous_793_._set_name('anonymous')
                        return PyJs_anonymous_793_
                    PyJsHoisted_createCompounder_.func_name = 'createCompounder'
                    var.put('createCompounder', PyJsHoisted_createCompounder_)
                    @Js
                    def PyJsHoisted_createCtor_(Ctor, this, arguments, var=var):
                        var = Scope({'Ctor':Ctor, 'this':this, 'arguments':arguments}, var)
                        var.registers(['Ctor'])
                        @Js
                        def PyJs_anonymous_794_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers(['args', 'result', 'thisBinding'])
                            var.put('args', var.get('arguments'))
                            while 1:
                                SWITCHED = False
                                CONDITION = (var.get('args').get('length'))
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(0.0)):
                                    SWITCHED = True
                                    return var.get('Ctor').create()
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                                    SWITCHED = True
                                    return var.get('Ctor').create(var.get('args').get('0'))
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                                    SWITCHED = True
                                    return var.get('Ctor').create(var.get('args').get('0'), var.get('args').get('1'))
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                                    SWITCHED = True
                                    return var.get('Ctor').create(var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2'))
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(4.0)):
                                    SWITCHED = True
                                    return var.get('Ctor').create(var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2'), var.get('args').get('3'))
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(5.0)):
                                    SWITCHED = True
                                    return var.get('Ctor').create(var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2'), var.get('args').get('3'), var.get('args').get('4'))
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(6.0)):
                                    SWITCHED = True
                                    return var.get('Ctor').create(var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2'), var.get('args').get('3'), var.get('args').get('4'), var.get('args').get('5'))
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(7.0)):
                                    SWITCHED = True
                                    return var.get('Ctor').create(var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2'), var.get('args').get('3'), var.get('args').get('4'), var.get('args').get('5'), var.get('args').get('6'))
                                SWITCHED = True
                                break
                            var.put('thisBinding', var.get('baseCreate')(var.get('Ctor').get('prototype')))
                            var.put('result', var.get('Ctor').callprop('apply', var.get('thisBinding'), var.get('args')))
                            return (var.get('result') if var.get('isObject')(var.get('result')) else var.get('thisBinding'))
                        PyJs_anonymous_794_._set_name('anonymous')
                        return PyJs_anonymous_794_
                    PyJsHoisted_createCtor_.func_name = 'createCtor'
                    var.put('createCtor', PyJsHoisted_createCtor_)
                    @Js
                    def PyJsHoisted_createCurry_(func, bitmask, arity, this, arguments, var=var):
                        var = Scope({'func':func, 'bitmask':bitmask, 'arity':arity, 'this':this, 'arguments':arguments}, var)
                        var.registers(['Ctor', 'func', 'wrapper', 'bitmask', 'arity'])
                        @Js
                        def PyJsHoisted_wrapper_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers(['args', 'holders', 'length', 'index', 'fn', 'placeholder'])
                            var.put('length', var.get('arguments').get('length'))
                            var.put('args', var.get('Array')(var.get('length')))
                            var.put('index', var.get('length'))
                            var.put('placeholder', var.get('getHolder')(var.get('wrapper')))
                            while (var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1)):
                                var.get('args').put(var.get('index'), var.get('arguments').get(var.get('index')))
                            var.put('holders', (Js([]) if (((var.get('length')<Js(3.0)) and PyJsStrictNeq(var.get('args').get('0'),var.get('placeholder'))) and PyJsStrictNeq(var.get('args').get((var.get('length')-Js(1.0))),var.get('placeholder'))) else var.get('replaceHolders')(var.get('args'), var.get('placeholder'))))
                            var.put('length', var.get('holders').get('length'), '-')
                            if (var.get('length')<var.get('arity')):
                                return var.get('createRecurry')(var.get('func'), var.get('bitmask'), var.get('createHybrid'), var.get('wrapper').get('placeholder'), var.get('undefined'), var.get('args'), var.get('holders'), var.get('undefined'), var.get('undefined'), (var.get('arity')-var.get('length')))
                            var.put('fn', (var.get('Ctor') if ((var.get(u"this") and PyJsStrictNeq(var.get(u"this"),var.get('root'))) and var.get(u"this").instanceof(var.get('wrapper'))) else var.get('func')))
                            return var.get('apply')(var.get('fn'), var.get(u"this"), var.get('args'))
                        PyJsHoisted_wrapper_.func_name = 'wrapper'
                        var.put('wrapper', PyJsHoisted_wrapper_)
                        var.put('Ctor', var.get('createCtor')(var.get('func')))
                        pass
                        return var.get('wrapper')
                    PyJsHoisted_createCurry_.func_name = 'createCurry'
                    var.put('createCurry', PyJsHoisted_createCurry_)
                    @Js
                    def PyJsHoisted_createFind_(findIndexFunc, this, arguments, var=var):
                        var = Scope({'findIndexFunc':findIndexFunc, 'this':this, 'arguments':arguments}, var)
                        var.registers(['findIndexFunc'])
                        @Js
                        def PyJs_anonymous_795_(collection, predicate, fromIndex, this, arguments, var=var):
                            var = Scope({'collection':collection, 'predicate':predicate, 'fromIndex':fromIndex, 'this':this, 'arguments':arguments}, var)
                            var.registers(['iterable', 'predicate', 'collection', 'fromIndex', 'index', 'iteratee'])
                            var.put('iterable', var.get('Object')(var.get('collection')))
                            if var.get('isArrayLike')(var.get('collection')).neg():
                                var.put('iteratee', var.get('getIteratee')(var.get('predicate'), Js(3.0)))
                                var.put('collection', var.get('keys')(var.get('collection')))
                                @Js
                                def PyJs_anonymous_796_(key, this, arguments, var=var):
                                    var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['key'])
                                    return var.get('iteratee')(var.get('iterable').get(var.get('key')), var.get('key'), var.get('iterable'))
                                PyJs_anonymous_796_._set_name('anonymous')
                                var.put('predicate', PyJs_anonymous_796_)
                            var.put('index', var.get('findIndexFunc')(var.get('collection'), var.get('predicate'), var.get('fromIndex')))
                            return (var.get('iterable').get((var.get('collection').get(var.get('index')) if var.get('iteratee') else var.get('index'))) if (var.get('index')>(-Js(1.0))) else var.get('undefined'))
                        PyJs_anonymous_795_._set_name('anonymous')
                        return PyJs_anonymous_795_
                    PyJsHoisted_createFind_.func_name = 'createFind'
                    var.put('createFind', PyJsHoisted_createFind_)
                    @Js
                    def PyJsHoisted_createFlow_(fromRight, this, arguments, var=var):
                        var = Scope({'fromRight':fromRight, 'this':this, 'arguments':arguments}, var)
                        var.registers(['fromRight'])
                        @Js
                        def PyJs_anonymous_797_(funcs, this, arguments, var=var):
                            var = Scope({'funcs':funcs, 'this':this, 'arguments':arguments}, var)
                            var.registers(['func', 'prereq', 'length', 'index', 'wrapper', 'funcs', 'funcName', 'data'])
                            var.put('length', var.get('funcs').get('length'))
                            var.put('index', var.get('length'))
                            var.put('prereq', var.get('LodashWrapper').get('prototype').get('thru'))
                            if var.get('fromRight'):
                                var.get('funcs').callprop('reverse')
                            while (var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1)):
                                var.put('func', var.get('funcs').get(var.get('index')))
                                if (var.get('func',throw=False).typeof()!=Js('function')):
                                    PyJsTempException = JsToPyException(var.get('TypeError').create(var.get('FUNC_ERROR_TEXT')))
                                    raise PyJsTempException
                                if ((var.get('prereq') and var.get('wrapper').neg()) and (var.get('getFuncName')(var.get('func'))==Js('wrapper'))):
                                    var.put('wrapper', var.get('LodashWrapper').create(Js([]), Js(True)))
                            var.put('index', (var.get('index') if var.get('wrapper') else var.get('length')))
                            while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                                var.put('func', var.get('funcs').get(var.get('index')))
                                var.put('funcName', var.get('getFuncName')(var.get('func')))
                                var.put('data', (var.get('getData')(var.get('func')) if (var.get('funcName')==Js('wrapper')) else var.get('undefined')))
                                if ((((var.get('data') and var.get('isLaziable')(var.get('data').get('0'))) and (var.get('data').get('1')==(((var.get('WRAP_ARY_FLAG')|var.get('WRAP_CURRY_FLAG'))|var.get('WRAP_PARTIAL_FLAG'))|var.get('WRAP_REARG_FLAG')))) and var.get('data').get('4').get('length').neg()) and (var.get('data').get('9')==Js(1.0))):
                                    var.put('wrapper', var.get('wrapper').get(var.get('getFuncName')(var.get('data').get('0'))).callprop('apply', var.get('wrapper'), var.get('data').get('3')))
                                else:
                                    var.put('wrapper', (var.get('wrapper').callprop(var.get('funcName')) if ((var.get('func').get('length')==Js(1.0)) and var.get('isLaziable')(var.get('func'))) else var.get('wrapper').callprop('thru', var.get('func'))))
                            @Js
                            def PyJs_anonymous_798_(this, arguments, var=var):
                                var = Scope({'this':this, 'arguments':arguments}, var)
                                var.registers(['args', 'result', 'value', 'index'])
                                var.put('args', var.get('arguments'))
                                var.put('value', var.get('args').get('0'))
                                if ((var.get('wrapper') and (var.get('args').get('length')==Js(1.0))) and var.get('isArray')(var.get('value'))):
                                    return var.get('wrapper').callprop('plant', var.get('value')).callprop('value')
                                var.put('index', Js(0.0))
                                var.put('result', (var.get('funcs').get(var.get('index')).callprop('apply', var.get(u"this"), var.get('args')) if var.get('length') else var.get('value')))
                                while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                                    var.put('result', var.get('funcs').get(var.get('index')).callprop('call', var.get(u"this"), var.get('result')))
                                return var.get('result')
                            PyJs_anonymous_798_._set_name('anonymous')
                            return PyJs_anonymous_798_
                        PyJs_anonymous_797_._set_name('anonymous')
                        return var.get('flatRest')(PyJs_anonymous_797_)
                    PyJsHoisted_createFlow_.func_name = 'createFlow'
                    var.put('createFlow', PyJsHoisted_createFlow_)
                    @Js
                    def PyJsHoisted_createHybrid_(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity, this, arguments, var=var):
                        var = Scope({'func':func, 'bitmask':bitmask, 'thisArg':thisArg, 'partials':partials, 'holders':holders, 'partialsRight':partialsRight, 'holdersRight':holdersRight, 'argPos':argPos, 'ary':ary, 'arity':arity, 'this':this, 'arguments':arguments}, var)
                        var.registers(['Ctor', 'partialsRight', 'holders', 'ary', 'isFlip', 'isCurried', 'isAry', 'func', 'isBindKey', 'partials', 'wrapper', 'bitmask', 'isBind', 'holdersRight', 'argPos', 'thisArg', 'arity'])
                        @Js
                        def PyJsHoisted_wrapper_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers(['args', 'holdersCount', 'newHolders', 'length', 'index', 'fn', 'placeholder', 'thisBinding'])
                            var.put('length', var.get('arguments').get('length'))
                            var.put('args', var.get('Array')(var.get('length')))
                            var.put('index', var.get('length'))
                            while (var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1)):
                                var.get('args').put(var.get('index'), var.get('arguments').get(var.get('index')))
                            if var.get('isCurried'):
                                var.put('placeholder', var.get('getHolder')(var.get('wrapper')))
                                var.put('holdersCount', var.get('countHolders')(var.get('args'), var.get('placeholder')))
                            if var.get('partials'):
                                var.put('args', var.get('composeArgs')(var.get('args'), var.get('partials'), var.get('holders'), var.get('isCurried')))
                            if var.get('partialsRight'):
                                var.put('args', var.get('composeArgsRight')(var.get('args'), var.get('partialsRight'), var.get('holdersRight'), var.get('isCurried')))
                            var.put('length', var.get('holdersCount'), '-')
                            if (var.get('isCurried') and (var.get('length')<var.get('arity'))):
                                var.put('newHolders', var.get('replaceHolders')(var.get('args'), var.get('placeholder')))
                                return var.get('createRecurry')(var.get('func'), var.get('bitmask'), var.get('createHybrid'), var.get('wrapper').get('placeholder'), var.get('thisArg'), var.get('args'), var.get('newHolders'), var.get('argPos'), var.get('ary'), (var.get('arity')-var.get('length')))
                            var.put('thisBinding', (var.get('thisArg') if var.get('isBind') else var.get(u"this")))
                            var.put('fn', (var.get('thisBinding').get(var.get('func')) if var.get('isBindKey') else var.get('func')))
                            var.put('length', var.get('args').get('length'))
                            if var.get('argPos'):
                                var.put('args', var.get('reorder')(var.get('args'), var.get('argPos')))
                            else:
                                if (var.get('isFlip') and (var.get('length')>Js(1.0))):
                                    var.get('args').callprop('reverse')
                            if (var.get('isAry') and (var.get('ary')<var.get('length'))):
                                var.get('args').put('length', var.get('ary'))
                            if ((var.get(u"this") and PyJsStrictNeq(var.get(u"this"),var.get('root'))) and var.get(u"this").instanceof(var.get('wrapper'))):
                                var.put('fn', (var.get('Ctor') or var.get('createCtor')(var.get('fn'))))
                            return var.get('fn').callprop('apply', var.get('thisBinding'), var.get('args'))
                        PyJsHoisted_wrapper_.func_name = 'wrapper'
                        var.put('wrapper', PyJsHoisted_wrapper_)
                        var.put('isAry', (var.get('bitmask')&var.get('WRAP_ARY_FLAG')))
                        var.put('isBind', (var.get('bitmask')&var.get('WRAP_BIND_FLAG')))
                        var.put('isBindKey', (var.get('bitmask')&var.get('WRAP_BIND_KEY_FLAG')))
                        var.put('isCurried', (var.get('bitmask')&(var.get('WRAP_CURRY_FLAG')|var.get('WRAP_CURRY_RIGHT_FLAG'))))
                        var.put('isFlip', (var.get('bitmask')&var.get('WRAP_FLIP_FLAG')))
                        var.put('Ctor', (var.get('undefined') if var.get('isBindKey') else var.get('createCtor')(var.get('func'))))
                        pass
                        return var.get('wrapper')
                    PyJsHoisted_createHybrid_.func_name = 'createHybrid'
                    var.put('createHybrid', PyJsHoisted_createHybrid_)
                    @Js
                    def PyJsHoisted_createInverter_(setter, toIteratee, this, arguments, var=var):
                        var = Scope({'setter':setter, 'toIteratee':toIteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['toIteratee', 'setter'])
                        @Js
                        def PyJs_anonymous_799_(object, iteratee, this, arguments, var=var):
                            var = Scope({'object':object, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                            var.registers(['object', 'iteratee'])
                            return var.get('baseInverter')(var.get('object'), var.get('setter'), var.get('toIteratee')(var.get('iteratee')), Js({}))
                        PyJs_anonymous_799_._set_name('anonymous')
                        return PyJs_anonymous_799_
                    PyJsHoisted_createInverter_.func_name = 'createInverter'
                    var.put('createInverter', PyJsHoisted_createInverter_)
                    @Js
                    def PyJsHoisted_createMathOperation_(operator, defaultValue, this, arguments, var=var):
                        var = Scope({'operator':operator, 'defaultValue':defaultValue, 'this':this, 'arguments':arguments}, var)
                        var.registers(['operator', 'defaultValue'])
                        @Js
                        def PyJs_anonymous_800_(value, other, this, arguments, var=var):
                            var = Scope({'value':value, 'other':other, 'this':this, 'arguments':arguments}, var)
                            var.registers(['result', 'value', 'other'])
                            pass
                            if (PyJsStrictEq(var.get('value'),var.get('undefined')) and PyJsStrictEq(var.get('other'),var.get('undefined'))):
                                return var.get('defaultValue')
                            if PyJsStrictNeq(var.get('value'),var.get('undefined')):
                                var.put('result', var.get('value'))
                            if PyJsStrictNeq(var.get('other'),var.get('undefined')):
                                if PyJsStrictEq(var.get('result'),var.get('undefined')):
                                    return var.get('other')
                                if ((var.get('value',throw=False).typeof()==Js('string')) or (var.get('other',throw=False).typeof()==Js('string'))):
                                    var.put('value', var.get('baseToString')(var.get('value')))
                                    var.put('other', var.get('baseToString')(var.get('other')))
                                else:
                                    var.put('value', var.get('baseToNumber')(var.get('value')))
                                    var.put('other', var.get('baseToNumber')(var.get('other')))
                                var.put('result', var.get('operator')(var.get('value'), var.get('other')))
                            return var.get('result')
                        PyJs_anonymous_800_._set_name('anonymous')
                        return PyJs_anonymous_800_
                    PyJsHoisted_createMathOperation_.func_name = 'createMathOperation'
                    var.put('createMathOperation', PyJsHoisted_createMathOperation_)
                    @Js
                    def PyJsHoisted_createOver_(arrayFunc, this, arguments, var=var):
                        var = Scope({'arrayFunc':arrayFunc, 'this':this, 'arguments':arguments}, var)
                        var.registers(['arrayFunc'])
                        @Js
                        def PyJs_anonymous_801_(iteratees, this, arguments, var=var):
                            var = Scope({'iteratees':iteratees, 'this':this, 'arguments':arguments}, var)
                            var.registers(['iteratees'])
                            var.put('iteratees', var.get('arrayMap')(var.get('iteratees'), var.get('baseUnary')(var.get('getIteratee')())))
                            @Js
                            def PyJs_anonymous_802_(args, this, arguments, var=var):
                                var = Scope({'args':args, 'this':this, 'arguments':arguments}, var)
                                var.registers(['args', 'thisArg'])
                                var.put('thisArg', var.get(u"this"))
                                @Js
                                def PyJs_anonymous_803_(iteratee, this, arguments, var=var):
                                    var = Scope({'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['iteratee'])
                                    return var.get('apply')(var.get('iteratee'), var.get('thisArg'), var.get('args'))
                                PyJs_anonymous_803_._set_name('anonymous')
                                return var.get('arrayFunc')(var.get('iteratees'), PyJs_anonymous_803_)
                            PyJs_anonymous_802_._set_name('anonymous')
                            return var.get('baseRest')(PyJs_anonymous_802_)
                        PyJs_anonymous_801_._set_name('anonymous')
                        return var.get('flatRest')(PyJs_anonymous_801_)
                    PyJsHoisted_createOver_.func_name = 'createOver'
                    var.put('createOver', PyJsHoisted_createOver_)
                    @Js
                    def PyJsHoisted_createPadding_(length, chars, this, arguments, var=var):
                        var = Scope({'length':length, 'chars':chars, 'this':this, 'arguments':arguments}, var)
                        var.registers(['charsLength', 'result', 'chars', 'length'])
                        var.put('chars', (Js(' ') if PyJsStrictEq(var.get('chars'),var.get('undefined')) else var.get('baseToString')(var.get('chars'))))
                        var.put('charsLength', var.get('chars').get('length'))
                        if (var.get('charsLength')<Js(2.0)):
                            return (var.get('baseRepeat')(var.get('chars'), var.get('length')) if var.get('charsLength') else var.get('chars'))
                        var.put('result', var.get('baseRepeat')(var.get('chars'), var.get('nativeCeil')((var.get('length')/var.get('stringSize')(var.get('chars'))))))
                        return (var.get('castSlice')(var.get('stringToArray')(var.get('result')), Js(0.0), var.get('length')).callprop('join', Js('')) if var.get('hasUnicode')(var.get('chars')) else var.get('result').callprop('slice', Js(0.0), var.get('length')))
                    PyJsHoisted_createPadding_.func_name = 'createPadding'
                    var.put('createPadding', PyJsHoisted_createPadding_)
                    @Js
                    def PyJsHoisted_createPartial_(func, bitmask, thisArg, partials, this, arguments, var=var):
                        var = Scope({'func':func, 'bitmask':bitmask, 'thisArg':thisArg, 'partials':partials, 'this':this, 'arguments':arguments}, var)
                        var.registers(['Ctor', 'func', 'partials', 'wrapper', 'bitmask', 'isBind', 'thisArg'])
                        @Js
                        def PyJsHoisted_wrapper_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers(['args', 'leftIndex', 'argsIndex', 'fn', 'argsLength', 'leftLength'])
                            var.put('argsIndex', (-Js(1.0)))
                            var.put('argsLength', var.get('arguments').get('length'))
                            var.put('leftIndex', (-Js(1.0)))
                            var.put('leftLength', var.get('partials').get('length'))
                            var.put('args', var.get('Array')((var.get('leftLength')+var.get('argsLength'))))
                            var.put('fn', (var.get('Ctor') if ((var.get(u"this") and PyJsStrictNeq(var.get(u"this"),var.get('root'))) and var.get(u"this").instanceof(var.get('wrapper'))) else var.get('func')))
                            while (var.put('leftIndex',Js(var.get('leftIndex').to_number())+Js(1))<var.get('leftLength')):
                                var.get('args').put(var.get('leftIndex'), var.get('partials').get(var.get('leftIndex')))
                            while (var.put('argsLength',Js(var.get('argsLength').to_number())-Js(1))+Js(1)):
                                var.get('args').put((var.put('leftIndex',Js(var.get('leftIndex').to_number())+Js(1))-Js(1)), var.get('arguments').get(var.put('argsIndex',Js(var.get('argsIndex').to_number())+Js(1))))
                            return var.get('apply')(var.get('fn'), (var.get('thisArg') if var.get('isBind') else var.get(u"this")), var.get('args'))
                        PyJsHoisted_wrapper_.func_name = 'wrapper'
                        var.put('wrapper', PyJsHoisted_wrapper_)
                        var.put('isBind', (var.get('bitmask')&var.get('WRAP_BIND_FLAG')))
                        var.put('Ctor', var.get('createCtor')(var.get('func')))
                        pass
                        return var.get('wrapper')
                    PyJsHoisted_createPartial_.func_name = 'createPartial'
                    var.put('createPartial', PyJsHoisted_createPartial_)
                    @Js
                    def PyJsHoisted_createRange_(fromRight, this, arguments, var=var):
                        var = Scope({'fromRight':fromRight, 'this':this, 'arguments':arguments}, var)
                        var.registers(['fromRight'])
                        @Js
                        def PyJs_anonymous_804_(start, end, step, this, arguments, var=var):
                            var = Scope({'start':start, 'end':end, 'step':step, 'this':this, 'arguments':arguments}, var)
                            var.registers(['step', 'end', 'start'])
                            if ((var.get('step') and (var.get('step',throw=False).typeof()!=Js('number'))) and var.get('isIterateeCall')(var.get('start'), var.get('end'), var.get('step'))):
                                var.put('end', var.put('step', var.get('undefined')))
                            var.put('start', var.get('toFinite')(var.get('start')))
                            if PyJsStrictEq(var.get('end'),var.get('undefined')):
                                var.put('end', var.get('start'))
                                var.put('start', Js(0.0))
                            else:
                                var.put('end', var.get('toFinite')(var.get('end')))
                            var.put('step', ((Js(1.0) if (var.get('start')<var.get('end')) else (-Js(1.0))) if PyJsStrictEq(var.get('step'),var.get('undefined')) else var.get('toFinite')(var.get('step'))))
                            return var.get('baseRange')(var.get('start'), var.get('end'), var.get('step'), var.get('fromRight'))
                        PyJs_anonymous_804_._set_name('anonymous')
                        return PyJs_anonymous_804_
                    PyJsHoisted_createRange_.func_name = 'createRange'
                    var.put('createRange', PyJsHoisted_createRange_)
                    @Js
                    def PyJsHoisted_createRelationalOperation_(operator, this, arguments, var=var):
                        var = Scope({'operator':operator, 'this':this, 'arguments':arguments}, var)
                        var.registers(['operator'])
                        @Js
                        def PyJs_anonymous_805_(value, other, this, arguments, var=var):
                            var = Scope({'value':value, 'other':other, 'this':this, 'arguments':arguments}, var)
                            var.registers(['value', 'other'])
                            if ((var.get('value',throw=False).typeof()==Js('string')) and (var.get('other',throw=False).typeof()==Js('string'))).neg():
                                var.put('value', var.get('toNumber')(var.get('value')))
                                var.put('other', var.get('toNumber')(var.get('other')))
                            return var.get('operator')(var.get('value'), var.get('other'))
                        PyJs_anonymous_805_._set_name('anonymous')
                        return PyJs_anonymous_805_
                    PyJsHoisted_createRelationalOperation_.func_name = 'createRelationalOperation'
                    var.put('createRelationalOperation', PyJsHoisted_createRelationalOperation_)
                    @Js
                    def PyJsHoisted_createRecurry_(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity, this, arguments, var=var):
                        var = Scope({'func':func, 'bitmask':bitmask, 'wrapFunc':wrapFunc, 'placeholder':placeholder, 'thisArg':thisArg, 'partials':partials, 'holders':holders, 'argPos':argPos, 'ary':ary, 'arity':arity, 'this':this, 'arguments':arguments}, var)
                        var.registers(['ary', 'result', 'holders', 'newPartialsRight', 'newHolders', 'func', 'isCurry', 'partials', 'newHoldersRight', 'bitmask', 'wrapFunc', 'placeholder', 'newPartials', 'newData', 'argPos', 'thisArg', 'arity'])
                        var.put('isCurry', (var.get('bitmask')&var.get('WRAP_CURRY_FLAG')))
                        var.put('newHolders', (var.get('holders') if var.get('isCurry') else var.get('undefined')))
                        var.put('newHoldersRight', (var.get('undefined') if var.get('isCurry') else var.get('holders')))
                        var.put('newPartials', (var.get('partials') if var.get('isCurry') else var.get('undefined')))
                        var.put('newPartialsRight', (var.get('undefined') if var.get('isCurry') else var.get('partials')))
                        var.put('bitmask', (var.get('WRAP_PARTIAL_FLAG') if var.get('isCurry') else var.get('WRAP_PARTIAL_RIGHT_FLAG')), '|')
                        var.put('bitmask', (~(var.get('WRAP_PARTIAL_RIGHT_FLAG') if var.get('isCurry') else var.get('WRAP_PARTIAL_FLAG'))), '&')
                        if (var.get('bitmask')&var.get('WRAP_CURRY_BOUND_FLAG')).neg():
                            var.put('bitmask', (~(var.get('WRAP_BIND_FLAG')|var.get('WRAP_BIND_KEY_FLAG'))), '&')
                        var.put('newData', Js([var.get('func'), var.get('bitmask'), var.get('thisArg'), var.get('newPartials'), var.get('newHolders'), var.get('newPartialsRight'), var.get('newHoldersRight'), var.get('argPos'), var.get('ary'), var.get('arity')]))
                        var.put('result', var.get('wrapFunc').callprop('apply', var.get('undefined'), var.get('newData')))
                        if var.get('isLaziable')(var.get('func')):
                            var.get('setData')(var.get('result'), var.get('newData'))
                        var.get('result').put('placeholder', var.get('placeholder'))
                        return var.get('setWrapToString')(var.get('result'), var.get('func'), var.get('bitmask'))
                    PyJsHoisted_createRecurry_.func_name = 'createRecurry'
                    var.put('createRecurry', PyJsHoisted_createRecurry_)
                    @Js
                    def PyJsHoisted_createRound_(methodName, this, arguments, var=var):
                        var = Scope({'methodName':methodName, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'methodName'])
                        var.put('func', var.get('Math').get(var.get('methodName')))
                        @Js
                        def PyJs_anonymous_806_(number, precision, this, arguments, var=var):
                            var = Scope({'number':number, 'precision':precision, 'this':this, 'arguments':arguments}, var)
                            var.registers(['precision', 'value', 'pair', 'number'])
                            var.put('number', var.get('toNumber')(var.get('number')))
                            var.put('precision', (Js(0.0) if (var.get('precision')==var.get(u"null")) else var.get('nativeMin')(var.get('toInteger')(var.get('precision')), Js(292.0))))
                            if (var.get('precision') and var.get('nativeIsFinite')(var.get('number'))):
                                var.put('pair', (var.get('toString')(var.get('number'))+Js('e')).callprop('split', Js('e')))
                                var.put('value', var.get('func')(((var.get('pair').get('0')+Js('e'))+((+var.get('pair').get('1'))+var.get('precision')))))
                                var.put('pair', (var.get('toString')(var.get('value'))+Js('e')).callprop('split', Js('e')))
                                return (+((var.get('pair').get('0')+Js('e'))+((+var.get('pair').get('1'))-var.get('precision'))))
                            return var.get('func')(var.get('number'))
                        PyJs_anonymous_806_._set_name('anonymous')
                        return PyJs_anonymous_806_
                    PyJsHoisted_createRound_.func_name = 'createRound'
                    var.put('createRound', PyJsHoisted_createRound_)
                    @Js
                    def PyJsHoisted_createToPairs_(keysFunc, this, arguments, var=var):
                        var = Scope({'keysFunc':keysFunc, 'this':this, 'arguments':arguments}, var)
                        var.registers(['keysFunc'])
                        @Js
                        def PyJs_anonymous_808_(object, this, arguments, var=var):
                            var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                            var.registers(['object', 'tag'])
                            var.put('tag', var.get('getTag')(var.get('object')))
                            if (var.get('tag')==var.get('mapTag')):
                                return var.get('mapToArray')(var.get('object'))
                            if (var.get('tag')==var.get('setTag')):
                                return var.get('setToPairs')(var.get('object'))
                            return var.get('baseToPairs')(var.get('object'), var.get('keysFunc')(var.get('object')))
                        PyJs_anonymous_808_._set_name('anonymous')
                        return PyJs_anonymous_808_
                    PyJsHoisted_createToPairs_.func_name = 'createToPairs'
                    var.put('createToPairs', PyJsHoisted_createToPairs_)
                    @Js
                    def PyJsHoisted_createWrap_(func, bitmask, thisArg, partials, holders, argPos, ary, arity, this, arguments, var=var):
                        var = Scope({'func':func, 'bitmask':bitmask, 'thisArg':thisArg, 'partials':partials, 'holders':holders, 'argPos':argPos, 'ary':ary, 'arity':arity, 'this':this, 'arguments':arguments}, var)
                        var.registers(['partialsRight', 'result', 'holders', 'ary', 'setter', 'length', 'func', 'isBindKey', 'partials', 'bitmask', 'newData', 'holdersRight', 'argPos', 'data', 'thisArg', 'arity'])
                        var.put('isBindKey', (var.get('bitmask')&var.get('WRAP_BIND_KEY_FLAG')))
                        if (var.get('isBindKey').neg() and (var.get('func',throw=False).typeof()!=Js('function'))):
                            PyJsTempException = JsToPyException(var.get('TypeError').create(var.get('FUNC_ERROR_TEXT')))
                            raise PyJsTempException
                        var.put('length', (var.get('partials').get('length') if var.get('partials') else Js(0.0)))
                        if var.get('length').neg():
                            var.put('bitmask', (~(var.get('WRAP_PARTIAL_FLAG')|var.get('WRAP_PARTIAL_RIGHT_FLAG'))), '&')
                            var.put('partials', var.put('holders', var.get('undefined')))
                        var.put('ary', (var.get('ary') if PyJsStrictEq(var.get('ary'),var.get('undefined')) else var.get('nativeMax')(var.get('toInteger')(var.get('ary')), Js(0.0))))
                        var.put('arity', (var.get('arity') if PyJsStrictEq(var.get('arity'),var.get('undefined')) else var.get('toInteger')(var.get('arity'))))
                        var.put('length', (var.get('holders').get('length') if var.get('holders') else Js(0.0)), '-')
                        if (var.get('bitmask')&var.get('WRAP_PARTIAL_RIGHT_FLAG')):
                            var.put('partialsRight', var.get('partials'))
                            var.put('holdersRight', var.get('holders'))
                            var.put('partials', var.put('holders', var.get('undefined')))
                        var.put('data', (var.get('undefined') if var.get('isBindKey') else var.get('getData')(var.get('func'))))
                        var.put('newData', Js([var.get('func'), var.get('bitmask'), var.get('thisArg'), var.get('partials'), var.get('holders'), var.get('partialsRight'), var.get('holdersRight'), var.get('argPos'), var.get('ary'), var.get('arity')]))
                        if var.get('data'):
                            var.get('mergeData')(var.get('newData'), var.get('data'))
                        var.put('func', var.get('newData').get('0'))
                        var.put('bitmask', var.get('newData').get('1'))
                        var.put('thisArg', var.get('newData').get('2'))
                        var.put('partials', var.get('newData').get('3'))
                        var.put('holders', var.get('newData').get('4'))
                        var.put('arity', var.get('newData').put('9', ((Js(0.0) if var.get('isBindKey') else var.get('func').get('length')) if PyJsStrictEq(var.get('newData').get('9'),var.get('undefined')) else var.get('nativeMax')((var.get('newData').get('9')-var.get('length')), Js(0.0)))))
                        if (var.get('arity').neg() and (var.get('bitmask')&(var.get('WRAP_CURRY_FLAG')|var.get('WRAP_CURRY_RIGHT_FLAG')))):
                            var.put('bitmask', (~(var.get('WRAP_CURRY_FLAG')|var.get('WRAP_CURRY_RIGHT_FLAG'))), '&')
                        if (var.get('bitmask').neg() or (var.get('bitmask')==var.get('WRAP_BIND_FLAG'))):
                            var.put('result', var.get('createBind')(var.get('func'), var.get('bitmask'), var.get('thisArg')))
                        else:
                            if ((var.get('bitmask')==var.get('WRAP_CURRY_FLAG')) or (var.get('bitmask')==var.get('WRAP_CURRY_RIGHT_FLAG'))):
                                var.put('result', var.get('createCurry')(var.get('func'), var.get('bitmask'), var.get('arity')))
                            else:
                                if (((var.get('bitmask')==var.get('WRAP_PARTIAL_FLAG')) or (var.get('bitmask')==(var.get('WRAP_BIND_FLAG')|var.get('WRAP_PARTIAL_FLAG')))) and var.get('holders').get('length').neg()):
                                    var.put('result', var.get('createPartial')(var.get('func'), var.get('bitmask'), var.get('thisArg'), var.get('partials')))
                                else:
                                    var.put('result', var.get('createHybrid').callprop('apply', var.get('undefined'), var.get('newData')))
                        var.put('setter', (var.get('baseSetData') if var.get('data') else var.get('setData')))
                        return var.get('setWrapToString')(var.get('setter')(var.get('result'), var.get('newData')), var.get('func'), var.get('bitmask'))
                    PyJsHoisted_createWrap_.func_name = 'createWrap'
                    var.put('createWrap', PyJsHoisted_createWrap_)
                    @Js
                    def PyJsHoisted_customDefaultsAssignIn_(objValue, srcValue, key, object, this, arguments, var=var):
                        var = Scope({'objValue':objValue, 'srcValue':srcValue, 'key':key, 'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'objValue', 'object', 'srcValue'])
                        if (PyJsStrictEq(var.get('objValue'),var.get('undefined')) or (var.get('eq')(var.get('objValue'), var.get('objectProto').get(var.get('key'))) and var.get('hasOwnProperty').callprop('call', var.get('object'), var.get('key')).neg())):
                            return var.get('srcValue')
                        return var.get('objValue')
                    PyJsHoisted_customDefaultsAssignIn_.func_name = 'customDefaultsAssignIn'
                    var.put('customDefaultsAssignIn', PyJsHoisted_customDefaultsAssignIn_)
                    @Js
                    def PyJsHoisted_customDefaultsMerge_(objValue, srcValue, key, object, source, stack, this, arguments, var=var):
                        var = Scope({'objValue':objValue, 'srcValue':srcValue, 'key':key, 'object':object, 'source':source, 'stack':stack, 'this':this, 'arguments':arguments}, var)
                        var.registers(['srcValue', 'object', 'objValue', 'source', 'key', 'stack'])
                        if (var.get('isObject')(var.get('objValue')) and var.get('isObject')(var.get('srcValue'))):
                            var.get('stack').callprop('set', var.get('srcValue'), var.get('objValue'))
                            var.get('baseMerge')(var.get('objValue'), var.get('srcValue'), var.get('undefined'), var.get('customDefaultsMerge'), var.get('stack'))
                            var.get('stack').callprop('delete', var.get('srcValue'))
                        return var.get('objValue')
                    PyJsHoisted_customDefaultsMerge_.func_name = 'customDefaultsMerge'
                    var.put('customDefaultsMerge', PyJsHoisted_customDefaultsMerge_)
                    @Js
                    def PyJsHoisted_customOmitClone_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (var.get('undefined') if var.get('isPlainObject')(var.get('value')) else var.get('value'))
                    PyJsHoisted_customOmitClone_.func_name = 'customOmitClone'
                    var.put('customOmitClone', PyJsHoisted_customOmitClone_)
                    @Js
                    def PyJsHoisted_equalArrays_(array, other, bitmask, customizer, equalFunc, stack, this, arguments, var=var):
                        var = Scope({'array':array, 'other':other, 'bitmask':bitmask, 'customizer':customizer, 'equalFunc':equalFunc, 'stack':stack, 'this':this, 'arguments':arguments}, var)
                        var.registers(['stacked', 'result', 'array', 'seen', 'index', 'compared', 'customizer', 'arrValue', 'isPartial', 'arrLength', 'othLength', 'other', 'bitmask', 'othValue', 'equalFunc', 'stack'])
                        var.put('isPartial', (var.get('bitmask')&var.get('COMPARE_PARTIAL_FLAG')))
                        var.put('arrLength', var.get('array').get('length'))
                        var.put('othLength', var.get('other').get('length'))
                        if ((var.get('arrLength')!=var.get('othLength')) and (var.get('isPartial') and (var.get('othLength')>var.get('arrLength'))).neg()):
                            return Js(False)
                        var.put('stacked', var.get('stack').callprop('get', var.get('array')))
                        if (var.get('stacked') and var.get('stack').callprop('get', var.get('other'))):
                            return (var.get('stacked')==var.get('other'))
                        var.put('index', (-Js(1.0)))
                        var.put('result', Js(True))
                        var.put('seen', (var.get('SetCache').create() if (var.get('bitmask')&var.get('COMPARE_UNORDERED_FLAG')) else var.get('undefined')))
                        var.get('stack').callprop('set', var.get('array'), var.get('other'))
                        var.get('stack').callprop('set', var.get('other'), var.get('array'))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('arrLength')):
                            var.put('arrValue', var.get('array').get(var.get('index')))
                            var.put('othValue', var.get('other').get(var.get('index')))
                            if var.get('customizer'):
                                var.put('compared', (var.get('customizer')(var.get('othValue'), var.get('arrValue'), var.get('index'), var.get('other'), var.get('array'), var.get('stack')) if var.get('isPartial') else var.get('customizer')(var.get('arrValue'), var.get('othValue'), var.get('index'), var.get('array'), var.get('other'), var.get('stack'))))
                            if PyJsStrictNeq(var.get('compared'),var.get('undefined')):
                                if var.get('compared'):
                                    continue
                                var.put('result', Js(False))
                                break
                            if var.get('seen'):
                                @Js
                                def PyJs_anonymous_809_(othValue, othIndex, this, arguments, var=var):
                                    var = Scope({'othValue':othValue, 'othIndex':othIndex, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['othValue', 'othIndex'])
                                    if (var.get('cacheHas')(var.get('seen'), var.get('othIndex')).neg() and (PyJsStrictEq(var.get('arrValue'),var.get('othValue')) or var.get('equalFunc')(var.get('arrValue'), var.get('othValue'), var.get('bitmask'), var.get('customizer'), var.get('stack')))):
                                        return var.get('seen').callprop('push', var.get('othIndex'))
                                PyJs_anonymous_809_._set_name('anonymous')
                                if var.get('arraySome')(var.get('other'), PyJs_anonymous_809_).neg():
                                    var.put('result', Js(False))
                                    break
                            else:
                                if (PyJsStrictEq(var.get('arrValue'),var.get('othValue')) or var.get('equalFunc')(var.get('arrValue'), var.get('othValue'), var.get('bitmask'), var.get('customizer'), var.get('stack'))).neg():
                                    var.put('result', Js(False))
                                    break
                        var.get('stack').callprop('delete', var.get('array'))
                        var.get('stack').callprop('delete', var.get('other'))
                        return var.get('result')
                    PyJsHoisted_equalArrays_.func_name = 'equalArrays'
                    var.put('equalArrays', PyJsHoisted_equalArrays_)
                    @Js
                    def PyJsHoisted_equalByTag_(object, other, tag, bitmask, customizer, equalFunc, stack, this, arguments, var=var):
                        var = Scope({'object':object, 'other':other, 'tag':tag, 'bitmask':bitmask, 'customizer':customizer, 'equalFunc':equalFunc, 'stack':stack, 'this':this, 'arguments':arguments}, var)
                        var.registers(['stacked', 'result', 'object', 'bitmask', 'isPartial', 'other', 'tag', 'convert', 'customizer', 'equalFunc', 'stack'])
                        while 1:
                            SWITCHED = False
                            CONDITION = (var.get('tag'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('dataViewTag')):
                                SWITCHED = True
                                if ((var.get('object').get('byteLength')!=var.get('other').get('byteLength')) or (var.get('object').get('byteOffset')!=var.get('other').get('byteOffset'))):
                                    return Js(False)
                                var.put('object', var.get('object').get('buffer'))
                                var.put('other', var.get('other').get('buffer'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('arrayBufferTag')):
                                SWITCHED = True
                                if ((var.get('object').get('byteLength')!=var.get('other').get('byteLength')) or var.get('equalFunc')(var.get('Uint8Array').create(var.get('object')), var.get('Uint8Array').create(var.get('other'))).neg()):
                                    return Js(False)
                                return Js(True)
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('boolTag')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('dateTag')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('numberTag')):
                                SWITCHED = True
                                return var.get('eq')((+var.get('object')), (+var.get('other')))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('errorTag')):
                                SWITCHED = True
                                return ((var.get('object').get('name')==var.get('other').get('name')) and (var.get('object').get('message')==var.get('other').get('message')))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('regexpTag')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('stringTag')):
                                SWITCHED = True
                                return (var.get('object')==(var.get('other')+Js('')))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('mapTag')):
                                SWITCHED = True
                                var.put('convert', var.get('mapToArray'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('setTag')):
                                SWITCHED = True
                                var.put('isPartial', (var.get('bitmask')&var.get('COMPARE_PARTIAL_FLAG')))
                                (var.get('convert') or var.put('convert', var.get('setToArray')))
                                if ((var.get('object').get('size')!=var.get('other').get('size')) and var.get('isPartial').neg()):
                                    return Js(False)
                                var.put('stacked', var.get('stack').callprop('get', var.get('object')))
                                if var.get('stacked'):
                                    return (var.get('stacked')==var.get('other'))
                                var.put('bitmask', var.get('COMPARE_UNORDERED_FLAG'), '|')
                                var.get('stack').callprop('set', var.get('object'), var.get('other'))
                                var.put('result', var.get('equalArrays')(var.get('convert')(var.get('object')), var.get('convert')(var.get('other')), var.get('bitmask'), var.get('customizer'), var.get('equalFunc'), var.get('stack')))
                                var.get('stack').callprop('delete', var.get('object'))
                                return var.get('result')
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('symbolTag')):
                                SWITCHED = True
                                if var.get('symbolValueOf'):
                                    return (var.get('symbolValueOf').callprop('call', var.get('object'))==var.get('symbolValueOf').callprop('call', var.get('other')))
                            SWITCHED = True
                            break
                        return Js(False)
                    PyJsHoisted_equalByTag_.func_name = 'equalByTag'
                    var.put('equalByTag', PyJsHoisted_equalByTag_)
                    @Js
                    def PyJsHoisted_equalObjects_(object, other, bitmask, customizer, equalFunc, stack, this, arguments, var=var):
                        var = Scope({'object':object, 'other':other, 'bitmask':bitmask, 'customizer':customizer, 'equalFunc':equalFunc, 'stack':stack, 'this':this, 'arguments':arguments}, var)
                        var.registers(['skipCtor', 'objProps', 'isPartial', 'equalFunc', 'stacked', 'objCtor', 'othProps', 'other', 'othValue', 'index', 'bitmask', 'customizer', 'stack', 'othCtor', 'result', 'objLength', 'object', 'objValue', 'compared', 'othLength', 'key'])
                        var.put('isPartial', (var.get('bitmask')&var.get('COMPARE_PARTIAL_FLAG')))
                        var.put('objProps', var.get('getAllKeys')(var.get('object')))
                        var.put('objLength', var.get('objProps').get('length'))
                        var.put('othProps', var.get('getAllKeys')(var.get('other')))
                        var.put('othLength', var.get('othProps').get('length'))
                        if ((var.get('objLength')!=var.get('othLength')) and var.get('isPartial').neg()):
                            return Js(False)
                        var.put('index', var.get('objLength'))
                        while (var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1)):
                            var.put('key', var.get('objProps').get(var.get('index')))
                            if (var.get('other').contains(var.get('key')) if var.get('isPartial') else var.get('hasOwnProperty').callprop('call', var.get('other'), var.get('key'))).neg():
                                return Js(False)
                        var.put('stacked', var.get('stack').callprop('get', var.get('object')))
                        if (var.get('stacked') and var.get('stack').callprop('get', var.get('other'))):
                            return (var.get('stacked')==var.get('other'))
                        var.put('result', Js(True))
                        var.get('stack').callprop('set', var.get('object'), var.get('other'))
                        var.get('stack').callprop('set', var.get('other'), var.get('object'))
                        var.put('skipCtor', var.get('isPartial'))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('objLength')):
                            var.put('key', var.get('objProps').get(var.get('index')))
                            var.put('objValue', var.get('object').get(var.get('key')))
                            var.put('othValue', var.get('other').get(var.get('key')))
                            if var.get('customizer'):
                                var.put('compared', (var.get('customizer')(var.get('othValue'), var.get('objValue'), var.get('key'), var.get('other'), var.get('object'), var.get('stack')) if var.get('isPartial') else var.get('customizer')(var.get('objValue'), var.get('othValue'), var.get('key'), var.get('object'), var.get('other'), var.get('stack'))))
                            if ((PyJsStrictEq(var.get('objValue'),var.get('othValue')) or var.get('equalFunc')(var.get('objValue'), var.get('othValue'), var.get('bitmask'), var.get('customizer'), var.get('stack'))) if PyJsStrictEq(var.get('compared'),var.get('undefined')) else var.get('compared')).neg():
                                var.put('result', Js(False))
                                break
                            (var.get('skipCtor') or var.put('skipCtor', (var.get('key')==Js('constructor'))))
                        if (var.get('result') and var.get('skipCtor').neg()):
                            var.put('objCtor', var.get('object').get('constructor'))
                            var.put('othCtor', var.get('other').get('constructor'))
                            if (((var.get('objCtor')!=var.get('othCtor')) and (var.get('object').contains(Js('constructor')) and var.get('other').contains(Js('constructor')))) and ((((var.get('objCtor',throw=False).typeof()==Js('function')) and var.get('objCtor').instanceof(var.get('objCtor'))) and (var.get('othCtor',throw=False).typeof()==Js('function'))) and var.get('othCtor').instanceof(var.get('othCtor'))).neg()):
                                var.put('result', Js(False))
                        var.get('stack').callprop('delete', var.get('object'))
                        var.get('stack').callprop('delete', var.get('other'))
                        return var.get('result')
                    PyJsHoisted_equalObjects_.func_name = 'equalObjects'
                    var.put('equalObjects', PyJsHoisted_equalObjects_)
                    @Js
                    def PyJsHoisted_flatRest_(func, this, arguments, var=var):
                        var = Scope({'func':func, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func'])
                        return var.get('setToString')(var.get('overRest')(var.get('func'), var.get('undefined'), var.get('flatten')), (var.get('func')+Js('')))
                    PyJsHoisted_flatRest_.func_name = 'flatRest'
                    var.put('flatRest', PyJsHoisted_flatRest_)
                    @Js
                    def PyJsHoisted_getAllKeys_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object'])
                        return var.get('baseGetAllKeys')(var.get('object'), var.get('keys'), var.get('getSymbols'))
                    PyJsHoisted_getAllKeys_.func_name = 'getAllKeys'
                    var.put('getAllKeys', PyJsHoisted_getAllKeys_)
                    @Js
                    def PyJsHoisted_getAllKeysIn_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object'])
                        return var.get('baseGetAllKeys')(var.get('object'), var.get('keysIn'), var.get('getSymbolsIn'))
                    PyJsHoisted_getAllKeysIn_.func_name = 'getAllKeysIn'
                    var.put('getAllKeysIn', PyJsHoisted_getAllKeysIn_)
                    @Js
                    def PyJsHoisted_getFuncName_(func, this, arguments, var=var):
                        var = Scope({'func':func, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'result', 'func', 'otherFunc', 'length', 'data'])
                        var.put('result', (var.get('func').get('name')+Js('')))
                        var.put('array', var.get('realNames').get(var.get('result')))
                        var.put('length', (var.get('array').get('length') if var.get('hasOwnProperty').callprop('call', var.get('realNames'), var.get('result')) else Js(0.0)))
                        while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
                            var.put('data', var.get('array').get(var.get('length')))
                            var.put('otherFunc', var.get('data').get('func'))
                            if ((var.get('otherFunc')==var.get(u"null")) or (var.get('otherFunc')==var.get('func'))):
                                return var.get('data').get('name')
                        return var.get('result')
                    PyJsHoisted_getFuncName_.func_name = 'getFuncName'
                    var.put('getFuncName', PyJsHoisted_getFuncName_)
                    @Js
                    def PyJsHoisted_getHolder_(func, this, arguments, var=var):
                        var = Scope({'func':func, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'func'])
                        var.put('object', (var.get('lodash') if var.get('hasOwnProperty').callprop('call', var.get('lodash'), Js('placeholder')) else var.get('func')))
                        return var.get('object').get('placeholder')
                    PyJsHoisted_getHolder_.func_name = 'getHolder'
                    var.put('getHolder', PyJsHoisted_getHolder_)
                    @Js
                    def PyJsHoisted_getIteratee_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['result'])
                        var.put('result', (var.get('lodash').get('iteratee') or var.get('iteratee')))
                        var.put('result', (var.get('baseIteratee') if PyJsStrictEq(var.get('result'),var.get('iteratee')) else var.get('result')))
                        return (var.get('result')(var.get('arguments').get('0'), var.get('arguments').get('1')) if var.get('arguments').get('length') else var.get('result'))
                    PyJsHoisted_getIteratee_.func_name = 'getIteratee'
                    var.put('getIteratee', PyJsHoisted_getIteratee_)
                    @Js
                    def PyJsHoisted_getMapData_(map, key, this, arguments, var=var):
                        var = Scope({'map':map, 'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['map', 'key', 'data'])
                        var.put('data', var.get('map').get('__data__'))
                        return (var.get('data').get((Js('string') if (var.get('key',throw=False).typeof()==Js('string')) else Js('hash'))) if var.get('isKeyable')(var.get('key')) else var.get('data').get('map'))
                    PyJsHoisted_getMapData_.func_name = 'getMapData'
                    var.put('getMapData', PyJsHoisted_getMapData_)
                    @Js
                    def PyJsHoisted_getMatchData_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'value', 'object', 'length', 'key'])
                        var.put('result', var.get('keys')(var.get('object')))
                        var.put('length', var.get('result').get('length'))
                        while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
                            var.put('key', var.get('result').get(var.get('length')))
                            var.put('value', var.get('object').get(var.get('key')))
                            var.get('result').put(var.get('length'), Js([var.get('key'), var.get('value'), var.get('isStrictComparable')(var.get('value'))]))
                        return var.get('result')
                    PyJsHoisted_getMatchData_.func_name = 'getMatchData'
                    var.put('getMatchData', PyJsHoisted_getMatchData_)
                    @Js
                    def PyJsHoisted_getNative_(object, key, this, arguments, var=var):
                        var = Scope({'object':object, 'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'value', 'key'])
                        var.put('value', var.get('getValue')(var.get('object'), var.get('key')))
                        return (var.get('value') if var.get('baseIsNative')(var.get('value')) else var.get('undefined'))
                    PyJsHoisted_getNative_.func_name = 'getNative'
                    var.put('getNative', PyJsHoisted_getNative_)
                    @Js
                    def PyJsHoisted_getRawTag_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['isOwn', 'result', 'value', 'tag', 'unmasked'])
                        var.put('isOwn', var.get('hasOwnProperty').callprop('call', var.get('value'), var.get('symToStringTag')))
                        var.put('tag', var.get('value').get(var.get('symToStringTag')))
                        try:
                            var.get('value').put(var.get('symToStringTag'), var.get('undefined'))
                            var.put('unmasked', Js(True))
                        except PyJsException as PyJsTempException:
                            PyJsHolder_65_39537876 = var.own.get('e')
                            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                            try:
                                pass
                            finally:
                                if PyJsHolder_65_39537876 is not None:
                                    var.own['e'] = PyJsHolder_65_39537876
                                else:
                                    del var.own['e']
                                del PyJsHolder_65_39537876
                        var.put('result', var.get('nativeObjectToString').callprop('call', var.get('value')))
                        if var.get('unmasked'):
                            if var.get('isOwn'):
                                var.get('value').put(var.get('symToStringTag'), var.get('tag'))
                            else:
                                var.get('value').delete(var.get('symToStringTag'))
                        return var.get('result')
                    PyJsHoisted_getRawTag_.func_name = 'getRawTag'
                    var.put('getRawTag', PyJsHoisted_getRawTag_)
                    @Js
                    def PyJsHoisted_getView_(start, end, transforms, this, arguments, var=var):
                        var = Scope({'start':start, 'end':end, 'transforms':transforms, 'this':this, 'arguments':arguments}, var)
                        var.registers(['start', 'size', 'transforms', 'end', 'length', 'index', 'data'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('transforms').get('length'))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('data', var.get('transforms').get(var.get('index')))
                            var.put('size', var.get('data').get('size'))
                            while 1:
                                SWITCHED = False
                                CONDITION = (var.get('data').get('type'))
                                if SWITCHED or PyJsStrictEq(CONDITION, Js('drop')):
                                    SWITCHED = True
                                    var.put('start', var.get('size'), '+')
                                    break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js('dropRight')):
                                    SWITCHED = True
                                    var.put('end', var.get('size'), '-')
                                    break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js('take')):
                                    SWITCHED = True
                                    var.put('end', var.get('nativeMin')(var.get('end'), (var.get('start')+var.get('size'))))
                                    break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js('takeRight')):
                                    SWITCHED = True
                                    var.put('start', var.get('nativeMax')(var.get('start'), (var.get('end')-var.get('size'))))
                                    break
                                SWITCHED = True
                                break
                        return Js({'start':var.get('start'),'end':var.get('end')})
                    PyJsHoisted_getView_.func_name = 'getView'
                    var.put('getView', PyJsHoisted_getView_)
                    @Js
                    def PyJsHoisted_getWrapDetails_(source, this, arguments, var=var):
                        var = Scope({'source':source, 'this':this, 'arguments':arguments}, var)
                        var.registers(['source', 'match'])
                        var.put('match', var.get('source').callprop('match', var.get('reWrapDetails')))
                        return (var.get('match').get('1').callprop('split', var.get('reSplitDetails')) if var.get('match') else Js([]))
                    PyJsHoisted_getWrapDetails_.func_name = 'getWrapDetails'
                    var.put('getWrapDetails', PyJsHoisted_getWrapDetails_)
                    @Js
                    def PyJsHoisted_hasPath_(object, path, hasFunc, this, arguments, var=var):
                        var = Scope({'object':object, 'path':path, 'hasFunc':hasFunc, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'hasFunc', 'object', 'length', 'index', 'path', 'key'])
                        var.put('path', var.get('castPath')(var.get('path'), var.get('object')))
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('path').get('length'))
                        var.put('result', Js(False))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('key', var.get('toKey')(var.get('path').get(var.get('index'))))
                            if var.put('result', ((var.get('object')!=var.get(u"null")) and var.get('hasFunc')(var.get('object'), var.get('key')))).neg():
                                break
                            var.put('object', var.get('object').get(var.get('key')))
                        if (var.get('result') or (var.put('index',Js(var.get('index').to_number())+Js(1))!=var.get('length'))):
                            return var.get('result')
                        var.put('length', (Js(0.0) if (var.get('object')==var.get(u"null")) else var.get('object').get('length')))
                        return (((var.get('length').neg().neg() and var.get('isLength')(var.get('length'))) and var.get('isIndex')(var.get('key'), var.get('length'))) and (var.get('isArray')(var.get('object')) or var.get('isArguments')(var.get('object'))))
                    PyJsHoisted_hasPath_.func_name = 'hasPath'
                    var.put('hasPath', PyJsHoisted_hasPath_)
                    @Js
                    def PyJsHoisted_initCloneArray_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'result', 'length'])
                        var.put('length', var.get('array').get('length'))
                        var.put('result', var.get('array').get('constructor').create(var.get('length')))
                        if ((var.get('length') and (var.get('array').get('0').typeof()==Js('string'))) and var.get('hasOwnProperty').callprop('call', var.get('array'), Js('index'))):
                            var.get('result').put('index', var.get('array').get('index'))
                            var.get('result').put('input', var.get('array').get('input'))
                        return var.get('result')
                    PyJsHoisted_initCloneArray_.func_name = 'initCloneArray'
                    var.put('initCloneArray', PyJsHoisted_initCloneArray_)
                    @Js
                    def PyJsHoisted_initCloneObject_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object'])
                        return (var.get('baseCreate')(var.get('getPrototype')(var.get('object'))) if ((var.get('object').get('constructor').typeof()==Js('function')) and var.get('isPrototype')(var.get('object')).neg()) else Js({}))
                    PyJsHoisted_initCloneObject_.func_name = 'initCloneObject'
                    var.put('initCloneObject', PyJsHoisted_initCloneObject_)
                    @Js
                    def PyJsHoisted_initCloneByTag_(object, tag, isDeep, this, arguments, var=var):
                        var = Scope({'object':object, 'tag':tag, 'isDeep':isDeep, 'this':this, 'arguments':arguments}, var)
                        var.registers(['Ctor', 'isDeep', 'tag', 'object'])
                        var.put('Ctor', var.get('object').get('constructor'))
                        while 1:
                            SWITCHED = False
                            CONDITION = (var.get('tag'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('arrayBufferTag')):
                                SWITCHED = True
                                return var.get('cloneArrayBuffer')(var.get('object'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('boolTag')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('dateTag')):
                                SWITCHED = True
                                return var.get('Ctor').create((+var.get('object')))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('dataViewTag')):
                                SWITCHED = True
                                return var.get('cloneDataView')(var.get('object'), var.get('isDeep'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('float32Tag')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('float64Tag')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('int8Tag')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('int16Tag')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('int32Tag')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('uint8Tag')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('uint8ClampedTag')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('uint16Tag')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('uint32Tag')):
                                SWITCHED = True
                                return var.get('cloneTypedArray')(var.get('object'), var.get('isDeep'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('mapTag')):
                                SWITCHED = True
                                return var.get('Ctor').create()
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('numberTag')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('stringTag')):
                                SWITCHED = True
                                return var.get('Ctor').create(var.get('object'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('regexpTag')):
                                SWITCHED = True
                                return var.get('cloneRegExp')(var.get('object'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('setTag')):
                                SWITCHED = True
                                return var.get('Ctor').create()
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('symbolTag')):
                                SWITCHED = True
                                return var.get('cloneSymbol')(var.get('object'))
                            SWITCHED = True
                            break
                    PyJsHoisted_initCloneByTag_.func_name = 'initCloneByTag'
                    var.put('initCloneByTag', PyJsHoisted_initCloneByTag_)
                    @Js
                    def PyJsHoisted_insertWrapDetails_(source, details, this, arguments, var=var):
                        var = Scope({'source':source, 'details':details, 'this':this, 'arguments':arguments}, var)
                        var.registers(['source', 'lastIndex', 'details', 'length'])
                        var.put('length', var.get('details').get('length'))
                        if var.get('length').neg():
                            return var.get('source')
                        var.put('lastIndex', (var.get('length')-Js(1.0)))
                        var.get('details').put(var.get('lastIndex'), ((Js('& ') if (var.get('length')>Js(1.0)) else Js(''))+var.get('details').get(var.get('lastIndex'))))
                        var.put('details', var.get('details').callprop('join', (Js(', ') if (var.get('length')>Js(2.0)) else Js(' '))))
                        return var.get('source').callprop('replace', var.get('reWrapComment'), ((Js('{\n/* [wrapped with ')+var.get('details'))+Js('] */\n')))
                    PyJsHoisted_insertWrapDetails_.func_name = 'insertWrapDetails'
                    var.put('insertWrapDetails', PyJsHoisted_insertWrapDetails_)
                    @Js
                    def PyJsHoisted_isFlattenable_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return ((var.get('isArray')(var.get('value')) or var.get('isArguments')(var.get('value'))) or ((var.get('spreadableSymbol') and var.get('value')) and var.get('value').get(var.get('spreadableSymbol'))).neg().neg())
                    PyJsHoisted_isFlattenable_.func_name = 'isFlattenable'
                    var.put('isFlattenable', PyJsHoisted_isFlattenable_)
                    @Js
                    def PyJsHoisted_isIndex_(value, length, this, arguments, var=var):
                        var = Scope({'value':value, 'length':length, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'type', 'length'])
                        var.put('type', var.get('value',throw=False).typeof())
                        var.put('length', (var.get('MAX_SAFE_INTEGER') if (var.get('length')==var.get(u"null")) else var.get('length')))
                        return ((var.get('length').neg().neg() and ((var.get('type')==Js('number')) or ((var.get('type')!=Js('symbol')) and var.get('reIsUint').callprop('test', var.get('value'))))) and (((var.get('value')>(-Js(1.0))) and ((var.get('value')%Js(1.0))==Js(0.0))) and (var.get('value')<var.get('length'))))
                    PyJsHoisted_isIndex_.func_name = 'isIndex'
                    var.put('isIndex', PyJsHoisted_isIndex_)
                    @Js
                    def PyJsHoisted_isIterateeCall_(value, index, object, this, arguments, var=var):
                        var = Scope({'value':value, 'index':index, 'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'value', 'type', 'index'])
                        if var.get('isObject')(var.get('object')).neg():
                            return Js(False)
                        var.put('type', var.get('index',throw=False).typeof())
                        if ((var.get('isArrayLike')(var.get('object')) and var.get('isIndex')(var.get('index'), var.get('object').get('length'))) if (var.get('type')==Js('number')) else ((var.get('type')==Js('string')) and var.get('object').contains(var.get('index')))):
                            return var.get('eq')(var.get('object').get(var.get('index')), var.get('value'))
                        return Js(False)
                    PyJsHoisted_isIterateeCall_.func_name = 'isIterateeCall'
                    var.put('isIterateeCall', PyJsHoisted_isIterateeCall_)
                    @Js
                    def PyJsHoisted_isKey_(value, object, this, arguments, var=var):
                        var = Scope({'value':value, 'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'value', 'type'])
                        if var.get('isArray')(var.get('value')):
                            return Js(False)
                        var.put('type', var.get('value',throw=False).typeof())
                        if (((((var.get('type')==Js('number')) or (var.get('type')==Js('symbol'))) or (var.get('type')==Js('boolean'))) or (var.get('value')==var.get(u"null"))) or var.get('isSymbol')(var.get('value'))):
                            return Js(True)
                        return ((var.get('reIsPlainProp').callprop('test', var.get('value')) or var.get('reIsDeepProp').callprop('test', var.get('value')).neg()) or ((var.get('object')!=var.get(u"null")) and var.get('Object')(var.get('object')).contains(var.get('value'))))
                    PyJsHoisted_isKey_.func_name = 'isKey'
                    var.put('isKey', PyJsHoisted_isKey_)
                    @Js
                    def PyJsHoisted_isKeyable_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'type'])
                        var.put('type', var.get('value',throw=False).typeof())
                        return (PyJsStrictNeq(var.get('value'),Js('__proto__')) if ((((var.get('type')==Js('string')) or (var.get('type')==Js('number'))) or (var.get('type')==Js('symbol'))) or (var.get('type')==Js('boolean'))) else PyJsStrictEq(var.get('value'),var.get(u"null")))
                    PyJsHoisted_isKeyable_.func_name = 'isKeyable'
                    var.put('isKeyable', PyJsHoisted_isKeyable_)
                    @Js
                    def PyJsHoisted_isLaziable_(func, this, arguments, var=var):
                        var = Scope({'func':func, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'data', 'other', 'funcName'])
                        var.put('funcName', var.get('getFuncName')(var.get('func')))
                        var.put('other', var.get('lodash').get(var.get('funcName')))
                        if ((var.get('other',throw=False).typeof()!=Js('function')) or var.get('LazyWrapper').get('prototype').contains(var.get('funcName')).neg()):
                            return Js(False)
                        if PyJsStrictEq(var.get('func'),var.get('other')):
                            return Js(True)
                        var.put('data', var.get('getData')(var.get('other')))
                        return (var.get('data').neg().neg() and PyJsStrictEq(var.get('func'),var.get('data').get('0')))
                    PyJsHoisted_isLaziable_.func_name = 'isLaziable'
                    var.put('isLaziable', PyJsHoisted_isLaziable_)
                    @Js
                    def PyJsHoisted_isMasked_(func, this, arguments, var=var):
                        var = Scope({'func':func, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func'])
                        return (var.get('maskSrcKey').neg().neg() and var.get('func').contains(var.get('maskSrcKey')))
                    PyJsHoisted_isMasked_.func_name = 'isMasked'
                    var.put('isMasked', PyJsHoisted_isMasked_)
                    @Js
                    def PyJsHoisted_isPrototype_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['Ctor', 'value', 'proto'])
                        var.put('Ctor', (var.get('value') and var.get('value').get('constructor')))
                        var.put('proto', (((var.get('Ctor',throw=False).typeof()==Js('function')) and var.get('Ctor').get('prototype')) or var.get('objectProto')))
                        return PyJsStrictEq(var.get('value'),var.get('proto'))
                    PyJsHoisted_isPrototype_.func_name = 'isPrototype'
                    var.put('isPrototype', PyJsHoisted_isPrototype_)
                    @Js
                    def PyJsHoisted_isStrictComparable_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (PyJsStrictEq(var.get('value'),var.get('value')) and var.get('isObject')(var.get('value')).neg())
                    PyJsHoisted_isStrictComparable_.func_name = 'isStrictComparable'
                    var.put('isStrictComparable', PyJsHoisted_isStrictComparable_)
                    @Js
                    def PyJsHoisted_matchesStrictComparable_(key, srcValue, this, arguments, var=var):
                        var = Scope({'key':key, 'srcValue':srcValue, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'srcValue'])
                        @Js
                        def PyJs_anonymous_816_(object, this, arguments, var=var):
                            var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                            var.registers(['object'])
                            if (var.get('object')==var.get(u"null")):
                                return Js(False)
                            return (PyJsStrictEq(var.get('object').get(var.get('key')),var.get('srcValue')) and (PyJsStrictNeq(var.get('srcValue'),var.get('undefined')) or var.get('Object')(var.get('object')).contains(var.get('key'))))
                        PyJs_anonymous_816_._set_name('anonymous')
                        return PyJs_anonymous_816_
                    PyJsHoisted_matchesStrictComparable_.func_name = 'matchesStrictComparable'
                    var.put('matchesStrictComparable', PyJsHoisted_matchesStrictComparable_)
                    @Js
                    def PyJsHoisted_memoizeCapped_(func, this, arguments, var=var):
                        var = Scope({'func':func, 'this':this, 'arguments':arguments}, var)
                        var.registers(['cache', 'result', 'func'])
                        @Js
                        def PyJs_anonymous_817_(key, this, arguments, var=var):
                            var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                            var.registers(['key'])
                            if PyJsStrictEq(var.get('cache').get('size'),var.get('MAX_MEMOIZE_SIZE')):
                                var.get('cache').callprop('clear')
                            return var.get('key')
                        PyJs_anonymous_817_._set_name('anonymous')
                        var.put('result', var.get('memoize')(var.get('func'), PyJs_anonymous_817_))
                        var.put('cache', var.get('result').get('cache'))
                        return var.get('result')
                    PyJsHoisted_memoizeCapped_.func_name = 'memoizeCapped'
                    var.put('memoizeCapped', PyJsHoisted_memoizeCapped_)
                    @Js
                    def PyJsHoisted_mergeData_(data, source, this, arguments, var=var):
                        var = Scope({'data':data, 'source':source, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'newBitmask', 'isCombo', 'srcBitmask', 'partials', 'bitmask', 'isCommon', 'source', 'data'])
                        var.put('bitmask', var.get('data').get('1'))
                        var.put('srcBitmask', var.get('source').get('1'))
                        var.put('newBitmask', (var.get('bitmask')|var.get('srcBitmask')))
                        var.put('isCommon', (var.get('newBitmask')<((var.get('WRAP_BIND_FLAG')|var.get('WRAP_BIND_KEY_FLAG'))|var.get('WRAP_ARY_FLAG'))))
                        def PyJs_LONG_818_(var=var):
                            return ((((var.get('srcBitmask')==var.get('WRAP_ARY_FLAG')) and (var.get('bitmask')==var.get('WRAP_CURRY_FLAG'))) or (((var.get('srcBitmask')==var.get('WRAP_ARY_FLAG')) and (var.get('bitmask')==var.get('WRAP_REARG_FLAG'))) and (var.get('data').get('7').get('length')<=var.get('source').get('8')))) or (((var.get('srcBitmask')==(var.get('WRAP_ARY_FLAG')|var.get('WRAP_REARG_FLAG'))) and (var.get('source').get('7').get('length')<=var.get('source').get('8'))) and (var.get('bitmask')==var.get('WRAP_CURRY_FLAG'))))
                        var.put('isCombo', PyJs_LONG_818_())
                        if (var.get('isCommon') or var.get('isCombo')).neg():
                            return var.get('data')
                        if (var.get('srcBitmask')&var.get('WRAP_BIND_FLAG')):
                            var.get('data').put('2', var.get('source').get('2'))
                            var.put('newBitmask', (Js(0.0) if (var.get('bitmask')&var.get('WRAP_BIND_FLAG')) else var.get('WRAP_CURRY_BOUND_FLAG')), '|')
                        var.put('value', var.get('source').get('3'))
                        if var.get('value'):
                            var.put('partials', var.get('data').get('3'))
                            var.get('data').put('3', (var.get('composeArgs')(var.get('partials'), var.get('value'), var.get('source').get('4')) if var.get('partials') else var.get('value')))
                            var.get('data').put('4', (var.get('replaceHolders')(var.get('data').get('3'), var.get('PLACEHOLDER')) if var.get('partials') else var.get('source').get('4')))
                        var.put('value', var.get('source').get('5'))
                        if var.get('value'):
                            var.put('partials', var.get('data').get('5'))
                            var.get('data').put('5', (var.get('composeArgsRight')(var.get('partials'), var.get('value'), var.get('source').get('6')) if var.get('partials') else var.get('value')))
                            var.get('data').put('6', (var.get('replaceHolders')(var.get('data').get('5'), var.get('PLACEHOLDER')) if var.get('partials') else var.get('source').get('6')))
                        var.put('value', var.get('source').get('7'))
                        if var.get('value'):
                            var.get('data').put('7', var.get('value'))
                        if (var.get('srcBitmask')&var.get('WRAP_ARY_FLAG')):
                            var.get('data').put('8', (var.get('source').get('8') if (var.get('data').get('8')==var.get(u"null")) else var.get('nativeMin')(var.get('data').get('8'), var.get('source').get('8'))))
                        if (var.get('data').get('9')==var.get(u"null")):
                            var.get('data').put('9', var.get('source').get('9'))
                        var.get('data').put('0', var.get('source').get('0'))
                        var.get('data').put('1', var.get('newBitmask'))
                        return var.get('data')
                    PyJsHoisted_mergeData_.func_name = 'mergeData'
                    var.put('mergeData', PyJsHoisted_mergeData_)
                    @Js
                    def PyJsHoisted_nativeKeysIn_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'result', 'object'])
                        var.put('result', Js([]))
                        if (var.get('object')!=var.get(u"null")):
                            for PyJsTemp in var.get('Object')(var.get('object')):
                                var.put('key', PyJsTemp)
                                var.get('result').callprop('push', var.get('key'))
                        return var.get('result')
                    PyJsHoisted_nativeKeysIn_.func_name = 'nativeKeysIn'
                    var.put('nativeKeysIn', PyJsHoisted_nativeKeysIn_)
                    @Js
                    def PyJsHoisted_objectToString_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return var.get('nativeObjectToString').callprop('call', var.get('value'))
                    PyJsHoisted_objectToString_.func_name = 'objectToString'
                    var.put('objectToString', PyJsHoisted_objectToString_)
                    @Js
                    def PyJsHoisted_overRest_(func, start, transform, this, arguments, var=var):
                        var = Scope({'func':func, 'start':start, 'transform':transform, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'start', 'transform'])
                        var.put('start', var.get('nativeMax')(((var.get('func').get('length')-Js(1.0)) if PyJsStrictEq(var.get('start'),var.get('undefined')) else var.get('start')), Js(0.0)))
                        @Js
                        def PyJs_anonymous_819_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers(['args', 'array', 'otherArgs', 'length', 'index'])
                            var.put('args', var.get('arguments'))
                            var.put('index', (-Js(1.0)))
                            var.put('length', var.get('nativeMax')((var.get('args').get('length')-var.get('start')), Js(0.0)))
                            var.put('array', var.get('Array')(var.get('length')))
                            while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                                var.get('array').put(var.get('index'), var.get('args').get((var.get('start')+var.get('index'))))
                            var.put('index', (-Js(1.0)))
                            var.put('otherArgs', var.get('Array')((var.get('start')+Js(1.0))))
                            while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('start')):
                                var.get('otherArgs').put(var.get('index'), var.get('args').get(var.get('index')))
                            var.get('otherArgs').put(var.get('start'), var.get('transform')(var.get('array')))
                            return var.get('apply')(var.get('func'), var.get(u"this"), var.get('otherArgs'))
                        PyJs_anonymous_819_._set_name('anonymous')
                        return PyJs_anonymous_819_
                    PyJsHoisted_overRest_.func_name = 'overRest'
                    var.put('overRest', PyJsHoisted_overRest_)
                    @Js
                    def PyJsHoisted_parent_(object, path, this, arguments, var=var):
                        var = Scope({'object':object, 'path':path, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'path'])
                        return (var.get('object') if (var.get('path').get('length')<Js(2.0)) else var.get('baseGet')(var.get('object'), var.get('baseSlice')(var.get('path'), Js(0.0), (-Js(1.0)))))
                    PyJsHoisted_parent_.func_name = 'parent'
                    var.put('parent', PyJsHoisted_parent_)
                    @Js
                    def PyJsHoisted_reorder_(array, indexes, this, arguments, var=var):
                        var = Scope({'array':array, 'indexes':indexes, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'indexes', 'length', 'index', 'oldArray', 'arrLength'])
                        var.put('arrLength', var.get('array').get('length'))
                        var.put('length', var.get('nativeMin')(var.get('indexes').get('length'), var.get('arrLength')))
                        var.put('oldArray', var.get('copyArray')(var.get('array')))
                        while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
                            var.put('index', var.get('indexes').get(var.get('length')))
                            var.get('array').put(var.get('length'), (var.get('oldArray').get(var.get('index')) if var.get('isIndex')(var.get('index'), var.get('arrLength')) else var.get('undefined')))
                        return var.get('array')
                    PyJsHoisted_reorder_.func_name = 'reorder'
                    var.put('reorder', PyJsHoisted_reorder_)
                    @Js
                    def PyJsHoisted_safeGet_(object, key, this, arguments, var=var):
                        var = Scope({'object':object, 'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'key'])
                        if (PyJsStrictEq(var.get('key'),Js('constructor')) and PyJsStrictEq(var.get('object').get(var.get('key')).typeof(),Js('function'))):
                            return var.get('undefined')
                        if (var.get('key')==Js('__proto__')):
                            return var.get('undefined')
                        return var.get('object').get(var.get('key'))
                    PyJsHoisted_safeGet_.func_name = 'safeGet'
                    var.put('safeGet', PyJsHoisted_safeGet_)
                    @Js
                    def PyJsHoisted_setWrapToString_(wrapper, reference, bitmask, this, arguments, var=var):
                        var = Scope({'wrapper':wrapper, 'reference':reference, 'bitmask':bitmask, 'this':this, 'arguments':arguments}, var)
                        var.registers(['wrapper', 'bitmask', 'source', 'reference'])
                        var.put('source', (var.get('reference')+Js('')))
                        return var.get('setToString')(var.get('wrapper'), var.get('insertWrapDetails')(var.get('source'), var.get('updateWrapDetails')(var.get('getWrapDetails')(var.get('source')), var.get('bitmask'))))
                    PyJsHoisted_setWrapToString_.func_name = 'setWrapToString'
                    var.put('setWrapToString', PyJsHoisted_setWrapToString_)
                    @Js
                    def PyJsHoisted_shortOut_(func, this, arguments, var=var):
                        var = Scope({'func':func, 'this':this, 'arguments':arguments}, var)
                        var.registers(['lastCalled', 'func', 'count'])
                        var.put('count', Js(0.0))
                        var.put('lastCalled', Js(0.0))
                        @Js
                        def PyJs_anonymous_821_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers(['remaining', 'stamp'])
                            var.put('stamp', var.get('nativeNow')())
                            var.put('remaining', (var.get('HOT_SPAN')-(var.get('stamp')-var.get('lastCalled'))))
                            var.put('lastCalled', var.get('stamp'))
                            if (var.get('remaining')>Js(0.0)):
                                if (var.put('count',Js(var.get('count').to_number())+Js(1))>=var.get('HOT_COUNT')):
                                    return var.get('arguments').get('0')
                            else:
                                var.put('count', Js(0.0))
                            return var.get('func').callprop('apply', var.get('undefined'), var.get('arguments'))
                        PyJs_anonymous_821_._set_name('anonymous')
                        return PyJs_anonymous_821_
                    PyJsHoisted_shortOut_.func_name = 'shortOut'
                    var.put('shortOut', PyJsHoisted_shortOut_)
                    @Js
                    def PyJsHoisted_shuffleSelf_(array, size, this, arguments, var=var):
                        var = Scope({'array':array, 'size':size, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'value', 'size', 'rand', 'length', 'index', 'lastIndex'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('array').get('length'))
                        var.put('lastIndex', (var.get('length')-Js(1.0)))
                        var.put('size', (var.get('length') if PyJsStrictEq(var.get('size'),var.get('undefined')) else var.get('size')))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('size')):
                            var.put('rand', var.get('baseRandom')(var.get('index'), var.get('lastIndex')))
                            var.put('value', var.get('array').get(var.get('rand')))
                            var.get('array').put(var.get('rand'), var.get('array').get(var.get('index')))
                            var.get('array').put(var.get('index'), var.get('value'))
                        var.get('array').put('length', var.get('size'))
                        return var.get('array')
                    PyJsHoisted_shuffleSelf_.func_name = 'shuffleSelf'
                    var.put('shuffleSelf', PyJsHoisted_shuffleSelf_)
                    @Js
                    def PyJsHoisted_toKey_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'value'])
                        if ((var.get('value',throw=False).typeof()==Js('string')) or var.get('isSymbol')(var.get('value'))):
                            return var.get('value')
                        var.put('result', (var.get('value')+Js('')))
                        return (Js('-0') if ((var.get('result')==Js('0')) and ((Js(1.0)/var.get('value'))==(-var.get('INFINITY')))) else var.get('result'))
                    PyJsHoisted_toKey_.func_name = 'toKey'
                    var.put('toKey', PyJsHoisted_toKey_)
                    @Js
                    def PyJsHoisted_toSource_(func, this, arguments, var=var):
                        var = Scope({'func':func, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func'])
                        if (var.get('func')!=var.get(u"null")):
                            try:
                                return var.get('funcToString').callprop('call', var.get('func'))
                            except PyJsException as PyJsTempException:
                                PyJsHolder_65_56200384 = var.own.get('e')
                                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                try:
                                    pass
                                finally:
                                    if PyJsHolder_65_56200384 is not None:
                                        var.own['e'] = PyJsHolder_65_56200384
                                    else:
                                        del var.own['e']
                                    del PyJsHolder_65_56200384
                            try:
                                return (var.get('func')+Js(''))
                            except PyJsException as PyJsTempException:
                                PyJsHolder_65_24342388 = var.own.get('e')
                                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                try:
                                    pass
                                finally:
                                    if PyJsHolder_65_24342388 is not None:
                                        var.own['e'] = PyJsHolder_65_24342388
                                    else:
                                        del var.own['e']
                                    del PyJsHolder_65_24342388
                        return Js('')
                    PyJsHoisted_toSource_.func_name = 'toSource'
                    var.put('toSource', PyJsHoisted_toSource_)
                    @Js
                    def PyJsHoisted_updateWrapDetails_(details, bitmask, this, arguments, var=var):
                        var = Scope({'details':details, 'bitmask':bitmask, 'this':this, 'arguments':arguments}, var)
                        var.registers(['bitmask', 'details'])
                        @Js
                        def PyJs_anonymous_824_(pair, this, arguments, var=var):
                            var = Scope({'pair':pair, 'this':this, 'arguments':arguments}, var)
                            var.registers(['value', 'pair'])
                            var.put('value', (Js('_.')+var.get('pair').get('0')))
                            if ((var.get('bitmask')&var.get('pair').get('1')) and var.get('arrayIncludes')(var.get('details'), var.get('value')).neg()):
                                var.get('details').callprop('push', var.get('value'))
                        PyJs_anonymous_824_._set_name('anonymous')
                        var.get('arrayEach')(var.get('wrapFlags'), PyJs_anonymous_824_)
                        return var.get('details').callprop('sort')
                    PyJsHoisted_updateWrapDetails_.func_name = 'updateWrapDetails'
                    var.put('updateWrapDetails', PyJsHoisted_updateWrapDetails_)
                    @Js
                    def PyJsHoisted_wrapperClone_(wrapper, this, arguments, var=var):
                        var = Scope({'wrapper':wrapper, 'this':this, 'arguments':arguments}, var)
                        var.registers(['wrapper', 'result'])
                        if var.get('wrapper').instanceof(var.get('LazyWrapper')):
                            return var.get('wrapper').callprop('clone')
                        var.put('result', var.get('LodashWrapper').create(var.get('wrapper').get('__wrapped__'), var.get('wrapper').get('__chain__')))
                        var.get('result').put('__actions__', var.get('copyArray')(var.get('wrapper').get('__actions__')))
                        var.get('result').put('__index__', var.get('wrapper').get('__index__'))
                        var.get('result').put('__values__', var.get('wrapper').get('__values__'))
                        return var.get('result')
                    PyJsHoisted_wrapperClone_.func_name = 'wrapperClone'
                    var.put('wrapperClone', PyJsHoisted_wrapperClone_)
                    @Js
                    def PyJsHoisted_chunk_(array, size, guard, this, arguments, var=var):
                        var = Scope({'array':array, 'size':size, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'result', 'size', 'length', 'index', 'guard', 'resIndex'])
                        if (var.get('isIterateeCall')(var.get('array'), var.get('size'), var.get('guard')) if var.get('guard') else PyJsStrictEq(var.get('size'),var.get('undefined'))):
                            var.put('size', Js(1.0))
                        else:
                            var.put('size', var.get('nativeMax')(var.get('toInteger')(var.get('size')), Js(0.0)))
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        if (var.get('length').neg() or (var.get('size')<Js(1.0))):
                            return Js([])
                        var.put('index', Js(0.0))
                        var.put('resIndex', Js(0.0))
                        var.put('result', var.get('Array')(var.get('nativeCeil')((var.get('length')/var.get('size')))))
                        while (var.get('index')<var.get('length')):
                            var.get('result').put((var.put('resIndex',Js(var.get('resIndex').to_number())+Js(1))-Js(1)), var.get('baseSlice')(var.get('array'), var.get('index'), var.put('index', var.get('size'), '+')))
                        return var.get('result')
                    PyJsHoisted_chunk_.func_name = 'chunk'
                    var.put('chunk', PyJsHoisted_chunk_)
                    @Js
                    def PyJsHoisted_compact_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'result', 'value', 'length', 'index', 'resIndex'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        var.put('resIndex', Js(0.0))
                        var.put('result', Js([]))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('value', var.get('array').get(var.get('index')))
                            if var.get('value'):
                                var.get('result').put((var.put('resIndex',Js(var.get('resIndex').to_number())+Js(1))-Js(1)), var.get('value'))
                        return var.get('result')
                    PyJsHoisted_compact_.func_name = 'compact'
                    var.put('compact', PyJsHoisted_compact_)
                    @Js
                    def PyJsHoisted_concat_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['args', 'array', 'length', 'index'])
                        var.put('length', var.get('arguments').get('length'))
                        if var.get('length').neg():
                            return Js([])
                        var.put('args', var.get('Array')((var.get('length')-Js(1.0))))
                        var.put('array', var.get('arguments').get('0'))
                        var.put('index', var.get('length'))
                        while (var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1)):
                            var.get('args').put((var.get('index')-Js(1.0)), var.get('arguments').get(var.get('index')))
                        return var.get('arrayPush')((var.get('copyArray')(var.get('array')) if var.get('isArray')(var.get('array')) else Js([var.get('array')])), var.get('baseFlatten')(var.get('args'), Js(1.0)))
                    PyJsHoisted_concat_.func_name = 'concat'
                    var.put('concat', PyJsHoisted_concat_)
                    @Js
                    def PyJsHoisted_drop_(array, n, guard, this, arguments, var=var):
                        var = Scope({'array':array, 'n':n, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['n', 'array', 'length', 'guard'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        if var.get('length').neg():
                            return Js([])
                        var.put('n', (Js(1.0) if (var.get('guard') or PyJsStrictEq(var.get('n'),var.get('undefined'))) else var.get('toInteger')(var.get('n'))))
                        return var.get('baseSlice')(var.get('array'), (Js(0.0) if (var.get('n')<Js(0.0)) else var.get('n')), var.get('length'))
                    PyJsHoisted_drop_.func_name = 'drop'
                    var.put('drop', PyJsHoisted_drop_)
                    @Js
                    def PyJsHoisted_dropRight_(array, n, guard, this, arguments, var=var):
                        var = Scope({'array':array, 'n':n, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['n', 'array', 'length', 'guard'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        if var.get('length').neg():
                            return Js([])
                        var.put('n', (Js(1.0) if (var.get('guard') or PyJsStrictEq(var.get('n'),var.get('undefined'))) else var.get('toInteger')(var.get('n'))))
                        var.put('n', (var.get('length')-var.get('n')))
                        return var.get('baseSlice')(var.get('array'), Js(0.0), (Js(0.0) if (var.get('n')<Js(0.0)) else var.get('n')))
                    PyJsHoisted_dropRight_.func_name = 'dropRight'
                    var.put('dropRight', PyJsHoisted_dropRight_)
                    @Js
                    def PyJsHoisted_dropRightWhile_(array, predicate, this, arguments, var=var):
                        var = Scope({'array':array, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'predicate'])
                        return (var.get('baseWhile')(var.get('array'), var.get('getIteratee')(var.get('predicate'), Js(3.0)), Js(True), Js(True)) if (var.get('array') and var.get('array').get('length')) else Js([]))
                    PyJsHoisted_dropRightWhile_.func_name = 'dropRightWhile'
                    var.put('dropRightWhile', PyJsHoisted_dropRightWhile_)
                    @Js
                    def PyJsHoisted_dropWhile_(array, predicate, this, arguments, var=var):
                        var = Scope({'array':array, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'predicate'])
                        return (var.get('baseWhile')(var.get('array'), var.get('getIteratee')(var.get('predicate'), Js(3.0)), Js(True)) if (var.get('array') and var.get('array').get('length')) else Js([]))
                    PyJsHoisted_dropWhile_.func_name = 'dropWhile'
                    var.put('dropWhile', PyJsHoisted_dropWhile_)
                    @Js
                    def PyJsHoisted_fill_(array, value, start, end, this, arguments, var=var):
                        var = Scope({'array':array, 'value':value, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'value', 'start', 'end', 'length'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        if var.get('length').neg():
                            return Js([])
                        if ((var.get('start') and (var.get('start',throw=False).typeof()!=Js('number'))) and var.get('isIterateeCall')(var.get('array'), var.get('value'), var.get('start'))):
                            var.put('start', Js(0.0))
                            var.put('end', var.get('length'))
                        return var.get('baseFill')(var.get('array'), var.get('value'), var.get('start'), var.get('end'))
                    PyJsHoisted_fill_.func_name = 'fill'
                    var.put('fill', PyJsHoisted_fill_)
                    @Js
                    def PyJsHoisted_findIndex_(array, predicate, fromIndex, this, arguments, var=var):
                        var = Scope({'array':array, 'predicate':predicate, 'fromIndex':fromIndex, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'predicate', 'fromIndex', 'length', 'index'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        if var.get('length').neg():
                            return (-Js(1.0))
                        var.put('index', (Js(0.0) if (var.get('fromIndex')==var.get(u"null")) else var.get('toInteger')(var.get('fromIndex'))))
                        if (var.get('index')<Js(0.0)):
                            var.put('index', var.get('nativeMax')((var.get('length')+var.get('index')), Js(0.0)))
                        return var.get('baseFindIndex')(var.get('array'), var.get('getIteratee')(var.get('predicate'), Js(3.0)), var.get('index'))
                    PyJsHoisted_findIndex_.func_name = 'findIndex'
                    var.put('findIndex', PyJsHoisted_findIndex_)
                    @Js
                    def PyJsHoisted_findLastIndex_(array, predicate, fromIndex, this, arguments, var=var):
                        var = Scope({'array':array, 'predicate':predicate, 'fromIndex':fromIndex, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'predicate', 'fromIndex', 'length', 'index'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        if var.get('length').neg():
                            return (-Js(1.0))
                        var.put('index', (var.get('length')-Js(1.0)))
                        if PyJsStrictNeq(var.get('fromIndex'),var.get('undefined')):
                            var.put('index', var.get('toInteger')(var.get('fromIndex')))
                            var.put('index', (var.get('nativeMax')((var.get('length')+var.get('index')), Js(0.0)) if (var.get('fromIndex')<Js(0.0)) else var.get('nativeMin')(var.get('index'), (var.get('length')-Js(1.0)))))
                        return var.get('baseFindIndex')(var.get('array'), var.get('getIteratee')(var.get('predicate'), Js(3.0)), var.get('index'), Js(True))
                    PyJsHoisted_findLastIndex_.func_name = 'findLastIndex'
                    var.put('findLastIndex', PyJsHoisted_findLastIndex_)
                    @Js
                    def PyJsHoisted_flatten_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'length'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        return (var.get('baseFlatten')(var.get('array'), Js(1.0)) if var.get('length') else Js([]))
                    PyJsHoisted_flatten_.func_name = 'flatten'
                    var.put('flatten', PyJsHoisted_flatten_)
                    @Js
                    def PyJsHoisted_flattenDeep_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'length'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        return (var.get('baseFlatten')(var.get('array'), var.get('INFINITY')) if var.get('length') else Js([]))
                    PyJsHoisted_flattenDeep_.func_name = 'flattenDeep'
                    var.put('flattenDeep', PyJsHoisted_flattenDeep_)
                    @Js
                    def PyJsHoisted_flattenDepth_(array, depth, this, arguments, var=var):
                        var = Scope({'array':array, 'depth':depth, 'this':this, 'arguments':arguments}, var)
                        var.registers(['depth', 'array', 'length'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        if var.get('length').neg():
                            return Js([])
                        var.put('depth', (Js(1.0) if PyJsStrictEq(var.get('depth'),var.get('undefined')) else var.get('toInteger')(var.get('depth'))))
                        return var.get('baseFlatten')(var.get('array'), var.get('depth'))
                    PyJsHoisted_flattenDepth_.func_name = 'flattenDepth'
                    var.put('flattenDepth', PyJsHoisted_flattenDepth_)
                    @Js
                    def PyJsHoisted_fromPairs_(pairs, this, arguments, var=var):
                        var = Scope({'pairs':pairs, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'length', 'index', 'pairs', 'pair'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', (Js(0.0) if (var.get('pairs')==var.get(u"null")) else var.get('pairs').get('length')))
                        var.put('result', Js({}))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('pair', var.get('pairs').get(var.get('index')))
                            var.get('result').put(var.get('pair').get('0'), var.get('pair').get('1'))
                        return var.get('result')
                    PyJsHoisted_fromPairs_.func_name = 'fromPairs'
                    var.put('fromPairs', PyJsHoisted_fromPairs_)
                    @Js
                    def PyJsHoisted_head_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array'])
                        return (var.get('array').get('0') if (var.get('array') and var.get('array').get('length')) else var.get('undefined'))
                    PyJsHoisted_head_.func_name = 'head'
                    var.put('head', PyJsHoisted_head_)
                    @Js
                    def PyJsHoisted_indexOf_(array, value, fromIndex, this, arguments, var=var):
                        var = Scope({'array':array, 'value':value, 'fromIndex':fromIndex, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'value', 'fromIndex', 'length', 'index'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        if var.get('length').neg():
                            return (-Js(1.0))
                        var.put('index', (Js(0.0) if (var.get('fromIndex')==var.get(u"null")) else var.get('toInteger')(var.get('fromIndex'))))
                        if (var.get('index')<Js(0.0)):
                            var.put('index', var.get('nativeMax')((var.get('length')+var.get('index')), Js(0.0)))
                        return var.get('baseIndexOf')(var.get('array'), var.get('value'), var.get('index'))
                    PyJsHoisted_indexOf_.func_name = 'indexOf'
                    var.put('indexOf', PyJsHoisted_indexOf_)
                    @Js
                    def PyJsHoisted_initial_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'length'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        return (var.get('baseSlice')(var.get('array'), Js(0.0), (-Js(1.0))) if var.get('length') else Js([]))
                    PyJsHoisted_initial_.func_name = 'initial'
                    var.put('initial', PyJsHoisted_initial_)
                    @Js
                    def PyJsHoisted_join_(array, separator, this, arguments, var=var):
                        var = Scope({'array':array, 'separator':separator, 'this':this, 'arguments':arguments}, var)
                        var.registers(['separator', 'array'])
                        return (Js('') if (var.get('array')==var.get(u"null")) else var.get('nativeJoin').callprop('call', var.get('array'), var.get('separator')))
                    PyJsHoisted_join_.func_name = 'join'
                    var.put('join', PyJsHoisted_join_)
                    @Js
                    def PyJsHoisted_last_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'length'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        return (var.get('array').get((var.get('length')-Js(1.0))) if var.get('length') else var.get('undefined'))
                    PyJsHoisted_last_.func_name = 'last'
                    var.put('last', PyJsHoisted_last_)
                    @Js
                    def PyJsHoisted_lastIndexOf_(array, value, fromIndex, this, arguments, var=var):
                        var = Scope({'array':array, 'value':value, 'fromIndex':fromIndex, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'value', 'fromIndex', 'length', 'index'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        if var.get('length').neg():
                            return (-Js(1.0))
                        var.put('index', var.get('length'))
                        if PyJsStrictNeq(var.get('fromIndex'),var.get('undefined')):
                            var.put('index', var.get('toInteger')(var.get('fromIndex')))
                            var.put('index', (var.get('nativeMax')((var.get('length')+var.get('index')), Js(0.0)) if (var.get('index')<Js(0.0)) else var.get('nativeMin')(var.get('index'), (var.get('length')-Js(1.0)))))
                        return (var.get('strictLastIndexOf')(var.get('array'), var.get('value'), var.get('index')) if PyJsStrictEq(var.get('value'),var.get('value')) else var.get('baseFindIndex')(var.get('array'), var.get('baseIsNaN'), var.get('index'), Js(True)))
                    PyJsHoisted_lastIndexOf_.func_name = 'lastIndexOf'
                    var.put('lastIndexOf', PyJsHoisted_lastIndexOf_)
                    @Js
                    def PyJsHoisted_nth_(array, n, this, arguments, var=var):
                        var = Scope({'array':array, 'n':n, 'this':this, 'arguments':arguments}, var)
                        var.registers(['n', 'array'])
                        return (var.get('baseNth')(var.get('array'), var.get('toInteger')(var.get('n'))) if (var.get('array') and var.get('array').get('length')) else var.get('undefined'))
                    PyJsHoisted_nth_.func_name = 'nth'
                    var.put('nth', PyJsHoisted_nth_)
                    @Js
                    def PyJsHoisted_pullAll_(array, values, this, arguments, var=var):
                        var = Scope({'array':array, 'values':values, 'this':this, 'arguments':arguments}, var)
                        var.registers(['values', 'array'])
                        return (var.get('basePullAll')(var.get('array'), var.get('values')) if (((var.get('array') and var.get('array').get('length')) and var.get('values')) and var.get('values').get('length')) else var.get('array'))
                    PyJsHoisted_pullAll_.func_name = 'pullAll'
                    var.put('pullAll', PyJsHoisted_pullAll_)
                    @Js
                    def PyJsHoisted_pullAllBy_(array, values, iteratee, this, arguments, var=var):
                        var = Scope({'array':array, 'values':values, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['values', 'array', 'iteratee'])
                        return (var.get('basePullAll')(var.get('array'), var.get('values'), var.get('getIteratee')(var.get('iteratee'), Js(2.0))) if (((var.get('array') and var.get('array').get('length')) and var.get('values')) and var.get('values').get('length')) else var.get('array'))
                    PyJsHoisted_pullAllBy_.func_name = 'pullAllBy'
                    var.put('pullAllBy', PyJsHoisted_pullAllBy_)
                    @Js
                    def PyJsHoisted_pullAllWith_(array, values, comparator, this, arguments, var=var):
                        var = Scope({'array':array, 'values':values, 'comparator':comparator, 'this':this, 'arguments':arguments}, var)
                        var.registers(['values', 'array', 'comparator'])
                        return (var.get('basePullAll')(var.get('array'), var.get('values'), var.get('undefined'), var.get('comparator')) if (((var.get('array') and var.get('array').get('length')) and var.get('values')) and var.get('values').get('length')) else var.get('array'))
                    PyJsHoisted_pullAllWith_.func_name = 'pullAllWith'
                    var.put('pullAllWith', PyJsHoisted_pullAllWith_)
                    @Js
                    def PyJsHoisted_remove_(array, predicate, this, arguments, var=var):
                        var = Scope({'array':array, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'result', 'value', 'indexes', 'predicate', 'length', 'index'])
                        var.put('result', Js([]))
                        if (var.get('array') and var.get('array').get('length')).neg():
                            return var.get('result')
                        var.put('index', (-Js(1.0)))
                        var.put('indexes', Js([]))
                        var.put('length', var.get('array').get('length'))
                        var.put('predicate', var.get('getIteratee')(var.get('predicate'), Js(3.0)))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('value', var.get('array').get(var.get('index')))
                            if var.get('predicate')(var.get('value'), var.get('index'), var.get('array')):
                                var.get('result').callprop('push', var.get('value'))
                                var.get('indexes').callprop('push', var.get('index'))
                        var.get('basePullAt')(var.get('array'), var.get('indexes'))
                        return var.get('result')
                    PyJsHoisted_remove_.func_name = 'remove'
                    var.put('remove', PyJsHoisted_remove_)
                    @Js
                    def PyJsHoisted_reverse_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array'])
                        return (var.get('array') if (var.get('array')==var.get(u"null")) else var.get('nativeReverse').callprop('call', var.get('array')))
                    PyJsHoisted_reverse_.func_name = 'reverse'
                    var.put('reverse', PyJsHoisted_reverse_)
                    @Js
                    def PyJsHoisted_slice_(array, start, end, this, arguments, var=var):
                        var = Scope({'array':array, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'end', 'length', 'start'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        if var.get('length').neg():
                            return Js([])
                        if ((var.get('end') and (var.get('end',throw=False).typeof()!=Js('number'))) and var.get('isIterateeCall')(var.get('array'), var.get('start'), var.get('end'))):
                            var.put('start', Js(0.0))
                            var.put('end', var.get('length'))
                        else:
                            var.put('start', (Js(0.0) if (var.get('start')==var.get(u"null")) else var.get('toInteger')(var.get('start'))))
                            var.put('end', (var.get('length') if PyJsStrictEq(var.get('end'),var.get('undefined')) else var.get('toInteger')(var.get('end'))))
                        return var.get('baseSlice')(var.get('array'), var.get('start'), var.get('end'))
                    PyJsHoisted_slice_.func_name = 'slice'
                    var.put('slice', PyJsHoisted_slice_)
                    @Js
                    def PyJsHoisted_sortedIndex_(array, value, this, arguments, var=var):
                        var = Scope({'array':array, 'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'value'])
                        return var.get('baseSortedIndex')(var.get('array'), var.get('value'))
                    PyJsHoisted_sortedIndex_.func_name = 'sortedIndex'
                    var.put('sortedIndex', PyJsHoisted_sortedIndex_)
                    @Js
                    def PyJsHoisted_sortedIndexBy_(array, value, iteratee, this, arguments, var=var):
                        var = Scope({'array':array, 'value':value, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'value', 'iteratee'])
                        return var.get('baseSortedIndexBy')(var.get('array'), var.get('value'), var.get('getIteratee')(var.get('iteratee'), Js(2.0)))
                    PyJsHoisted_sortedIndexBy_.func_name = 'sortedIndexBy'
                    var.put('sortedIndexBy', PyJsHoisted_sortedIndexBy_)
                    @Js
                    def PyJsHoisted_sortedIndexOf_(array, value, this, arguments, var=var):
                        var = Scope({'array':array, 'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'value', 'length', 'index'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        if var.get('length'):
                            var.put('index', var.get('baseSortedIndex')(var.get('array'), var.get('value')))
                            if ((var.get('index')<var.get('length')) and var.get('eq')(var.get('array').get(var.get('index')), var.get('value'))):
                                return var.get('index')
                        return (-Js(1.0))
                    PyJsHoisted_sortedIndexOf_.func_name = 'sortedIndexOf'
                    var.put('sortedIndexOf', PyJsHoisted_sortedIndexOf_)
                    @Js
                    def PyJsHoisted_sortedLastIndex_(array, value, this, arguments, var=var):
                        var = Scope({'array':array, 'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'value'])
                        return var.get('baseSortedIndex')(var.get('array'), var.get('value'), Js(True))
                    PyJsHoisted_sortedLastIndex_.func_name = 'sortedLastIndex'
                    var.put('sortedLastIndex', PyJsHoisted_sortedLastIndex_)
                    @Js
                    def PyJsHoisted_sortedLastIndexBy_(array, value, iteratee, this, arguments, var=var):
                        var = Scope({'array':array, 'value':value, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'value', 'iteratee'])
                        return var.get('baseSortedIndexBy')(var.get('array'), var.get('value'), var.get('getIteratee')(var.get('iteratee'), Js(2.0)), Js(True))
                    PyJsHoisted_sortedLastIndexBy_.func_name = 'sortedLastIndexBy'
                    var.put('sortedLastIndexBy', PyJsHoisted_sortedLastIndexBy_)
                    @Js
                    def PyJsHoisted_sortedLastIndexOf_(array, value, this, arguments, var=var):
                        var = Scope({'array':array, 'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'value', 'length', 'index'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        if var.get('length'):
                            var.put('index', (var.get('baseSortedIndex')(var.get('array'), var.get('value'), Js(True))-Js(1.0)))
                            if var.get('eq')(var.get('array').get(var.get('index')), var.get('value')):
                                return var.get('index')
                        return (-Js(1.0))
                    PyJsHoisted_sortedLastIndexOf_.func_name = 'sortedLastIndexOf'
                    var.put('sortedLastIndexOf', PyJsHoisted_sortedLastIndexOf_)
                    @Js
                    def PyJsHoisted_sortedUniq_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array'])
                        return (var.get('baseSortedUniq')(var.get('array')) if (var.get('array') and var.get('array').get('length')) else Js([]))
                    PyJsHoisted_sortedUniq_.func_name = 'sortedUniq'
                    var.put('sortedUniq', PyJsHoisted_sortedUniq_)
                    @Js
                    def PyJsHoisted_sortedUniqBy_(array, iteratee, this, arguments, var=var):
                        var = Scope({'array':array, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'iteratee'])
                        return (var.get('baseSortedUniq')(var.get('array'), var.get('getIteratee')(var.get('iteratee'), Js(2.0))) if (var.get('array') and var.get('array').get('length')) else Js([]))
                    PyJsHoisted_sortedUniqBy_.func_name = 'sortedUniqBy'
                    var.put('sortedUniqBy', PyJsHoisted_sortedUniqBy_)
                    @Js
                    def PyJsHoisted_tail_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'length'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        return (var.get('baseSlice')(var.get('array'), Js(1.0), var.get('length')) if var.get('length') else Js([]))
                    PyJsHoisted_tail_.func_name = 'tail'
                    var.put('tail', PyJsHoisted_tail_)
                    @Js
                    def PyJsHoisted_take_(array, n, guard, this, arguments, var=var):
                        var = Scope({'array':array, 'n':n, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['n', 'array', 'guard'])
                        if (var.get('array') and var.get('array').get('length')).neg():
                            return Js([])
                        var.put('n', (Js(1.0) if (var.get('guard') or PyJsStrictEq(var.get('n'),var.get('undefined'))) else var.get('toInteger')(var.get('n'))))
                        return var.get('baseSlice')(var.get('array'), Js(0.0), (Js(0.0) if (var.get('n')<Js(0.0)) else var.get('n')))
                    PyJsHoisted_take_.func_name = 'take'
                    var.put('take', PyJsHoisted_take_)
                    @Js
                    def PyJsHoisted_takeRight_(array, n, guard, this, arguments, var=var):
                        var = Scope({'array':array, 'n':n, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['n', 'array', 'length', 'guard'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        if var.get('length').neg():
                            return Js([])
                        var.put('n', (Js(1.0) if (var.get('guard') or PyJsStrictEq(var.get('n'),var.get('undefined'))) else var.get('toInteger')(var.get('n'))))
                        var.put('n', (var.get('length')-var.get('n')))
                        return var.get('baseSlice')(var.get('array'), (Js(0.0) if (var.get('n')<Js(0.0)) else var.get('n')), var.get('length'))
                    PyJsHoisted_takeRight_.func_name = 'takeRight'
                    var.put('takeRight', PyJsHoisted_takeRight_)
                    @Js
                    def PyJsHoisted_takeRightWhile_(array, predicate, this, arguments, var=var):
                        var = Scope({'array':array, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'predicate'])
                        return (var.get('baseWhile')(var.get('array'), var.get('getIteratee')(var.get('predicate'), Js(3.0)), Js(False), Js(True)) if (var.get('array') and var.get('array').get('length')) else Js([]))
                    PyJsHoisted_takeRightWhile_.func_name = 'takeRightWhile'
                    var.put('takeRightWhile', PyJsHoisted_takeRightWhile_)
                    @Js
                    def PyJsHoisted_takeWhile_(array, predicate, this, arguments, var=var):
                        var = Scope({'array':array, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'predicate'])
                        return (var.get('baseWhile')(var.get('array'), var.get('getIteratee')(var.get('predicate'), Js(3.0))) if (var.get('array') and var.get('array').get('length')) else Js([]))
                    PyJsHoisted_takeWhile_.func_name = 'takeWhile'
                    var.put('takeWhile', PyJsHoisted_takeWhile_)
                    @Js
                    def PyJsHoisted_uniq_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array'])
                        return (var.get('baseUniq')(var.get('array')) if (var.get('array') and var.get('array').get('length')) else Js([]))
                    PyJsHoisted_uniq_.func_name = 'uniq'
                    var.put('uniq', PyJsHoisted_uniq_)
                    @Js
                    def PyJsHoisted_uniqBy_(array, iteratee, this, arguments, var=var):
                        var = Scope({'array':array, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'iteratee'])
                        return (var.get('baseUniq')(var.get('array'), var.get('getIteratee')(var.get('iteratee'), Js(2.0))) if (var.get('array') and var.get('array').get('length')) else Js([]))
                    PyJsHoisted_uniqBy_.func_name = 'uniqBy'
                    var.put('uniqBy', PyJsHoisted_uniqBy_)
                    @Js
                    def PyJsHoisted_uniqWith_(array, comparator, this, arguments, var=var):
                        var = Scope({'array':array, 'comparator':comparator, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'comparator'])
                        var.put('comparator', (var.get('comparator') if (var.get('comparator',throw=False).typeof()==Js('function')) else var.get('undefined')))
                        return (var.get('baseUniq')(var.get('array'), var.get('undefined'), var.get('comparator')) if (var.get('array') and var.get('array').get('length')) else Js([]))
                    PyJsHoisted_uniqWith_.func_name = 'uniqWith'
                    var.put('uniqWith', PyJsHoisted_uniqWith_)
                    @Js
                    def PyJsHoisted_unzip_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'length'])
                        if (var.get('array') and var.get('array').get('length')).neg():
                            return Js([])
                        var.put('length', Js(0.0))
                        @Js
                        def PyJs_anonymous_836_(group, this, arguments, var=var):
                            var = Scope({'group':group, 'this':this, 'arguments':arguments}, var)
                            var.registers(['group'])
                            if var.get('isArrayLikeObject')(var.get('group')):
                                var.put('length', var.get('nativeMax')(var.get('group').get('length'), var.get('length')))
                                return Js(True)
                        PyJs_anonymous_836_._set_name('anonymous')
                        var.put('array', var.get('arrayFilter')(var.get('array'), PyJs_anonymous_836_))
                        @Js
                        def PyJs_anonymous_837_(index, this, arguments, var=var):
                            var = Scope({'index':index, 'this':this, 'arguments':arguments}, var)
                            var.registers(['index'])
                            return var.get('arrayMap')(var.get('array'), var.get('baseProperty')(var.get('index')))
                        PyJs_anonymous_837_._set_name('anonymous')
                        return var.get('baseTimes')(var.get('length'), PyJs_anonymous_837_)
                    PyJsHoisted_unzip_.func_name = 'unzip'
                    var.put('unzip', PyJsHoisted_unzip_)
                    @Js
                    def PyJsHoisted_unzipWith_(array, iteratee, this, arguments, var=var):
                        var = Scope({'array':array, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'result', 'iteratee'])
                        if (var.get('array') and var.get('array').get('length')).neg():
                            return Js([])
                        var.put('result', var.get('unzip')(var.get('array')))
                        if (var.get('iteratee')==var.get(u"null")):
                            return var.get('result')
                        @Js
                        def PyJs_anonymous_838_(group, this, arguments, var=var):
                            var = Scope({'group':group, 'this':this, 'arguments':arguments}, var)
                            var.registers(['group'])
                            return var.get('apply')(var.get('iteratee'), var.get('undefined'), var.get('group'))
                        PyJs_anonymous_838_._set_name('anonymous')
                        return var.get('arrayMap')(var.get('result'), PyJs_anonymous_838_)
                    PyJsHoisted_unzipWith_.func_name = 'unzipWith'
                    var.put('unzipWith', PyJsHoisted_unzipWith_)
                    @Js
                    def PyJsHoisted_zipObject_(props, values, this, arguments, var=var):
                        var = Scope({'props':props, 'values':values, 'this':this, 'arguments':arguments}, var)
                        var.registers(['values', 'props'])
                        return var.get('baseZipObject')((var.get('props') or Js([])), (var.get('values') or Js([])), var.get('assignValue'))
                    PyJsHoisted_zipObject_.func_name = 'zipObject'
                    var.put('zipObject', PyJsHoisted_zipObject_)
                    @Js
                    def PyJsHoisted_zipObjectDeep_(props, values, this, arguments, var=var):
                        var = Scope({'props':props, 'values':values, 'this':this, 'arguments':arguments}, var)
                        var.registers(['values', 'props'])
                        return var.get('baseZipObject')((var.get('props') or Js([])), (var.get('values') or Js([])), var.get('baseSet'))
                    PyJsHoisted_zipObjectDeep_.func_name = 'zipObjectDeep'
                    var.put('zipObjectDeep', PyJsHoisted_zipObjectDeep_)
                    @Js
                    def PyJsHoisted_chain_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'value'])
                        var.put('result', var.get('lodash')(var.get('value')))
                        var.get('result').put('__chain__', Js(True))
                        return var.get('result')
                    PyJsHoisted_chain_.func_name = 'chain'
                    var.put('chain', PyJsHoisted_chain_)
                    @Js
                    def PyJsHoisted_tap_(value, interceptor, this, arguments, var=var):
                        var = Scope({'value':value, 'interceptor':interceptor, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'interceptor'])
                        var.get('interceptor')(var.get('value'))
                        return var.get('value')
                    PyJsHoisted_tap_.func_name = 'tap'
                    var.put('tap', PyJsHoisted_tap_)
                    @Js
                    def PyJsHoisted_thru_(value, interceptor, this, arguments, var=var):
                        var = Scope({'value':value, 'interceptor':interceptor, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'interceptor'])
                        return var.get('interceptor')(var.get('value'))
                    PyJsHoisted_thru_.func_name = 'thru'
                    var.put('thru', PyJsHoisted_thru_)
                    @Js
                    def PyJsHoisted_wrapperChain_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get('chain')(var.get(u"this"))
                    PyJsHoisted_wrapperChain_.func_name = 'wrapperChain'
                    var.put('wrapperChain', PyJsHoisted_wrapperChain_)
                    @Js
                    def PyJsHoisted_wrapperCommit_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get('LodashWrapper').create(var.get(u"this").callprop('value'), var.get(u"this").get('__chain__'))
                    PyJsHoisted_wrapperCommit_.func_name = 'wrapperCommit'
                    var.put('wrapperCommit', PyJsHoisted_wrapperCommit_)
                    @Js
                    def PyJsHoisted_wrapperNext_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['done', 'value'])
                        if PyJsStrictEq(var.get(u"this").get('__values__'),var.get('undefined')):
                            var.get(u"this").put('__values__', var.get('toArray')(var.get(u"this").callprop('value')))
                        var.put('done', (var.get(u"this").get('__index__')>=var.get(u"this").get('__values__').get('length')))
                        var.put('value', (var.get('undefined') if var.get('done') else var.get(u"this").get('__values__').get((var.get(u"this").put('__index__',Js(var.get(u"this").get('__index__').to_number())+Js(1))-Js(1)))))
                        return Js({'done':var.get('done'),'value':var.get('value')})
                    PyJsHoisted_wrapperNext_.func_name = 'wrapperNext'
                    var.put('wrapperNext', PyJsHoisted_wrapperNext_)
                    @Js
                    def PyJsHoisted_wrapperToIterator_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get(u"this")
                    PyJsHoisted_wrapperToIterator_.func_name = 'wrapperToIterator'
                    var.put('wrapperToIterator', PyJsHoisted_wrapperToIterator_)
                    @Js
                    def PyJsHoisted_wrapperPlant_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['clone', 'result', 'value', 'previous', 'parent'])
                        var.put('parent', var.get(u"this"))
                        while var.get('parent').instanceof(var.get('baseLodash')):
                            var.put('clone', var.get('wrapperClone')(var.get('parent')))
                            var.get('clone').put('__index__', Js(0.0))
                            var.get('clone').put('__values__', var.get('undefined'))
                            if var.get('result'):
                                var.get('previous').put('__wrapped__', var.get('clone'))
                            else:
                                var.put('result', var.get('clone'))
                            var.put('previous', var.get('clone'))
                            var.put('parent', var.get('parent').get('__wrapped__'))
                        var.get('previous').put('__wrapped__', var.get('value'))
                        return var.get('result')
                    PyJsHoisted_wrapperPlant_.func_name = 'wrapperPlant'
                    var.put('wrapperPlant', PyJsHoisted_wrapperPlant_)
                    @Js
                    def PyJsHoisted_wrapperReverse_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'wrapped'])
                        var.put('value', var.get(u"this").get('__wrapped__'))
                        if var.get('value').instanceof(var.get('LazyWrapper')):
                            var.put('wrapped', var.get('value'))
                            if var.get(u"this").get('__actions__').get('length'):
                                var.put('wrapped', var.get('LazyWrapper').create(var.get(u"this")))
                            var.put('wrapped', var.get('wrapped').callprop('reverse'))
                            var.get('wrapped').get('__actions__').callprop('push', Js({'func':var.get('thru'),'args':Js([var.get('reverse')]),'thisArg':var.get('undefined')}))
                            return var.get('LodashWrapper').create(var.get('wrapped'), var.get(u"this").get('__chain__'))
                        return var.get(u"this").callprop('thru', var.get('reverse'))
                    PyJsHoisted_wrapperReverse_.func_name = 'wrapperReverse'
                    var.put('wrapperReverse', PyJsHoisted_wrapperReverse_)
                    @Js
                    def PyJsHoisted_wrapperValue_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get('baseWrapperValue')(var.get(u"this").get('__wrapped__'), var.get(u"this").get('__actions__'))
                    PyJsHoisted_wrapperValue_.func_name = 'wrapperValue'
                    var.put('wrapperValue', PyJsHoisted_wrapperValue_)
                    @Js
                    def PyJsHoisted_every_(collection, predicate, guard, this, arguments, var=var):
                        var = Scope({'collection':collection, 'predicate':predicate, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'guard', 'predicate', 'collection'])
                        var.put('func', (var.get('arrayEvery') if var.get('isArray')(var.get('collection')) else var.get('baseEvery')))
                        if (var.get('guard') and var.get('isIterateeCall')(var.get('collection'), var.get('predicate'), var.get('guard'))):
                            var.put('predicate', var.get('undefined'))
                        return var.get('func')(var.get('collection'), var.get('getIteratee')(var.get('predicate'), Js(3.0)))
                    PyJsHoisted_every_.func_name = 'every'
                    var.put('every', PyJsHoisted_every_)
                    @Js
                    def PyJsHoisted_filter_(collection, predicate, this, arguments, var=var):
                        var = Scope({'collection':collection, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'predicate', 'collection'])
                        var.put('func', (var.get('arrayFilter') if var.get('isArray')(var.get('collection')) else var.get('baseFilter')))
                        return var.get('func')(var.get('collection'), var.get('getIteratee')(var.get('predicate'), Js(3.0)))
                    PyJsHoisted_filter_.func_name = 'filter'
                    var.put('filter', PyJsHoisted_filter_)
                    @Js
                    def PyJsHoisted_flatMap_(collection, iteratee, this, arguments, var=var):
                        var = Scope({'collection':collection, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['iteratee', 'collection'])
                        return var.get('baseFlatten')(var.get('map')(var.get('collection'), var.get('iteratee')), Js(1.0))
                    PyJsHoisted_flatMap_.func_name = 'flatMap'
                    var.put('flatMap', PyJsHoisted_flatMap_)
                    @Js
                    def PyJsHoisted_flatMapDeep_(collection, iteratee, this, arguments, var=var):
                        var = Scope({'collection':collection, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['iteratee', 'collection'])
                        return var.get('baseFlatten')(var.get('map')(var.get('collection'), var.get('iteratee')), var.get('INFINITY'))
                    PyJsHoisted_flatMapDeep_.func_name = 'flatMapDeep'
                    var.put('flatMapDeep', PyJsHoisted_flatMapDeep_)
                    @Js
                    def PyJsHoisted_flatMapDepth_(collection, iteratee, depth, this, arguments, var=var):
                        var = Scope({'collection':collection, 'iteratee':iteratee, 'depth':depth, 'this':this, 'arguments':arguments}, var)
                        var.registers(['depth', 'iteratee', 'collection'])
                        var.put('depth', (Js(1.0) if PyJsStrictEq(var.get('depth'),var.get('undefined')) else var.get('toInteger')(var.get('depth'))))
                        return var.get('baseFlatten')(var.get('map')(var.get('collection'), var.get('iteratee')), var.get('depth'))
                    PyJsHoisted_flatMapDepth_.func_name = 'flatMapDepth'
                    var.put('flatMapDepth', PyJsHoisted_flatMapDepth_)
                    @Js
                    def PyJsHoisted_forEach_(collection, iteratee, this, arguments, var=var):
                        var = Scope({'collection':collection, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['iteratee', 'func', 'collection'])
                        var.put('func', (var.get('arrayEach') if var.get('isArray')(var.get('collection')) else var.get('baseEach')))
                        return var.get('func')(var.get('collection'), var.get('getIteratee')(var.get('iteratee'), Js(3.0)))
                    PyJsHoisted_forEach_.func_name = 'forEach'
                    var.put('forEach', PyJsHoisted_forEach_)
                    @Js
                    def PyJsHoisted_forEachRight_(collection, iteratee, this, arguments, var=var):
                        var = Scope({'collection':collection, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['iteratee', 'func', 'collection'])
                        var.put('func', (var.get('arrayEachRight') if var.get('isArray')(var.get('collection')) else var.get('baseEachRight')))
                        return var.get('func')(var.get('collection'), var.get('getIteratee')(var.get('iteratee'), Js(3.0)))
                    PyJsHoisted_forEachRight_.func_name = 'forEachRight'
                    var.put('forEachRight', PyJsHoisted_forEachRight_)
                    @Js
                    def PyJsHoisted_includes_(collection, value, fromIndex, guard, this, arguments, var=var):
                        var = Scope({'collection':collection, 'value':value, 'fromIndex':fromIndex, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'collection', 'fromIndex', 'length', 'guard'])
                        var.put('collection', (var.get('collection') if var.get('isArrayLike')(var.get('collection')) else var.get('values')(var.get('collection'))))
                        var.put('fromIndex', (var.get('toInteger')(var.get('fromIndex')) if (var.get('fromIndex') and var.get('guard').neg()) else Js(0.0)))
                        var.put('length', var.get('collection').get('length'))
                        if (var.get('fromIndex')<Js(0.0)):
                            var.put('fromIndex', var.get('nativeMax')((var.get('length')+var.get('fromIndex')), Js(0.0)))
                        return (((var.get('fromIndex')<=var.get('length')) and (var.get('collection').callprop('indexOf', var.get('value'), var.get('fromIndex'))>(-Js(1.0)))) if var.get('isString')(var.get('collection')) else (var.get('length').neg().neg() and (var.get('baseIndexOf')(var.get('collection'), var.get('value'), var.get('fromIndex'))>(-Js(1.0)))))
                    PyJsHoisted_includes_.func_name = 'includes'
                    var.put('includes', PyJsHoisted_includes_)
                    @Js
                    def PyJsHoisted_map_(collection, iteratee, this, arguments, var=var):
                        var = Scope({'collection':collection, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['iteratee', 'func', 'collection'])
                        var.put('func', (var.get('arrayMap') if var.get('isArray')(var.get('collection')) else var.get('baseMap')))
                        return var.get('func')(var.get('collection'), var.get('getIteratee')(var.get('iteratee'), Js(3.0)))
                    PyJsHoisted_map_.func_name = 'map'
                    var.put('map', PyJsHoisted_map_)
                    @Js
                    def PyJsHoisted_orderBy_(collection, iteratees, orders, guard, this, arguments, var=var):
                        var = Scope({'collection':collection, 'iteratees':iteratees, 'orders':orders, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['iteratees', 'orders', 'guard', 'collection'])
                        if (var.get('collection')==var.get(u"null")):
                            return Js([])
                        if var.get('isArray')(var.get('iteratees')).neg():
                            var.put('iteratees', (Js([]) if (var.get('iteratees')==var.get(u"null")) else Js([var.get('iteratees')])))
                        var.put('orders', (var.get('undefined') if var.get('guard') else var.get('orders')))
                        if var.get('isArray')(var.get('orders')).neg():
                            var.put('orders', (Js([]) if (var.get('orders')==var.get(u"null")) else Js([var.get('orders')])))
                        return var.get('baseOrderBy')(var.get('collection'), var.get('iteratees'), var.get('orders'))
                    PyJsHoisted_orderBy_.func_name = 'orderBy'
                    var.put('orderBy', PyJsHoisted_orderBy_)
                    @Js
                    def PyJsHoisted_reduce_(collection, iteratee, accumulator, this, arguments, var=var):
                        var = Scope({'collection':collection, 'iteratee':iteratee, 'accumulator':accumulator, 'this':this, 'arguments':arguments}, var)
                        var.registers(['collection', 'func', 'initAccum', 'accumulator', 'iteratee'])
                        var.put('func', (var.get('arrayReduce') if var.get('isArray')(var.get('collection')) else var.get('baseReduce')))
                        var.put('initAccum', (var.get('arguments').get('length')<Js(3.0)))
                        return var.get('func')(var.get('collection'), var.get('getIteratee')(var.get('iteratee'), Js(4.0)), var.get('accumulator'), var.get('initAccum'), var.get('baseEach'))
                    PyJsHoisted_reduce_.func_name = 'reduce'
                    var.put('reduce', PyJsHoisted_reduce_)
                    @Js
                    def PyJsHoisted_reduceRight_(collection, iteratee, accumulator, this, arguments, var=var):
                        var = Scope({'collection':collection, 'iteratee':iteratee, 'accumulator':accumulator, 'this':this, 'arguments':arguments}, var)
                        var.registers(['collection', 'func', 'initAccum', 'accumulator', 'iteratee'])
                        var.put('func', (var.get('arrayReduceRight') if var.get('isArray')(var.get('collection')) else var.get('baseReduce')))
                        var.put('initAccum', (var.get('arguments').get('length')<Js(3.0)))
                        return var.get('func')(var.get('collection'), var.get('getIteratee')(var.get('iteratee'), Js(4.0)), var.get('accumulator'), var.get('initAccum'), var.get('baseEachRight'))
                    PyJsHoisted_reduceRight_.func_name = 'reduceRight'
                    var.put('reduceRight', PyJsHoisted_reduceRight_)
                    @Js
                    def PyJsHoisted_reject_(collection, predicate, this, arguments, var=var):
                        var = Scope({'collection':collection, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'predicate', 'collection'])
                        var.put('func', (var.get('arrayFilter') if var.get('isArray')(var.get('collection')) else var.get('baseFilter')))
                        return var.get('func')(var.get('collection'), var.get('negate')(var.get('getIteratee')(var.get('predicate'), Js(3.0))))
                    PyJsHoisted_reject_.func_name = 'reject'
                    var.put('reject', PyJsHoisted_reject_)
                    @Js
                    def PyJsHoisted_sample_(collection, this, arguments, var=var):
                        var = Scope({'collection':collection, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'collection'])
                        var.put('func', (var.get('arraySample') if var.get('isArray')(var.get('collection')) else var.get('baseSample')))
                        return var.get('func')(var.get('collection'))
                    PyJsHoisted_sample_.func_name = 'sample'
                    var.put('sample', PyJsHoisted_sample_)
                    @Js
                    def PyJsHoisted_sampleSize_(collection, n, guard, this, arguments, var=var):
                        var = Scope({'collection':collection, 'n':n, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['n', 'func', 'guard', 'collection'])
                        if (var.get('isIterateeCall')(var.get('collection'), var.get('n'), var.get('guard')) if var.get('guard') else PyJsStrictEq(var.get('n'),var.get('undefined'))):
                            var.put('n', Js(1.0))
                        else:
                            var.put('n', var.get('toInteger')(var.get('n')))
                        var.put('func', (var.get('arraySampleSize') if var.get('isArray')(var.get('collection')) else var.get('baseSampleSize')))
                        return var.get('func')(var.get('collection'), var.get('n'))
                    PyJsHoisted_sampleSize_.func_name = 'sampleSize'
                    var.put('sampleSize', PyJsHoisted_sampleSize_)
                    @Js
                    def PyJsHoisted_shuffle_(collection, this, arguments, var=var):
                        var = Scope({'collection':collection, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'collection'])
                        var.put('func', (var.get('arrayShuffle') if var.get('isArray')(var.get('collection')) else var.get('baseShuffle')))
                        return var.get('func')(var.get('collection'))
                    PyJsHoisted_shuffle_.func_name = 'shuffle'
                    var.put('shuffle', PyJsHoisted_shuffle_)
                    @Js
                    def PyJsHoisted_size_(collection, this, arguments, var=var):
                        var = Scope({'collection':collection, 'this':this, 'arguments':arguments}, var)
                        var.registers(['tag', 'collection'])
                        if (var.get('collection')==var.get(u"null")):
                            return Js(0.0)
                        if var.get('isArrayLike')(var.get('collection')):
                            return (var.get('stringSize')(var.get('collection')) if var.get('isString')(var.get('collection')) else var.get('collection').get('length'))
                        var.put('tag', var.get('getTag')(var.get('collection')))
                        if ((var.get('tag')==var.get('mapTag')) or (var.get('tag')==var.get('setTag'))):
                            return var.get('collection').get('size')
                        return var.get('baseKeys')(var.get('collection')).get('length')
                    PyJsHoisted_size_.func_name = 'size'
                    var.put('size', PyJsHoisted_size_)
                    @Js
                    def PyJsHoisted_some_(collection, predicate, guard, this, arguments, var=var):
                        var = Scope({'collection':collection, 'predicate':predicate, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'guard', 'predicate', 'collection'])
                        var.put('func', (var.get('arraySome') if var.get('isArray')(var.get('collection')) else var.get('baseSome')))
                        if (var.get('guard') and var.get('isIterateeCall')(var.get('collection'), var.get('predicate'), var.get('guard'))):
                            var.put('predicate', var.get('undefined'))
                        return var.get('func')(var.get('collection'), var.get('getIteratee')(var.get('predicate'), Js(3.0)))
                    PyJsHoisted_some_.func_name = 'some'
                    var.put('some', PyJsHoisted_some_)
                    @Js
                    def PyJsHoisted_after_(n, func, this, arguments, var=var):
                        var = Scope({'n':n, 'func':func, 'this':this, 'arguments':arguments}, var)
                        var.registers(['n', 'func'])
                        if (var.get('func',throw=False).typeof()!=Js('function')):
                            PyJsTempException = JsToPyException(var.get('TypeError').create(var.get('FUNC_ERROR_TEXT')))
                            raise PyJsTempException
                        var.put('n', var.get('toInteger')(var.get('n')))
                        @Js
                        def PyJs_anonymous_856_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            if (var.put('n',Js(var.get('n').to_number())-Js(1))<Js(1.0)):
                                return var.get('func').callprop('apply', var.get(u"this"), var.get('arguments'))
                        PyJs_anonymous_856_._set_name('anonymous')
                        return PyJs_anonymous_856_
                    PyJsHoisted_after_.func_name = 'after'
                    var.put('after', PyJsHoisted_after_)
                    @Js
                    def PyJsHoisted_ary_(func, n, guard, this, arguments, var=var):
                        var = Scope({'func':func, 'n':n, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['n', 'func', 'guard'])
                        var.put('n', (var.get('undefined') if var.get('guard') else var.get('n')))
                        var.put('n', (var.get('func').get('length') if (var.get('func') and (var.get('n')==var.get(u"null"))) else var.get('n')))
                        return var.get('createWrap')(var.get('func'), var.get('WRAP_ARY_FLAG'), var.get('undefined'), var.get('undefined'), var.get('undefined'), var.get('undefined'), var.get('n'))
                    PyJsHoisted_ary_.func_name = 'ary'
                    var.put('ary', PyJsHoisted_ary_)
                    @Js
                    def PyJsHoisted_before_(n, func, this, arguments, var=var):
                        var = Scope({'n':n, 'func':func, 'this':this, 'arguments':arguments}, var)
                        var.registers(['n', 'result', 'func'])
                        pass
                        if (var.get('func',throw=False).typeof()!=Js('function')):
                            PyJsTempException = JsToPyException(var.get('TypeError').create(var.get('FUNC_ERROR_TEXT')))
                            raise PyJsTempException
                        var.put('n', var.get('toInteger')(var.get('n')))
                        @Js
                        def PyJs_anonymous_857_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            if (var.put('n',Js(var.get('n').to_number())-Js(1))>Js(0.0)):
                                var.put('result', var.get('func').callprop('apply', var.get(u"this"), var.get('arguments')))
                            if (var.get('n')<=Js(1.0)):
                                var.put('func', var.get('undefined'))
                            return var.get('result')
                        PyJs_anonymous_857_._set_name('anonymous')
                        return PyJs_anonymous_857_
                    PyJsHoisted_before_.func_name = 'before'
                    var.put('before', PyJsHoisted_before_)
                    @Js
                    def PyJsHoisted_curry_(func, arity, guard, this, arguments, var=var):
                        var = Scope({'func':func, 'arity':arity, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'func', 'guard', 'arity'])
                        var.put('arity', (var.get('undefined') if var.get('guard') else var.get('arity')))
                        var.put('result', var.get('createWrap')(var.get('func'), var.get('WRAP_CURRY_FLAG'), var.get('undefined'), var.get('undefined'), var.get('undefined'), var.get('undefined'), var.get('undefined'), var.get('arity')))
                        var.get('result').put('placeholder', var.get('curry').get('placeholder'))
                        return var.get('result')
                    PyJsHoisted_curry_.func_name = 'curry'
                    var.put('curry', PyJsHoisted_curry_)
                    @Js
                    def PyJsHoisted_curryRight_(func, arity, guard, this, arguments, var=var):
                        var = Scope({'func':func, 'arity':arity, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'func', 'guard', 'arity'])
                        var.put('arity', (var.get('undefined') if var.get('guard') else var.get('arity')))
                        var.put('result', var.get('createWrap')(var.get('func'), var.get('WRAP_CURRY_RIGHT_FLAG'), var.get('undefined'), var.get('undefined'), var.get('undefined'), var.get('undefined'), var.get('undefined'), var.get('arity')))
                        var.get('result').put('placeholder', var.get('curryRight').get('placeholder'))
                        return var.get('result')
                    PyJsHoisted_curryRight_.func_name = 'curryRight'
                    var.put('curryRight', PyJsHoisted_curryRight_)
                    @Js
                    def PyJsHoisted_debounce_(func, wait, options, this, arguments, var=var):
                        var = Scope({'func':func, 'wait':wait, 'options':options, 'this':this, 'arguments':arguments}, var)
                        var.registers(['wait', 'options', 'invokeFunc', 'lastInvokeTime', 'maxing', 'maxWait', 'lastCallTime', 'trailingEdge', 'timerExpired', 'trailing', 'flush', 'leading', 'timerId', 'func', 'remainingWait', 'shouldInvoke', 'cancel', 'result', 'debounced', 'leadingEdge', 'lastArgs', 'lastThis'])
                        @Js
                        def PyJsHoisted_invokeFunc_(time, this, arguments, var=var):
                            var = Scope({'time':time, 'this':this, 'arguments':arguments}, var)
                            var.registers(['args', 'time', 'thisArg'])
                            var.put('args', var.get('lastArgs'))
                            var.put('thisArg', var.get('lastThis'))
                            var.put('lastArgs', var.put('lastThis', var.get('undefined')))
                            var.put('lastInvokeTime', var.get('time'))
                            var.put('result', var.get('func').callprop('apply', var.get('thisArg'), var.get('args')))
                            return var.get('result')
                        PyJsHoisted_invokeFunc_.func_name = 'invokeFunc'
                        var.put('invokeFunc', PyJsHoisted_invokeFunc_)
                        @Js
                        def PyJsHoisted_leadingEdge_(time, this, arguments, var=var):
                            var = Scope({'time':time, 'this':this, 'arguments':arguments}, var)
                            var.registers(['time'])
                            var.put('lastInvokeTime', var.get('time'))
                            var.put('timerId', var.get('setTimeout')(var.get('timerExpired'), var.get('wait')))
                            return (var.get('invokeFunc')(var.get('time')) if var.get('leading') else var.get('result'))
                        PyJsHoisted_leadingEdge_.func_name = 'leadingEdge'
                        var.put('leadingEdge', PyJsHoisted_leadingEdge_)
                        @Js
                        def PyJsHoisted_remainingWait_(time, this, arguments, var=var):
                            var = Scope({'time':time, 'this':this, 'arguments':arguments}, var)
                            var.registers(['timeWaiting', 'time', 'timeSinceLastCall', 'timeSinceLastInvoke'])
                            var.put('timeSinceLastCall', (var.get('time')-var.get('lastCallTime')))
                            var.put('timeSinceLastInvoke', (var.get('time')-var.get('lastInvokeTime')))
                            var.put('timeWaiting', (var.get('wait')-var.get('timeSinceLastCall')))
                            return (var.get('nativeMin')(var.get('timeWaiting'), (var.get('maxWait')-var.get('timeSinceLastInvoke'))) if var.get('maxing') else var.get('timeWaiting'))
                        PyJsHoisted_remainingWait_.func_name = 'remainingWait'
                        var.put('remainingWait', PyJsHoisted_remainingWait_)
                        @Js
                        def PyJsHoisted_shouldInvoke_(time, this, arguments, var=var):
                            var = Scope({'time':time, 'this':this, 'arguments':arguments}, var)
                            var.registers(['time', 'timeSinceLastCall', 'timeSinceLastInvoke'])
                            var.put('timeSinceLastCall', (var.get('time')-var.get('lastCallTime')))
                            var.put('timeSinceLastInvoke', (var.get('time')-var.get('lastInvokeTime')))
                            return (((PyJsStrictEq(var.get('lastCallTime'),var.get('undefined')) or (var.get('timeSinceLastCall')>=var.get('wait'))) or (var.get('timeSinceLastCall')<Js(0.0))) or (var.get('maxing') and (var.get('timeSinceLastInvoke')>=var.get('maxWait'))))
                        PyJsHoisted_shouldInvoke_.func_name = 'shouldInvoke'
                        var.put('shouldInvoke', PyJsHoisted_shouldInvoke_)
                        @Js
                        def PyJsHoisted_timerExpired_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers(['time'])
                            var.put('time', var.get('now')())
                            if var.get('shouldInvoke')(var.get('time')):
                                return var.get('trailingEdge')(var.get('time'))
                            var.put('timerId', var.get('setTimeout')(var.get('timerExpired'), var.get('remainingWait')(var.get('time'))))
                        PyJsHoisted_timerExpired_.func_name = 'timerExpired'
                        var.put('timerExpired', PyJsHoisted_timerExpired_)
                        @Js
                        def PyJsHoisted_trailingEdge_(time, this, arguments, var=var):
                            var = Scope({'time':time, 'this':this, 'arguments':arguments}, var)
                            var.registers(['time'])
                            var.put('timerId', var.get('undefined'))
                            if (var.get('trailing') and var.get('lastArgs')):
                                return var.get('invokeFunc')(var.get('time'))
                            var.put('lastArgs', var.put('lastThis', var.get('undefined')))
                            return var.get('result')
                        PyJsHoisted_trailingEdge_.func_name = 'trailingEdge'
                        var.put('trailingEdge', PyJsHoisted_trailingEdge_)
                        @Js
                        def PyJsHoisted_cancel_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            if PyJsStrictNeq(var.get('timerId'),var.get('undefined')):
                                var.get('clearTimeout')(var.get('timerId'))
                            var.put('lastInvokeTime', Js(0.0))
                            var.put('lastArgs', var.put('lastCallTime', var.put('lastThis', var.put('timerId', var.get('undefined')))))
                        PyJsHoisted_cancel_.func_name = 'cancel'
                        var.put('cancel', PyJsHoisted_cancel_)
                        @Js
                        def PyJsHoisted_flush_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            return (var.get('result') if PyJsStrictEq(var.get('timerId'),var.get('undefined')) else var.get('trailingEdge')(var.get('now')()))
                        PyJsHoisted_flush_.func_name = 'flush'
                        var.put('flush', PyJsHoisted_flush_)
                        @Js
                        def PyJsHoisted_debounced_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers(['time', 'isInvoking'])
                            var.put('time', var.get('now')())
                            var.put('isInvoking', var.get('shouldInvoke')(var.get('time')))
                            var.put('lastArgs', var.get('arguments'))
                            var.put('lastThis', var.get(u"this"))
                            var.put('lastCallTime', var.get('time'))
                            if var.get('isInvoking'):
                                if PyJsStrictEq(var.get('timerId'),var.get('undefined')):
                                    return var.get('leadingEdge')(var.get('lastCallTime'))
                                if var.get('maxing'):
                                    var.get('clearTimeout')(var.get('timerId'))
                                    var.put('timerId', var.get('setTimeout')(var.get('timerExpired'), var.get('wait')))
                                    return var.get('invokeFunc')(var.get('lastCallTime'))
                            if PyJsStrictEq(var.get('timerId'),var.get('undefined')):
                                var.put('timerId', var.get('setTimeout')(var.get('timerExpired'), var.get('wait')))
                            return var.get('result')
                        PyJsHoisted_debounced_.func_name = 'debounced'
                        var.put('debounced', PyJsHoisted_debounced_)
                        var.put('lastInvokeTime', Js(0.0))
                        var.put('leading', Js(False))
                        var.put('maxing', Js(False))
                        var.put('trailing', Js(True))
                        if (var.get('func',throw=False).typeof()!=Js('function')):
                            PyJsTempException = JsToPyException(var.get('TypeError').create(var.get('FUNC_ERROR_TEXT')))
                            raise PyJsTempException
                        var.put('wait', (var.get('toNumber')(var.get('wait')) or Js(0.0)))
                        if var.get('isObject')(var.get('options')):
                            var.put('leading', var.get('options').get('leading').neg().neg())
                            var.put('maxing', var.get('options').contains(Js('maxWait')))
                            var.put('maxWait', (var.get('nativeMax')((var.get('toNumber')(var.get('options').get('maxWait')) or Js(0.0)), var.get('wait')) if var.get('maxing') else var.get('maxWait')))
                            var.put('trailing', (var.get('options').get('trailing').neg().neg() if var.get('options').contains(Js('trailing')) else var.get('trailing')))
                        pass
                        pass
                        pass
                        pass
                        pass
                        pass
                        pass
                        pass
                        pass
                        var.get('debounced').put('cancel', var.get('cancel'))
                        var.get('debounced').put('flush', var.get('flush'))
                        return var.get('debounced')
                    PyJsHoisted_debounce_.func_name = 'debounce'
                    var.put('debounce', PyJsHoisted_debounce_)
                    @Js
                    def PyJsHoisted_flip_(func, this, arguments, var=var):
                        var = Scope({'func':func, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func'])
                        return var.get('createWrap')(var.get('func'), var.get('WRAP_FLIP_FLAG'))
                    PyJsHoisted_flip_.func_name = 'flip'
                    var.put('flip', PyJsHoisted_flip_)
                    @Js
                    def PyJsHoisted_memoize_(func, resolver, this, arguments, var=var):
                        var = Scope({'func':func, 'resolver':resolver, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'memoized', 'resolver'])
                        if ((var.get('func',throw=False).typeof()!=Js('function')) or ((var.get('resolver')!=var.get(u"null")) and (var.get('resolver',throw=False).typeof()!=Js('function')))):
                            PyJsTempException = JsToPyException(var.get('TypeError').create(var.get('FUNC_ERROR_TEXT')))
                            raise PyJsTempException
                        @Js
                        def PyJs_anonymous_862_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers(['args', 'key', 'cache', 'result'])
                            var.put('args', var.get('arguments'))
                            var.put('key', (var.get('resolver').callprop('apply', var.get(u"this"), var.get('args')) if var.get('resolver') else var.get('args').get('0')))
                            var.put('cache', var.get('memoized').get('cache'))
                            if var.get('cache').callprop('has', var.get('key')):
                                return var.get('cache').callprop('get', var.get('key'))
                            var.put('result', var.get('func').callprop('apply', var.get(u"this"), var.get('args')))
                            var.get('memoized').put('cache', (var.get('cache').callprop('set', var.get('key'), var.get('result')) or var.get('cache')))
                            return var.get('result')
                        PyJs_anonymous_862_._set_name('anonymous')
                        var.put('memoized', PyJs_anonymous_862_)
                        var.get('memoized').put('cache', (var.get('memoize').get('Cache') or var.get('MapCache')).create())
                        return var.get('memoized')
                    PyJsHoisted_memoize_.func_name = 'memoize'
                    var.put('memoize', PyJsHoisted_memoize_)
                    @Js
                    def PyJsHoisted_negate_(predicate, this, arguments, var=var):
                        var = Scope({'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['predicate'])
                        if (var.get('predicate',throw=False).typeof()!=Js('function')):
                            PyJsTempException = JsToPyException(var.get('TypeError').create(var.get('FUNC_ERROR_TEXT')))
                            raise PyJsTempException
                        @Js
                        def PyJs_anonymous_863_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers(['args'])
                            var.put('args', var.get('arguments'))
                            while 1:
                                SWITCHED = False
                                CONDITION = (var.get('args').get('length'))
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(0.0)):
                                    SWITCHED = True
                                    return var.get('predicate').callprop('call', var.get(u"this")).neg()
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                                    SWITCHED = True
                                    return var.get('predicate').callprop('call', var.get(u"this"), var.get('args').get('0')).neg()
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                                    SWITCHED = True
                                    return var.get('predicate').callprop('call', var.get(u"this"), var.get('args').get('0'), var.get('args').get('1')).neg()
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                                    SWITCHED = True
                                    return var.get('predicate').callprop('call', var.get(u"this"), var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2')).neg()
                                SWITCHED = True
                                break
                            return var.get('predicate').callprop('apply', var.get(u"this"), var.get('args')).neg()
                        PyJs_anonymous_863_._set_name('anonymous')
                        return PyJs_anonymous_863_
                    PyJsHoisted_negate_.func_name = 'negate'
                    var.put('negate', PyJsHoisted_negate_)
                    @Js
                    def PyJsHoisted_once_(func, this, arguments, var=var):
                        var = Scope({'func':func, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func'])
                        return var.get('before')(Js(2.0), var.get('func'))
                    PyJsHoisted_once_.func_name = 'once'
                    var.put('once', PyJsHoisted_once_)
                    @Js
                    def PyJsHoisted_rest_(func, start, this, arguments, var=var):
                        var = Scope({'func':func, 'start':start, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'start'])
                        if (var.get('func',throw=False).typeof()!=Js('function')):
                            PyJsTempException = JsToPyException(var.get('TypeError').create(var.get('FUNC_ERROR_TEXT')))
                            raise PyJsTempException
                        var.put('start', (var.get('start') if PyJsStrictEq(var.get('start'),var.get('undefined')) else var.get('toInteger')(var.get('start'))))
                        return var.get('baseRest')(var.get('func'), var.get('start'))
                    PyJsHoisted_rest_.func_name = 'rest'
                    var.put('rest', PyJsHoisted_rest_)
                    @Js
                    def PyJsHoisted_spread_(func, start, this, arguments, var=var):
                        var = Scope({'func':func, 'start':start, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'start'])
                        if (var.get('func',throw=False).typeof()!=Js('function')):
                            PyJsTempException = JsToPyException(var.get('TypeError').create(var.get('FUNC_ERROR_TEXT')))
                            raise PyJsTempException
                        var.put('start', (Js(0.0) if (var.get('start')==var.get(u"null")) else var.get('nativeMax')(var.get('toInteger')(var.get('start')), Js(0.0))))
                        @Js
                        def PyJs_anonymous_869_(args, this, arguments, var=var):
                            var = Scope({'args':args, 'this':this, 'arguments':arguments}, var)
                            var.registers(['args', 'array', 'otherArgs'])
                            var.put('array', var.get('args').get(var.get('start')))
                            var.put('otherArgs', var.get('castSlice')(var.get('args'), Js(0.0), var.get('start')))
                            if var.get('array'):
                                var.get('arrayPush')(var.get('otherArgs'), var.get('array'))
                            return var.get('apply')(var.get('func'), var.get(u"this"), var.get('otherArgs'))
                        PyJs_anonymous_869_._set_name('anonymous')
                        return var.get('baseRest')(PyJs_anonymous_869_)
                    PyJsHoisted_spread_.func_name = 'spread'
                    var.put('spread', PyJsHoisted_spread_)
                    @Js
                    def PyJsHoisted_throttle_(func, wait, options, this, arguments, var=var):
                        var = Scope({'func':func, 'wait':wait, 'options':options, 'this':this, 'arguments':arguments}, var)
                        var.registers(['wait', 'leading', 'options', 'func', 'trailing'])
                        var.put('leading', Js(True))
                        var.put('trailing', Js(True))
                        if (var.get('func',throw=False).typeof()!=Js('function')):
                            PyJsTempException = JsToPyException(var.get('TypeError').create(var.get('FUNC_ERROR_TEXT')))
                            raise PyJsTempException
                        if var.get('isObject')(var.get('options')):
                            var.put('leading', (var.get('options').get('leading').neg().neg() if var.get('options').contains(Js('leading')) else var.get('leading')))
                            var.put('trailing', (var.get('options').get('trailing').neg().neg() if var.get('options').contains(Js('trailing')) else var.get('trailing')))
                        return var.get('debounce')(var.get('func'), var.get('wait'), Js({'leading':var.get('leading'),'maxWait':var.get('wait'),'trailing':var.get('trailing')}))
                    PyJsHoisted_throttle_.func_name = 'throttle'
                    var.put('throttle', PyJsHoisted_throttle_)
                    @Js
                    def PyJsHoisted_unary_(func, this, arguments, var=var):
                        var = Scope({'func':func, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func'])
                        return var.get('ary')(var.get('func'), Js(1.0))
                    PyJsHoisted_unary_.func_name = 'unary'
                    var.put('unary', PyJsHoisted_unary_)
                    @Js
                    def PyJsHoisted_wrap_(value, wrapper, this, arguments, var=var):
                        var = Scope({'value':value, 'wrapper':wrapper, 'this':this, 'arguments':arguments}, var)
                        var.registers(['wrapper', 'value'])
                        return var.get('partial')(var.get('castFunction')(var.get('wrapper')), var.get('value'))
                    PyJsHoisted_wrap_.func_name = 'wrap'
                    var.put('wrap', PyJsHoisted_wrap_)
                    @Js
                    def PyJsHoisted_castArray_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        if var.get('arguments').get('length').neg():
                            return Js([])
                        var.put('value', var.get('arguments').get('0'))
                        return (var.get('value') if var.get('isArray')(var.get('value')) else Js([var.get('value')]))
                    PyJsHoisted_castArray_.func_name = 'castArray'
                    var.put('castArray', PyJsHoisted_castArray_)
                    @Js
                    def PyJsHoisted_clone_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return var.get('baseClone')(var.get('value'), var.get('CLONE_SYMBOLS_FLAG'))
                    PyJsHoisted_clone_.func_name = 'clone'
                    var.put('clone', PyJsHoisted_clone_)
                    @Js
                    def PyJsHoisted_cloneWith_(value, customizer, this, arguments, var=var):
                        var = Scope({'value':value, 'customizer':customizer, 'this':this, 'arguments':arguments}, var)
                        var.registers(['customizer', 'value'])
                        var.put('customizer', (var.get('customizer') if (var.get('customizer',throw=False).typeof()==Js('function')) else var.get('undefined')))
                        return var.get('baseClone')(var.get('value'), var.get('CLONE_SYMBOLS_FLAG'), var.get('customizer'))
                    PyJsHoisted_cloneWith_.func_name = 'cloneWith'
                    var.put('cloneWith', PyJsHoisted_cloneWith_)
                    @Js
                    def PyJsHoisted_cloneDeep_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return var.get('baseClone')(var.get('value'), (var.get('CLONE_DEEP_FLAG')|var.get('CLONE_SYMBOLS_FLAG')))
                    PyJsHoisted_cloneDeep_.func_name = 'cloneDeep'
                    var.put('cloneDeep', PyJsHoisted_cloneDeep_)
                    @Js
                    def PyJsHoisted_cloneDeepWith_(value, customizer, this, arguments, var=var):
                        var = Scope({'value':value, 'customizer':customizer, 'this':this, 'arguments':arguments}, var)
                        var.registers(['customizer', 'value'])
                        var.put('customizer', (var.get('customizer') if (var.get('customizer',throw=False).typeof()==Js('function')) else var.get('undefined')))
                        return var.get('baseClone')(var.get('value'), (var.get('CLONE_DEEP_FLAG')|var.get('CLONE_SYMBOLS_FLAG')), var.get('customizer'))
                    PyJsHoisted_cloneDeepWith_.func_name = 'cloneDeepWith'
                    var.put('cloneDeepWith', PyJsHoisted_cloneDeepWith_)
                    @Js
                    def PyJsHoisted_conformsTo_(object, source, this, arguments, var=var):
                        var = Scope({'object':object, 'source':source, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'source'])
                        return ((var.get('source')==var.get(u"null")) or var.get('baseConformsTo')(var.get('object'), var.get('source'), var.get('keys')(var.get('source'))))
                    PyJsHoisted_conformsTo_.func_name = 'conformsTo'
                    var.put('conformsTo', PyJsHoisted_conformsTo_)
                    @Js
                    def PyJsHoisted_eq_(value, other, this, arguments, var=var):
                        var = Scope({'value':value, 'other':other, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'other'])
                        return (PyJsStrictEq(var.get('value'),var.get('other')) or (PyJsStrictNeq(var.get('value'),var.get('value')) and PyJsStrictNeq(var.get('other'),var.get('other'))))
                    PyJsHoisted_eq_.func_name = 'eq'
                    var.put('eq', PyJsHoisted_eq_)
                    @Js
                    def PyJsHoisted_isArrayLike_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (((var.get('value')!=var.get(u"null")) and var.get('isLength')(var.get('value').get('length'))) and var.get('isFunction')(var.get('value')).neg())
                    PyJsHoisted_isArrayLike_.func_name = 'isArrayLike'
                    var.put('isArrayLike', PyJsHoisted_isArrayLike_)
                    @Js
                    def PyJsHoisted_isArrayLikeObject_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (var.get('isObjectLike')(var.get('value')) and var.get('isArrayLike')(var.get('value')))
                    PyJsHoisted_isArrayLikeObject_.func_name = 'isArrayLikeObject'
                    var.put('isArrayLikeObject', PyJsHoisted_isArrayLikeObject_)
                    @Js
                    def PyJsHoisted_isBoolean_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return ((PyJsStrictEq(var.get('value'),Js(True)) or PyJsStrictEq(var.get('value'),Js(False))) or (var.get('isObjectLike')(var.get('value')) and (var.get('baseGetTag')(var.get('value'))==var.get('boolTag'))))
                    PyJsHoisted_isBoolean_.func_name = 'isBoolean'
                    var.put('isBoolean', PyJsHoisted_isBoolean_)
                    @Js
                    def PyJsHoisted_isElement_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return ((var.get('isObjectLike')(var.get('value')) and PyJsStrictEq(var.get('value').get('nodeType'),Js(1.0))) and var.get('isPlainObject')(var.get('value')).neg())
                    PyJsHoisted_isElement_.func_name = 'isElement'
                    var.put('isElement', PyJsHoisted_isElement_)
                    @Js
                    def PyJsHoisted_isEmpty_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'value', 'tag'])
                        if (var.get('value')==var.get(u"null")):
                            return Js(True)
                        if (var.get('isArrayLike')(var.get('value')) and (((((var.get('isArray')(var.get('value')) or (var.get('value',throw=False).typeof()==Js('string'))) or (var.get('value').get('splice').typeof()==Js('function'))) or var.get('isBuffer')(var.get('value'))) or var.get('isTypedArray')(var.get('value'))) or var.get('isArguments')(var.get('value')))):
                            return var.get('value').get('length').neg()
                        var.put('tag', var.get('getTag')(var.get('value')))
                        if ((var.get('tag')==var.get('mapTag')) or (var.get('tag')==var.get('setTag'))):
                            return var.get('value').get('size').neg()
                        if var.get('isPrototype')(var.get('value')):
                            return var.get('baseKeys')(var.get('value')).get('length').neg()
                        for PyJsTemp in var.get('value'):
                            var.put('key', PyJsTemp)
                            if var.get('hasOwnProperty').callprop('call', var.get('value'), var.get('key')):
                                return Js(False)
                        return Js(True)
                    PyJsHoisted_isEmpty_.func_name = 'isEmpty'
                    var.put('isEmpty', PyJsHoisted_isEmpty_)
                    @Js
                    def PyJsHoisted_isEqual_(value, other, this, arguments, var=var):
                        var = Scope({'value':value, 'other':other, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'other'])
                        return var.get('baseIsEqual')(var.get('value'), var.get('other'))
                    PyJsHoisted_isEqual_.func_name = 'isEqual'
                    var.put('isEqual', PyJsHoisted_isEqual_)
                    @Js
                    def PyJsHoisted_isEqualWith_(value, other, customizer, this, arguments, var=var):
                        var = Scope({'value':value, 'other':other, 'customizer':customizer, 'this':this, 'arguments':arguments}, var)
                        var.registers(['customizer', 'result', 'value', 'other'])
                        var.put('customizer', (var.get('customizer') if (var.get('customizer',throw=False).typeof()==Js('function')) else var.get('undefined')))
                        var.put('result', (var.get('customizer')(var.get('value'), var.get('other')) if var.get('customizer') else var.get('undefined')))
                        return (var.get('baseIsEqual')(var.get('value'), var.get('other'), var.get('undefined'), var.get('customizer')) if PyJsStrictEq(var.get('result'),var.get('undefined')) else var.get('result').neg().neg())
                    PyJsHoisted_isEqualWith_.func_name = 'isEqualWith'
                    var.put('isEqualWith', PyJsHoisted_isEqualWith_)
                    @Js
                    def PyJsHoisted_isError_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'tag'])
                        if var.get('isObjectLike')(var.get('value')).neg():
                            return Js(False)
                        var.put('tag', var.get('baseGetTag')(var.get('value')))
                        return (((var.get('tag')==var.get('errorTag')) or (var.get('tag')==var.get('domExcTag'))) or (((var.get('value').get('message').typeof()==Js('string')) and (var.get('value').get('name').typeof()==Js('string'))) and var.get('isPlainObject')(var.get('value')).neg()))
                    PyJsHoisted_isError_.func_name = 'isError'
                    var.put('isError', PyJsHoisted_isError_)
                    @Js
                    def PyJsHoisted_isFinite_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return ((var.get('value',throw=False).typeof()==Js('number')) and var.get('nativeIsFinite')(var.get('value')))
                    PyJsHoisted_isFinite_.func_name = 'isFinite'
                    var.put('isFinite', PyJsHoisted_isFinite_)
                    @Js
                    def PyJsHoisted_isFunction_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'tag'])
                        if var.get('isObject')(var.get('value')).neg():
                            return Js(False)
                        var.put('tag', var.get('baseGetTag')(var.get('value')))
                        return ((((var.get('tag')==var.get('funcTag')) or (var.get('tag')==var.get('genTag'))) or (var.get('tag')==var.get('asyncTag'))) or (var.get('tag')==var.get('proxyTag')))
                    PyJsHoisted_isFunction_.func_name = 'isFunction'
                    var.put('isFunction', PyJsHoisted_isFunction_)
                    @Js
                    def PyJsHoisted_isInteger_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return ((var.get('value',throw=False).typeof()==Js('number')) and (var.get('value')==var.get('toInteger')(var.get('value'))))
                    PyJsHoisted_isInteger_.func_name = 'isInteger'
                    var.put('isInteger', PyJsHoisted_isInteger_)
                    @Js
                    def PyJsHoisted_isLength_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return ((((var.get('value',throw=False).typeof()==Js('number')) and (var.get('value')>(-Js(1.0)))) and ((var.get('value')%Js(1.0))==Js(0.0))) and (var.get('value')<=var.get('MAX_SAFE_INTEGER')))
                    PyJsHoisted_isLength_.func_name = 'isLength'
                    var.put('isLength', PyJsHoisted_isLength_)
                    @Js
                    def PyJsHoisted_isObject_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'type'])
                        var.put('type', var.get('value',throw=False).typeof())
                        return ((var.get('value')!=var.get(u"null")) and ((var.get('type')==Js('object')) or (var.get('type')==Js('function'))))
                    PyJsHoisted_isObject_.func_name = 'isObject'
                    var.put('isObject', PyJsHoisted_isObject_)
                    @Js
                    def PyJsHoisted_isObjectLike_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return ((var.get('value')!=var.get(u"null")) and (var.get('value',throw=False).typeof()==Js('object')))
                    PyJsHoisted_isObjectLike_.func_name = 'isObjectLike'
                    var.put('isObjectLike', PyJsHoisted_isObjectLike_)
                    @Js
                    def PyJsHoisted_isMatch_(object, source, this, arguments, var=var):
                        var = Scope({'object':object, 'source':source, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'source'])
                        return (PyJsStrictEq(var.get('object'),var.get('source')) or var.get('baseIsMatch')(var.get('object'), var.get('source'), var.get('getMatchData')(var.get('source'))))
                    PyJsHoisted_isMatch_.func_name = 'isMatch'
                    var.put('isMatch', PyJsHoisted_isMatch_)
                    @Js
                    def PyJsHoisted_isMatchWith_(object, source, customizer, this, arguments, var=var):
                        var = Scope({'object':object, 'source':source, 'customizer':customizer, 'this':this, 'arguments':arguments}, var)
                        var.registers(['customizer', 'object', 'source'])
                        var.put('customizer', (var.get('customizer') if (var.get('customizer',throw=False).typeof()==Js('function')) else var.get('undefined')))
                        return var.get('baseIsMatch')(var.get('object'), var.get('source'), var.get('getMatchData')(var.get('source')), var.get('customizer'))
                    PyJsHoisted_isMatchWith_.func_name = 'isMatchWith'
                    var.put('isMatchWith', PyJsHoisted_isMatchWith_)
                    @Js
                    def PyJsHoisted_isNaN_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (var.get('isNumber')(var.get('value')) and (var.get('value')!=(+var.get('value'))))
                    PyJsHoisted_isNaN_.func_name = 'isNaN'
                    var.put('isNaN', PyJsHoisted_isNaN_)
                    @Js
                    def PyJsHoisted_isNative_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        if var.get('isMaskable')(var.get('value')):
                            PyJsTempException = JsToPyException(var.get('Error').create(var.get('CORE_ERROR_TEXT')))
                            raise PyJsTempException
                        return var.get('baseIsNative')(var.get('value'))
                    PyJsHoisted_isNative_.func_name = 'isNative'
                    var.put('isNative', PyJsHoisted_isNative_)
                    @Js
                    def PyJsHoisted_isNull_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return PyJsStrictEq(var.get('value'),var.get(u"null"))
                    PyJsHoisted_isNull_.func_name = 'isNull'
                    var.put('isNull', PyJsHoisted_isNull_)
                    @Js
                    def PyJsHoisted_isNil_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (var.get('value')==var.get(u"null"))
                    PyJsHoisted_isNil_.func_name = 'isNil'
                    var.put('isNil', PyJsHoisted_isNil_)
                    @Js
                    def PyJsHoisted_isNumber_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return ((var.get('value',throw=False).typeof()==Js('number')) or (var.get('isObjectLike')(var.get('value')) and (var.get('baseGetTag')(var.get('value'))==var.get('numberTag'))))
                    PyJsHoisted_isNumber_.func_name = 'isNumber'
                    var.put('isNumber', PyJsHoisted_isNumber_)
                    @Js
                    def PyJsHoisted_isPlainObject_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['Ctor', 'value', 'proto'])
                        if (var.get('isObjectLike')(var.get('value')).neg() or (var.get('baseGetTag')(var.get('value'))!=var.get('objectTag'))):
                            return Js(False)
                        var.put('proto', var.get('getPrototype')(var.get('value')))
                        if PyJsStrictEq(var.get('proto'),var.get(u"null")):
                            return Js(True)
                        var.put('Ctor', (var.get('hasOwnProperty').callprop('call', var.get('proto'), Js('constructor')) and var.get('proto').get('constructor')))
                        return (((var.get('Ctor',throw=False).typeof()==Js('function')) and var.get('Ctor').instanceof(var.get('Ctor'))) and (var.get('funcToString').callprop('call', var.get('Ctor'))==var.get('objectCtorString')))
                    PyJsHoisted_isPlainObject_.func_name = 'isPlainObject'
                    var.put('isPlainObject', PyJsHoisted_isPlainObject_)
                    @Js
                    def PyJsHoisted_isSafeInteger_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return ((var.get('isInteger')(var.get('value')) and (var.get('value')>=(-var.get('MAX_SAFE_INTEGER')))) and (var.get('value')<=var.get('MAX_SAFE_INTEGER')))
                    PyJsHoisted_isSafeInteger_.func_name = 'isSafeInteger'
                    var.put('isSafeInteger', PyJsHoisted_isSafeInteger_)
                    @Js
                    def PyJsHoisted_isString_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return ((var.get('value',throw=False).typeof()==Js('string')) or ((var.get('isArray')(var.get('value')).neg() and var.get('isObjectLike')(var.get('value'))) and (var.get('baseGetTag')(var.get('value'))==var.get('stringTag'))))
                    PyJsHoisted_isString_.func_name = 'isString'
                    var.put('isString', PyJsHoisted_isString_)
                    @Js
                    def PyJsHoisted_isSymbol_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return ((var.get('value',throw=False).typeof()==Js('symbol')) or (var.get('isObjectLike')(var.get('value')) and (var.get('baseGetTag')(var.get('value'))==var.get('symbolTag'))))
                    PyJsHoisted_isSymbol_.func_name = 'isSymbol'
                    var.put('isSymbol', PyJsHoisted_isSymbol_)
                    @Js
                    def PyJsHoisted_isUndefined_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return PyJsStrictEq(var.get('value'),var.get('undefined'))
                    PyJsHoisted_isUndefined_.func_name = 'isUndefined'
                    var.put('isUndefined', PyJsHoisted_isUndefined_)
                    @Js
                    def PyJsHoisted_isWeakMap_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (var.get('isObjectLike')(var.get('value')) and (var.get('getTag')(var.get('value'))==var.get('weakMapTag')))
                    PyJsHoisted_isWeakMap_.func_name = 'isWeakMap'
                    var.put('isWeakMap', PyJsHoisted_isWeakMap_)
                    @Js
                    def PyJsHoisted_isWeakSet_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (var.get('isObjectLike')(var.get('value')) and (var.get('baseGetTag')(var.get('value'))==var.get('weakSetTag')))
                    PyJsHoisted_isWeakSet_.func_name = 'isWeakSet'
                    var.put('isWeakSet', PyJsHoisted_isWeakSet_)
                    @Js
                    def PyJsHoisted_toArray_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'func', 'tag'])
                        if var.get('value').neg():
                            return Js([])
                        if var.get('isArrayLike')(var.get('value')):
                            return (var.get('stringToArray')(var.get('value')) if var.get('isString')(var.get('value')) else var.get('copyArray')(var.get('value')))
                        if (var.get('symIterator') and var.get('value').get(var.get('symIterator'))):
                            return var.get('iteratorToArray')(var.get('value').callprop(var.get('symIterator')))
                        var.put('tag', var.get('getTag')(var.get('value')))
                        var.put('func', (var.get('mapToArray') if (var.get('tag')==var.get('mapTag')) else (var.get('setToArray') if (var.get('tag')==var.get('setTag')) else var.get('values'))))
                        return var.get('func')(var.get('value'))
                    PyJsHoisted_toArray_.func_name = 'toArray'
                    var.put('toArray', PyJsHoisted_toArray_)
                    @Js
                    def PyJsHoisted_toFinite_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'sign'])
                        if var.get('value').neg():
                            return (var.get('value') if PyJsStrictEq(var.get('value'),Js(0.0)) else Js(0.0))
                        var.put('value', var.get('toNumber')(var.get('value')))
                        if (PyJsStrictEq(var.get('value'),var.get('INFINITY')) or PyJsStrictEq(var.get('value'),(-var.get('INFINITY')))):
                            var.put('sign', ((-Js(1.0)) if (var.get('value')<Js(0.0)) else Js(1.0)))
                            return (var.get('sign')*var.get('MAX_INTEGER'))
                        return (var.get('value') if PyJsStrictEq(var.get('value'),var.get('value')) else Js(0.0))
                    PyJsHoisted_toFinite_.func_name = 'toFinite'
                    var.put('toFinite', PyJsHoisted_toFinite_)
                    @Js
                    def PyJsHoisted_toInteger_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['remainder', 'result', 'value'])
                        var.put('result', var.get('toFinite')(var.get('value')))
                        var.put('remainder', (var.get('result')%Js(1.0)))
                        return (((var.get('result')-var.get('remainder')) if var.get('remainder') else var.get('result')) if PyJsStrictEq(var.get('result'),var.get('result')) else Js(0.0))
                    PyJsHoisted_toInteger_.func_name = 'toInteger'
                    var.put('toInteger', PyJsHoisted_toInteger_)
                    @Js
                    def PyJsHoisted_toLength_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (var.get('baseClamp')(var.get('toInteger')(var.get('value')), Js(0.0), var.get('MAX_ARRAY_LENGTH')) if var.get('value') else Js(0.0))
                    PyJsHoisted_toLength_.func_name = 'toLength'
                    var.put('toLength', PyJsHoisted_toLength_)
                    @Js
                    def PyJsHoisted_toNumber_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['isBinary', 'value', 'other'])
                        if (var.get('value',throw=False).typeof()==Js('number')):
                            return var.get('value')
                        if var.get('isSymbol')(var.get('value')):
                            return var.get('NAN')
                        if var.get('isObject')(var.get('value')):
                            var.put('other', (var.get('value').callprop('valueOf') if (var.get('value').get('valueOf').typeof()==Js('function')) else var.get('value')))
                            var.put('value', ((var.get('other')+Js('')) if var.get('isObject')(var.get('other')) else var.get('other')))
                        if (var.get('value',throw=False).typeof()!=Js('string')):
                            return (var.get('value') if PyJsStrictEq(var.get('value'),Js(0.0)) else (+var.get('value')))
                        var.put('value', var.get('value').callprop('replace', var.get('reTrim'), Js('')))
                        var.put('isBinary', var.get('reIsBinary').callprop('test', var.get('value')))
                        return (var.get('freeParseInt')(var.get('value').callprop('slice', Js(2.0)), (Js(2.0) if var.get('isBinary') else Js(8.0))) if (var.get('isBinary') or var.get('reIsOctal').callprop('test', var.get('value'))) else (var.get('NAN') if var.get('reIsBadHex').callprop('test', var.get('value')) else (+var.get('value'))))
                    PyJsHoisted_toNumber_.func_name = 'toNumber'
                    var.put('toNumber', PyJsHoisted_toNumber_)
                    @Js
                    def PyJsHoisted_toPlainObject_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return var.get('copyObject')(var.get('value'), var.get('keysIn')(var.get('value')))
                    PyJsHoisted_toPlainObject_.func_name = 'toPlainObject'
                    var.put('toPlainObject', PyJsHoisted_toPlainObject_)
                    @Js
                    def PyJsHoisted_toSafeInteger_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (var.get('baseClamp')(var.get('toInteger')(var.get('value')), (-var.get('MAX_SAFE_INTEGER')), var.get('MAX_SAFE_INTEGER')) if var.get('value') else (var.get('value') if PyJsStrictEq(var.get('value'),Js(0.0)) else Js(0.0)))
                    PyJsHoisted_toSafeInteger_.func_name = 'toSafeInteger'
                    var.put('toSafeInteger', PyJsHoisted_toSafeInteger_)
                    @Js
                    def PyJsHoisted_toString_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (Js('') if (var.get('value')==var.get(u"null")) else var.get('baseToString')(var.get('value')))
                    PyJsHoisted_toString_.func_name = 'toString'
                    var.put('toString', PyJsHoisted_toString_)
                    @Js
                    def PyJsHoisted_create_(prototype, properties, this, arguments, var=var):
                        var = Scope({'prototype':prototype, 'properties':properties, 'this':this, 'arguments':arguments}, var)
                        var.registers(['prototype', 'result', 'properties'])
                        var.put('result', var.get('baseCreate')(var.get('prototype')))
                        return (var.get('result') if (var.get('properties')==var.get(u"null")) else var.get('baseAssign')(var.get('result'), var.get('properties')))
                    PyJsHoisted_create_.func_name = 'create'
                    var.put('create', PyJsHoisted_create_)
                    @Js
                    def PyJsHoisted_findKey_(object, predicate, this, arguments, var=var):
                        var = Scope({'object':object, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'predicate'])
                        return var.get('baseFindKey')(var.get('object'), var.get('getIteratee')(var.get('predicate'), Js(3.0)), var.get('baseForOwn'))
                    PyJsHoisted_findKey_.func_name = 'findKey'
                    var.put('findKey', PyJsHoisted_findKey_)
                    @Js
                    def PyJsHoisted_findLastKey_(object, predicate, this, arguments, var=var):
                        var = Scope({'object':object, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'predicate'])
                        return var.get('baseFindKey')(var.get('object'), var.get('getIteratee')(var.get('predicate'), Js(3.0)), var.get('baseForOwnRight'))
                    PyJsHoisted_findLastKey_.func_name = 'findLastKey'
                    var.put('findLastKey', PyJsHoisted_findLastKey_)
                    @Js
                    def PyJsHoisted_forIn_(object, iteratee, this, arguments, var=var):
                        var = Scope({'object':object, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'iteratee'])
                        return (var.get('object') if (var.get('object')==var.get(u"null")) else var.get('baseFor')(var.get('object'), var.get('getIteratee')(var.get('iteratee'), Js(3.0)), var.get('keysIn')))
                    PyJsHoisted_forIn_.func_name = 'forIn'
                    var.put('forIn', PyJsHoisted_forIn_)
                    @Js
                    def PyJsHoisted_forInRight_(object, iteratee, this, arguments, var=var):
                        var = Scope({'object':object, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'iteratee'])
                        return (var.get('object') if (var.get('object')==var.get(u"null")) else var.get('baseForRight')(var.get('object'), var.get('getIteratee')(var.get('iteratee'), Js(3.0)), var.get('keysIn')))
                    PyJsHoisted_forInRight_.func_name = 'forInRight'
                    var.put('forInRight', PyJsHoisted_forInRight_)
                    @Js
                    def PyJsHoisted_forOwn_(object, iteratee, this, arguments, var=var):
                        var = Scope({'object':object, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'iteratee'])
                        return (var.get('object') and var.get('baseForOwn')(var.get('object'), var.get('getIteratee')(var.get('iteratee'), Js(3.0))))
                    PyJsHoisted_forOwn_.func_name = 'forOwn'
                    var.put('forOwn', PyJsHoisted_forOwn_)
                    @Js
                    def PyJsHoisted_forOwnRight_(object, iteratee, this, arguments, var=var):
                        var = Scope({'object':object, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'iteratee'])
                        return (var.get('object') and var.get('baseForOwnRight')(var.get('object'), var.get('getIteratee')(var.get('iteratee'), Js(3.0))))
                    PyJsHoisted_forOwnRight_.func_name = 'forOwnRight'
                    var.put('forOwnRight', PyJsHoisted_forOwnRight_)
                    @Js
                    def PyJsHoisted_functions_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object'])
                        return (Js([]) if (var.get('object')==var.get(u"null")) else var.get('baseFunctions')(var.get('object'), var.get('keys')(var.get('object'))))
                    PyJsHoisted_functions_.func_name = 'functions'
                    var.put('functions', PyJsHoisted_functions_)
                    @Js
                    def PyJsHoisted_functionsIn_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object'])
                        return (Js([]) if (var.get('object')==var.get(u"null")) else var.get('baseFunctions')(var.get('object'), var.get('keysIn')(var.get('object'))))
                    PyJsHoisted_functionsIn_.func_name = 'functionsIn'
                    var.put('functionsIn', PyJsHoisted_functionsIn_)
                    @Js
                    def PyJsHoisted_get_(object, path, defaultValue, this, arguments, var=var):
                        var = Scope({'object':object, 'path':path, 'defaultValue':defaultValue, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'result', 'defaultValue', 'path'])
                        var.put('result', (var.get('undefined') if (var.get('object')==var.get(u"null")) else var.get('baseGet')(var.get('object'), var.get('path'))))
                        return (var.get('defaultValue') if PyJsStrictEq(var.get('result'),var.get('undefined')) else var.get('result'))
                    PyJsHoisted_get_.func_name = 'get'
                    var.put('get', PyJsHoisted_get_)
                    @Js
                    def PyJsHoisted_has_(object, path, this, arguments, var=var):
                        var = Scope({'object':object, 'path':path, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'path'])
                        return ((var.get('object')!=var.get(u"null")) and var.get('hasPath')(var.get('object'), var.get('path'), var.get('baseHas')))
                    PyJsHoisted_has_.func_name = 'has'
                    var.put('has', PyJsHoisted_has_)
                    @Js
                    def PyJsHoisted_hasIn_(object, path, this, arguments, var=var):
                        var = Scope({'object':object, 'path':path, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'path'])
                        return ((var.get('object')!=var.get(u"null")) and var.get('hasPath')(var.get('object'), var.get('path'), var.get('baseHasIn')))
                    PyJsHoisted_hasIn_.func_name = 'hasIn'
                    var.put('hasIn', PyJsHoisted_hasIn_)
                    @Js
                    def PyJsHoisted_keys_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object'])
                        return (var.get('arrayLikeKeys')(var.get('object')) if var.get('isArrayLike')(var.get('object')) else var.get('baseKeys')(var.get('object')))
                    PyJsHoisted_keys_.func_name = 'keys'
                    var.put('keys', PyJsHoisted_keys_)
                    @Js
                    def PyJsHoisted_keysIn_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object'])
                        return (var.get('arrayLikeKeys')(var.get('object'), Js(True)) if var.get('isArrayLike')(var.get('object')) else var.get('baseKeysIn')(var.get('object')))
                    PyJsHoisted_keysIn_.func_name = 'keysIn'
                    var.put('keysIn', PyJsHoisted_keysIn_)
                    @Js
                    def PyJsHoisted_mapKeys_(object, iteratee, this, arguments, var=var):
                        var = Scope({'object':object, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'result', 'iteratee'])
                        var.put('result', Js({}))
                        var.put('iteratee', var.get('getIteratee')(var.get('iteratee'), Js(3.0)))
                        @Js
                        def PyJs_anonymous_882_(value, key, object, this, arguments, var=var):
                            var = Scope({'value':value, 'key':key, 'object':object, 'this':this, 'arguments':arguments}, var)
                            var.registers(['key', 'value', 'object'])
                            var.get('baseAssignValue')(var.get('result'), var.get('iteratee')(var.get('value'), var.get('key'), var.get('object')), var.get('value'))
                        PyJs_anonymous_882_._set_name('anonymous')
                        var.get('baseForOwn')(var.get('object'), PyJs_anonymous_882_)
                        return var.get('result')
                    PyJsHoisted_mapKeys_.func_name = 'mapKeys'
                    var.put('mapKeys', PyJsHoisted_mapKeys_)
                    @Js
                    def PyJsHoisted_mapValues_(object, iteratee, this, arguments, var=var):
                        var = Scope({'object':object, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'result', 'iteratee'])
                        var.put('result', Js({}))
                        var.put('iteratee', var.get('getIteratee')(var.get('iteratee'), Js(3.0)))
                        @Js
                        def PyJs_anonymous_883_(value, key, object, this, arguments, var=var):
                            var = Scope({'value':value, 'key':key, 'object':object, 'this':this, 'arguments':arguments}, var)
                            var.registers(['key', 'value', 'object'])
                            var.get('baseAssignValue')(var.get('result'), var.get('key'), var.get('iteratee')(var.get('value'), var.get('key'), var.get('object')))
                        PyJs_anonymous_883_._set_name('anonymous')
                        var.get('baseForOwn')(var.get('object'), PyJs_anonymous_883_)
                        return var.get('result')
                    PyJsHoisted_mapValues_.func_name = 'mapValues'
                    var.put('mapValues', PyJsHoisted_mapValues_)
                    @Js
                    def PyJsHoisted_omitBy_(object, predicate, this, arguments, var=var):
                        var = Scope({'object':object, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'predicate'])
                        return var.get('pickBy')(var.get('object'), var.get('negate')(var.get('getIteratee')(var.get('predicate'))))
                    PyJsHoisted_omitBy_.func_name = 'omitBy'
                    var.put('omitBy', PyJsHoisted_omitBy_)
                    @Js
                    def PyJsHoisted_pickBy_(object, predicate, this, arguments, var=var):
                        var = Scope({'object':object, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'props', 'predicate'])
                        if (var.get('object')==var.get(u"null")):
                            return Js({})
                        @Js
                        def PyJs_anonymous_889_(prop, this, arguments, var=var):
                            var = Scope({'prop':prop, 'this':this, 'arguments':arguments}, var)
                            var.registers(['prop'])
                            return Js([var.get('prop')])
                        PyJs_anonymous_889_._set_name('anonymous')
                        var.put('props', var.get('arrayMap')(var.get('getAllKeysIn')(var.get('object')), PyJs_anonymous_889_))
                        var.put('predicate', var.get('getIteratee')(var.get('predicate')))
                        @Js
                        def PyJs_anonymous_890_(value, path, this, arguments, var=var):
                            var = Scope({'value':value, 'path':path, 'this':this, 'arguments':arguments}, var)
                            var.registers(['value', 'path'])
                            return var.get('predicate')(var.get('value'), var.get('path').get('0'))
                        PyJs_anonymous_890_._set_name('anonymous')
                        return var.get('basePickBy')(var.get('object'), var.get('props'), PyJs_anonymous_890_)
                    PyJsHoisted_pickBy_.func_name = 'pickBy'
                    var.put('pickBy', PyJsHoisted_pickBy_)
                    @Js
                    def PyJsHoisted_result_(object, path, defaultValue, this, arguments, var=var):
                        var = Scope({'object':object, 'path':path, 'defaultValue':defaultValue, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'defaultValue', 'object', 'path', 'length', 'index'])
                        var.put('path', var.get('castPath')(var.get('path'), var.get('object')))
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('path').get('length'))
                        if var.get('length').neg():
                            var.put('length', Js(1.0))
                            var.put('object', var.get('undefined'))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('value', (var.get('undefined') if (var.get('object')==var.get(u"null")) else var.get('object').get(var.get('toKey')(var.get('path').get(var.get('index'))))))
                            if PyJsStrictEq(var.get('value'),var.get('undefined')):
                                var.put('index', var.get('length'))
                                var.put('value', var.get('defaultValue'))
                            var.put('object', (var.get('value').callprop('call', var.get('object')) if var.get('isFunction')(var.get('value')) else var.get('value')))
                        return var.get('object')
                    PyJsHoisted_result_.func_name = 'result'
                    var.put('result', PyJsHoisted_result_)
                    @Js
                    def PyJsHoisted_set_(object, path, value, this, arguments, var=var):
                        var = Scope({'object':object, 'path':path, 'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'value', 'path'])
                        return (var.get('object') if (var.get('object')==var.get(u"null")) else var.get('baseSet')(var.get('object'), var.get('path'), var.get('value')))
                    PyJsHoisted_set_.func_name = 'set'
                    var.put('set', PyJsHoisted_set_)
                    @Js
                    def PyJsHoisted_setWith_(object, path, value, customizer, this, arguments, var=var):
                        var = Scope({'object':object, 'path':path, 'value':value, 'customizer':customizer, 'this':this, 'arguments':arguments}, var)
                        var.registers(['customizer', 'object', 'value', 'path'])
                        var.put('customizer', (var.get('customizer') if (var.get('customizer',throw=False).typeof()==Js('function')) else var.get('undefined')))
                        return (var.get('object') if (var.get('object')==var.get(u"null")) else var.get('baseSet')(var.get('object'), var.get('path'), var.get('value'), var.get('customizer')))
                    PyJsHoisted_setWith_.func_name = 'setWith'
                    var.put('setWith', PyJsHoisted_setWith_)
                    @Js
                    def PyJsHoisted_transform_(object, iteratee, accumulator, this, arguments, var=var):
                        var = Scope({'object':object, 'iteratee':iteratee, 'accumulator':accumulator, 'this':this, 'arguments':arguments}, var)
                        var.registers(['Ctor', 'object', 'isArr', 'isArrLike', 'accumulator', 'iteratee'])
                        var.put('isArr', var.get('isArray')(var.get('object')))
                        var.put('isArrLike', ((var.get('isArr') or var.get('isBuffer')(var.get('object'))) or var.get('isTypedArray')(var.get('object'))))
                        var.put('iteratee', var.get('getIteratee')(var.get('iteratee'), Js(4.0)))
                        if (var.get('accumulator')==var.get(u"null")):
                            var.put('Ctor', (var.get('object') and var.get('object').get('constructor')))
                            if var.get('isArrLike'):
                                var.put('accumulator', (var.get('Ctor').create() if var.get('isArr') else Js([])))
                            else:
                                if var.get('isObject')(var.get('object')):
                                    var.put('accumulator', (var.get('baseCreate')(var.get('getPrototype')(var.get('object'))) if var.get('isFunction')(var.get('Ctor')) else Js({})))
                                else:
                                    var.put('accumulator', Js({}))
                        @Js
                        def PyJs_anonymous_891_(value, index, object, this, arguments, var=var):
                            var = Scope({'value':value, 'index':index, 'object':object, 'this':this, 'arguments':arguments}, var)
                            var.registers(['object', 'value', 'index'])
                            return var.get('iteratee')(var.get('accumulator'), var.get('value'), var.get('index'), var.get('object'))
                        PyJs_anonymous_891_._set_name('anonymous')
                        (var.get('arrayEach') if var.get('isArrLike') else var.get('baseForOwn'))(var.get('object'), PyJs_anonymous_891_)
                        return var.get('accumulator')
                    PyJsHoisted_transform_.func_name = 'transform'
                    var.put('transform', PyJsHoisted_transform_)
                    @Js
                    def PyJsHoisted_unset_(object, path, this, arguments, var=var):
                        var = Scope({'object':object, 'path':path, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'path'])
                        return (Js(True) if (var.get('object')==var.get(u"null")) else var.get('baseUnset')(var.get('object'), var.get('path')))
                    PyJsHoisted_unset_.func_name = 'unset'
                    var.put('unset', PyJsHoisted_unset_)
                    @Js
                    def PyJsHoisted_update_(object, path, updater, this, arguments, var=var):
                        var = Scope({'object':object, 'path':path, 'updater':updater, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'updater', 'path'])
                        return (var.get('object') if (var.get('object')==var.get(u"null")) else var.get('baseUpdate')(var.get('object'), var.get('path'), var.get('castFunction')(var.get('updater'))))
                    PyJsHoisted_update_.func_name = 'update'
                    var.put('update', PyJsHoisted_update_)
                    @Js
                    def PyJsHoisted_updateWith_(object, path, updater, customizer, this, arguments, var=var):
                        var = Scope({'object':object, 'path':path, 'updater':updater, 'customizer':customizer, 'this':this, 'arguments':arguments}, var)
                        var.registers(['customizer', 'object', 'updater', 'path'])
                        var.put('customizer', (var.get('customizer') if (var.get('customizer',throw=False).typeof()==Js('function')) else var.get('undefined')))
                        return (var.get('object') if (var.get('object')==var.get(u"null")) else var.get('baseUpdate')(var.get('object'), var.get('path'), var.get('castFunction')(var.get('updater')), var.get('customizer')))
                    PyJsHoisted_updateWith_.func_name = 'updateWith'
                    var.put('updateWith', PyJsHoisted_updateWith_)
                    @Js
                    def PyJsHoisted_values_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object'])
                        return (Js([]) if (var.get('object')==var.get(u"null")) else var.get('baseValues')(var.get('object'), var.get('keys')(var.get('object'))))
                    PyJsHoisted_values_.func_name = 'values'
                    var.put('values', PyJsHoisted_values_)
                    @Js
                    def PyJsHoisted_valuesIn_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object'])
                        return (Js([]) if (var.get('object')==var.get(u"null")) else var.get('baseValues')(var.get('object'), var.get('keysIn')(var.get('object'))))
                    PyJsHoisted_valuesIn_.func_name = 'valuesIn'
                    var.put('valuesIn', PyJsHoisted_valuesIn_)
                    @Js
                    def PyJsHoisted_clamp_(number, lower, upper, this, arguments, var=var):
                        var = Scope({'number':number, 'lower':lower, 'upper':upper, 'this':this, 'arguments':arguments}, var)
                        var.registers(['lower', 'upper', 'number'])
                        if PyJsStrictEq(var.get('upper'),var.get('undefined')):
                            var.put('upper', var.get('lower'))
                            var.put('lower', var.get('undefined'))
                        if PyJsStrictNeq(var.get('upper'),var.get('undefined')):
                            var.put('upper', var.get('toNumber')(var.get('upper')))
                            var.put('upper', (var.get('upper') if PyJsStrictEq(var.get('upper'),var.get('upper')) else Js(0.0)))
                        if PyJsStrictNeq(var.get('lower'),var.get('undefined')):
                            var.put('lower', var.get('toNumber')(var.get('lower')))
                            var.put('lower', (var.get('lower') if PyJsStrictEq(var.get('lower'),var.get('lower')) else Js(0.0)))
                        return var.get('baseClamp')(var.get('toNumber')(var.get('number')), var.get('lower'), var.get('upper'))
                    PyJsHoisted_clamp_.func_name = 'clamp'
                    var.put('clamp', PyJsHoisted_clamp_)
                    @Js
                    def PyJsHoisted_inRange_(number, start, end, this, arguments, var=var):
                        var = Scope({'number':number, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
                        var.registers(['end', 'start', 'number'])
                        var.put('start', var.get('toFinite')(var.get('start')))
                        if PyJsStrictEq(var.get('end'),var.get('undefined')):
                            var.put('end', var.get('start'))
                            var.put('start', Js(0.0))
                        else:
                            var.put('end', var.get('toFinite')(var.get('end')))
                        var.put('number', var.get('toNumber')(var.get('number')))
                        return var.get('baseInRange')(var.get('number'), var.get('start'), var.get('end'))
                    PyJsHoisted_inRange_.func_name = 'inRange'
                    var.put('inRange', PyJsHoisted_inRange_)
                    @Js
                    def PyJsHoisted_random_(lower, upper, floating, this, arguments, var=var):
                        var = Scope({'lower':lower, 'upper':upper, 'floating':floating, 'this':this, 'arguments':arguments}, var)
                        var.registers(['upper', 'rand', 'floating', 'temp', 'lower'])
                        if ((var.get('floating') and (var.get('floating',throw=False).typeof()!=Js('boolean'))) and var.get('isIterateeCall')(var.get('lower'), var.get('upper'), var.get('floating'))):
                            var.put('upper', var.put('floating', var.get('undefined')))
                        if PyJsStrictEq(var.get('floating'),var.get('undefined')):
                            if (var.get('upper',throw=False).typeof()==Js('boolean')):
                                var.put('floating', var.get('upper'))
                                var.put('upper', var.get('undefined'))
                            else:
                                if (var.get('lower',throw=False).typeof()==Js('boolean')):
                                    var.put('floating', var.get('lower'))
                                    var.put('lower', var.get('undefined'))
                        if (PyJsStrictEq(var.get('lower'),var.get('undefined')) and PyJsStrictEq(var.get('upper'),var.get('undefined'))):
                            var.put('lower', Js(0.0))
                            var.put('upper', Js(1.0))
                        else:
                            var.put('lower', var.get('toFinite')(var.get('lower')))
                            if PyJsStrictEq(var.get('upper'),var.get('undefined')):
                                var.put('upper', var.get('lower'))
                                var.put('lower', Js(0.0))
                            else:
                                var.put('upper', var.get('toFinite')(var.get('upper')))
                        if (var.get('lower')>var.get('upper')):
                            var.put('temp', var.get('lower'))
                            var.put('lower', var.get('upper'))
                            var.put('upper', var.get('temp'))
                        if ((var.get('floating') or (var.get('lower')%Js(1.0))) or (var.get('upper')%Js(1.0))):
                            var.put('rand', var.get('nativeRandom')())
                            return var.get('nativeMin')((var.get('lower')+(var.get('rand')*((var.get('upper')-var.get('lower'))+var.get('freeParseFloat')((Js('1e-')+((var.get('rand')+Js('')).get('length')-Js(1.0))))))), var.get('upper'))
                        return var.get('baseRandom')(var.get('lower'), var.get('upper'))
                    PyJsHoisted_random_.func_name = 'random'
                    var.put('random', PyJsHoisted_random_)
                    @Js
                    def PyJsHoisted_capitalize_(string, this, arguments, var=var):
                        var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                        var.registers(['string'])
                        return var.get('upperFirst')(var.get('toString')(var.get('string')).callprop('toLowerCase'))
                    PyJsHoisted_capitalize_.func_name = 'capitalize'
                    var.put('capitalize', PyJsHoisted_capitalize_)
                    @Js
                    def PyJsHoisted_deburr_(string, this, arguments, var=var):
                        var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                        var.registers(['string'])
                        var.put('string', var.get('toString')(var.get('string')))
                        return (var.get('string') and var.get('string').callprop('replace', var.get('reLatin'), var.get('deburrLetter')).callprop('replace', var.get('reComboMark'), Js('')))
                    PyJsHoisted_deburr_.func_name = 'deburr'
                    var.put('deburr', PyJsHoisted_deburr_)
                    @Js
                    def PyJsHoisted_endsWith_(string, target, position, this, arguments, var=var):
                        var = Scope({'string':string, 'target':target, 'position':position, 'this':this, 'arguments':arguments}, var)
                        var.registers(['position', 'end', 'length', 'target', 'string'])
                        var.put('string', var.get('toString')(var.get('string')))
                        var.put('target', var.get('baseToString')(var.get('target')))
                        var.put('length', var.get('string').get('length'))
                        var.put('position', (var.get('length') if PyJsStrictEq(var.get('position'),var.get('undefined')) else var.get('baseClamp')(var.get('toInteger')(var.get('position')), Js(0.0), var.get('length'))))
                        var.put('end', var.get('position'))
                        var.put('position', var.get('target').get('length'), '-')
                        return ((var.get('position')>=Js(0.0)) and (var.get('string').callprop('slice', var.get('position'), var.get('end'))==var.get('target')))
                    PyJsHoisted_endsWith_.func_name = 'endsWith'
                    var.put('endsWith', PyJsHoisted_endsWith_)
                    @Js
                    def PyJsHoisted_escape_(string, this, arguments, var=var):
                        var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                        var.registers(['string'])
                        var.put('string', var.get('toString')(var.get('string')))
                        return (var.get('string').callprop('replace', var.get('reUnescapedHtml'), var.get('escapeHtmlChar')) if (var.get('string') and var.get('reHasUnescapedHtml').callprop('test', var.get('string'))) else var.get('string'))
                    PyJsHoisted_escape_.func_name = 'escape'
                    var.put('escape', PyJsHoisted_escape_)
                    @Js
                    def PyJsHoisted_escapeRegExp_(string, this, arguments, var=var):
                        var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                        var.registers(['string'])
                        var.put('string', var.get('toString')(var.get('string')))
                        return (var.get('string').callprop('replace', var.get('reRegExpChar'), Js('\\$&')) if (var.get('string') and var.get('reHasRegExpChar').callprop('test', var.get('string'))) else var.get('string'))
                    PyJsHoisted_escapeRegExp_.func_name = 'escapeRegExp'
                    var.put('escapeRegExp', PyJsHoisted_escapeRegExp_)
                    @Js
                    def PyJsHoisted_pad_(string, length, chars, this, arguments, var=var):
                        var = Scope({'string':string, 'length':length, 'chars':chars, 'this':this, 'arguments':arguments}, var)
                        var.registers(['length', 'strLength', 'mid', 'chars', 'string'])
                        var.put('string', var.get('toString')(var.get('string')))
                        var.put('length', var.get('toInteger')(var.get('length')))
                        var.put('strLength', (var.get('stringSize')(var.get('string')) if var.get('length') else Js(0.0)))
                        if (var.get('length').neg() or (var.get('strLength')>=var.get('length'))):
                            return var.get('string')
                        var.put('mid', ((var.get('length')-var.get('strLength'))/Js(2.0)))
                        return ((var.get('createPadding')(var.get('nativeFloor')(var.get('mid')), var.get('chars'))+var.get('string'))+var.get('createPadding')(var.get('nativeCeil')(var.get('mid')), var.get('chars')))
                    PyJsHoisted_pad_.func_name = 'pad'
                    var.put('pad', PyJsHoisted_pad_)
                    @Js
                    def PyJsHoisted_padEnd_(string, length, chars, this, arguments, var=var):
                        var = Scope({'string':string, 'length':length, 'chars':chars, 'this':this, 'arguments':arguments}, var)
                        var.registers(['string', 'chars', 'length', 'strLength'])
                        var.put('string', var.get('toString')(var.get('string')))
                        var.put('length', var.get('toInteger')(var.get('length')))
                        var.put('strLength', (var.get('stringSize')(var.get('string')) if var.get('length') else Js(0.0)))
                        return ((var.get('string')+var.get('createPadding')((var.get('length')-var.get('strLength')), var.get('chars'))) if (var.get('length') and (var.get('strLength')<var.get('length'))) else var.get('string'))
                    PyJsHoisted_padEnd_.func_name = 'padEnd'
                    var.put('padEnd', PyJsHoisted_padEnd_)
                    @Js
                    def PyJsHoisted_padStart_(string, length, chars, this, arguments, var=var):
                        var = Scope({'string':string, 'length':length, 'chars':chars, 'this':this, 'arguments':arguments}, var)
                        var.registers(['string', 'chars', 'length', 'strLength'])
                        var.put('string', var.get('toString')(var.get('string')))
                        var.put('length', var.get('toInteger')(var.get('length')))
                        var.put('strLength', (var.get('stringSize')(var.get('string')) if var.get('length') else Js(0.0)))
                        return ((var.get('createPadding')((var.get('length')-var.get('strLength')), var.get('chars'))+var.get('string')) if (var.get('length') and (var.get('strLength')<var.get('length'))) else var.get('string'))
                    PyJsHoisted_padStart_.func_name = 'padStart'
                    var.put('padStart', PyJsHoisted_padStart_)
                    @Js
                    def PyJsHoisted_parseInt_(string, radix, guard, this, arguments, var=var):
                        var = Scope({'string':string, 'radix':radix, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['radix', 'guard', 'string'])
                        if (var.get('guard') or (var.get('radix')==var.get(u"null"))):
                            var.put('radix', Js(0.0))
                        else:
                            if var.get('radix'):
                                var.put('radix', (+var.get('radix')))
                        return var.get('nativeParseInt')(var.get('toString')(var.get('string')).callprop('replace', var.get('reTrimStart'), Js('')), (var.get('radix') or Js(0.0)))
                    PyJsHoisted_parseInt_.func_name = 'parseInt'
                    var.put('parseInt', PyJsHoisted_parseInt_)
                    @Js
                    def PyJsHoisted_repeat_(string, n, guard, this, arguments, var=var):
                        var = Scope({'string':string, 'n':n, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['n', 'guard', 'string'])
                        if (var.get('isIterateeCall')(var.get('string'), var.get('n'), var.get('guard')) if var.get('guard') else PyJsStrictEq(var.get('n'),var.get('undefined'))):
                            var.put('n', Js(1.0))
                        else:
                            var.put('n', var.get('toInteger')(var.get('n')))
                        return var.get('baseRepeat')(var.get('toString')(var.get('string')), var.get('n'))
                    PyJsHoisted_repeat_.func_name = 'repeat'
                    var.put('repeat', PyJsHoisted_repeat_)
                    @Js
                    def PyJsHoisted_replace_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['args', 'string'])
                        var.put('args', var.get('arguments'))
                        var.put('string', var.get('toString')(var.get('args').get('0')))
                        return (var.get('string') if (var.get('args').get('length')<Js(3.0)) else var.get('string').callprop('replace', var.get('args').get('1'), var.get('args').get('2')))
                    PyJsHoisted_replace_.func_name = 'replace'
                    var.put('replace', PyJsHoisted_replace_)
                    @Js
                    def PyJsHoisted_split_(string, separator, limit, this, arguments, var=var):
                        var = Scope({'string':string, 'separator':separator, 'limit':limit, 'this':this, 'arguments':arguments}, var)
                        var.registers(['separator', 'string', 'limit'])
                        if ((var.get('limit') and (var.get('limit',throw=False).typeof()!=Js('number'))) and var.get('isIterateeCall')(var.get('string'), var.get('separator'), var.get('limit'))):
                            var.put('separator', var.put('limit', var.get('undefined')))
                        var.put('limit', (var.get('MAX_ARRAY_LENGTH') if PyJsStrictEq(var.get('limit'),var.get('undefined')) else PyJsBshift(var.get('limit'),Js(0.0))))
                        if var.get('limit').neg():
                            return Js([])
                        var.put('string', var.get('toString')(var.get('string')))
                        if (var.get('string') and ((var.get('separator',throw=False).typeof()==Js('string')) or ((var.get('separator')!=var.get(u"null")) and var.get('isRegExp')(var.get('separator')).neg()))):
                            var.put('separator', var.get('baseToString')(var.get('separator')))
                            if (var.get('separator').neg() and var.get('hasUnicode')(var.get('string'))):
                                return var.get('castSlice')(var.get('stringToArray')(var.get('string')), Js(0.0), var.get('limit'))
                        return var.get('string').callprop('split', var.get('separator'), var.get('limit'))
                    PyJsHoisted_split_.func_name = 'split'
                    var.put('split', PyJsHoisted_split_)
                    @Js
                    def PyJsHoisted_startsWith_(string, target, position, this, arguments, var=var):
                        var = Scope({'string':string, 'target':target, 'position':position, 'this':this, 'arguments':arguments}, var)
                        var.registers(['target', 'position', 'string'])
                        var.put('string', var.get('toString')(var.get('string')))
                        var.put('position', (Js(0.0) if (var.get('position')==var.get(u"null")) else var.get('baseClamp')(var.get('toInteger')(var.get('position')), Js(0.0), var.get('string').get('length'))))
                        var.put('target', var.get('baseToString')(var.get('target')))
                        return (var.get('string').callprop('slice', var.get('position'), (var.get('position')+var.get('target').get('length')))==var.get('target'))
                    PyJsHoisted_startsWith_.func_name = 'startsWith'
                    var.put('startsWith', PyJsHoisted_startsWith_)
                    @Js
                    def PyJsHoisted_template_(string, options, guard, this, arguments, var=var):
                        var = Scope({'string':string, 'options':options, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['isEvaluating', 'imports', 'result', 'isEscaping', 'guard', 'options', 'settings', 'index', 'importsKeys', 'sourceURL', 'source', 'interpolate', 'importsValues', 'string', 'reDelimiters', 'variable'])
                        var.put('settings', var.get('lodash').get('templateSettings'))
                        if (var.get('guard') and var.get('isIterateeCall')(var.get('string'), var.get('options'), var.get('guard'))):
                            var.put('options', var.get('undefined'))
                        var.put('string', var.get('toString')(var.get('string')))
                        var.put('options', var.get('assignInWith')(Js({}), var.get('options'), var.get('settings'), var.get('customDefaultsAssignIn')))
                        var.put('imports', var.get('assignInWith')(Js({}), var.get('options').get('imports'), var.get('settings').get('imports'), var.get('customDefaultsAssignIn')))
                        var.put('importsKeys', var.get('keys')(var.get('imports')))
                        var.put('importsValues', var.get('baseValues')(var.get('imports'), var.get('importsKeys')))
                        var.put('index', Js(0.0))
                        var.put('interpolate', (var.get('options').get('interpolate') or var.get('reNoMatch')))
                        var.put('source', Js("__p += '"))
                        var.put('reDelimiters', var.get('RegExp')(((((((((var.get('options').get('escape') or var.get('reNoMatch')).get('source')+Js('|'))+var.get('interpolate').get('source'))+Js('|'))+(var.get('reEsTemplate') if PyJsStrictEq(var.get('interpolate'),var.get('reInterpolate')) else var.get('reNoMatch')).get('source'))+Js('|'))+(var.get('options').get('evaluate') or var.get('reNoMatch')).get('source'))+Js('|$')), Js('g')))
                        var.put('sourceURL', ((Js('//# sourceURL=')+((var.get('options').get('sourceURL')+Js('')).callprop('replace', JsRegExp('/[\\r\\n]/g'), Js(' ')) if var.get('hasOwnProperty').callprop('call', var.get('options'), Js('sourceURL')) else ((Js('lodash.templateSources[')+var.put('templateCounter',Js(var.get('templateCounter').to_number())+Js(1)))+Js(']'))))+Js('\n')))
                        @Js
                        def PyJs_anonymous_897_(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset, this, arguments, var=var):
                            var = Scope({'match':match, 'escapeValue':escapeValue, 'interpolateValue':interpolateValue, 'esTemplateValue':esTemplateValue, 'evaluateValue':evaluateValue, 'offset':offset, 'this':this, 'arguments':arguments}, var)
                            var.registers(['escapeValue', 'offset', 'interpolateValue', 'esTemplateValue', 'match', 'evaluateValue'])
                            (var.get('interpolateValue') or var.put('interpolateValue', var.get('esTemplateValue')))
                            var.put('source', var.get('string').callprop('slice', var.get('index'), var.get('offset')).callprop('replace', var.get('reUnescapedString'), var.get('escapeStringChar')), '+')
                            if var.get('escapeValue'):
                                var.put('isEscaping', Js(True))
                                var.put('source', ((Js("' +\n__e(")+var.get('escapeValue'))+Js(") +\n'")), '+')
                            if var.get('evaluateValue'):
                                var.put('isEvaluating', Js(True))
                                var.put('source', ((Js("';\n")+var.get('evaluateValue'))+Js(";\n__p += '")), '+')
                            if var.get('interpolateValue'):
                                var.put('source', ((Js("' +\n((__t = (")+var.get('interpolateValue'))+Js(")) == null ? '' : __t) +\n'")), '+')
                            var.put('index', (var.get('offset')+var.get('match').get('length')))
                            return var.get('match')
                        PyJs_anonymous_897_._set_name('anonymous')
                        var.get('string').callprop('replace', var.get('reDelimiters'), PyJs_anonymous_897_)
                        var.put('source', Js("';\n"), '+')
                        var.put('variable', (var.get('hasOwnProperty').callprop('call', var.get('options'), Js('variable')) and var.get('options').get('variable')))
                        if var.get('variable').neg():
                            var.put('source', ((Js('with (obj) {\n')+var.get('source'))+Js('\n}\n')))
                        var.put('source', (var.get('source').callprop('replace', var.get('reEmptyStringLeading'), Js('')) if var.get('isEvaluating') else var.get('source')).callprop('replace', var.get('reEmptyStringMiddle'), Js('$1')).callprop('replace', var.get('reEmptyStringTrailing'), Js('$1;')))
                        def PyJs_LONG_898_(var=var):
                            return ((((((((Js('function(')+(var.get('variable') or Js('obj')))+Js(') {\n'))+(Js('') if var.get('variable') else Js('obj || (obj = {});\n')))+Js("var __t, __p = ''"))+(Js(', __e = _.escape') if var.get('isEscaping') else Js('')))+((Js(', __j = Array.prototype.join;\n')+Js("function print() { __p += __j.call(arguments, '') }\n")) if var.get('isEvaluating') else Js(';\n')))+var.get('source'))+Js('return __p\n}'))
                        var.put('source', PyJs_LONG_898_())
                        @Js
                        def PyJs_anonymous_899_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            return var.get('Function')(var.get('importsKeys'), ((var.get('sourceURL')+Js('return '))+var.get('source'))).callprop('apply', var.get('undefined'), var.get('importsValues'))
                        PyJs_anonymous_899_._set_name('anonymous')
                        var.put('result', var.get('attempt')(PyJs_anonymous_899_))
                        var.get('result').put('source', var.get('source'))
                        if var.get('isError')(var.get('result')):
                            PyJsTempException = JsToPyException(var.get('result'))
                            raise PyJsTempException
                        return var.get('result')
                    PyJsHoisted_template_.func_name = 'template'
                    var.put('template', PyJsHoisted_template_)
                    @Js
                    def PyJsHoisted_toLower_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return var.get('toString')(var.get('value')).callprop('toLowerCase')
                    PyJsHoisted_toLower_.func_name = 'toLower'
                    var.put('toLower', PyJsHoisted_toLower_)
                    @Js
                    def PyJsHoisted_toUpper_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return var.get('toString')(var.get('value')).callprop('toUpperCase')
                    PyJsHoisted_toUpper_.func_name = 'toUpper'
                    var.put('toUpper', PyJsHoisted_toUpper_)
                    @Js
                    def PyJsHoisted_trim_(string, chars, guard, this, arguments, var=var):
                        var = Scope({'string':string, 'chars':chars, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['start', 'strSymbols', 'chrSymbols', 'end', 'chars', 'string', 'guard'])
                        var.put('string', var.get('toString')(var.get('string')))
                        if (var.get('string') and (var.get('guard') or PyJsStrictEq(var.get('chars'),var.get('undefined')))):
                            return var.get('string').callprop('replace', var.get('reTrim'), Js(''))
                        if (var.get('string').neg() or var.put('chars', var.get('baseToString')(var.get('chars'))).neg()):
                            return var.get('string')
                        var.put('strSymbols', var.get('stringToArray')(var.get('string')))
                        var.put('chrSymbols', var.get('stringToArray')(var.get('chars')))
                        var.put('start', var.get('charsStartIndex')(var.get('strSymbols'), var.get('chrSymbols')))
                        var.put('end', (var.get('charsEndIndex')(var.get('strSymbols'), var.get('chrSymbols'))+Js(1.0)))
                        return var.get('castSlice')(var.get('strSymbols'), var.get('start'), var.get('end')).callprop('join', Js(''))
                    PyJsHoisted_trim_.func_name = 'trim'
                    var.put('trim', PyJsHoisted_trim_)
                    @Js
                    def PyJsHoisted_trimEnd_(string, chars, guard, this, arguments, var=var):
                        var = Scope({'string':string, 'chars':chars, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['strSymbols', 'end', 'chars', 'string', 'guard'])
                        var.put('string', var.get('toString')(var.get('string')))
                        if (var.get('string') and (var.get('guard') or PyJsStrictEq(var.get('chars'),var.get('undefined')))):
                            return var.get('string').callprop('replace', var.get('reTrimEnd'), Js(''))
                        if (var.get('string').neg() or var.put('chars', var.get('baseToString')(var.get('chars'))).neg()):
                            return var.get('string')
                        var.put('strSymbols', var.get('stringToArray')(var.get('string')))
                        var.put('end', (var.get('charsEndIndex')(var.get('strSymbols'), var.get('stringToArray')(var.get('chars')))+Js(1.0)))
                        return var.get('castSlice')(var.get('strSymbols'), Js(0.0), var.get('end')).callprop('join', Js(''))
                    PyJsHoisted_trimEnd_.func_name = 'trimEnd'
                    var.put('trimEnd', PyJsHoisted_trimEnd_)
                    @Js
                    def PyJsHoisted_trimStart_(string, chars, guard, this, arguments, var=var):
                        var = Scope({'string':string, 'chars':chars, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['start', 'strSymbols', 'chars', 'string', 'guard'])
                        var.put('string', var.get('toString')(var.get('string')))
                        if (var.get('string') and (var.get('guard') or PyJsStrictEq(var.get('chars'),var.get('undefined')))):
                            return var.get('string').callprop('replace', var.get('reTrimStart'), Js(''))
                        if (var.get('string').neg() or var.put('chars', var.get('baseToString')(var.get('chars'))).neg()):
                            return var.get('string')
                        var.put('strSymbols', var.get('stringToArray')(var.get('string')))
                        var.put('start', var.get('charsStartIndex')(var.get('strSymbols'), var.get('stringToArray')(var.get('chars'))))
                        return var.get('castSlice')(var.get('strSymbols'), var.get('start')).callprop('join', Js(''))
                    PyJsHoisted_trimStart_.func_name = 'trimStart'
                    var.put('trimStart', PyJsHoisted_trimStart_)
                    @Js
                    def PyJsHoisted_truncate_(string, options, this, arguments, var=var):
                        var = Scope({'string':string, 'options':options, 'this':this, 'arguments':arguments}, var)
                        var.registers(['separator', 'result', 'strSymbols', 'options', 'end', 'length', 'strLength', 'index', 'omission', 'newEnd', 'match', 'substring', 'string'])
                        var.put('length', var.get('DEFAULT_TRUNC_LENGTH'))
                        var.put('omission', var.get('DEFAULT_TRUNC_OMISSION'))
                        if var.get('isObject')(var.get('options')):
                            var.put('separator', (var.get('options').get('separator') if var.get('options').contains(Js('separator')) else var.get('separator')))
                            var.put('length', (var.get('toInteger')(var.get('options').get('length')) if var.get('options').contains(Js('length')) else var.get('length')))
                            var.put('omission', (var.get('baseToString')(var.get('options').get('omission')) if var.get('options').contains(Js('omission')) else var.get('omission')))
                        var.put('string', var.get('toString')(var.get('string')))
                        var.put('strLength', var.get('string').get('length'))
                        if var.get('hasUnicode')(var.get('string')):
                            var.put('strSymbols', var.get('stringToArray')(var.get('string')))
                            var.put('strLength', var.get('strSymbols').get('length'))
                        if (var.get('length')>=var.get('strLength')):
                            return var.get('string')
                        var.put('end', (var.get('length')-var.get('stringSize')(var.get('omission'))))
                        if (var.get('end')<Js(1.0)):
                            return var.get('omission')
                        var.put('result', (var.get('castSlice')(var.get('strSymbols'), Js(0.0), var.get('end')).callprop('join', Js('')) if var.get('strSymbols') else var.get('string').callprop('slice', Js(0.0), var.get('end'))))
                        if PyJsStrictEq(var.get('separator'),var.get('undefined')):
                            return (var.get('result')+var.get('omission'))
                        if var.get('strSymbols'):
                            var.put('end', (var.get('result').get('length')-var.get('end')), '+')
                        if var.get('isRegExp')(var.get('separator')):
                            if var.get('string').callprop('slice', var.get('end')).callprop('search', var.get('separator')):
                                var.put('substring', var.get('result'))
                                if var.get('separator').get('global').neg():
                                    var.put('separator', var.get('RegExp')(var.get('separator').get('source'), (var.get('toString')(var.get('reFlags').callprop('exec', var.get('separator')))+Js('g'))))
                                var.get('separator').put('lastIndex', Js(0.0))
                                while var.put('match', var.get('separator').callprop('exec', var.get('substring'))):
                                    var.put('newEnd', var.get('match').get('index'))
                                var.put('result', var.get('result').callprop('slice', Js(0.0), (var.get('end') if PyJsStrictEq(var.get('newEnd'),var.get('undefined')) else var.get('newEnd'))))
                        else:
                            if (var.get('string').callprop('indexOf', var.get('baseToString')(var.get('separator')), var.get('end'))!=var.get('end')):
                                var.put('index', var.get('result').callprop('lastIndexOf', var.get('separator')))
                                if (var.get('index')>(-Js(1.0))):
                                    var.put('result', var.get('result').callprop('slice', Js(0.0), var.get('index')))
                        return (var.get('result')+var.get('omission'))
                    PyJsHoisted_truncate_.func_name = 'truncate'
                    var.put('truncate', PyJsHoisted_truncate_)
                    @Js
                    def PyJsHoisted_unescape_(string, this, arguments, var=var):
                        var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                        var.registers(['string'])
                        var.put('string', var.get('toString')(var.get('string')))
                        return (var.get('string').callprop('replace', var.get('reEscapedHtml'), var.get('unescapeHtmlChar')) if (var.get('string') and var.get('reHasEscapedHtml').callprop('test', var.get('string'))) else var.get('string'))
                    PyJsHoisted_unescape_.func_name = 'unescape'
                    var.put('unescape', PyJsHoisted_unescape_)
                    @Js
                    def PyJsHoisted_words_(string, pattern, guard, this, arguments, var=var):
                        var = Scope({'string':string, 'pattern':pattern, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['pattern', 'guard', 'string'])
                        var.put('string', var.get('toString')(var.get('string')))
                        var.put('pattern', (var.get('undefined') if var.get('guard') else var.get('pattern')))
                        if PyJsStrictEq(var.get('pattern'),var.get('undefined')):
                            return (var.get('unicodeWords')(var.get('string')) if var.get('hasUnicodeWord')(var.get('string')) else var.get('asciiWords')(var.get('string')))
                        return (var.get('string').callprop('match', var.get('pattern')) or Js([]))
                    PyJsHoisted_words_.func_name = 'words'
                    var.put('words', PyJsHoisted_words_)
                    @Js
                    def PyJsHoisted_cond_(pairs, this, arguments, var=var):
                        var = Scope({'pairs':pairs, 'this':this, 'arguments':arguments}, var)
                        var.registers(['toIteratee', 'length', 'pairs'])
                        var.put('length', (Js(0.0) if (var.get('pairs')==var.get(u"null")) else var.get('pairs').get('length')))
                        var.put('toIteratee', var.get('getIteratee')())
                        @Js
                        def PyJs_anonymous_904_(pair, this, arguments, var=var):
                            var = Scope({'pair':pair, 'this':this, 'arguments':arguments}, var)
                            var.registers(['pair'])
                            if (var.get('pair').get('1').typeof()!=Js('function')):
                                PyJsTempException = JsToPyException(var.get('TypeError').create(var.get('FUNC_ERROR_TEXT')))
                                raise PyJsTempException
                            return Js([var.get('toIteratee')(var.get('pair').get('0')), var.get('pair').get('1')])
                        PyJs_anonymous_904_._set_name('anonymous')
                        var.put('pairs', (Js([]) if var.get('length').neg() else var.get('arrayMap')(var.get('pairs'), PyJs_anonymous_904_)))
                        @Js
                        def PyJs_anonymous_905_(args, this, arguments, var=var):
                            var = Scope({'args':args, 'this':this, 'arguments':arguments}, var)
                            var.registers(['args', 'pair', 'index'])
                            var.put('index', (-Js(1.0)))
                            while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                                var.put('pair', var.get('pairs').get(var.get('index')))
                                if var.get('apply')(var.get('pair').get('0'), var.get(u"this"), var.get('args')):
                                    return var.get('apply')(var.get('pair').get('1'), var.get(u"this"), var.get('args'))
                        PyJs_anonymous_905_._set_name('anonymous')
                        return var.get('baseRest')(PyJs_anonymous_905_)
                    PyJsHoisted_cond_.func_name = 'cond'
                    var.put('cond', PyJsHoisted_cond_)
                    @Js
                    def PyJsHoisted_conforms_(source, this, arguments, var=var):
                        var = Scope({'source':source, 'this':this, 'arguments':arguments}, var)
                        var.registers(['source'])
                        return var.get('baseConforms')(var.get('baseClone')(var.get('source'), var.get('CLONE_DEEP_FLAG')))
                    PyJsHoisted_conforms_.func_name = 'conforms'
                    var.put('conforms', PyJsHoisted_conforms_)
                    @Js
                    def PyJsHoisted_constant_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        @Js
                        def PyJs_anonymous_906_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            return var.get('value')
                        PyJs_anonymous_906_._set_name('anonymous')
                        return PyJs_anonymous_906_
                    PyJsHoisted_constant_.func_name = 'constant'
                    var.put('constant', PyJsHoisted_constant_)
                    @Js
                    def PyJsHoisted_defaultTo_(value, defaultValue, this, arguments, var=var):
                        var = Scope({'value':value, 'defaultValue':defaultValue, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'defaultValue'])
                        return (var.get('defaultValue') if ((var.get('value')==var.get(u"null")) or PyJsStrictNeq(var.get('value'),var.get('value'))) else var.get('value'))
                    PyJsHoisted_defaultTo_.func_name = 'defaultTo'
                    var.put('defaultTo', PyJsHoisted_defaultTo_)
                    @Js
                    def PyJsHoisted_identity_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return var.get('value')
                    PyJsHoisted_identity_.func_name = 'identity'
                    var.put('identity', PyJsHoisted_identity_)
                    @Js
                    def PyJsHoisted_iteratee_(func, this, arguments, var=var):
                        var = Scope({'func':func, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func'])
                        return var.get('baseIteratee')((var.get('func') if (var.get('func',throw=False).typeof()==Js('function')) else var.get('baseClone')(var.get('func'), var.get('CLONE_DEEP_FLAG'))))
                    PyJsHoisted_iteratee_.func_name = 'iteratee'
                    var.put('iteratee', PyJsHoisted_iteratee_)
                    @Js
                    def PyJsHoisted_matches_(source, this, arguments, var=var):
                        var = Scope({'source':source, 'this':this, 'arguments':arguments}, var)
                        var.registers(['source'])
                        return var.get('baseMatches')(var.get('baseClone')(var.get('source'), var.get('CLONE_DEEP_FLAG')))
                    PyJsHoisted_matches_.func_name = 'matches'
                    var.put('matches', PyJsHoisted_matches_)
                    @Js
                    def PyJsHoisted_matchesProperty_(path, srcValue, this, arguments, var=var):
                        var = Scope({'path':path, 'srcValue':srcValue, 'this':this, 'arguments':arguments}, var)
                        var.registers(['path', 'srcValue'])
                        return var.get('baseMatchesProperty')(var.get('path'), var.get('baseClone')(var.get('srcValue'), var.get('CLONE_DEEP_FLAG')))
                    PyJsHoisted_matchesProperty_.func_name = 'matchesProperty'
                    var.put('matchesProperty', PyJsHoisted_matchesProperty_)
                    @Js
                    def PyJsHoisted_mixin_(object, source, options, this, arguments, var=var):
                        var = Scope({'object':object, 'source':source, 'options':options, 'this':this, 'arguments':arguments}, var)
                        var.registers(['props', 'options', 'object', 'source', 'chain', 'isFunc', 'methodNames'])
                        var.put('props', var.get('keys')(var.get('source')))
                        var.put('methodNames', var.get('baseFunctions')(var.get('source'), var.get('props')))
                        if ((var.get('options')==var.get(u"null")) and (var.get('isObject')(var.get('source')) and (var.get('methodNames').get('length') or var.get('props').get('length').neg())).neg()):
                            var.put('options', var.get('source'))
                            var.put('source', var.get('object'))
                            var.put('object', var.get(u"this"))
                            var.put('methodNames', var.get('baseFunctions')(var.get('source'), var.get('keys')(var.get('source'))))
                        var.put('chain', ((var.get('isObject')(var.get('options')) and var.get('options').contains(Js('chain'))).neg() or var.get('options').get('chain').neg().neg()))
                        var.put('isFunc', var.get('isFunction')(var.get('object')))
                        @Js
                        def PyJs_anonymous_911_(methodName, this, arguments, var=var):
                            var = Scope({'methodName':methodName, 'this':this, 'arguments':arguments}, var)
                            var.registers(['func', 'methodName'])
                            var.put('func', var.get('source').get(var.get('methodName')))
                            var.get('object').put(var.get('methodName'), var.get('func'))
                            if var.get('isFunc'):
                                @Js
                                def PyJs_anonymous_912_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                    var.registers(['chainAll', 'result', 'actions'])
                                    var.put('chainAll', var.get(u"this").get('__chain__'))
                                    if (var.get('chain') or var.get('chainAll')):
                                        var.put('result', var.get('object')(var.get(u"this").get('__wrapped__')))
                                        var.put('actions', var.get('result').put('__actions__', var.get('copyArray')(var.get(u"this").get('__actions__'))))
                                        var.get('actions').callprop('push', Js({'func':var.get('func'),'args':var.get('arguments'),'thisArg':var.get('object')}))
                                        var.get('result').put('__chain__', var.get('chainAll'))
                                        return var.get('result')
                                    return var.get('func').callprop('apply', var.get('object'), var.get('arrayPush')(Js([var.get(u"this").callprop('value')]), var.get('arguments')))
                                PyJs_anonymous_912_._set_name('anonymous')
                                var.get('object').get('prototype').put(var.get('methodName'), PyJs_anonymous_912_)
                        PyJs_anonymous_911_._set_name('anonymous')
                        var.get('arrayEach')(var.get('methodNames'), PyJs_anonymous_911_)
                        return var.get('object')
                    PyJsHoisted_mixin_.func_name = 'mixin'
                    var.put('mixin', PyJsHoisted_mixin_)
                    @Js
                    def PyJsHoisted_noConflict_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        if PyJsStrictEq(var.get('root').get('_'),var.get(u"this")):
                            var.get('root').put('_', var.get('oldDash'))
                        return var.get(u"this")
                    PyJsHoisted_noConflict_.func_name = 'noConflict'
                    var.put('noConflict', PyJsHoisted_noConflict_)
                    @Js
                    def PyJsHoisted_noop_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        pass
                    PyJsHoisted_noop_.func_name = 'noop'
                    var.put('noop', PyJsHoisted_noop_)
                    @Js
                    def PyJsHoisted_nthArg_(n, this, arguments, var=var):
                        var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
                        var.registers(['n'])
                        var.put('n', var.get('toInteger')(var.get('n')))
                        @Js
                        def PyJs_anonymous_913_(args, this, arguments, var=var):
                            var = Scope({'args':args, 'this':this, 'arguments':arguments}, var)
                            var.registers(['args'])
                            return var.get('baseNth')(var.get('args'), var.get('n'))
                        PyJs_anonymous_913_._set_name('anonymous')
                        return var.get('baseRest')(PyJs_anonymous_913_)
                    PyJsHoisted_nthArg_.func_name = 'nthArg'
                    var.put('nthArg', PyJsHoisted_nthArg_)
                    @Js
                    def PyJsHoisted_property_(path, this, arguments, var=var):
                        var = Scope({'path':path, 'this':this, 'arguments':arguments}, var)
                        var.registers(['path'])
                        return (var.get('baseProperty')(var.get('toKey')(var.get('path'))) if var.get('isKey')(var.get('path')) else var.get('basePropertyDeep')(var.get('path')))
                    PyJsHoisted_property_.func_name = 'property'
                    var.put('property', PyJsHoisted_property_)
                    @Js
                    def PyJsHoisted_propertyOf_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object'])
                        @Js
                        def PyJs_anonymous_914_(path, this, arguments, var=var):
                            var = Scope({'path':path, 'this':this, 'arguments':arguments}, var)
                            var.registers(['path'])
                            return (var.get('undefined') if (var.get('object')==var.get(u"null")) else var.get('baseGet')(var.get('object'), var.get('path')))
                        PyJs_anonymous_914_._set_name('anonymous')
                        return PyJs_anonymous_914_
                    PyJsHoisted_propertyOf_.func_name = 'propertyOf'
                    var.put('propertyOf', PyJsHoisted_propertyOf_)
                    @Js
                    def PyJsHoisted_stubArray_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return Js([])
                    PyJsHoisted_stubArray_.func_name = 'stubArray'
                    var.put('stubArray', PyJsHoisted_stubArray_)
                    @Js
                    def PyJsHoisted_stubFalse_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return Js(False)
                    PyJsHoisted_stubFalse_.func_name = 'stubFalse'
                    var.put('stubFalse', PyJsHoisted_stubFalse_)
                    @Js
                    def PyJsHoisted_stubObject_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return Js({})
                    PyJsHoisted_stubObject_.func_name = 'stubObject'
                    var.put('stubObject', PyJsHoisted_stubObject_)
                    @Js
                    def PyJsHoisted_stubString_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return Js('')
                    PyJsHoisted_stubString_.func_name = 'stubString'
                    var.put('stubString', PyJsHoisted_stubString_)
                    @Js
                    def PyJsHoisted_stubTrue_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return Js(True)
                    PyJsHoisted_stubTrue_.func_name = 'stubTrue'
                    var.put('stubTrue', PyJsHoisted_stubTrue_)
                    @Js
                    def PyJsHoisted_times_(n, iteratee, this, arguments, var=var):
                        var = Scope({'n':n, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'n', 'length', 'index', 'iteratee'])
                        var.put('n', var.get('toInteger')(var.get('n')))
                        if ((var.get('n')<Js(1.0)) or (var.get('n')>var.get('MAX_SAFE_INTEGER'))):
                            return Js([])
                        var.put('index', var.get('MAX_ARRAY_LENGTH'))
                        var.put('length', var.get('nativeMin')(var.get('n'), var.get('MAX_ARRAY_LENGTH')))
                        var.put('iteratee', var.get('getIteratee')(var.get('iteratee')))
                        var.put('n', var.get('MAX_ARRAY_LENGTH'), '-')
                        var.put('result', var.get('baseTimes')(var.get('length'), var.get('iteratee')))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('n')):
                            var.get('iteratee')(var.get('index'))
                        return var.get('result')
                    PyJsHoisted_times_.func_name = 'times'
                    var.put('times', PyJsHoisted_times_)
                    @Js
                    def PyJsHoisted_toPath_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        if var.get('isArray')(var.get('value')):
                            return var.get('arrayMap')(var.get('value'), var.get('toKey'))
                        return (Js([var.get('value')]) if var.get('isSymbol')(var.get('value')) else var.get('copyArray')(var.get('stringToPath')(var.get('toString')(var.get('value')))))
                    PyJsHoisted_toPath_.func_name = 'toPath'
                    var.put('toPath', PyJsHoisted_toPath_)
                    @Js
                    def PyJsHoisted_uniqueId_(prefix, this, arguments, var=var):
                        var = Scope({'prefix':prefix, 'this':this, 'arguments':arguments}, var)
                        var.registers(['id', 'prefix'])
                        var.put('id', var.put('idCounter',Js(var.get('idCounter').to_number())+Js(1)))
                        return (var.get('toString')(var.get('prefix'))+var.get('id'))
                    PyJsHoisted_uniqueId_.func_name = 'uniqueId'
                    var.put('uniqueId', PyJsHoisted_uniqueId_)
                    @Js
                    def PyJsHoisted_max_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array'])
                        return (var.get('baseExtremum')(var.get('array'), var.get('identity'), var.get('baseGt')) if (var.get('array') and var.get('array').get('length')) else var.get('undefined'))
                    PyJsHoisted_max_.func_name = 'max'
                    var.put('max', PyJsHoisted_max_)
                    @Js
                    def PyJsHoisted_maxBy_(array, iteratee, this, arguments, var=var):
                        var = Scope({'array':array, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'iteratee'])
                        return (var.get('baseExtremum')(var.get('array'), var.get('getIteratee')(var.get('iteratee'), Js(2.0)), var.get('baseGt')) if (var.get('array') and var.get('array').get('length')) else var.get('undefined'))
                    PyJsHoisted_maxBy_.func_name = 'maxBy'
                    var.put('maxBy', PyJsHoisted_maxBy_)
                    @Js
                    def PyJsHoisted_mean_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array'])
                        return var.get('baseMean')(var.get('array'), var.get('identity'))
                    PyJsHoisted_mean_.func_name = 'mean'
                    var.put('mean', PyJsHoisted_mean_)
                    @Js
                    def PyJsHoisted_meanBy_(array, iteratee, this, arguments, var=var):
                        var = Scope({'array':array, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'iteratee'])
                        return var.get('baseMean')(var.get('array'), var.get('getIteratee')(var.get('iteratee'), Js(2.0)))
                    PyJsHoisted_meanBy_.func_name = 'meanBy'
                    var.put('meanBy', PyJsHoisted_meanBy_)
                    @Js
                    def PyJsHoisted_min_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array'])
                        return (var.get('baseExtremum')(var.get('array'), var.get('identity'), var.get('baseLt')) if (var.get('array') and var.get('array').get('length')) else var.get('undefined'))
                    PyJsHoisted_min_.func_name = 'min'
                    var.put('min', PyJsHoisted_min_)
                    @Js
                    def PyJsHoisted_minBy_(array, iteratee, this, arguments, var=var):
                        var = Scope({'array':array, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'iteratee'])
                        return (var.get('baseExtremum')(var.get('array'), var.get('getIteratee')(var.get('iteratee'), Js(2.0)), var.get('baseLt')) if (var.get('array') and var.get('array').get('length')) else var.get('undefined'))
                    PyJsHoisted_minBy_.func_name = 'minBy'
                    var.put('minBy', PyJsHoisted_minBy_)
                    @Js
                    def PyJsHoisted_sum_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array'])
                        return (var.get('baseSum')(var.get('array'), var.get('identity')) if (var.get('array') and var.get('array').get('length')) else Js(0.0))
                    PyJsHoisted_sum_.func_name = 'sum'
                    var.put('sum', PyJsHoisted_sum_)
                    @Js
                    def PyJsHoisted_sumBy_(array, iteratee, this, arguments, var=var):
                        var = Scope({'array':array, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'iteratee'])
                        return (var.get('baseSum')(var.get('array'), var.get('getIteratee')(var.get('iteratee'), Js(2.0))) if (var.get('array') and var.get('array').get('length')) else Js(0.0))
                    PyJsHoisted_sumBy_.func_name = 'sumBy'
                    var.put('sumBy', PyJsHoisted_sumBy_)
                    var.put('context', (var.get('root') if (var.get('context')==var.get(u"null")) else var.get('_').callprop('defaults', var.get('root').callprop('Object'), var.get('context'), var.get('_').callprop('pick', var.get('root'), var.get('contextProps')))))
                    var.put('Array', var.get('context').get('Array'))
                    var.put('Date', var.get('context').get('Date'))
                    var.put('Error', var.get('context').get('Error'))
                    var.put('Function', var.get('context').get('Function'))
                    var.put('Math', var.get('context').get('Math'))
                    var.put('Object', var.get('context').get('Object'))
                    var.put('RegExp', var.get('context').get('RegExp'))
                    var.put('String', var.get('context').get('String'))
                    var.put('TypeError', var.get('context').get('TypeError'))
                    var.put('arrayProto', var.get('Array').get('prototype'))
                    var.put('funcProto', var.get('Function').get('prototype'))
                    var.put('objectProto', var.get('Object').get('prototype'))
                    var.put('coreJsData', var.get('context').get('__core-js_shared__'))
                    var.put('funcToString', var.get('funcProto').get('toString'))
                    var.put('hasOwnProperty', var.get('objectProto').get('hasOwnProperty'))
                    var.put('idCounter', Js(0.0))
                    @Js
                    def PyJs_anonymous_757_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['uid'])
                        var.put('uid', JsRegExp('/[^.]+$/').callprop('exec', (((var.get('coreJsData') and var.get('coreJsData').get('keys')) and var.get('coreJsData').get('keys').get('IE_PROTO')) or Js(''))))
                        return ((Js('Symbol(src)_1.')+var.get('uid')) if var.get('uid') else Js(''))
                    PyJs_anonymous_757_._set_name('anonymous')
                    var.put('maskSrcKey', PyJs_anonymous_757_())
                    var.put('nativeObjectToString', var.get('objectProto').get('toString'))
                    var.put('objectCtorString', var.get('funcToString').callprop('call', var.get('Object')))
                    var.put('oldDash', var.get('root').get('_'))
                    var.put('reIsNative', var.get('RegExp')(((Js('^')+var.get('funcToString').callprop('call', var.get('hasOwnProperty')).callprop('replace', var.get('reRegExpChar'), Js('\\$&')).callprop('replace', JsRegExp('/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g'), Js('$1.*?')))+Js('$'))))
                    var.put('Buffer', (var.get('context').get('Buffer') if var.get('moduleExports') else var.get('undefined')))
                    var.put('Symbol', var.get('context').get('Symbol'))
                    var.put('Uint8Array', var.get('context').get('Uint8Array'))
                    var.put('allocUnsafe', (var.get('Buffer').get('allocUnsafe') if var.get('Buffer') else var.get('undefined')))
                    var.put('getPrototype', var.get('overArg')(var.get('Object').get('getPrototypeOf'), var.get('Object')))
                    var.put('objectCreate', var.get('Object').get('create'))
                    var.put('propertyIsEnumerable', var.get('objectProto').get('propertyIsEnumerable'))
                    var.put('splice', var.get('arrayProto').get('splice'))
                    var.put('spreadableSymbol', (var.get('Symbol').get('isConcatSpreadable') if var.get('Symbol') else var.get('undefined')))
                    var.put('symIterator', (var.get('Symbol').get('iterator') if var.get('Symbol') else var.get('undefined')))
                    var.put('symToStringTag', (var.get('Symbol').get('toStringTag') if var.get('Symbol') else var.get('undefined')))
                    @Js
                    def PyJs_anonymous_758_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['func'])
                        try:
                            var.put('func', var.get('getNative')(var.get('Object'), Js('defineProperty')))
                            var.get('func')(Js({}), Js(''), Js({}))
                            return var.get('func')
                        except PyJsException as PyJsTempException:
                            PyJsHolder_65_25349479 = var.own.get('e')
                            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                            try:
                                pass
                            finally:
                                if PyJsHolder_65_25349479 is not None:
                                    var.own['e'] = PyJsHolder_65_25349479
                                else:
                                    del var.own['e']
                                del PyJsHolder_65_25349479
                    PyJs_anonymous_758_._set_name('anonymous')
                    var.put('defineProperty', PyJs_anonymous_758_())
                    var.put('ctxClearTimeout', (PyJsStrictNeq(var.get('context').get('clearTimeout'),var.get('root').get('clearTimeout')) and var.get('context').get('clearTimeout')))
                    var.put('ctxNow', ((var.get('Date') and PyJsStrictNeq(var.get('Date').get('now'),var.get('root').get('Date').get('now'))) and var.get('Date').get('now')))
                    var.put('ctxSetTimeout', (PyJsStrictNeq(var.get('context').get('setTimeout'),var.get('root').get('setTimeout')) and var.get('context').get('setTimeout')))
                    var.put('nativeCeil', var.get('Math').get('ceil'))
                    var.put('nativeFloor', var.get('Math').get('floor'))
                    var.put('nativeGetSymbols', var.get('Object').get('getOwnPropertySymbols'))
                    var.put('nativeIsBuffer', (var.get('Buffer').get('isBuffer') if var.get('Buffer') else var.get('undefined')))
                    var.put('nativeIsFinite', var.get('context').get('isFinite'))
                    var.put('nativeJoin', var.get('arrayProto').get('join'))
                    var.put('nativeKeys', var.get('overArg')(var.get('Object').get('keys'), var.get('Object')))
                    var.put('nativeMax', var.get('Math').get('max'))
                    var.put('nativeMin', var.get('Math').get('min'))
                    var.put('nativeNow', var.get('Date').get('now'))
                    var.put('nativeParseInt', var.get('context').get('parseInt'))
                    var.put('nativeRandom', var.get('Math').get('random'))
                    var.put('nativeReverse', var.get('arrayProto').get('reverse'))
                    var.put('DataView', var.get('getNative')(var.get('context'), Js('DataView')))
                    var.put('Map', var.get('getNative')(var.get('context'), Js('Map')))
                    var.put('Promise', var.get('getNative')(var.get('context'), Js('Promise')))
                    var.put('Set', var.get('getNative')(var.get('context'), Js('Set')))
                    var.put('WeakMap', var.get('getNative')(var.get('context'), Js('WeakMap')))
                    var.put('nativeCreate', var.get('getNative')(var.get('Object'), Js('create')))
                    var.put('metaMap', (var.get('WeakMap') and var.get('WeakMap').create()))
                    var.put('realNames', Js({}))
                    var.put('dataViewCtorString', var.get('toSource')(var.get('DataView')))
                    var.put('mapCtorString', var.get('toSource')(var.get('Map')))
                    var.put('promiseCtorString', var.get('toSource')(var.get('Promise')))
                    var.put('setCtorString', var.get('toSource')(var.get('Set')))
                    var.put('weakMapCtorString', var.get('toSource')(var.get('WeakMap')))
                    var.put('symbolProto', (var.get('Symbol').get('prototype') if var.get('Symbol') else var.get('undefined')))
                    var.put('symbolValueOf', (var.get('symbolProto').get('valueOf') if var.get('symbolProto') else var.get('undefined')))
                    var.put('symbolToString', (var.get('symbolProto').get('toString') if var.get('symbolProto') else var.get('undefined')))
                    pass
                    @Js
                    def PyJs_anonymous_759_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['object'])
                        @Js
                        def PyJsHoisted_object_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            pass
                        PyJsHoisted_object_.func_name = 'object'
                        var.put('object', PyJsHoisted_object_)
                        pass
                        @Js
                        def PyJs_anonymous_760_(proto, this, arguments, var=var):
                            var = Scope({'proto':proto, 'this':this, 'arguments':arguments}, var)
                            var.registers(['result', 'proto'])
                            if var.get('isObject')(var.get('proto')).neg():
                                return Js({})
                            if var.get('objectCreate'):
                                return var.get('objectCreate')(var.get('proto'))
                            var.get('object').put('prototype', var.get('proto'))
                            var.put('result', var.get('object').create())
                            var.get('object').put('prototype', var.get('undefined'))
                            return var.get('result')
                        PyJs_anonymous_760_._set_name('anonymous')
                        return PyJs_anonymous_760_
                    PyJs_anonymous_759_._set_name('anonymous')
                    var.put('baseCreate', PyJs_anonymous_759_())
                    pass
                    pass
                    var.get('lodash').put('templateSettings', Js({'escape':var.get('reEscape'),'evaluate':var.get('reEvaluate'),'interpolate':var.get('reInterpolate'),'variable':Js(''),'imports':Js({'_':var.get('lodash')})}))
                    var.get('lodash').put('prototype', var.get('baseLodash').get('prototype'))
                    var.get('lodash').get('prototype').put('constructor', var.get('lodash'))
                    var.get('LodashWrapper').put('prototype', var.get('baseCreate')(var.get('baseLodash').get('prototype')))
                    var.get('LodashWrapper').get('prototype').put('constructor', var.get('LodashWrapper'))
                    pass
                    pass
                    pass
                    pass
                    var.get('LazyWrapper').put('prototype', var.get('baseCreate')(var.get('baseLodash').get('prototype')))
                    var.get('LazyWrapper').get('prototype').put('constructor', var.get('LazyWrapper'))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    var.get('Hash').get('prototype').put('clear', var.get('hashClear'))
                    var.get('Hash').get('prototype').put('delete', var.get('hashDelete'))
                    var.get('Hash').get('prototype').put('get', var.get('hashGet'))
                    var.get('Hash').get('prototype').put('has', var.get('hashHas'))
                    var.get('Hash').get('prototype').put('set', var.get('hashSet'))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    var.get('ListCache').get('prototype').put('clear', var.get('listCacheClear'))
                    var.get('ListCache').get('prototype').put('delete', var.get('listCacheDelete'))
                    var.get('ListCache').get('prototype').put('get', var.get('listCacheGet'))
                    var.get('ListCache').get('prototype').put('has', var.get('listCacheHas'))
                    var.get('ListCache').get('prototype').put('set', var.get('listCacheSet'))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    var.get('MapCache').get('prototype').put('clear', var.get('mapCacheClear'))
                    var.get('MapCache').get('prototype').put('delete', var.get('mapCacheDelete'))
                    var.get('MapCache').get('prototype').put('get', var.get('mapCacheGet'))
                    var.get('MapCache').get('prototype').put('has', var.get('mapCacheHas'))
                    var.get('MapCache').get('prototype').put('set', var.get('mapCacheSet'))
                    pass
                    pass
                    pass
                    var.get('SetCache').get('prototype').put('add', var.get('SetCache').get('prototype').put('push', var.get('setCacheAdd')))
                    var.get('SetCache').get('prototype').put('has', var.get('setCacheHas'))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    var.get('Stack').get('prototype').put('clear', var.get('stackClear'))
                    var.get('Stack').get('prototype').put('delete', var.get('stackDelete'))
                    var.get('Stack').get('prototype').put('get', var.get('stackGet'))
                    var.get('Stack').get('prototype').put('has', var.get('stackHas'))
                    var.get('Stack').get('prototype').put('set', var.get('stackSet'))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    var.put('baseEach', var.get('createBaseEach')(var.get('baseForOwn')))
                    var.put('baseEachRight', var.get('createBaseEach')(var.get('baseForOwnRight'), Js(True)))
                    pass
                    pass
                    pass
                    pass
                    pass
                    var.put('baseFor', var.get('createBaseFor')())
                    var.put('baseForRight', var.get('createBaseFor')(Js(True)))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_781_(func, data, this, arguments, var=var):
                        var = Scope({'func':func, 'data':data, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'data'])
                        var.get('metaMap').callprop('set', var.get('func'), var.get('data'))
                        return var.get('func')
                    PyJs_anonymous_781_._set_name('anonymous')
                    var.put('baseSetData', (var.get('identity') if var.get('metaMap').neg() else PyJs_anonymous_781_))
                    @Js
                    def PyJs_anonymous_782_(func, string, this, arguments, var=var):
                        var = Scope({'func':func, 'string':string, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'string'])
                        return var.get('defineProperty')(var.get('func'), Js('toString'), Js({'configurable':Js(True),'enumerable':Js(False),'value':var.get('constant')(var.get('string')),'writable':Js(True)}))
                    PyJs_anonymous_782_._set_name('anonymous')
                    var.put('baseSetToString', (var.get('identity') if var.get('defineProperty').neg() else PyJs_anonymous_782_))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    var.put('castRest', var.get('baseRest'))
                    pass
                    @Js
                    def PyJs_anonymous_785_(id, this, arguments, var=var):
                        var = Scope({'id':id, 'this':this, 'arguments':arguments}, var)
                        var.registers(['id'])
                        return var.get('root').callprop('clearTimeout', var.get('id'))
                    PyJs_anonymous_785_._set_name('anonymous')
                    var.put('clearTimeout', (var.get('ctxClearTimeout') or PyJs_anonymous_785_))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_807_(values, this, arguments, var=var):
                        var = Scope({'values':values, 'this':this, 'arguments':arguments}, var)
                        var.registers(['values'])
                        return var.get('Set').create(var.get('values'))
                    PyJs_anonymous_807_._set_name('anonymous')
                    var.put('createSet', (var.get('noop') if (var.get('Set') and ((Js(1.0)/var.get('setToArray')(var.get('Set').create(Js([None, (-Js(0.0))]))).get('1'))==var.get('INFINITY'))).neg() else PyJs_anonymous_807_))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_810_(func, this, arguments, var=var):
                        var = Scope({'func':func, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func'])
                        return var.get('metaMap').callprop('get', var.get('func'))
                    PyJs_anonymous_810_._set_name('anonymous')
                    var.put('getData', (var.get('noop') if var.get('metaMap').neg() else PyJs_anonymous_810_))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_811_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object'])
                        if (var.get('object')==var.get(u"null")):
                            return Js([])
                        var.put('object', var.get('Object')(var.get('object')))
                        @Js
                        def PyJs_anonymous_812_(symbol, this, arguments, var=var):
                            var = Scope({'symbol':symbol, 'this':this, 'arguments':arguments}, var)
                            var.registers(['symbol'])
                            return var.get('propertyIsEnumerable').callprop('call', var.get('object'), var.get('symbol'))
                        PyJs_anonymous_812_._set_name('anonymous')
                        return var.get('arrayFilter')(var.get('nativeGetSymbols')(var.get('object')), PyJs_anonymous_812_)
                    PyJs_anonymous_811_._set_name('anonymous')
                    var.put('getSymbols', (var.get('stubArray') if var.get('nativeGetSymbols').neg() else PyJs_anonymous_811_))
                    @Js
                    def PyJs_anonymous_813_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'result'])
                        var.put('result', Js([]))
                        while var.get('object'):
                            var.get('arrayPush')(var.get('result'), var.get('getSymbols')(var.get('object')))
                            var.put('object', var.get('getPrototype')(var.get('object')))
                        return var.get('result')
                    PyJs_anonymous_813_._set_name('anonymous')
                    var.put('getSymbolsIn', (var.get('stubArray') if var.get('nativeGetSymbols').neg() else PyJs_anonymous_813_))
                    var.put('getTag', var.get('baseGetTag'))
                    def PyJs_LONG_814_(var=var):
                        return ((((var.get('DataView') and (var.get('getTag')(var.get('DataView').create(var.get('ArrayBuffer').create(Js(1.0))))!=var.get('dataViewTag'))) or (var.get('Map') and (var.get('getTag')(var.get('Map').create())!=var.get('mapTag')))) or (var.get('Promise') and (var.get('getTag')(var.get('Promise').callprop('resolve'))!=var.get('promiseTag')))) or (var.get('Set') and (var.get('getTag')(var.get('Set').create())!=var.get('setTag'))))
                    if (PyJs_LONG_814_() or (var.get('WeakMap') and (var.get('getTag')(var.get('WeakMap').create())!=var.get('weakMapTag')))):
                        @Js
                        def PyJs_anonymous_815_(value, this, arguments, var=var):
                            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                            var.registers(['Ctor', 'result', 'value', 'ctorString'])
                            var.put('result', var.get('baseGetTag')(var.get('value')))
                            var.put('Ctor', (var.get('value').get('constructor') if (var.get('result')==var.get('objectTag')) else var.get('undefined')))
                            var.put('ctorString', (var.get('toSource')(var.get('Ctor')) if var.get('Ctor') else Js('')))
                            if var.get('ctorString'):
                                while 1:
                                    SWITCHED = False
                                    CONDITION = (var.get('ctorString'))
                                    if SWITCHED or PyJsStrictEq(CONDITION, var.get('dataViewCtorString')):
                                        SWITCHED = True
                                        return var.get('dataViewTag')
                                    if SWITCHED or PyJsStrictEq(CONDITION, var.get('mapCtorString')):
                                        SWITCHED = True
                                        return var.get('mapTag')
                                    if SWITCHED or PyJsStrictEq(CONDITION, var.get('promiseCtorString')):
                                        SWITCHED = True
                                        return var.get('promiseTag')
                                    if SWITCHED or PyJsStrictEq(CONDITION, var.get('setCtorString')):
                                        SWITCHED = True
                                        return var.get('setTag')
                                    if SWITCHED or PyJsStrictEq(CONDITION, var.get('weakMapCtorString')):
                                        SWITCHED = True
                                        return var.get('weakMapTag')
                                    SWITCHED = True
                                    break
                            return var.get('result')
                        PyJs_anonymous_815_._set_name('anonymous')
                        var.put('getTag', PyJs_anonymous_815_)
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    var.put('isMaskable', (var.get('isFunction') if var.get('coreJsData') else var.get('stubFalse')))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    var.put('setData', var.get('shortOut')(var.get('baseSetData')))
                    @Js
                    def PyJs_anonymous_820_(func, wait, this, arguments, var=var):
                        var = Scope({'func':func, 'wait':wait, 'this':this, 'arguments':arguments}, var)
                        var.registers(['wait', 'func'])
                        return var.get('root').callprop('setTimeout', var.get('func'), var.get('wait'))
                    PyJs_anonymous_820_._set_name('anonymous')
                    var.put('setTimeout', (var.get('ctxSetTimeout') or PyJs_anonymous_820_))
                    var.put('setToString', var.get('shortOut')(var.get('baseSetToString')))
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_822_(string, this, arguments, var=var):
                        var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'string'])
                        var.put('result', Js([]))
                        if PyJsStrictEq(var.get('string').callprop('charCodeAt', Js(0.0)),Js(46.0)):
                            var.get('result').callprop('push', Js(''))
                        @Js
                        def PyJs_anonymous_823_(match, number, quote, subString, this, arguments, var=var):
                            var = Scope({'match':match, 'number':number, 'quote':quote, 'subString':subString, 'this':this, 'arguments':arguments}, var)
                            var.registers(['quote', 'subString', 'match', 'number'])
                            var.get('result').callprop('push', (var.get('subString').callprop('replace', var.get('reEscapeChar'), Js('$1')) if var.get('quote') else (var.get('number') or var.get('match'))))
                        PyJs_anonymous_823_._set_name('anonymous')
                        var.get('string').callprop('replace', var.get('rePropName'), PyJs_anonymous_823_)
                        return var.get('result')
                    PyJs_anonymous_822_._set_name('anonymous')
                    var.put('stringToPath', var.get('memoizeCapped')(PyJs_anonymous_822_))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_825_(array, values, this, arguments, var=var):
                        var = Scope({'array':array, 'values':values, 'this':this, 'arguments':arguments}, var)
                        var.registers(['values', 'array'])
                        return (var.get('baseDifference')(var.get('array'), var.get('baseFlatten')(var.get('values'), Js(1.0), var.get('isArrayLikeObject'), Js(True))) if var.get('isArrayLikeObject')(var.get('array')) else Js([]))
                    PyJs_anonymous_825_._set_name('anonymous')
                    var.put('difference', var.get('baseRest')(PyJs_anonymous_825_))
                    @Js
                    def PyJs_anonymous_826_(array, values, this, arguments, var=var):
                        var = Scope({'array':array, 'values':values, 'this':this, 'arguments':arguments}, var)
                        var.registers(['values', 'iteratee', 'array'])
                        var.put('iteratee', var.get('last')(var.get('values')))
                        if var.get('isArrayLikeObject')(var.get('iteratee')):
                            var.put('iteratee', var.get('undefined'))
                        return (var.get('baseDifference')(var.get('array'), var.get('baseFlatten')(var.get('values'), Js(1.0), var.get('isArrayLikeObject'), Js(True)), var.get('getIteratee')(var.get('iteratee'), Js(2.0))) if var.get('isArrayLikeObject')(var.get('array')) else Js([]))
                    PyJs_anonymous_826_._set_name('anonymous')
                    var.put('differenceBy', var.get('baseRest')(PyJs_anonymous_826_))
                    @Js
                    def PyJs_anonymous_827_(array, values, this, arguments, var=var):
                        var = Scope({'array':array, 'values':values, 'this':this, 'arguments':arguments}, var)
                        var.registers(['values', 'array', 'comparator'])
                        var.put('comparator', var.get('last')(var.get('values')))
                        if var.get('isArrayLikeObject')(var.get('comparator')):
                            var.put('comparator', var.get('undefined'))
                        return (var.get('baseDifference')(var.get('array'), var.get('baseFlatten')(var.get('values'), Js(1.0), var.get('isArrayLikeObject'), Js(True)), var.get('undefined'), var.get('comparator')) if var.get('isArrayLikeObject')(var.get('array')) else Js([]))
                    PyJs_anonymous_827_._set_name('anonymous')
                    var.put('differenceWith', var.get('baseRest')(PyJs_anonymous_827_))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_828_(arrays, this, arguments, var=var):
                        var = Scope({'arrays':arrays, 'this':this, 'arguments':arguments}, var)
                        var.registers(['mapped', 'arrays'])
                        var.put('mapped', var.get('arrayMap')(var.get('arrays'), var.get('castArrayLikeObject')))
                        return (var.get('baseIntersection')(var.get('mapped')) if (var.get('mapped').get('length') and PyJsStrictEq(var.get('mapped').get('0'),var.get('arrays').get('0'))) else Js([]))
                    PyJs_anonymous_828_._set_name('anonymous')
                    var.put('intersection', var.get('baseRest')(PyJs_anonymous_828_))
                    @Js
                    def PyJs_anonymous_829_(arrays, this, arguments, var=var):
                        var = Scope({'arrays':arrays, 'this':this, 'arguments':arguments}, var)
                        var.registers(['mapped', 'iteratee', 'arrays'])
                        var.put('iteratee', var.get('last')(var.get('arrays')))
                        var.put('mapped', var.get('arrayMap')(var.get('arrays'), var.get('castArrayLikeObject')))
                        if PyJsStrictEq(var.get('iteratee'),var.get('last')(var.get('mapped'))):
                            var.put('iteratee', var.get('undefined'))
                        else:
                            var.get('mapped').callprop('pop')
                        return (var.get('baseIntersection')(var.get('mapped'), var.get('getIteratee')(var.get('iteratee'), Js(2.0))) if (var.get('mapped').get('length') and PyJsStrictEq(var.get('mapped').get('0'),var.get('arrays').get('0'))) else Js([]))
                    PyJs_anonymous_829_._set_name('anonymous')
                    var.put('intersectionBy', var.get('baseRest')(PyJs_anonymous_829_))
                    @Js
                    def PyJs_anonymous_830_(arrays, this, arguments, var=var):
                        var = Scope({'arrays':arrays, 'this':this, 'arguments':arguments}, var)
                        var.registers(['mapped', 'comparator', 'arrays'])
                        var.put('comparator', var.get('last')(var.get('arrays')))
                        var.put('mapped', var.get('arrayMap')(var.get('arrays'), var.get('castArrayLikeObject')))
                        var.put('comparator', (var.get('comparator') if (var.get('comparator',throw=False).typeof()==Js('function')) else var.get('undefined')))
                        if var.get('comparator'):
                            var.get('mapped').callprop('pop')
                        return (var.get('baseIntersection')(var.get('mapped'), var.get('undefined'), var.get('comparator')) if (var.get('mapped').get('length') and PyJsStrictEq(var.get('mapped').get('0'),var.get('arrays').get('0'))) else Js([]))
                    PyJs_anonymous_830_._set_name('anonymous')
                    var.put('intersectionWith', var.get('baseRest')(PyJs_anonymous_830_))
                    pass
                    pass
                    pass
                    pass
                    var.put('pull', var.get('baseRest')(var.get('pullAll')))
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_831_(array, indexes, this, arguments, var=var):
                        var = Scope({'array':array, 'indexes':indexes, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'result', 'length', 'indexes'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        var.put('result', var.get('baseAt')(var.get('array'), var.get('indexes')))
                        @Js
                        def PyJs_anonymous_832_(index, this, arguments, var=var):
                            var = Scope({'index':index, 'this':this, 'arguments':arguments}, var)
                            var.registers(['index'])
                            return ((+var.get('index')) if var.get('isIndex')(var.get('index'), var.get('length')) else var.get('index'))
                        PyJs_anonymous_832_._set_name('anonymous')
                        var.get('basePullAt')(var.get('array'), var.get('arrayMap')(var.get('indexes'), PyJs_anonymous_832_).callprop('sort', var.get('compareAscending')))
                        return var.get('result')
                    PyJs_anonymous_831_._set_name('anonymous')
                    var.put('pullAt', var.get('flatRest')(PyJs_anonymous_831_))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_833_(arrays, this, arguments, var=var):
                        var = Scope({'arrays':arrays, 'this':this, 'arguments':arguments}, var)
                        var.registers(['arrays'])
                        return var.get('baseUniq')(var.get('baseFlatten')(var.get('arrays'), Js(1.0), var.get('isArrayLikeObject'), Js(True)))
                    PyJs_anonymous_833_._set_name('anonymous')
                    var.put('union', var.get('baseRest')(PyJs_anonymous_833_))
                    @Js
                    def PyJs_anonymous_834_(arrays, this, arguments, var=var):
                        var = Scope({'arrays':arrays, 'this':this, 'arguments':arguments}, var)
                        var.registers(['iteratee', 'arrays'])
                        var.put('iteratee', var.get('last')(var.get('arrays')))
                        if var.get('isArrayLikeObject')(var.get('iteratee')):
                            var.put('iteratee', var.get('undefined'))
                        return var.get('baseUniq')(var.get('baseFlatten')(var.get('arrays'), Js(1.0), var.get('isArrayLikeObject'), Js(True)), var.get('getIteratee')(var.get('iteratee'), Js(2.0)))
                    PyJs_anonymous_834_._set_name('anonymous')
                    var.put('unionBy', var.get('baseRest')(PyJs_anonymous_834_))
                    @Js
                    def PyJs_anonymous_835_(arrays, this, arguments, var=var):
                        var = Scope({'arrays':arrays, 'this':this, 'arguments':arguments}, var)
                        var.registers(['arrays', 'comparator'])
                        var.put('comparator', var.get('last')(var.get('arrays')))
                        var.put('comparator', (var.get('comparator') if (var.get('comparator',throw=False).typeof()==Js('function')) else var.get('undefined')))
                        return var.get('baseUniq')(var.get('baseFlatten')(var.get('arrays'), Js(1.0), var.get('isArrayLikeObject'), Js(True)), var.get('undefined'), var.get('comparator'))
                    PyJs_anonymous_835_._set_name('anonymous')
                    var.put('unionWith', var.get('baseRest')(PyJs_anonymous_835_))
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_839_(array, values, this, arguments, var=var):
                        var = Scope({'array':array, 'values':values, 'this':this, 'arguments':arguments}, var)
                        var.registers(['values', 'array'])
                        return (var.get('baseDifference')(var.get('array'), var.get('values')) if var.get('isArrayLikeObject')(var.get('array')) else Js([]))
                    PyJs_anonymous_839_._set_name('anonymous')
                    var.put('without', var.get('baseRest')(PyJs_anonymous_839_))
                    @Js
                    def PyJs_anonymous_840_(arrays, this, arguments, var=var):
                        var = Scope({'arrays':arrays, 'this':this, 'arguments':arguments}, var)
                        var.registers(['arrays'])
                        return var.get('baseXor')(var.get('arrayFilter')(var.get('arrays'), var.get('isArrayLikeObject')))
                    PyJs_anonymous_840_._set_name('anonymous')
                    var.put('xor', var.get('baseRest')(PyJs_anonymous_840_))
                    @Js
                    def PyJs_anonymous_841_(arrays, this, arguments, var=var):
                        var = Scope({'arrays':arrays, 'this':this, 'arguments':arguments}, var)
                        var.registers(['iteratee', 'arrays'])
                        var.put('iteratee', var.get('last')(var.get('arrays')))
                        if var.get('isArrayLikeObject')(var.get('iteratee')):
                            var.put('iteratee', var.get('undefined'))
                        return var.get('baseXor')(var.get('arrayFilter')(var.get('arrays'), var.get('isArrayLikeObject')), var.get('getIteratee')(var.get('iteratee'), Js(2.0)))
                    PyJs_anonymous_841_._set_name('anonymous')
                    var.put('xorBy', var.get('baseRest')(PyJs_anonymous_841_))
                    @Js
                    def PyJs_anonymous_842_(arrays, this, arguments, var=var):
                        var = Scope({'arrays':arrays, 'this':this, 'arguments':arguments}, var)
                        var.registers(['arrays', 'comparator'])
                        var.put('comparator', var.get('last')(var.get('arrays')))
                        var.put('comparator', (var.get('comparator') if (var.get('comparator',throw=False).typeof()==Js('function')) else var.get('undefined')))
                        return var.get('baseXor')(var.get('arrayFilter')(var.get('arrays'), var.get('isArrayLikeObject')), var.get('undefined'), var.get('comparator'))
                    PyJs_anonymous_842_._set_name('anonymous')
                    var.put('xorWith', var.get('baseRest')(PyJs_anonymous_842_))
                    var.put('zip', var.get('baseRest')(var.get('unzip')))
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_843_(arrays, this, arguments, var=var):
                        var = Scope({'arrays':arrays, 'this':this, 'arguments':arguments}, var)
                        var.registers(['iteratee', 'arrays', 'length'])
                        var.put('length', var.get('arrays').get('length'))
                        var.put('iteratee', (var.get('arrays').get((var.get('length')-Js(1.0))) if (var.get('length')>Js(1.0)) else var.get('undefined')))
                        var.put('iteratee', (PyJsComma(var.get('arrays').callprop('pop'),var.get('iteratee')) if (var.get('iteratee',throw=False).typeof()==Js('function')) else var.get('undefined')))
                        return var.get('unzipWith')(var.get('arrays'), var.get('iteratee'))
                    PyJs_anonymous_843_._set_name('anonymous')
                    var.put('zipWith', var.get('baseRest')(PyJs_anonymous_843_))
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_844_(paths, this, arguments, var=var):
                        var = Scope({'paths':paths, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'start', 'paths', 'length', 'interceptor'])
                        var.put('length', var.get('paths').get('length'))
                        var.put('start', (var.get('paths').get('0') if var.get('length') else Js(0.0)))
                        var.put('value', var.get(u"this").get('__wrapped__'))
                        @Js
                        def PyJs_anonymous_845_(object, this, arguments, var=var):
                            var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                            var.registers(['object'])
                            return var.get('baseAt')(var.get('object'), var.get('paths'))
                        PyJs_anonymous_845_._set_name('anonymous')
                        var.put('interceptor', PyJs_anonymous_845_)
                        if ((((var.get('length')>Js(1.0)) or var.get(u"this").get('__actions__').get('length')) or var.get('value').instanceof(var.get('LazyWrapper')).neg()) or var.get('isIndex')(var.get('start')).neg()):
                            return var.get(u"this").callprop('thru', var.get('interceptor'))
                        var.put('value', var.get('value').callprop('slice', var.get('start'), ((+var.get('start'))+(Js(1.0) if var.get('length') else Js(0.0)))))
                        var.get('value').get('__actions__').callprop('push', Js({'func':var.get('thru'),'args':Js([var.get('interceptor')]),'thisArg':var.get('undefined')}))
                        @Js
                        def PyJs_anonymous_846_(array, this, arguments, var=var):
                            var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                            var.registers(['array'])
                            if (var.get('length') and var.get('array').get('length').neg()):
                                var.get('array').callprop('push', var.get('undefined'))
                            return var.get('array')
                        PyJs_anonymous_846_._set_name('anonymous')
                        return var.get('LodashWrapper').create(var.get('value'), var.get(u"this").get('__chain__')).callprop('thru', PyJs_anonymous_846_)
                    PyJs_anonymous_844_._set_name('anonymous')
                    var.put('wrapperAt', var.get('flatRest')(PyJs_anonymous_844_))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_847_(result, value, key, this, arguments, var=var):
                        var = Scope({'result':result, 'value':value, 'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'result', 'value'])
                        if var.get('hasOwnProperty').callprop('call', var.get('result'), var.get('key')):
                            var.get('result').put(var.get('key'),Js(var.get('result').get(var.get('key')).to_number())+Js(1))
                        else:
                            var.get('baseAssignValue')(var.get('result'), var.get('key'), Js(1.0))
                    PyJs_anonymous_847_._set_name('anonymous')
                    var.put('countBy', var.get('createAggregator')(PyJs_anonymous_847_))
                    pass
                    pass
                    var.put('find', var.get('createFind')(var.get('findIndex')))
                    var.put('findLast', var.get('createFind')(var.get('findLastIndex')))
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_848_(result, value, key, this, arguments, var=var):
                        var = Scope({'result':result, 'value':value, 'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'result', 'value'])
                        if var.get('hasOwnProperty').callprop('call', var.get('result'), var.get('key')):
                            var.get('result').get(var.get('key')).callprop('push', var.get('value'))
                        else:
                            var.get('baseAssignValue')(var.get('result'), var.get('key'), Js([var.get('value')]))
                    PyJs_anonymous_848_._set_name('anonymous')
                    var.put('groupBy', var.get('createAggregator')(PyJs_anonymous_848_))
                    pass
                    @Js
                    def PyJs_anonymous_849_(collection, path, args, this, arguments, var=var):
                        var = Scope({'collection':collection, 'path':path, 'args':args, 'this':this, 'arguments':arguments}, var)
                        var.registers(['args', 'result', 'collection', 'path', 'index', 'isFunc'])
                        var.put('index', (-Js(1.0)))
                        var.put('isFunc', (var.get('path',throw=False).typeof()==Js('function')))
                        var.put('result', (var.get('Array')(var.get('collection').get('length')) if var.get('isArrayLike')(var.get('collection')) else Js([])))
                        @Js
                        def PyJs_anonymous_850_(value, this, arguments, var=var):
                            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                            var.registers(['value'])
                            var.get('result').put(var.put('index',Js(var.get('index').to_number())+Js(1)), (var.get('apply')(var.get('path'), var.get('value'), var.get('args')) if var.get('isFunc') else var.get('baseInvoke')(var.get('value'), var.get('path'), var.get('args'))))
                        PyJs_anonymous_850_._set_name('anonymous')
                        var.get('baseEach')(var.get('collection'), PyJs_anonymous_850_)
                        return var.get('result')
                    PyJs_anonymous_849_._set_name('anonymous')
                    var.put('invokeMap', var.get('baseRest')(PyJs_anonymous_849_))
                    @Js
                    def PyJs_anonymous_851_(result, value, key, this, arguments, var=var):
                        var = Scope({'result':result, 'value':value, 'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'result', 'value'])
                        var.get('baseAssignValue')(var.get('result'), var.get('key'), var.get('value'))
                    PyJs_anonymous_851_._set_name('anonymous')
                    var.put('keyBy', var.get('createAggregator')(PyJs_anonymous_851_))
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_852_(result, value, key, this, arguments, var=var):
                        var = Scope({'result':result, 'value':value, 'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'result', 'value'])
                        var.get('result').get((Js(0.0) if var.get('key') else Js(1.0))).callprop('push', var.get('value'))
                    PyJs_anonymous_852_._set_name('anonymous')
                    @Js
                    def PyJs_anonymous_853_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return Js([Js([]), Js([])])
                    PyJs_anonymous_853_._set_name('anonymous')
                    var.put('partition', var.get('createAggregator')(PyJs_anonymous_852_, PyJs_anonymous_853_))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_854_(collection, iteratees, this, arguments, var=var):
                        var = Scope({'collection':collection, 'iteratees':iteratees, 'this':this, 'arguments':arguments}, var)
                        var.registers(['iteratees', 'length', 'collection'])
                        if (var.get('collection')==var.get(u"null")):
                            return Js([])
                        var.put('length', var.get('iteratees').get('length'))
                        if ((var.get('length')>Js(1.0)) and var.get('isIterateeCall')(var.get('collection'), var.get('iteratees').get('0'), var.get('iteratees').get('1'))):
                            var.put('iteratees', Js([]))
                        else:
                            if ((var.get('length')>Js(2.0)) and var.get('isIterateeCall')(var.get('iteratees').get('0'), var.get('iteratees').get('1'), var.get('iteratees').get('2'))):
                                var.put('iteratees', Js([var.get('iteratees').get('0')]))
                        return var.get('baseOrderBy')(var.get('collection'), var.get('baseFlatten')(var.get('iteratees'), Js(1.0)), Js([]))
                    PyJs_anonymous_854_._set_name('anonymous')
                    var.put('sortBy', var.get('baseRest')(PyJs_anonymous_854_))
                    @Js
                    def PyJs_anonymous_855_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get('root').get('Date').callprop('now')
                    PyJs_anonymous_855_._set_name('anonymous')
                    var.put('now', (var.get('ctxNow') or PyJs_anonymous_855_))
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_858_(func, thisArg, partials, this, arguments, var=var):
                        var = Scope({'func':func, 'thisArg':thisArg, 'partials':partials, 'this':this, 'arguments':arguments}, var)
                        var.registers(['holders', 'func', 'partials', 'bitmask', 'thisArg'])
                        var.put('bitmask', var.get('WRAP_BIND_FLAG'))
                        if var.get('partials').get('length'):
                            var.put('holders', var.get('replaceHolders')(var.get('partials'), var.get('getHolder')(var.get('bind'))))
                            var.put('bitmask', var.get('WRAP_PARTIAL_FLAG'), '|')
                        return var.get('createWrap')(var.get('func'), var.get('bitmask'), var.get('thisArg'), var.get('partials'), var.get('holders'))
                    PyJs_anonymous_858_._set_name('anonymous')
                    var.put('bind', var.get('baseRest')(PyJs_anonymous_858_))
                    @Js
                    def PyJs_anonymous_859_(object, key, partials, this, arguments, var=var):
                        var = Scope({'object':object, 'key':key, 'partials':partials, 'this':this, 'arguments':arguments}, var)
                        var.registers(['holders', 'object', 'partials', 'bitmask', 'key'])
                        var.put('bitmask', (var.get('WRAP_BIND_FLAG')|var.get('WRAP_BIND_KEY_FLAG')))
                        if var.get('partials').get('length'):
                            var.put('holders', var.get('replaceHolders')(var.get('partials'), var.get('getHolder')(var.get('bindKey'))))
                            var.put('bitmask', var.get('WRAP_PARTIAL_FLAG'), '|')
                        return var.get('createWrap')(var.get('key'), var.get('bitmask'), var.get('object'), var.get('partials'), var.get('holders'))
                    PyJs_anonymous_859_._set_name('anonymous')
                    var.put('bindKey', var.get('baseRest')(PyJs_anonymous_859_))
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_860_(func, args, this, arguments, var=var):
                        var = Scope({'func':func, 'args':args, 'this':this, 'arguments':arguments}, var)
                        var.registers(['args', 'func'])
                        return var.get('baseDelay')(var.get('func'), Js(1.0), var.get('args'))
                    PyJs_anonymous_860_._set_name('anonymous')
                    var.put('defer', var.get('baseRest')(PyJs_anonymous_860_))
                    @Js
                    def PyJs_anonymous_861_(func, wait, args, this, arguments, var=var):
                        var = Scope({'func':func, 'wait':wait, 'args':args, 'this':this, 'arguments':arguments}, var)
                        var.registers(['args', 'wait', 'func'])
                        return var.get('baseDelay')(var.get('func'), (var.get('toNumber')(var.get('wait')) or Js(0.0)), var.get('args'))
                    PyJs_anonymous_861_._set_name('anonymous')
                    var.put('delay', var.get('baseRest')(PyJs_anonymous_861_))
                    pass
                    pass
                    var.get('memoize').put('Cache', var.get('MapCache'))
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_864_(func, transforms, this, arguments, var=var):
                        var = Scope({'func':func, 'transforms':transforms, 'this':this, 'arguments':arguments}, var)
                        var.registers(['transforms', 'func', 'funcsLength'])
                        var.put('transforms', (var.get('arrayMap')(var.get('transforms').get('0'), var.get('baseUnary')(var.get('getIteratee')())) if ((var.get('transforms').get('length')==Js(1.0)) and var.get('isArray')(var.get('transforms').get('0'))) else var.get('arrayMap')(var.get('baseFlatten')(var.get('transforms'), Js(1.0)), var.get('baseUnary')(var.get('getIteratee')()))))
                        var.put('funcsLength', var.get('transforms').get('length'))
                        @Js
                        def PyJs_anonymous_865_(args, this, arguments, var=var):
                            var = Scope({'args':args, 'this':this, 'arguments':arguments}, var)
                            var.registers(['args', 'length', 'index'])
                            var.put('index', (-Js(1.0)))
                            var.put('length', var.get('nativeMin')(var.get('args').get('length'), var.get('funcsLength')))
                            while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                                var.get('args').put(var.get('index'), var.get('transforms').get(var.get('index')).callprop('call', var.get(u"this"), var.get('args').get(var.get('index'))))
                            return var.get('apply')(var.get('func'), var.get(u"this"), var.get('args'))
                        PyJs_anonymous_865_._set_name('anonymous')
                        return var.get('baseRest')(PyJs_anonymous_865_)
                    PyJs_anonymous_864_._set_name('anonymous')
                    var.put('overArgs', var.get('castRest')(PyJs_anonymous_864_))
                    @Js
                    def PyJs_anonymous_866_(func, partials, this, arguments, var=var):
                        var = Scope({'func':func, 'partials':partials, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'holders', 'partials'])
                        var.put('holders', var.get('replaceHolders')(var.get('partials'), var.get('getHolder')(var.get('partial'))))
                        return var.get('createWrap')(var.get('func'), var.get('WRAP_PARTIAL_FLAG'), var.get('undefined'), var.get('partials'), var.get('holders'))
                    PyJs_anonymous_866_._set_name('anonymous')
                    var.put('partial', var.get('baseRest')(PyJs_anonymous_866_))
                    @Js
                    def PyJs_anonymous_867_(func, partials, this, arguments, var=var):
                        var = Scope({'func':func, 'partials':partials, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'holders', 'partials'])
                        var.put('holders', var.get('replaceHolders')(var.get('partials'), var.get('getHolder')(var.get('partialRight'))))
                        return var.get('createWrap')(var.get('func'), var.get('WRAP_PARTIAL_RIGHT_FLAG'), var.get('undefined'), var.get('partials'), var.get('holders'))
                    PyJs_anonymous_867_._set_name('anonymous')
                    var.put('partialRight', var.get('baseRest')(PyJs_anonymous_867_))
                    @Js
                    def PyJs_anonymous_868_(func, indexes, this, arguments, var=var):
                        var = Scope({'func':func, 'indexes':indexes, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'indexes'])
                        return var.get('createWrap')(var.get('func'), var.get('WRAP_REARG_FLAG'), var.get('undefined'), var.get('undefined'), var.get('undefined'), var.get('indexes'))
                    PyJs_anonymous_868_._set_name('anonymous')
                    var.put('rearg', var.get('flatRest')(PyJs_anonymous_868_))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    var.put('gt', var.get('createRelationalOperation')(var.get('baseGt')))
                    @Js
                    def PyJs_anonymous_870_(value, other, this, arguments, var=var):
                        var = Scope({'value':value, 'other':other, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'other'])
                        return (var.get('value')>=var.get('other'))
                    PyJs_anonymous_870_._set_name('anonymous')
                    var.put('gte', var.get('createRelationalOperation')(PyJs_anonymous_870_))
                    @Js
                    def PyJs_anonymous_871_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get('arguments')
                    PyJs_anonymous_871_._set_name('anonymous')
                    @Js
                    def PyJs_anonymous_872_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return ((var.get('isObjectLike')(var.get('value')) and var.get('hasOwnProperty').callprop('call', var.get('value'), Js('callee'))) and var.get('propertyIsEnumerable').callprop('call', var.get('value'), Js('callee')).neg())
                    PyJs_anonymous_872_._set_name('anonymous')
                    var.put('isArguments', (var.get('baseIsArguments') if var.get('baseIsArguments')(PyJs_anonymous_871_()) else PyJs_anonymous_872_))
                    var.put('isArray', var.get('Array').get('isArray'))
                    var.put('isArrayBuffer', (var.get('baseUnary')(var.get('nodeIsArrayBuffer')) if var.get('nodeIsArrayBuffer') else var.get('baseIsArrayBuffer')))
                    pass
                    pass
                    pass
                    var.put('isBuffer', (var.get('nativeIsBuffer') or var.get('stubFalse')))
                    var.put('isDate', (var.get('baseUnary')(var.get('nodeIsDate')) if var.get('nodeIsDate') else var.get('baseIsDate')))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    var.put('isMap', (var.get('baseUnary')(var.get('nodeIsMap')) if var.get('nodeIsMap') else var.get('baseIsMap')))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    var.put('isRegExp', (var.get('baseUnary')(var.get('nodeIsRegExp')) if var.get('nodeIsRegExp') else var.get('baseIsRegExp')))
                    pass
                    var.put('isSet', (var.get('baseUnary')(var.get('nodeIsSet')) if var.get('nodeIsSet') else var.get('baseIsSet')))
                    pass
                    pass
                    var.put('isTypedArray', (var.get('baseUnary')(var.get('nodeIsTypedArray')) if var.get('nodeIsTypedArray') else var.get('baseIsTypedArray')))
                    pass
                    pass
                    pass
                    var.put('lt', var.get('createRelationalOperation')(var.get('baseLt')))
                    @Js
                    def PyJs_anonymous_873_(value, other, this, arguments, var=var):
                        var = Scope({'value':value, 'other':other, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'other'])
                        return (var.get('value')<=var.get('other'))
                    PyJs_anonymous_873_._set_name('anonymous')
                    var.put('lte', var.get('createRelationalOperation')(PyJs_anonymous_873_))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_874_(object, source, this, arguments, var=var):
                        var = Scope({'object':object, 'source':source, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'source', 'object'])
                        if (var.get('isPrototype')(var.get('source')) or var.get('isArrayLike')(var.get('source'))):
                            var.get('copyObject')(var.get('source'), var.get('keys')(var.get('source')), var.get('object'))
                            return var.get('undefined')
                        for PyJsTemp in var.get('source'):
                            var.put('key', PyJsTemp)
                            if var.get('hasOwnProperty').callprop('call', var.get('source'), var.get('key')):
                                var.get('assignValue')(var.get('object'), var.get('key'), var.get('source').get(var.get('key')))
                    PyJs_anonymous_874_._set_name('anonymous')
                    var.put('assign', var.get('createAssigner')(PyJs_anonymous_874_))
                    @Js
                    def PyJs_anonymous_875_(object, source, this, arguments, var=var):
                        var = Scope({'object':object, 'source':source, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'source'])
                        var.get('copyObject')(var.get('source'), var.get('keysIn')(var.get('source')), var.get('object'))
                    PyJs_anonymous_875_._set_name('anonymous')
                    var.put('assignIn', var.get('createAssigner')(PyJs_anonymous_875_))
                    @Js
                    def PyJs_anonymous_876_(object, source, srcIndex, customizer, this, arguments, var=var):
                        var = Scope({'object':object, 'source':source, 'srcIndex':srcIndex, 'customizer':customizer, 'this':this, 'arguments':arguments}, var)
                        var.registers(['srcIndex', 'object', 'source', 'customizer'])
                        var.get('copyObject')(var.get('source'), var.get('keysIn')(var.get('source')), var.get('object'), var.get('customizer'))
                    PyJs_anonymous_876_._set_name('anonymous')
                    var.put('assignInWith', var.get('createAssigner')(PyJs_anonymous_876_))
                    @Js
                    def PyJs_anonymous_877_(object, source, srcIndex, customizer, this, arguments, var=var):
                        var = Scope({'object':object, 'source':source, 'srcIndex':srcIndex, 'customizer':customizer, 'this':this, 'arguments':arguments}, var)
                        var.registers(['srcIndex', 'object', 'source', 'customizer'])
                        var.get('copyObject')(var.get('source'), var.get('keys')(var.get('source')), var.get('object'), var.get('customizer'))
                    PyJs_anonymous_877_._set_name('anonymous')
                    var.put('assignWith', var.get('createAssigner')(PyJs_anonymous_877_))
                    var.put('at', var.get('flatRest')(var.get('baseAt')))
                    pass
                    @Js
                    def PyJs_anonymous_878_(object, sources, this, arguments, var=var):
                        var = Scope({'object':object, 'sources':sources, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'props', 'object', 'length', 'index', 'sources', 'source', 'propsLength', 'key', 'propsIndex', 'guard'])
                        var.put('object', var.get('Object')(var.get('object')))
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('sources').get('length'))
                        var.put('guard', (var.get('sources').get('2') if (var.get('length')>Js(2.0)) else var.get('undefined')))
                        if (var.get('guard') and var.get('isIterateeCall')(var.get('sources').get('0'), var.get('sources').get('1'), var.get('guard'))):
                            var.put('length', Js(1.0))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('source', var.get('sources').get(var.get('index')))
                            var.put('props', var.get('keysIn')(var.get('source')))
                            var.put('propsIndex', (-Js(1.0)))
                            var.put('propsLength', var.get('props').get('length'))
                            while (var.put('propsIndex',Js(var.get('propsIndex').to_number())+Js(1))<var.get('propsLength')):
                                var.put('key', var.get('props').get(var.get('propsIndex')))
                                var.put('value', var.get('object').get(var.get('key')))
                                if (PyJsStrictEq(var.get('value'),var.get('undefined')) or (var.get('eq')(var.get('value'), var.get('objectProto').get(var.get('key'))) and var.get('hasOwnProperty').callprop('call', var.get('object'), var.get('key')).neg())):
                                    var.get('object').put(var.get('key'), var.get('source').get(var.get('key')))
                        return var.get('object')
                    PyJs_anonymous_878_._set_name('anonymous')
                    var.put('defaults', var.get('baseRest')(PyJs_anonymous_878_))
                    @Js
                    def PyJs_anonymous_879_(args, this, arguments, var=var):
                        var = Scope({'args':args, 'this':this, 'arguments':arguments}, var)
                        var.registers(['args'])
                        var.get('args').callprop('push', var.get('undefined'), var.get('customDefaultsMerge'))
                        return var.get('apply')(var.get('mergeWith'), var.get('undefined'), var.get('args'))
                    PyJs_anonymous_879_._set_name('anonymous')
                    var.put('defaultsDeep', var.get('baseRest')(PyJs_anonymous_879_))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_880_(result, value, key, this, arguments, var=var):
                        var = Scope({'result':result, 'value':value, 'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'result', 'value'])
                        if ((var.get('value')!=var.get(u"null")) and (var.get('value').get('toString').typeof()!=Js('function'))):
                            var.put('value', var.get('nativeObjectToString').callprop('call', var.get('value')))
                        var.get('result').put(var.get('value'), var.get('key'))
                    PyJs_anonymous_880_._set_name('anonymous')
                    var.put('invert', var.get('createInverter')(PyJs_anonymous_880_, var.get('constant')(var.get('identity'))))
                    @Js
                    def PyJs_anonymous_881_(result, value, key, this, arguments, var=var):
                        var = Scope({'result':result, 'value':value, 'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'result', 'value'])
                        if ((var.get('value')!=var.get(u"null")) and (var.get('value').get('toString').typeof()!=Js('function'))):
                            var.put('value', var.get('nativeObjectToString').callprop('call', var.get('value')))
                        if var.get('hasOwnProperty').callprop('call', var.get('result'), var.get('value')):
                            var.get('result').get(var.get('value')).callprop('push', var.get('key'))
                        else:
                            var.get('result').put(var.get('value'), Js([var.get('key')]))
                    PyJs_anonymous_881_._set_name('anonymous')
                    var.put('invertBy', var.get('createInverter')(PyJs_anonymous_881_, var.get('getIteratee')))
                    var.put('invoke', var.get('baseRest')(var.get('baseInvoke')))
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_884_(object, source, srcIndex, this, arguments, var=var):
                        var = Scope({'object':object, 'source':source, 'srcIndex':srcIndex, 'this':this, 'arguments':arguments}, var)
                        var.registers(['srcIndex', 'object', 'source'])
                        var.get('baseMerge')(var.get('object'), var.get('source'), var.get('srcIndex'))
                    PyJs_anonymous_884_._set_name('anonymous')
                    var.put('merge', var.get('createAssigner')(PyJs_anonymous_884_))
                    @Js
                    def PyJs_anonymous_885_(object, source, srcIndex, customizer, this, arguments, var=var):
                        var = Scope({'object':object, 'source':source, 'srcIndex':srcIndex, 'customizer':customizer, 'this':this, 'arguments':arguments}, var)
                        var.registers(['srcIndex', 'object', 'source', 'customizer'])
                        var.get('baseMerge')(var.get('object'), var.get('source'), var.get('srcIndex'), var.get('customizer'))
                    PyJs_anonymous_885_._set_name('anonymous')
                    var.put('mergeWith', var.get('createAssigner')(PyJs_anonymous_885_))
                    @Js
                    def PyJs_anonymous_886_(object, paths, this, arguments, var=var):
                        var = Scope({'object':object, 'paths':paths, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'paths', 'isDeep', 'object', 'length'])
                        var.put('result', Js({}))
                        if (var.get('object')==var.get(u"null")):
                            return var.get('result')
                        var.put('isDeep', Js(False))
                        @Js
                        def PyJs_anonymous_887_(path, this, arguments, var=var):
                            var = Scope({'path':path, 'this':this, 'arguments':arguments}, var)
                            var.registers(['path'])
                            var.put('path', var.get('castPath')(var.get('path'), var.get('object')))
                            (var.get('isDeep') or var.put('isDeep', (var.get('path').get('length')>Js(1.0))))
                            return var.get('path')
                        PyJs_anonymous_887_._set_name('anonymous')
                        var.put('paths', var.get('arrayMap')(var.get('paths'), PyJs_anonymous_887_))
                        var.get('copyObject')(var.get('object'), var.get('getAllKeysIn')(var.get('object')), var.get('result'))
                        if var.get('isDeep'):
                            var.put('result', var.get('baseClone')(var.get('result'), ((var.get('CLONE_DEEP_FLAG')|var.get('CLONE_FLAT_FLAG'))|var.get('CLONE_SYMBOLS_FLAG')), var.get('customOmitClone')))
                        var.put('length', var.get('paths').get('length'))
                        while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
                            var.get('baseUnset')(var.get('result'), var.get('paths').get(var.get('length')))
                        return var.get('result')
                    PyJs_anonymous_886_._set_name('anonymous')
                    var.put('omit', var.get('flatRest')(PyJs_anonymous_886_))
                    pass
                    @Js
                    def PyJs_anonymous_888_(object, paths, this, arguments, var=var):
                        var = Scope({'object':object, 'paths':paths, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'paths'])
                        return (Js({}) if (var.get('object')==var.get(u"null")) else var.get('basePick')(var.get('object'), var.get('paths')))
                    PyJs_anonymous_888_._set_name('anonymous')
                    var.put('pick', var.get('flatRest')(PyJs_anonymous_888_))
                    pass
                    pass
                    pass
                    pass
                    var.put('toPairs', var.get('createToPairs')(var.get('keys')))
                    var.put('toPairsIn', var.get('createToPairs')(var.get('keysIn')))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_892_(result, word, index, this, arguments, var=var):
                        var = Scope({'result':result, 'word':word, 'index':index, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'index', 'word'])
                        var.put('word', var.get('word').callprop('toLowerCase'))
                        return (var.get('result')+(var.get('capitalize')(var.get('word')) if var.get('index') else var.get('word')))
                    PyJs_anonymous_892_._set_name('anonymous')
                    var.put('camelCase', var.get('createCompounder')(PyJs_anonymous_892_))
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_893_(result, word, index, this, arguments, var=var):
                        var = Scope({'result':result, 'word':word, 'index':index, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'index', 'word'])
                        return ((var.get('result')+(Js('-') if var.get('index') else Js('')))+var.get('word').callprop('toLowerCase'))
                    PyJs_anonymous_893_._set_name('anonymous')
                    var.put('kebabCase', var.get('createCompounder')(PyJs_anonymous_893_))
                    @Js
                    def PyJs_anonymous_894_(result, word, index, this, arguments, var=var):
                        var = Scope({'result':result, 'word':word, 'index':index, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'index', 'word'])
                        return ((var.get('result')+(Js(' ') if var.get('index') else Js('')))+var.get('word').callprop('toLowerCase'))
                    PyJs_anonymous_894_._set_name('anonymous')
                    var.put('lowerCase', var.get('createCompounder')(PyJs_anonymous_894_))
                    var.put('lowerFirst', var.get('createCaseFirst')(Js('toLowerCase')))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_895_(result, word, index, this, arguments, var=var):
                        var = Scope({'result':result, 'word':word, 'index':index, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'index', 'word'])
                        return ((var.get('result')+(Js('_') if var.get('index') else Js('')))+var.get('word').callprop('toLowerCase'))
                    PyJs_anonymous_895_._set_name('anonymous')
                    var.put('snakeCase', var.get('createCompounder')(PyJs_anonymous_895_))
                    pass
                    @Js
                    def PyJs_anonymous_896_(result, word, index, this, arguments, var=var):
                        var = Scope({'result':result, 'word':word, 'index':index, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'index', 'word'])
                        return ((var.get('result')+(Js(' ') if var.get('index') else Js('')))+var.get('upperFirst')(var.get('word')))
                    PyJs_anonymous_896_._set_name('anonymous')
                    var.put('startCase', var.get('createCompounder')(PyJs_anonymous_896_))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_900_(result, word, index, this, arguments, var=var):
                        var = Scope({'result':result, 'word':word, 'index':index, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'index', 'word'])
                        return ((var.get('result')+(Js(' ') if var.get('index') else Js('')))+var.get('word').callprop('toUpperCase'))
                    PyJs_anonymous_900_._set_name('anonymous')
                    var.put('upperCase', var.get('createCompounder')(PyJs_anonymous_900_))
                    var.put('upperFirst', var.get('createCaseFirst')(Js('toUpperCase')))
                    pass
                    @Js
                    def PyJs_anonymous_901_(func, args, this, arguments, var=var):
                        var = Scope({'func':func, 'args':args, 'this':this, 'arguments':arguments}, var)
                        var.registers(['args', 'func'])
                        try:
                            return var.get('apply')(var.get('func'), var.get('undefined'), var.get('args'))
                        except PyJsException as PyJsTempException:
                            PyJsHolder_65_66245188 = var.own.get('e')
                            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                            try:
                                return (var.get('e') if var.get('isError')(var.get('e')) else var.get('Error').create(var.get('e')))
                            finally:
                                if PyJsHolder_65_66245188 is not None:
                                    var.own['e'] = PyJsHolder_65_66245188
                                else:
                                    del var.own['e']
                                del PyJsHolder_65_66245188
                    PyJs_anonymous_901_._set_name('anonymous')
                    var.put('attempt', var.get('baseRest')(PyJs_anonymous_901_))
                    @Js
                    def PyJs_anonymous_902_(object, methodNames, this, arguments, var=var):
                        var = Scope({'object':object, 'methodNames':methodNames, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'methodNames'])
                        @Js
                        def PyJs_anonymous_903_(key, this, arguments, var=var):
                            var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                            var.registers(['key'])
                            var.put('key', var.get('toKey')(var.get('key')))
                            var.get('baseAssignValue')(var.get('object'), var.get('key'), var.get('bind')(var.get('object').get(var.get('key')), var.get('object')))
                        PyJs_anonymous_903_._set_name('anonymous')
                        var.get('arrayEach')(var.get('methodNames'), PyJs_anonymous_903_)
                        return var.get('object')
                    PyJs_anonymous_902_._set_name('anonymous')
                    var.put('bindAll', var.get('flatRest')(PyJs_anonymous_902_))
                    pass
                    pass
                    pass
                    pass
                    var.put('flow', var.get('createFlow')())
                    var.put('flowRight', var.get('createFlow')(Js(True)))
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_907_(path, args, this, arguments, var=var):
                        var = Scope({'path':path, 'args':args, 'this':this, 'arguments':arguments}, var)
                        var.registers(['args', 'path'])
                        @Js
                        def PyJs_anonymous_908_(object, this, arguments, var=var):
                            var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                            var.registers(['object'])
                            return var.get('baseInvoke')(var.get('object'), var.get('path'), var.get('args'))
                        PyJs_anonymous_908_._set_name('anonymous')
                        return PyJs_anonymous_908_
                    PyJs_anonymous_907_._set_name('anonymous')
                    var.put('method', var.get('baseRest')(PyJs_anonymous_907_))
                    @Js
                    def PyJs_anonymous_909_(object, args, this, arguments, var=var):
                        var = Scope({'object':object, 'args':args, 'this':this, 'arguments':arguments}, var)
                        var.registers(['args', 'object'])
                        @Js
                        def PyJs_anonymous_910_(path, this, arguments, var=var):
                            var = Scope({'path':path, 'this':this, 'arguments':arguments}, var)
                            var.registers(['path'])
                            return var.get('baseInvoke')(var.get('object'), var.get('path'), var.get('args'))
                        PyJs_anonymous_910_._set_name('anonymous')
                        return PyJs_anonymous_910_
                    PyJs_anonymous_909_._set_name('anonymous')
                    var.put('methodOf', var.get('baseRest')(PyJs_anonymous_909_))
                    pass
                    pass
                    pass
                    pass
                    var.put('over', var.get('createOver')(var.get('arrayMap')))
                    var.put('overEvery', var.get('createOver')(var.get('arrayEvery')))
                    var.put('overSome', var.get('createOver')(var.get('arraySome')))
                    pass
                    pass
                    var.put('range', var.get('createRange')())
                    var.put('rangeRight', var.get('createRange')(Js(True)))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_915_(augend, addend, this, arguments, var=var):
                        var = Scope({'augend':augend, 'addend':addend, 'this':this, 'arguments':arguments}, var)
                        var.registers(['addend', 'augend'])
                        return (var.get('augend')+var.get('addend'))
                    PyJs_anonymous_915_._set_name('anonymous')
                    var.put('add', var.get('createMathOperation')(PyJs_anonymous_915_, Js(0.0)))
                    var.put('ceil', var.get('createRound')(Js('ceil')))
                    @Js
                    def PyJs_anonymous_916_(dividend, divisor, this, arguments, var=var):
                        var = Scope({'dividend':dividend, 'divisor':divisor, 'this':this, 'arguments':arguments}, var)
                        var.registers(['divisor', 'dividend'])
                        return (var.get('dividend')/var.get('divisor'))
                    PyJs_anonymous_916_._set_name('anonymous')
                    var.put('divide', var.get('createMathOperation')(PyJs_anonymous_916_, Js(1.0)))
                    var.put('floor', var.get('createRound')(Js('floor')))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_917_(multiplier, multiplicand, this, arguments, var=var):
                        var = Scope({'multiplier':multiplier, 'multiplicand':multiplicand, 'this':this, 'arguments':arguments}, var)
                        var.registers(['multiplier', 'multiplicand'])
                        return (var.get('multiplier')*var.get('multiplicand'))
                    PyJs_anonymous_917_._set_name('anonymous')
                    var.put('multiply', var.get('createMathOperation')(PyJs_anonymous_917_, Js(1.0)))
                    var.put('round', var.get('createRound')(Js('round')))
                    @Js
                    def PyJs_anonymous_918_(minuend, subtrahend, this, arguments, var=var):
                        var = Scope({'minuend':minuend, 'subtrahend':subtrahend, 'this':this, 'arguments':arguments}, var)
                        var.registers(['minuend', 'subtrahend'])
                        return (var.get('minuend')-var.get('subtrahend'))
                    PyJs_anonymous_918_._set_name('anonymous')
                    var.put('subtract', var.get('createMathOperation')(PyJs_anonymous_918_, Js(0.0)))
                    pass
                    pass
                    var.get('lodash').put('after', var.get('after'))
                    var.get('lodash').put('ary', var.get('ary'))
                    var.get('lodash').put('assign', var.get('assign'))
                    var.get('lodash').put('assignIn', var.get('assignIn'))
                    var.get('lodash').put('assignInWith', var.get('assignInWith'))
                    var.get('lodash').put('assignWith', var.get('assignWith'))
                    var.get('lodash').put('at', var.get('at'))
                    var.get('lodash').put('before', var.get('before'))
                    var.get('lodash').put('bind', var.get('bind'))
                    var.get('lodash').put('bindAll', var.get('bindAll'))
                    var.get('lodash').put('bindKey', var.get('bindKey'))
                    var.get('lodash').put('castArray', var.get('castArray'))
                    var.get('lodash').put('chain', var.get('chain'))
                    var.get('lodash').put('chunk', var.get('chunk'))
                    var.get('lodash').put('compact', var.get('compact'))
                    var.get('lodash').put('concat', var.get('concat'))
                    var.get('lodash').put('cond', var.get('cond'))
                    var.get('lodash').put('conforms', var.get('conforms'))
                    var.get('lodash').put('constant', var.get('constant'))
                    var.get('lodash').put('countBy', var.get('countBy'))
                    var.get('lodash').put('create', var.get('create'))
                    var.get('lodash').put('curry', var.get('curry'))
                    var.get('lodash').put('curryRight', var.get('curryRight'))
                    var.get('lodash').put('debounce', var.get('debounce'))
                    var.get('lodash').put('defaults', var.get('defaults'))
                    var.get('lodash').put('defaultsDeep', var.get('defaultsDeep'))
                    var.get('lodash').put('defer', var.get('defer'))
                    var.get('lodash').put('delay', var.get('delay'))
                    var.get('lodash').put('difference', var.get('difference'))
                    var.get('lodash').put('differenceBy', var.get('differenceBy'))
                    var.get('lodash').put('differenceWith', var.get('differenceWith'))
                    var.get('lodash').put('drop', var.get('drop'))
                    var.get('lodash').put('dropRight', var.get('dropRight'))
                    var.get('lodash').put('dropRightWhile', var.get('dropRightWhile'))
                    var.get('lodash').put('dropWhile', var.get('dropWhile'))
                    var.get('lodash').put('fill', var.get('fill'))
                    var.get('lodash').put('filter', var.get('filter'))
                    var.get('lodash').put('flatMap', var.get('flatMap'))
                    var.get('lodash').put('flatMapDeep', var.get('flatMapDeep'))
                    var.get('lodash').put('flatMapDepth', var.get('flatMapDepth'))
                    var.get('lodash').put('flatten', var.get('flatten'))
                    var.get('lodash').put('flattenDeep', var.get('flattenDeep'))
                    var.get('lodash').put('flattenDepth', var.get('flattenDepth'))
                    var.get('lodash').put('flip', var.get('flip'))
                    var.get('lodash').put('flow', var.get('flow'))
                    var.get('lodash').put('flowRight', var.get('flowRight'))
                    var.get('lodash').put('fromPairs', var.get('fromPairs'))
                    var.get('lodash').put('functions', var.get('functions'))
                    var.get('lodash').put('functionsIn', var.get('functionsIn'))
                    var.get('lodash').put('groupBy', var.get('groupBy'))
                    var.get('lodash').put('initial', var.get('initial'))
                    var.get('lodash').put('intersection', var.get('intersection'))
                    var.get('lodash').put('intersectionBy', var.get('intersectionBy'))
                    var.get('lodash').put('intersectionWith', var.get('intersectionWith'))
                    var.get('lodash').put('invert', var.get('invert'))
                    var.get('lodash').put('invertBy', var.get('invertBy'))
                    var.get('lodash').put('invokeMap', var.get('invokeMap'))
                    var.get('lodash').put('iteratee', var.get('iteratee'))
                    var.get('lodash').put('keyBy', var.get('keyBy'))
                    var.get('lodash').put('keys', var.get('keys'))
                    var.get('lodash').put('keysIn', var.get('keysIn'))
                    var.get('lodash').put('map', var.get('map'))
                    var.get('lodash').put('mapKeys', var.get('mapKeys'))
                    var.get('lodash').put('mapValues', var.get('mapValues'))
                    var.get('lodash').put('matches', var.get('matches'))
                    var.get('lodash').put('matchesProperty', var.get('matchesProperty'))
                    var.get('lodash').put('memoize', var.get('memoize'))
                    var.get('lodash').put('merge', var.get('merge'))
                    var.get('lodash').put('mergeWith', var.get('mergeWith'))
                    var.get('lodash').put('method', var.get('method'))
                    var.get('lodash').put('methodOf', var.get('methodOf'))
                    var.get('lodash').put('mixin', var.get('mixin'))
                    var.get('lodash').put('negate', var.get('negate'))
                    var.get('lodash').put('nthArg', var.get('nthArg'))
                    var.get('lodash').put('omit', var.get('omit'))
                    var.get('lodash').put('omitBy', var.get('omitBy'))
                    var.get('lodash').put('once', var.get('once'))
                    var.get('lodash').put('orderBy', var.get('orderBy'))
                    var.get('lodash').put('over', var.get('over'))
                    var.get('lodash').put('overArgs', var.get('overArgs'))
                    var.get('lodash').put('overEvery', var.get('overEvery'))
                    var.get('lodash').put('overSome', var.get('overSome'))
                    var.get('lodash').put('partial', var.get('partial'))
                    var.get('lodash').put('partialRight', var.get('partialRight'))
                    var.get('lodash').put('partition', var.get('partition'))
                    var.get('lodash').put('pick', var.get('pick'))
                    var.get('lodash').put('pickBy', var.get('pickBy'))
                    var.get('lodash').put('property', var.get('property'))
                    var.get('lodash').put('propertyOf', var.get('propertyOf'))
                    var.get('lodash').put('pull', var.get('pull'))
                    var.get('lodash').put('pullAll', var.get('pullAll'))
                    var.get('lodash').put('pullAllBy', var.get('pullAllBy'))
                    var.get('lodash').put('pullAllWith', var.get('pullAllWith'))
                    var.get('lodash').put('pullAt', var.get('pullAt'))
                    var.get('lodash').put('range', var.get('range'))
                    var.get('lodash').put('rangeRight', var.get('rangeRight'))
                    var.get('lodash').put('rearg', var.get('rearg'))
                    var.get('lodash').put('reject', var.get('reject'))
                    var.get('lodash').put('remove', var.get('remove'))
                    var.get('lodash').put('rest', var.get('rest'))
                    var.get('lodash').put('reverse', var.get('reverse'))
                    var.get('lodash').put('sampleSize', var.get('sampleSize'))
                    var.get('lodash').put('set', var.get('set'))
                    var.get('lodash').put('setWith', var.get('setWith'))
                    var.get('lodash').put('shuffle', var.get('shuffle'))
                    var.get('lodash').put('slice', var.get('slice'))
                    var.get('lodash').put('sortBy', var.get('sortBy'))
                    var.get('lodash').put('sortedUniq', var.get('sortedUniq'))
                    var.get('lodash').put('sortedUniqBy', var.get('sortedUniqBy'))
                    var.get('lodash').put('split', var.get('split'))
                    var.get('lodash').put('spread', var.get('spread'))
                    var.get('lodash').put('tail', var.get('tail'))
                    var.get('lodash').put('take', var.get('take'))
                    var.get('lodash').put('takeRight', var.get('takeRight'))
                    var.get('lodash').put('takeRightWhile', var.get('takeRightWhile'))
                    var.get('lodash').put('takeWhile', var.get('takeWhile'))
                    var.get('lodash').put('tap', var.get('tap'))
                    var.get('lodash').put('throttle', var.get('throttle'))
                    var.get('lodash').put('thru', var.get('thru'))
                    var.get('lodash').put('toArray', var.get('toArray'))
                    var.get('lodash').put('toPairs', var.get('toPairs'))
                    var.get('lodash').put('toPairsIn', var.get('toPairsIn'))
                    var.get('lodash').put('toPath', var.get('toPath'))
                    var.get('lodash').put('toPlainObject', var.get('toPlainObject'))
                    var.get('lodash').put('transform', var.get('transform'))
                    var.get('lodash').put('unary', var.get('unary'))
                    var.get('lodash').put('union', var.get('union'))
                    var.get('lodash').put('unionBy', var.get('unionBy'))
                    var.get('lodash').put('unionWith', var.get('unionWith'))
                    var.get('lodash').put('uniq', var.get('uniq'))
                    var.get('lodash').put('uniqBy', var.get('uniqBy'))
                    var.get('lodash').put('uniqWith', var.get('uniqWith'))
                    var.get('lodash').put('unset', var.get('unset'))
                    var.get('lodash').put('unzip', var.get('unzip'))
                    var.get('lodash').put('unzipWith', var.get('unzipWith'))
                    var.get('lodash').put('update', var.get('update'))
                    var.get('lodash').put('updateWith', var.get('updateWith'))
                    var.get('lodash').put('values', var.get('values'))
                    var.get('lodash').put('valuesIn', var.get('valuesIn'))
                    var.get('lodash').put('without', var.get('without'))
                    var.get('lodash').put('words', var.get('words'))
                    var.get('lodash').put('wrap', var.get('wrap'))
                    var.get('lodash').put('xor', var.get('xor'))
                    var.get('lodash').put('xorBy', var.get('xorBy'))
                    var.get('lodash').put('xorWith', var.get('xorWith'))
                    var.get('lodash').put('zip', var.get('zip'))
                    var.get('lodash').put('zipObject', var.get('zipObject'))
                    var.get('lodash').put('zipObjectDeep', var.get('zipObjectDeep'))
                    var.get('lodash').put('zipWith', var.get('zipWith'))
                    var.get('lodash').put('entries', var.get('toPairs'))
                    var.get('lodash').put('entriesIn', var.get('toPairsIn'))
                    var.get('lodash').put('extend', var.get('assignIn'))
                    var.get('lodash').put('extendWith', var.get('assignInWith'))
                    var.get('mixin')(var.get('lodash'), var.get('lodash'))
                    var.get('lodash').put('add', var.get('add'))
                    var.get('lodash').put('attempt', var.get('attempt'))
                    var.get('lodash').put('camelCase', var.get('camelCase'))
                    var.get('lodash').put('capitalize', var.get('capitalize'))
                    var.get('lodash').put('ceil', var.get('ceil'))
                    var.get('lodash').put('clamp', var.get('clamp'))
                    var.get('lodash').put('clone', var.get('clone'))
                    var.get('lodash').put('cloneDeep', var.get('cloneDeep'))
                    var.get('lodash').put('cloneDeepWith', var.get('cloneDeepWith'))
                    var.get('lodash').put('cloneWith', var.get('cloneWith'))
                    var.get('lodash').put('conformsTo', var.get('conformsTo'))
                    var.get('lodash').put('deburr', var.get('deburr'))
                    var.get('lodash').put('defaultTo', var.get('defaultTo'))
                    var.get('lodash').put('divide', var.get('divide'))
                    var.get('lodash').put('endsWith', var.get('endsWith'))
                    var.get('lodash').put('eq', var.get('eq'))
                    var.get('lodash').put('escape', var.get('escape'))
                    var.get('lodash').put('escapeRegExp', var.get('escapeRegExp'))
                    var.get('lodash').put('every', var.get('every'))
                    var.get('lodash').put('find', var.get('find'))
                    var.get('lodash').put('findIndex', var.get('findIndex'))
                    var.get('lodash').put('findKey', var.get('findKey'))
                    var.get('lodash').put('findLast', var.get('findLast'))
                    var.get('lodash').put('findLastIndex', var.get('findLastIndex'))
                    var.get('lodash').put('findLastKey', var.get('findLastKey'))
                    var.get('lodash').put('floor', var.get('floor'))
                    var.get('lodash').put('forEach', var.get('forEach'))
                    var.get('lodash').put('forEachRight', var.get('forEachRight'))
                    var.get('lodash').put('forIn', var.get('forIn'))
                    var.get('lodash').put('forInRight', var.get('forInRight'))
                    var.get('lodash').put('forOwn', var.get('forOwn'))
                    var.get('lodash').put('forOwnRight', var.get('forOwnRight'))
                    var.get('lodash').put('get', var.get('get'))
                    var.get('lodash').put('gt', var.get('gt'))
                    var.get('lodash').put('gte', var.get('gte'))
                    var.get('lodash').put('has', var.get('has'))
                    var.get('lodash').put('hasIn', var.get('hasIn'))
                    var.get('lodash').put('head', var.get('head'))
                    var.get('lodash').put('identity', var.get('identity'))
                    var.get('lodash').put('includes', var.get('includes'))
                    var.get('lodash').put('indexOf', var.get('indexOf'))
                    var.get('lodash').put('inRange', var.get('inRange'))
                    var.get('lodash').put('invoke', var.get('invoke'))
                    var.get('lodash').put('isArguments', var.get('isArguments'))
                    var.get('lodash').put('isArray', var.get('isArray'))
                    var.get('lodash').put('isArrayBuffer', var.get('isArrayBuffer'))
                    var.get('lodash').put('isArrayLike', var.get('isArrayLike'))
                    var.get('lodash').put('isArrayLikeObject', var.get('isArrayLikeObject'))
                    var.get('lodash').put('isBoolean', var.get('isBoolean'))
                    var.get('lodash').put('isBuffer', var.get('isBuffer'))
                    var.get('lodash').put('isDate', var.get('isDate'))
                    var.get('lodash').put('isElement', var.get('isElement'))
                    var.get('lodash').put('isEmpty', var.get('isEmpty'))
                    var.get('lodash').put('isEqual', var.get('isEqual'))
                    var.get('lodash').put('isEqualWith', var.get('isEqualWith'))
                    var.get('lodash').put('isError', var.get('isError'))
                    var.get('lodash').put('isFinite', var.get('isFinite'))
                    var.get('lodash').put('isFunction', var.get('isFunction'))
                    var.get('lodash').put('isInteger', var.get('isInteger'))
                    var.get('lodash').put('isLength', var.get('isLength'))
                    var.get('lodash').put('isMap', var.get('isMap'))
                    var.get('lodash').put('isMatch', var.get('isMatch'))
                    var.get('lodash').put('isMatchWith', var.get('isMatchWith'))
                    var.get('lodash').put('isNaN', var.get('isNaN'))
                    var.get('lodash').put('isNative', var.get('isNative'))
                    var.get('lodash').put('isNil', var.get('isNil'))
                    var.get('lodash').put('isNull', var.get('isNull'))
                    var.get('lodash').put('isNumber', var.get('isNumber'))
                    var.get('lodash').put('isObject', var.get('isObject'))
                    var.get('lodash').put('isObjectLike', var.get('isObjectLike'))
                    var.get('lodash').put('isPlainObject', var.get('isPlainObject'))
                    var.get('lodash').put('isRegExp', var.get('isRegExp'))
                    var.get('lodash').put('isSafeInteger', var.get('isSafeInteger'))
                    var.get('lodash').put('isSet', var.get('isSet'))
                    var.get('lodash').put('isString', var.get('isString'))
                    var.get('lodash').put('isSymbol', var.get('isSymbol'))
                    var.get('lodash').put('isTypedArray', var.get('isTypedArray'))
                    var.get('lodash').put('isUndefined', var.get('isUndefined'))
                    var.get('lodash').put('isWeakMap', var.get('isWeakMap'))
                    var.get('lodash').put('isWeakSet', var.get('isWeakSet'))
                    var.get('lodash').put('join', var.get('join'))
                    var.get('lodash').put('kebabCase', var.get('kebabCase'))
                    var.get('lodash').put('last', var.get('last'))
                    var.get('lodash').put('lastIndexOf', var.get('lastIndexOf'))
                    var.get('lodash').put('lowerCase', var.get('lowerCase'))
                    var.get('lodash').put('lowerFirst', var.get('lowerFirst'))
                    var.get('lodash').put('lt', var.get('lt'))
                    var.get('lodash').put('lte', var.get('lte'))
                    var.get('lodash').put('max', var.get('max'))
                    var.get('lodash').put('maxBy', var.get('maxBy'))
                    var.get('lodash').put('mean', var.get('mean'))
                    var.get('lodash').put('meanBy', var.get('meanBy'))
                    var.get('lodash').put('min', var.get('min'))
                    var.get('lodash').put('minBy', var.get('minBy'))
                    var.get('lodash').put('stubArray', var.get('stubArray'))
                    var.get('lodash').put('stubFalse', var.get('stubFalse'))
                    var.get('lodash').put('stubObject', var.get('stubObject'))
                    var.get('lodash').put('stubString', var.get('stubString'))
                    var.get('lodash').put('stubTrue', var.get('stubTrue'))
                    var.get('lodash').put('multiply', var.get('multiply'))
                    var.get('lodash').put('nth', var.get('nth'))
                    var.get('lodash').put('noConflict', var.get('noConflict'))
                    var.get('lodash').put('noop', var.get('noop'))
                    var.get('lodash').put('now', var.get('now'))
                    var.get('lodash').put('pad', var.get('pad'))
                    var.get('lodash').put('padEnd', var.get('padEnd'))
                    var.get('lodash').put('padStart', var.get('padStart'))
                    var.get('lodash').put('parseInt', var.get('parseInt'))
                    var.get('lodash').put('random', var.get('random'))
                    var.get('lodash').put('reduce', var.get('reduce'))
                    var.get('lodash').put('reduceRight', var.get('reduceRight'))
                    var.get('lodash').put('repeat', var.get('repeat'))
                    var.get('lodash').put('replace', var.get('replace'))
                    var.get('lodash').put('result', var.get('result'))
                    var.get('lodash').put('round', var.get('round'))
                    var.get('lodash').put('runInContext', var.get('runInContext'))
                    var.get('lodash').put('sample', var.get('sample'))
                    var.get('lodash').put('size', var.get('size'))
                    var.get('lodash').put('snakeCase', var.get('snakeCase'))
                    var.get('lodash').put('some', var.get('some'))
                    var.get('lodash').put('sortedIndex', var.get('sortedIndex'))
                    var.get('lodash').put('sortedIndexBy', var.get('sortedIndexBy'))
                    var.get('lodash').put('sortedIndexOf', var.get('sortedIndexOf'))
                    var.get('lodash').put('sortedLastIndex', var.get('sortedLastIndex'))
                    var.get('lodash').put('sortedLastIndexBy', var.get('sortedLastIndexBy'))
                    var.get('lodash').put('sortedLastIndexOf', var.get('sortedLastIndexOf'))
                    var.get('lodash').put('startCase', var.get('startCase'))
                    var.get('lodash').put('startsWith', var.get('startsWith'))
                    var.get('lodash').put('subtract', var.get('subtract'))
                    var.get('lodash').put('sum', var.get('sum'))
                    var.get('lodash').put('sumBy', var.get('sumBy'))
                    var.get('lodash').put('template', var.get('template'))
                    var.get('lodash').put('times', var.get('times'))
                    var.get('lodash').put('toFinite', var.get('toFinite'))
                    var.get('lodash').put('toInteger', var.get('toInteger'))
                    var.get('lodash').put('toLength', var.get('toLength'))
                    var.get('lodash').put('toLower', var.get('toLower'))
                    var.get('lodash').put('toNumber', var.get('toNumber'))
                    var.get('lodash').put('toSafeInteger', var.get('toSafeInteger'))
                    var.get('lodash').put('toString', var.get('toString'))
                    var.get('lodash').put('toUpper', var.get('toUpper'))
                    var.get('lodash').put('trim', var.get('trim'))
                    var.get('lodash').put('trimEnd', var.get('trimEnd'))
                    var.get('lodash').put('trimStart', var.get('trimStart'))
                    var.get('lodash').put('truncate', var.get('truncate'))
                    var.get('lodash').put('unescape', var.get('unescape'))
                    var.get('lodash').put('uniqueId', var.get('uniqueId'))
                    var.get('lodash').put('upperCase', var.get('upperCase'))
                    var.get('lodash').put('upperFirst', var.get('upperFirst'))
                    var.get('lodash').put('each', var.get('forEach'))
                    var.get('lodash').put('eachRight', var.get('forEachRight'))
                    var.get('lodash').put('first', var.get('head'))
                    @Js
                    def PyJs_anonymous_919_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['source'])
                        var.put('source', Js({}))
                        @Js
                        def PyJs_anonymous_920_(func, methodName, this, arguments, var=var):
                            var = Scope({'func':func, 'methodName':methodName, 'this':this, 'arguments':arguments}, var)
                            var.registers(['func', 'methodName'])
                            if var.get('hasOwnProperty').callprop('call', var.get('lodash').get('prototype'), var.get('methodName')).neg():
                                var.get('source').put(var.get('methodName'), var.get('func'))
                        PyJs_anonymous_920_._set_name('anonymous')
                        var.get('baseForOwn')(var.get('lodash'), PyJs_anonymous_920_)
                        return var.get('source')
                    PyJs_anonymous_919_._set_name('anonymous')
                    var.get('mixin')(var.get('lodash'), PyJs_anonymous_919_(), Js({'chain':Js(False)}))
                    var.get('lodash').put('VERSION', var.get('VERSION'))
                    @Js
                    def PyJs_anonymous_921_(methodName, this, arguments, var=var):
                        var = Scope({'methodName':methodName, 'this':this, 'arguments':arguments}, var)
                        var.registers(['methodName'])
                        var.get('lodash').get(var.get('methodName')).put('placeholder', var.get('lodash'))
                    PyJs_anonymous_921_._set_name('anonymous')
                    var.get('arrayEach')(Js([Js('bind'), Js('bindKey'), Js('curry'), Js('curryRight'), Js('partial'), Js('partialRight')]), PyJs_anonymous_921_)
                    @Js
                    def PyJs_anonymous_922_(methodName, index, this, arguments, var=var):
                        var = Scope({'methodName':methodName, 'index':index, 'this':this, 'arguments':arguments}, var)
                        var.registers(['index', 'methodName'])
                        @Js
                        def PyJs_anonymous_923_(n, this, arguments, var=var):
                            var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
                            var.registers(['n', 'result'])
                            var.put('n', (Js(1.0) if PyJsStrictEq(var.get('n'),var.get('undefined')) else var.get('nativeMax')(var.get('toInteger')(var.get('n')), Js(0.0))))
                            var.put('result', (var.get('LazyWrapper').create(var.get(u"this")) if (var.get(u"this").get('__filtered__') and var.get('index').neg()) else var.get(u"this").callprop('clone')))
                            if var.get('result').get('__filtered__'):
                                var.get('result').put('__takeCount__', var.get('nativeMin')(var.get('n'), var.get('result').get('__takeCount__')))
                            else:
                                var.get('result').get('__views__').callprop('push', Js({'size':var.get('nativeMin')(var.get('n'), var.get('MAX_ARRAY_LENGTH')),'type':(var.get('methodName')+(Js('Right') if (var.get('result').get('__dir__')<Js(0.0)) else Js('')))}))
                            return var.get('result')
                        PyJs_anonymous_923_._set_name('anonymous')
                        var.get('LazyWrapper').get('prototype').put(var.get('methodName'), PyJs_anonymous_923_)
                        @Js
                        def PyJs_anonymous_924_(n, this, arguments, var=var):
                            var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
                            var.registers(['n'])
                            return var.get(u"this").callprop('reverse').callprop(var.get('methodName'), var.get('n')).callprop('reverse')
                        PyJs_anonymous_924_._set_name('anonymous')
                        var.get('LazyWrapper').get('prototype').put((var.get('methodName')+Js('Right')), PyJs_anonymous_924_)
                    PyJs_anonymous_922_._set_name('anonymous')
                    var.get('arrayEach')(Js([Js('drop'), Js('take')]), PyJs_anonymous_922_)
                    @Js
                    def PyJs_anonymous_925_(methodName, index, this, arguments, var=var):
                        var = Scope({'methodName':methodName, 'index':index, 'this':this, 'arguments':arguments}, var)
                        var.registers(['type', 'index', 'methodName', 'isFilter'])
                        var.put('type', (var.get('index')+Js(1.0)))
                        var.put('isFilter', ((var.get('type')==var.get('LAZY_FILTER_FLAG')) or (var.get('type')==var.get('LAZY_WHILE_FLAG'))))
                        @Js
                        def PyJs_anonymous_926_(iteratee, this, arguments, var=var):
                            var = Scope({'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                            var.registers(['iteratee', 'result'])
                            var.put('result', var.get(u"this").callprop('clone'))
                            var.get('result').get('__iteratees__').callprop('push', Js({'iteratee':var.get('getIteratee')(var.get('iteratee'), Js(3.0)),'type':var.get('type')}))
                            var.get('result').put('__filtered__', (var.get('result').get('__filtered__') or var.get('isFilter')))
                            return var.get('result')
                        PyJs_anonymous_926_._set_name('anonymous')
                        var.get('LazyWrapper').get('prototype').put(var.get('methodName'), PyJs_anonymous_926_)
                    PyJs_anonymous_925_._set_name('anonymous')
                    var.get('arrayEach')(Js([Js('filter'), Js('map'), Js('takeWhile')]), PyJs_anonymous_925_)
                    @Js
                    def PyJs_anonymous_927_(methodName, index, this, arguments, var=var):
                        var = Scope({'methodName':methodName, 'index':index, 'this':this, 'arguments':arguments}, var)
                        var.registers(['takeName', 'index', 'methodName'])
                        var.put('takeName', (Js('take')+(Js('Right') if var.get('index') else Js(''))))
                        @Js
                        def PyJs_anonymous_928_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            return var.get(u"this").callprop(var.get('takeName'), Js(1.0)).callprop('value').get('0')
                        PyJs_anonymous_928_._set_name('anonymous')
                        var.get('LazyWrapper').get('prototype').put(var.get('methodName'), PyJs_anonymous_928_)
                    PyJs_anonymous_927_._set_name('anonymous')
                    var.get('arrayEach')(Js([Js('head'), Js('last')]), PyJs_anonymous_927_)
                    @Js
                    def PyJs_anonymous_929_(methodName, index, this, arguments, var=var):
                        var = Scope({'methodName':methodName, 'index':index, 'this':this, 'arguments':arguments}, var)
                        var.registers(['dropName', 'index', 'methodName'])
                        var.put('dropName', (Js('drop')+(Js('') if var.get('index') else Js('Right'))))
                        @Js
                        def PyJs_anonymous_930_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            return (var.get('LazyWrapper').create(var.get(u"this")) if var.get(u"this").get('__filtered__') else var.get(u"this").callprop(var.get('dropName'), Js(1.0)))
                        PyJs_anonymous_930_._set_name('anonymous')
                        var.get('LazyWrapper').get('prototype').put(var.get('methodName'), PyJs_anonymous_930_)
                    PyJs_anonymous_929_._set_name('anonymous')
                    var.get('arrayEach')(Js([Js('initial'), Js('tail')]), PyJs_anonymous_929_)
                    @Js
                    def PyJs_anonymous_931_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get(u"this").callprop('filter', var.get('identity'))
                    PyJs_anonymous_931_._set_name('anonymous')
                    var.get('LazyWrapper').get('prototype').put('compact', PyJs_anonymous_931_)
                    @Js
                    def PyJs_anonymous_932_(predicate, this, arguments, var=var):
                        var = Scope({'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['predicate'])
                        return var.get(u"this").callprop('filter', var.get('predicate')).callprop('head')
                    PyJs_anonymous_932_._set_name('anonymous')
                    var.get('LazyWrapper').get('prototype').put('find', PyJs_anonymous_932_)
                    @Js
                    def PyJs_anonymous_933_(predicate, this, arguments, var=var):
                        var = Scope({'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['predicate'])
                        return var.get(u"this").callprop('reverse').callprop('find', var.get('predicate'))
                    PyJs_anonymous_933_._set_name('anonymous')
                    var.get('LazyWrapper').get('prototype').put('findLast', PyJs_anonymous_933_)
                    @Js
                    def PyJs_anonymous_934_(path, args, this, arguments, var=var):
                        var = Scope({'path':path, 'args':args, 'this':this, 'arguments':arguments}, var)
                        var.registers(['args', 'path'])
                        if (var.get('path',throw=False).typeof()==Js('function')):
                            return var.get('LazyWrapper').create(var.get(u"this"))
                        @Js
                        def PyJs_anonymous_935_(value, this, arguments, var=var):
                            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                            var.registers(['value'])
                            return var.get('baseInvoke')(var.get('value'), var.get('path'), var.get('args'))
                        PyJs_anonymous_935_._set_name('anonymous')
                        return var.get(u"this").callprop('map', PyJs_anonymous_935_)
                    PyJs_anonymous_934_._set_name('anonymous')
                    var.get('LazyWrapper').get('prototype').put('invokeMap', var.get('baseRest')(PyJs_anonymous_934_))
                    @Js
                    def PyJs_anonymous_936_(predicate, this, arguments, var=var):
                        var = Scope({'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['predicate'])
                        return var.get(u"this").callprop('filter', var.get('negate')(var.get('getIteratee')(var.get('predicate'))))
                    PyJs_anonymous_936_._set_name('anonymous')
                    var.get('LazyWrapper').get('prototype').put('reject', PyJs_anonymous_936_)
                    @Js
                    def PyJs_anonymous_937_(start, end, this, arguments, var=var):
                        var = Scope({'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'end', 'start'])
                        var.put('start', var.get('toInteger')(var.get('start')))
                        var.put('result', var.get(u"this"))
                        if (var.get('result').get('__filtered__') and ((var.get('start')>Js(0.0)) or (var.get('end')<Js(0.0)))):
                            return var.get('LazyWrapper').create(var.get('result'))
                        if (var.get('start')<Js(0.0)):
                            var.put('result', var.get('result').callprop('takeRight', (-var.get('start'))))
                        else:
                            if var.get('start'):
                                var.put('result', var.get('result').callprop('drop', var.get('start')))
                        if PyJsStrictNeq(var.get('end'),var.get('undefined')):
                            var.put('end', var.get('toInteger')(var.get('end')))
                            var.put('result', (var.get('result').callprop('dropRight', (-var.get('end'))) if (var.get('end')<Js(0.0)) else var.get('result').callprop('take', (var.get('end')-var.get('start')))))
                        return var.get('result')
                    PyJs_anonymous_937_._set_name('anonymous')
                    var.get('LazyWrapper').get('prototype').put('slice', PyJs_anonymous_937_)
                    @Js
                    def PyJs_anonymous_938_(predicate, this, arguments, var=var):
                        var = Scope({'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['predicate'])
                        return var.get(u"this").callprop('reverse').callprop('takeWhile', var.get('predicate')).callprop('reverse')
                    PyJs_anonymous_938_._set_name('anonymous')
                    var.get('LazyWrapper').get('prototype').put('takeRightWhile', PyJs_anonymous_938_)
                    @Js
                    def PyJs_anonymous_939_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get(u"this").callprop('take', var.get('MAX_ARRAY_LENGTH'))
                    PyJs_anonymous_939_._set_name('anonymous')
                    var.get('LazyWrapper').get('prototype').put('toArray', PyJs_anonymous_939_)
                    @Js
                    def PyJs_anonymous_940_(func, methodName, this, arguments, var=var):
                        var = Scope({'func':func, 'methodName':methodName, 'this':this, 'arguments':arguments}, var)
                        var.registers(['lodashFunc', 'func', 'methodName', 'checkIteratee', 'retUnwrapped', 'isTaker'])
                        var.put('checkIteratee', JsRegExp('/^(?:filter|find|map|reject)|While$/').callprop('test', var.get('methodName')))
                        var.put('isTaker', JsRegExp('/^(?:head|last)$/').callprop('test', var.get('methodName')))
                        var.put('lodashFunc', var.get('lodash').get(((Js('take')+(Js('Right') if (var.get('methodName')==Js('last')) else Js(''))) if var.get('isTaker') else var.get('methodName'))))
                        var.put('retUnwrapped', (var.get('isTaker') or JsRegExp('/^find/').callprop('test', var.get('methodName'))))
                        if var.get('lodashFunc').neg():
                            return var.get('undefined')
                        @Js
                        def PyJs_anonymous_941_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers(['args', 'chainAll', 'result', 'value', 'onlyLazy', 'useLazy', 'isUnwrapped', 'isLazy', 'iteratee', 'isHybrid', 'interceptor'])
                            var.put('value', var.get(u"this").get('__wrapped__'))
                            var.put('args', (Js([Js(1.0)]) if var.get('isTaker') else var.get('arguments')))
                            var.put('isLazy', var.get('value').instanceof(var.get('LazyWrapper')))
                            var.put('iteratee', var.get('args').get('0'))
                            var.put('useLazy', (var.get('isLazy') or var.get('isArray')(var.get('value'))))
                            @Js
                            def PyJs_anonymous_942_(value, this, arguments, var=var):
                                var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                                var.registers(['result', 'value'])
                                var.put('result', var.get('lodashFunc').callprop('apply', var.get('lodash'), var.get('arrayPush')(Js([var.get('value')]), var.get('args'))))
                                return (var.get('result').get('0') if (var.get('isTaker') and var.get('chainAll')) else var.get('result'))
                            PyJs_anonymous_942_._set_name('anonymous')
                            var.put('interceptor', PyJs_anonymous_942_)
                            if (((var.get('useLazy') and var.get('checkIteratee')) and (var.get('iteratee',throw=False).typeof()==Js('function'))) and (var.get('iteratee').get('length')!=Js(1.0))):
                                var.put('isLazy', var.put('useLazy', Js(False)))
                            var.put('chainAll', var.get(u"this").get('__chain__'))
                            var.put('isHybrid', var.get(u"this").get('__actions__').get('length').neg().neg())
                            var.put('isUnwrapped', (var.get('retUnwrapped') and var.get('chainAll').neg()))
                            var.put('onlyLazy', (var.get('isLazy') and var.get('isHybrid').neg()))
                            if (var.get('retUnwrapped').neg() and var.get('useLazy')):
                                var.put('value', (var.get('value') if var.get('onlyLazy') else var.get('LazyWrapper').create(var.get(u"this"))))
                                var.put('result', var.get('func').callprop('apply', var.get('value'), var.get('args')))
                                var.get('result').get('__actions__').callprop('push', Js({'func':var.get('thru'),'args':Js([var.get('interceptor')]),'thisArg':var.get('undefined')}))
                                return var.get('LodashWrapper').create(var.get('result'), var.get('chainAll'))
                            if (var.get('isUnwrapped') and var.get('onlyLazy')):
                                return var.get('func').callprop('apply', var.get(u"this"), var.get('args'))
                            var.put('result', var.get(u"this").callprop('thru', var.get('interceptor')))
                            return ((var.get('result').callprop('value').get('0') if var.get('isTaker') else var.get('result').callprop('value')) if var.get('isUnwrapped') else var.get('result'))
                        PyJs_anonymous_941_._set_name('anonymous')
                        var.get('lodash').get('prototype').put(var.get('methodName'), PyJs_anonymous_941_)
                    PyJs_anonymous_940_._set_name('anonymous')
                    var.get('baseForOwn')(var.get('LazyWrapper').get('prototype'), PyJs_anonymous_940_)
                    @Js
                    def PyJs_anonymous_943_(methodName, this, arguments, var=var):
                        var = Scope({'methodName':methodName, 'this':this, 'arguments':arguments}, var)
                        var.registers(['chainName', 'retUnwrapped', 'func', 'methodName'])
                        var.put('func', var.get('arrayProto').get(var.get('methodName')))
                        var.put('chainName', (Js('tap') if JsRegExp('/^(?:push|sort|unshift)$/').callprop('test', var.get('methodName')) else Js('thru')))
                        var.put('retUnwrapped', JsRegExp('/^(?:pop|shift)$/').callprop('test', var.get('methodName')))
                        @Js
                        def PyJs_anonymous_944_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers(['args', 'value'])
                            var.put('args', var.get('arguments'))
                            if (var.get('retUnwrapped') and var.get(u"this").get('__chain__').neg()):
                                var.put('value', var.get(u"this").callprop('value'))
                                return var.get('func').callprop('apply', (var.get('value') if var.get('isArray')(var.get('value')) else Js([])), var.get('args'))
                            @Js
                            def PyJs_anonymous_945_(value, this, arguments, var=var):
                                var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                                var.registers(['value'])
                                return var.get('func').callprop('apply', (var.get('value') if var.get('isArray')(var.get('value')) else Js([])), var.get('args'))
                            PyJs_anonymous_945_._set_name('anonymous')
                            return var.get(u"this").callprop(var.get('chainName'), PyJs_anonymous_945_)
                        PyJs_anonymous_944_._set_name('anonymous')
                        var.get('lodash').get('prototype').put(var.get('methodName'), PyJs_anonymous_944_)
                    PyJs_anonymous_943_._set_name('anonymous')
                    var.get('arrayEach')(Js([Js('pop'), Js('push'), Js('shift'), Js('sort'), Js('splice'), Js('unshift')]), PyJs_anonymous_943_)
                    @Js
                    def PyJs_anonymous_946_(func, methodName, this, arguments, var=var):
                        var = Scope({'func':func, 'methodName':methodName, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'func', 'lodashFunc', 'methodName'])
                        var.put('lodashFunc', var.get('lodash').get(var.get('methodName')))
                        if var.get('lodashFunc'):
                            var.put('key', (var.get('lodashFunc').get('name')+Js('')))
                            if var.get('hasOwnProperty').callprop('call', var.get('realNames'), var.get('key')).neg():
                                var.get('realNames').put(var.get('key'), Js([]))
                            var.get('realNames').get(var.get('key')).callprop('push', Js({'name':var.get('methodName'),'func':var.get('lodashFunc')}))
                    PyJs_anonymous_946_._set_name('anonymous')
                    var.get('baseForOwn')(var.get('LazyWrapper').get('prototype'), PyJs_anonymous_946_)
                    var.get('realNames').put(var.get('createHybrid')(var.get('undefined'), var.get('WRAP_BIND_KEY_FLAG')).get('name'), Js([Js({'name':Js('wrapper'),'func':var.get('undefined')})]))
                    var.get('LazyWrapper').get('prototype').put('clone', var.get('lazyClone'))
                    var.get('LazyWrapper').get('prototype').put('reverse', var.get('lazyReverse'))
                    var.get('LazyWrapper').get('prototype').put('value', var.get('lazyValue'))
                    var.get('lodash').get('prototype').put('at', var.get('wrapperAt'))
                    var.get('lodash').get('prototype').put('chain', var.get('wrapperChain'))
                    var.get('lodash').get('prototype').put('commit', var.get('wrapperCommit'))
                    var.get('lodash').get('prototype').put('next', var.get('wrapperNext'))
                    var.get('lodash').get('prototype').put('plant', var.get('wrapperPlant'))
                    var.get('lodash').get('prototype').put('reverse', var.get('wrapperReverse'))
                    var.get('lodash').get('prototype').put('toJSON', var.get('lodash').get('prototype').put('valueOf', var.get('lodash').get('prototype').put('value', var.get('wrapperValue'))))
                    var.get('lodash').get('prototype').put('first', var.get('lodash').get('prototype').get('head'))
                    if var.get('symIterator'):
                        var.get('lodash').get('prototype').put(var.get('symIterator'), var.get('wrapperToIterator'))
                    return var.get('lodash')
                PyJs_runInContext_756_._set_name('runInContext')
                var.put('runInContext', PyJs_runInContext_756_)
                var.put('_', var.get('runInContext')())
                if (((var.get('define',throw=False).typeof()==Js('function')) and (var.get('define').get('amd').typeof()==Js('object'))) and var.get('define').get('amd')):
                    var.get('root').put('_', var.get('_'))
                    @Js
                    def PyJs_anonymous_947_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get('_')
                    PyJs_anonymous_947_._set_name('anonymous')
                    var.get('define')(PyJs_anonymous_947_)
                else:
                    if var.get('freeModule'):
                        var.get('freeModule').put('exports', var.get('_')).put('_', var.get('_'))
                        var.get('freeExports').put('_', var.get('_'))
                    else:
                        var.get('root').put('_', var.get('_'))
            PyJs_anonymous_738_._set_name('anonymous')
            PyJs_anonymous_738_.callprop('call', var.get(u"this"))
        PyJs_anonymous_737_._set_name('anonymous')
        PyJs_anonymous_737_.callprop('call', var.get(u"this"), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else Js({})))))
    PyJs_anonymous_736_._set_name('anonymous')
    @Js
    def PyJs_anonymous_948_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'createCompounder', 'exports', 'module', 'snakeCase'])
        var.put('createCompounder', var.get('require')(Js('./_createCompounder')))
        @Js
        def PyJs_anonymous_949_(result, word, index, this, arguments, var=var):
            var = Scope({'result':result, 'word':word, 'index':index, 'this':this, 'arguments':arguments}, var)
            var.registers(['result', 'index', 'word'])
            return ((var.get('result')+(Js('_') if var.get('index') else Js('')))+var.get('word').callprop('toLowerCase'))
        PyJs_anonymous_949_._set_name('anonymous')
        var.put('snakeCase', var.get('createCompounder')(PyJs_anonymous_949_))
        var.get('module').put('exports', var.get('snakeCase'))
    PyJs_anonymous_948_._set_name('anonymous')
    @Js
    def PyJs_anonymous_950_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toString', 'exports', 'module', 'baseToString'])
        @Js
        def PyJsHoisted_toString_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return (Js('') if (var.get('value')==var.get(u"null")) else var.get('baseToString')(var.get('value')))
        PyJsHoisted_toString_.func_name = 'toString'
        var.put('toString', PyJsHoisted_toString_)
        var.put('baseToString', var.get('require')(Js('./_baseToString')))
        pass
        var.get('module').put('exports', var.get('toString'))
    PyJs_anonymous_950_._set_name('anonymous')
    @Js
    def PyJs_anonymous_951_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['hasUnicodeWord', 'require', 'asciiWords', 'toString', 'unicodeWords', 'words', 'exports', 'module'])
        @Js
        def PyJsHoisted_words_(string, pattern, guard, this, arguments, var=var):
            var = Scope({'string':string, 'pattern':pattern, 'guard':guard, 'this':this, 'arguments':arguments}, var)
            var.registers(['pattern', 'guard', 'string'])
            var.put('string', var.get('toString')(var.get('string')))
            var.put('pattern', (var.get('undefined') if var.get('guard') else var.get('pattern')))
            if PyJsStrictEq(var.get('pattern'),var.get('undefined')):
                return (var.get('unicodeWords')(var.get('string')) if var.get('hasUnicodeWord')(var.get('string')) else var.get('asciiWords')(var.get('string')))
            return (var.get('string').callprop('match', var.get('pattern')) or Js([]))
        PyJsHoisted_words_.func_name = 'words'
        var.put('words', PyJsHoisted_words_)
        var.put('asciiWords', var.get('require')(Js('./_asciiWords')))
        var.put('hasUnicodeWord', var.get('require')(Js('./_hasUnicodeWord')))
        var.put('toString', var.get('require')(Js('./toString')))
        var.put('unicodeWords', var.get('require')(Js('./_unicodeWords')))
        pass
        var.get('module').put('exports', var.get('words'))
    PyJs_anonymous_951_._set_name('anonymous')
    @Js
    def PyJs_anonymous_952_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'require', 'exports'])
        @Js
        def PyJs_anonymous_953_(PyJsArg_676c6f62616c_, this, arguments, var=var):
            var = Scope({'global':PyJsArg_676c6f62616c_, 'this':this, 'arguments':arguments}, var)
            var.registers(['snakeCase', 'globalThis', 'polylineLayout', 'ASLMutation', '__expose_package_to_global', 'global', 'all', 'configurator'])
            @Js
            def PyJsHoisted___expose_package_to_global_(obj, this, arguments, var=var):
                var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                var.registers(['key', 'obj', '__snakeCasedKey'])
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    var.put('__snakeCasedKey', var.get('snakeCase')(var.get('key')))
                    var.get('all').callprop('push', var.get('key'))
                    var.get('all').callprop('push', var.get('__snakeCasedKey'))
                    var.get('globalThis').put(var.get('key'), var.get('globalThis').put(var.get('__snakeCasedKey'), var.get('ASLMutation').get(var.get('key'))))
            PyJsHoisted___expose_package_to_global_.func_name = '__expose_package_to_global'
            var.put('__expose_package_to_global', PyJsHoisted___expose_package_to_global_)
            var.put('configurator', var.get('require')(Js('core-js/configurator')))
            var.get('configurator')(Js({'usePolyfill':Js([Js('Object'), Js('Array')])}))
            var.get('require')(Js('core-js/es/object'))
            var.get('require')(Js('core-js/es/array'))
            var.put('snakeCase', var.get('require')(Js('lodash/snakeCase')))
            var.put('ASLMutation', var.get('require')(Js('../dist-cjs/AProcess/mutations/index.js')))
            var.put('polylineLayout', var.get('require')(Js('../dist-cjs/AProcess/polylineLayout/index.js')))
            var.put('globalThis', ((var.get('global') or var.get('window')) or var.get(u"this")))
            var.put('all', Js([]))
            pass
            var.get('globalThis').put('__all__', var.get('all'))
            var.get('__expose_package_to_global')(var.get('ASLMutation'))
            var.get('__expose_package_to_global')(var.get('polylineLayout'))
        PyJs_anonymous_953_._set_name('anonymous')
        PyJs_anonymous_953_.callprop('call', var.get(u"this"), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else Js({})))))
    PyJs_anonymous_952_._set_name('anonymous')
    @Js
    def PyJs_anonymous_954_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['r'])
        @Js
        def PyJsHoisted_r_(e, n, t, this, arguments, var=var):
            var = Scope({'e':e, 'n':n, 't':t, 'this':this, 'arguments':arguments}, var)
            var.registers(['o', 'n', 'i', 't', 'u', 'e'])
            @Js
            def PyJsHoisted_o_(i, f, this, arguments, var=var):
                var = Scope({'i':i, 'f':f, 'this':this, 'arguments':arguments}, var)
                var.registers(['c', 'i', 'p', 'a', 'f'])
                if var.get('n').get(var.get('i')).neg():
                    if var.get('e').get(var.get('i')).neg():
                        var.put('c', ((Js('function')==var.get('require',throw=False).typeof()) and var.get('require')))
                        if (var.get('f').neg() and var.get('c')):
                            return var.get('c')(var.get('i'), Js(0.0).neg())
                        if var.get('u'):
                            return var.get('u')(var.get('i'), Js(0.0).neg())
                        var.put('a', var.get('Error').create(((Js("Cannot find module '")+var.get('i'))+Js("'"))))
                        PyJsTempException = JsToPyException(PyJsComma(var.get('a').put('code', Js('MODULE_NOT_FOUND')),var.get('a')))
                        raise PyJsTempException
                    var.put('p', var.get('n').put(var.get('i'), Js({'exports':Js({})})))
                    @Js
                    def PyJs_anonymous_955_(r, this, arguments, var=var):
                        var = Scope({'r':r, 'this':this, 'arguments':arguments}, var)
                        var.registers(['n', 'r'])
                        var.put('n', var.get('e').get(var.get('i')).get('1').get(var.get('r')))
                        return var.get('o')((var.get('n') or var.get('r')))
                    PyJs_anonymous_955_._set_name('anonymous')
                    var.get('e').get(var.get('i')).get('0').callprop('call', var.get('p').get('exports'), PyJs_anonymous_955_, var.get('p'), var.get('p').get('exports'), var.get('r'), var.get('e'), var.get('n'), var.get('t'))
                return var.get('n').get(var.get('i')).get('exports')
            PyJsHoisted_o_.func_name = 'o'
            var.put('o', PyJsHoisted_o_)
            pass
            #for JS loop
            var.put('u', ((Js('function')==var.get('require',throw=False).typeof()) and var.get('require')))
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('t').get('length')):
                try:
                    var.get('o')(var.get('t').get(var.get('i')))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('o')
        PyJsHoisted_r_.func_name = 'r'
        var.put('r', PyJsHoisted_r_)
        pass
        return var.get('r')
    PyJs_anonymous_954_._set_name('anonymous')
    return PyJs_anonymous_954_()(Js({'1':Js([PyJs_anonymous_0_, Js({})]),'2':Js([PyJs_anonymous_6_, Js({'../../Process/util':Js(11.0),'../mutations/ASLMutations':Js(3.0),'lodash':Js(193.0)})]),'3':Js([PyJs_anonymous_29_, Js({'../../Process/util':Js(11.0),'../layout/stageUtils':Js(2.0),'../utils':Js(9.0),'lodash':Js(193.0)})]),'4':Js([PyJs_anonymous_90_, Js({'./ASLMutations':Js(3.0)})]),'5':Js([PyJs_anonymous_101_, Js({'./ASLMutations':Js(3.0),'./gen':Js(4.0),'./transform':Js(6.0)})]),'6':Js([PyJs_anonymous_102_, Js({'../utils':Js(9.0),'./ASLMutations':Js(3.0),'lodash':Js(193.0)})]),'7':Js([PyJs_anonymous_149_, Js({'.':Js(8.0),'../co':Js(1.0),'../mutations':Js(5.0),'../utils':Js(9.0),'lodash':Js(193.0)})]),'8':Js([PyJs_anonymous_167_, Js({'../co':Js(1.0),'../mutations/ASLMutations':Js(3.0),'../utils':Js(9.0),'./designed':Js(7.0),'lodash':Js(193.0)})]),'9':Js([PyJs_anonymous_192_, Js({'./co':Js(1.0)})]),'10':Js([PyJs_anonymous_211_, Js({'./util':Js(11.0),'lodash':Js(193.0)})]),'11':Js([PyJs_anonymous_262_, Js({'../AProcess/utils':Js(9.0),'./ProcessGraph':Js(10.0),'lodash':Js(193.0)})]),'12':Js([PyJs_anonymous_301_, Js({'./internals/has':Js(57.0),'./internals/is-array':Js(66.0),'./internals/is-forced':Js(67.0),'./internals/shared-store':Js(101.0)})]),'13':Js([PyJs_anonymous_304_, Js({'../../internals/path':Js(93.0),'../../modules/es.array.concat':Js(115.0),'../../modules/es.array.copy-within':Js(116.0),'../../modules/es.array.every':Js(117.0),'../../modules/es.array.fill':Js(118.0),'../../modules/es.array.filter':Js(119.0),'../../modules/es.array.find':Js(121.0),'../../modules/es.array.find-index':Js(120.0),'../../modules/es.array.flat':Js(123.0),'../../modules/es.array.flat-map':Js(122.0),'../../modules/es.array.for-each':Js(124.0),'../../modules/es.array.from':Js(125.0),'../../modules/es.array.includes':Js(126.0),'../../modules/es.array.index-of':Js(127.0),'../../modules/es.array.is-array':Js(128.0),'../../modules/es.array.iterator':Js(129.0),'../../modules/es.array.join':Js(130.0),'../../modules/es.array.last-index-of':Js(131.0),'../../modules/es.array.map':Js(132.0),'../../modules/es.array.of':Js(133.0),'../../modules/es.array.reduce':Js(135.0),'../../modules/es.array.reduce-right':Js(134.0),'../../modules/es.array.reverse':Js(136.0),'../../modules/es.array.slice':Js(137.0),'../../modules/es.array.some':Js(138.0),'../../modules/es.array.sort':Js(139.0),'../../modules/es.array.species':Js(140.0),'../../modules/es.array.splice':Js(141.0),'../../modules/es.array.unscopables.flat':Js(143.0),'../../modules/es.array.unscopables.flat-map':Js(142.0),'../../modules/es.string.iterator':Js(172.0)})]),'14':Js([PyJs_anonymous_305_, Js({'../../internals/path':Js(93.0),'../../modules/es.json.to-string-tag':Js(144.0),'../../modules/es.math.to-string-tag':Js(145.0),'../../modules/es.object.assign':Js(146.0),'../../modules/es.object.create':Js(147.0),'../../modules/es.object.define-getter':Js(148.0),'../../modules/es.object.define-properties':Js(149.0),'../../modules/es.object.define-property':Js(150.0),'../../modules/es.object.define-setter':Js(151.0),'../../modules/es.object.entries':Js(152.0),'../../modules/es.object.freeze':Js(153.0),'../../modules/es.object.from-entries':Js(154.0),'../../modules/es.object.get-own-property-descriptor':Js(155.0),'../../modules/es.object.get-own-property-descriptors':Js(156.0),'../../modules/es.object.get-own-property-names':Js(157.0),'../../modules/es.object.get-prototype-of':Js(158.0),'../../modules/es.object.is':Js(162.0),'../../modules/es.object.is-extensible':Js(159.0),'../../modules/es.object.is-frozen':Js(160.0),'../../modules/es.object.is-sealed':Js(161.0),'../../modules/es.object.keys':Js(163.0),'../../modules/es.object.lookup-getter':Js(164.0),'../../modules/es.object.lookup-setter':Js(165.0),'../../modules/es.object.prevent-extensions':Js(166.0),'../../modules/es.object.seal':Js(167.0),'../../modules/es.object.set-prototype-of':Js(168.0),'../../modules/es.object.to-string':Js(169.0),'../../modules/es.object.values':Js(170.0),'../../modules/es.reflect.to-string-tag':Js(171.0),'../../modules/es.symbol':Js(173.0)})]),'15':Js([PyJs_anonymous_306_, Js({})]),'16':Js([PyJs_anonymous_308_, Js({'../internals/is-object':Js(68.0)})]),'17':Js([PyJs_anonymous_310_, Js({'../internals/object-create':Js(77.0),'../internals/object-define-property':Js(79.0),'../internals/well-known-symbol':Js(114.0)})]),'18':Js([PyJs_anonymous_312_, Js({'../internals/is-object':Js(68.0)})]),'19':Js([PyJs_anonymous_314_, Js({'../internals/to-absolute-index':Js(104.0),'../internals/to-length':Js(107.0),'../internals/to-object':Js(108.0)})]),'20':Js([PyJs_anonymous_316_, Js({'../internals/to-absolute-index':Js(104.0),'../internals/to-length':Js(107.0),'../internals/to-object':Js(108.0)})]),'21':Js([PyJs_anonymous_318_, Js({'../internals/array-iteration':Js(24.0),'../internals/array-method-is-strict':Js(27.0),'../internals/array-method-uses-to-length':Js(28.0)})]),'22':Js([PyJs_anonymous_320_, Js({'../internals/call-with-safe-iteration-closing':Js(31.0),'../internals/create-property':Js(40.0),'../internals/function-bind-context':Js(53.0),'../internals/get-iterator-method':Js(55.0),'../internals/is-array-iterator-method':Js(65.0),'../internals/to-length':Js(107.0),'../internals/to-object':Js(108.0)})]),'23':Js([PyJs_anonymous_322_, Js({'../internals/to-absolute-index':Js(104.0),'../internals/to-indexed-object':Js(105.0),'../internals/to-length':Js(107.0)})]),'24':Js([PyJs_anonymous_325_, Js({'../internals/array-species-create':Js(30.0),'../internals/function-bind-context':Js(53.0),'../internals/indexed-object':Js(61.0),'../internals/to-length':Js(107.0),'../internals/to-object':Js(108.0)})]),'25':Js([PyJs_anonymous_328_, Js({'../internals/array-method-is-strict':Js(27.0),'../internals/array-method-uses-to-length':Js(28.0),'../internals/to-indexed-object':Js(105.0),'../internals/to-integer':Js(106.0),'../internals/to-length':Js(107.0)})]),'26':Js([PyJs_anonymous_330_, Js({'../internals/engine-v8-version':Js(47.0),'../internals/fails':Js(50.0),'../internals/well-known-symbol':Js(114.0)})]),'27':Js([PyJs_anonymous_334_, Js({'../internals/fails':Js(50.0)})]),'28':Js([PyJs_anonymous_338_, Js({'../internals/descriptors':Js(43.0),'../internals/fails':Js(50.0),'../internals/has':Js(57.0)})]),'29':Js([PyJs_anonymous_342_, Js({'../internals/a-function':Js(15.0),'../internals/indexed-object':Js(61.0),'../internals/to-length':Js(107.0),'../internals/to-object':Js(108.0)})]),'30':Js([PyJs_anonymous_345_, Js({'../internals/is-array':Js(66.0),'../internals/is-object':Js(68.0),'../internals/well-known-symbol':Js(114.0)})]),'31':Js([PyJs_anonymous_347_, Js({'../internals/an-object':Js(18.0),'../internals/iterator-close':Js(71.0)})]),'32':Js([PyJs_anonymous_349_, Js({'../internals/well-known-symbol':Js(114.0)})]),'33':Js([PyJs_anonymous_357_, Js({})]),'34':Js([PyJs_anonymous_359_, Js({'../internals/classof-raw':Js(33.0),'../internals/to-string-tag-support':Js(110.0),'../internals/well-known-symbol':Js(114.0)})]),'35':Js([PyJs_anonymous_364_, Js({'../internals/has':Js(57.0),'../internals/object-define-property':Js(79.0),'../internals/object-get-own-property-descriptor':Js(80.0),'../internals/own-keys':Js(92.0)})]),'36':Js([PyJs_anonymous_366_, Js({'../internals/fails':Js(50.0)})]),'37':Js([PyJs_anonymous_368_, Js({'../internals/create-property-descriptor':Js(39.0),'../internals/iterators':Js(73.0),'../internals/iterators-core':Js(72.0),'../internals/object-create':Js(77.0),'../internals/set-to-string-tag':Js(99.0)})]),'38':Js([PyJs_anonymous_371_, Js({'../internals/create-property-descriptor':Js(39.0),'../internals/descriptors':Js(43.0),'../internals/object-define-property':Js(79.0)})]),'39':Js([PyJs_anonymous_374_, Js({})]),'40':Js([PyJs_anonymous_376_, Js({'../internals/create-property-descriptor':Js(39.0),'../internals/object-define-property':Js(79.0),'../internals/to-primitive':Js(109.0)})]),'41':Js([PyJs_anonymous_378_, Js({'../internals/create-iterator-constructor':Js(37.0),'../internals/create-non-enumerable-property':Js(38.0),'../internals/export':Js(49.0),'../internals/is-pure':Js(69.0),'../internals/iterators':Js(73.0),'../internals/iterators-core':Js(72.0),'../internals/object-get-prototype-of':Js(84.0),'../internals/object-set-prototype-of':Js(89.0),'../internals/redefine':Js(94.0),'../internals/set-to-string-tag':Js(99.0),'../internals/well-known-symbol':Js(114.0)})]),'42':Js([PyJs_anonymous_387_, Js({'../internals/has':Js(57.0),'../internals/object-define-property':Js(79.0),'../internals/path':Js(93.0),'../internals/well-known-symbol-wrapped':Js(113.0)})]),'43':Js([PyJs_anonymous_389_, Js({'../internals/fails':Js(50.0)})]),'44':Js([PyJs_anonymous_392_, Js({'../internals/global':Js(56.0),'../internals/is-object':Js(68.0)})]),'45':Js([PyJs_anonymous_394_, Js({'../internals/classof-raw':Js(33.0),'../internals/global':Js(56.0)})]),'46':Js([PyJs_anonymous_395_, Js({'../internals/get-built-in':Js(54.0)})]),'47':Js([PyJs_anonymous_396_, Js({'../internals/engine-user-agent':Js(46.0),'../internals/global':Js(56.0)})]),'48':Js([PyJs_anonymous_397_, Js({})]),'49':Js([PyJs_anonymous_398_, Js({'../internals/copy-constructor-properties':Js(35.0),'../internals/create-non-enumerable-property':Js(38.0),'../internals/global':Js(56.0),'../internals/is-forced':Js(67.0),'../internals/object-get-own-property-descriptor':Js(80.0),'../internals/redefine':Js(94.0),'../internals/set-global':Js(97.0)})]),'50':Js([PyJs_anonymous_400_, Js({})]),'51':Js([PyJs_anonymous_402_, Js({'../internals/function-bind-context':Js(53.0),'../internals/is-array':Js(66.0),'../internals/to-length':Js(107.0)})]),'52':Js([PyJs_anonymous_404_, Js({'../internals/fails':Js(50.0)})]),'53':Js([PyJs_anonymous_406_, Js({'../internals/a-function':Js(15.0)})]),'54':Js([PyJs_anonymous_413_, Js({'../internals/global':Js(56.0),'../internals/path':Js(93.0)})]),'55':Js([PyJs_anonymous_417_, Js({'../internals/classof':Js(34.0),'../internals/iterators':Js(73.0),'../internals/well-known-symbol':Js(114.0)})]),'56':Js([PyJs_anonymous_419_, Js({})]),'57':Js([PyJs_anonymous_424_, Js({})]),'58':Js([PyJs_anonymous_426_, Js({})]),'59':Js([PyJs_anonymous_427_, Js({'../internals/get-built-in':Js(54.0)})]),'60':Js([PyJs_anonymous_428_, Js({'../internals/descriptors':Js(43.0),'../internals/document-create-element':Js(44.0),'../internals/fails':Js(50.0)})]),'61':Js([PyJs_anonymous_431_, Js({'../internals/classof-raw':Js(33.0),'../internals/fails':Js(50.0)})]),'62':Js([PyJs_anonymous_434_, Js({'../internals/shared-store':Js(101.0)})]),'63':Js([PyJs_anonymous_436_, Js({'../internals/freezing':Js(52.0),'../internals/has':Js(57.0),'../internals/hidden-keys':Js(58.0),'../internals/is-object':Js(68.0),'../internals/object-define-property':Js(79.0),'../internals/uid':Js(111.0)})]),'64':Js([PyJs_anonymous_442_, Js({'../internals/create-non-enumerable-property':Js(38.0),'../internals/global':Js(56.0),'../internals/has':Js(57.0),'../internals/hidden-keys':Js(58.0),'../internals/is-object':Js(68.0),'../internals/native-weak-map':Js(75.0),'../internals/shared-key':Js(100.0),'../internals/shared-store':Js(101.0)})]),'65':Js([PyJs_anonymous_452_, Js({'../internals/iterators':Js(73.0),'../internals/well-known-symbol':Js(114.0)})]),'66':Js([PyJs_anonymous_454_, Js({'../internals/classof-raw':Js(33.0)})]),'67':Js([PyJs_anonymous_456_, Js({'../internals/fails':Js(50.0)})]),'68':Js([PyJs_anonymous_459_, Js({})]),'69':Js([PyJs_anonymous_461_, Js({})]),'70':Js([PyJs_anonymous_462_, Js({'../internals/an-object':Js(18.0),'../internals/function-bind-context':Js(53.0),'../internals/get-iterator-method':Js(55.0),'../internals/is-array-iterator-method':Js(65.0),'../internals/iterator-close':Js(71.0),'../internals/to-length':Js(107.0)})]),'71':Js([PyJs_anonymous_467_, Js({'../internals/an-object':Js(18.0)})]),'72':Js([PyJs_anonymous_469_, Js({'../internals/create-non-enumerable-property':Js(38.0),'../internals/has':Js(57.0),'../internals/is-pure':Js(69.0),'../internals/object-get-prototype-of':Js(84.0),'../internals/well-known-symbol':Js(114.0)})]),'73':Js([PyJs_anonymous_471_, Js({'dup':Js(58.0)})]),'74':Js([PyJs_anonymous_472_, Js({'../internals/fails':Js(50.0)})]),'75':Js([PyJs_anonymous_474_, Js({'../internals/global':Js(56.0),'../internals/inspect-source':Js(62.0)})]),'76':Js([PyJs_anonymous_475_, Js({'../internals/descriptors':Js(43.0),'../internals/fails':Js(50.0),'../internals/indexed-object':Js(61.0),'../internals/object-get-own-property-symbols':Js(83.0),'../internals/object-keys':Js(86.0),'../internals/object-property-is-enumerable':Js(87.0),'../internals/to-object':Js(108.0)})]),'77':Js([PyJs_anonymous_480_, Js({'../internals/an-object':Js(18.0),'../internals/document-create-element':Js(44.0),'../internals/enum-bug-keys':Js(48.0),'../internals/hidden-keys':Js(58.0),'../internals/html':Js(59.0),'../internals/object-define-properties':Js(78.0),'../internals/shared-key':Js(100.0)})]),'78':Js([PyJs_anonymous_487_, Js({'../internals/an-object':Js(18.0),'../internals/descriptors':Js(43.0),'../internals/object-define-property':Js(79.0),'../internals/object-keys':Js(86.0)})]),'79':Js([PyJs_anonymous_489_, Js({'../internals/an-object':Js(18.0),'../internals/descriptors':Js(43.0),'../internals/ie8-dom-define':Js(60.0),'../internals/to-primitive':Js(109.0)})]),'80':Js([PyJs_anonymous_491_, Js({'../internals/create-property-descriptor':Js(39.0),'../internals/descriptors':Js(43.0),'../internals/has':Js(57.0),'../internals/ie8-dom-define':Js(60.0),'../internals/object-property-is-enumerable':Js(87.0),'../internals/to-indexed-object':Js(105.0),'../internals/to-primitive':Js(109.0)})]),'81':Js([PyJs_anonymous_493_, Js({'../internals/object-get-own-property-names':Js(82.0),'../internals/to-indexed-object':Js(105.0)})]),'82':Js([PyJs_anonymous_496_, Js({'../internals/enum-bug-keys':Js(48.0),'../internals/object-keys-internal':Js(85.0)})]),'83':Js([PyJs_anonymous_498_, Js({})]),'84':Js([PyJs_anonymous_499_, Js({'../internals/correct-prototype-getter':Js(36.0),'../internals/has':Js(57.0),'../internals/shared-key':Js(100.0),'../internals/to-object':Js(108.0)})]),'85':Js([PyJs_anonymous_501_, Js({'../internals/array-includes':Js(23.0),'../internals/has':Js(57.0),'../internals/hidden-keys':Js(58.0),'../internals/to-indexed-object':Js(105.0)})]),'86':Js([PyJs_anonymous_503_, Js({'../internals/enum-bug-keys':Js(48.0),'../internals/object-keys-internal':Js(85.0)})]),'87':Js([PyJs_anonymous_505_, Js({})]),'88':Js([PyJs_anonymous_507_, Js({'../internals/fails':Js(50.0),'../internals/global':Js(56.0),'../internals/is-pure':Js(69.0)})]),'89':Js([PyJs_anonymous_510_, Js({'../internals/a-possible-prototype':Js(16.0),'../internals/an-object':Js(18.0)})]),'90':Js([PyJs_anonymous_513_, Js({'../internals/descriptors':Js(43.0),'../internals/object-keys':Js(86.0),'../internals/object-property-is-enumerable':Js(87.0),'../internals/to-indexed-object':Js(105.0)})]),'91':Js([PyJs_anonymous_516_, Js({'../internals/classof':Js(34.0),'../internals/to-string-tag-support':Js(110.0)})]),'92':Js([PyJs_anonymous_518_, Js({'../internals/an-object':Js(18.0),'../internals/get-built-in':Js(54.0),'../internals/object-get-own-property-names':Js(82.0),'../internals/object-get-own-property-symbols':Js(83.0)})]),'93':Js([PyJs_anonymous_520_, Js({'../internals/global':Js(56.0)})]),'94':Js([PyJs_anonymous_521_, Js({'../internals/create-non-enumerable-property':Js(38.0),'../internals/global':Js(56.0),'../internals/has':Js(57.0),'../internals/inspect-source':Js(62.0),'../internals/internal-state':Js(64.0),'../internals/set-global':Js(97.0)})]),'95':Js([PyJs_anonymous_524_, Js({})]),'96':Js([PyJs_anonymous_526_, Js({})]),'97':Js([PyJs_anonymous_528_, Js({'../internals/create-non-enumerable-property':Js(38.0),'../internals/global':Js(56.0)})]),'98':Js([PyJs_anonymous_530_, Js({'../internals/descriptors':Js(43.0),'../internals/get-built-in':Js(54.0),'../internals/object-define-property':Js(79.0),'../internals/well-known-symbol':Js(114.0)})]),'99':Js([PyJs_anonymous_533_, Js({'../internals/has':Js(57.0),'../internals/object-define-property':Js(79.0),'../internals/well-known-symbol':Js(114.0)})]),'100':Js([PyJs_anonymous_535_, Js({'../internals/shared':Js(102.0),'../internals/uid':Js(111.0)})]),'101':Js([PyJs_anonymous_537_, Js({'../internals/global':Js(56.0),'../internals/set-global':Js(97.0)})]),'102':Js([PyJs_anonymous_538_, Js({'../internals/is-pure':Js(69.0),'../internals/shared-store':Js(101.0)})]),'103':Js([PyJs_anonymous_540_, Js({'../internals/require-object-coercible':Js(95.0),'../internals/to-integer':Js(106.0)})]),'104':Js([PyJs_anonymous_544_, Js({'../internals/to-integer':Js(106.0)})]),'105':Js([PyJs_anonymous_546_, Js({'../internals/indexed-object':Js(61.0),'../internals/require-object-coercible':Js(95.0)})]),'106':Js([PyJs_anonymous_548_, Js({})]),'107':Js([PyJs_anonymous_550_, Js({'../internals/to-integer':Js(106.0)})]),'108':Js([PyJs_anonymous_552_, Js({'../internals/require-object-coercible':Js(95.0)})]),'109':Js([PyJs_anonymous_554_, Js({'../internals/is-object':Js(68.0)})]),'110':Js([PyJs_anonymous_556_, Js({'../internals/well-known-symbol':Js(114.0)})]),'111':Js([PyJs_anonymous_557_, Js({})]),'112':Js([PyJs_anonymous_559_, Js({'../internals/native-symbol':Js(74.0)})]),'113':Js([PyJs_anonymous_560_, Js({'../internals/well-known-symbol':Js(114.0)})]),'114':Js([PyJs_anonymous_561_, Js({'../internals/global':Js(56.0),'../internals/has':Js(57.0),'../internals/native-symbol':Js(74.0),'../internals/shared':Js(102.0),'../internals/uid':Js(111.0),'../internals/use-symbol-as-uid':Js(112.0)})]),'115':Js([PyJs_anonymous_563_, Js({'../internals/array-method-has-species-support':Js(26.0),'../internals/array-species-create':Js(30.0),'../internals/create-property':Js(40.0),'../internals/engine-v8-version':Js(47.0),'../internals/export':Js(49.0),'../internals/fails':Js(50.0),'../internals/is-array':Js(66.0),'../internals/is-object':Js(68.0),'../internals/to-length':Js(107.0),'../internals/to-object':Js(108.0),'../internals/well-known-symbol':Js(114.0)})]),'116':Js([PyJs_anonymous_567_, Js({'../internals/add-to-unscopables':Js(17.0),'../internals/array-copy-within':Js(19.0),'../internals/export':Js(49.0)})]),'117':Js([PyJs_anonymous_568_, Js({'../internals/array-iteration':Js(24.0),'../internals/array-method-is-strict':Js(27.0),'../internals/array-method-uses-to-length':Js(28.0),'../internals/export':Js(49.0)})]),'118':Js([PyJs_anonymous_570_, Js({'../internals/add-to-unscopables':Js(17.0),'../internals/array-fill':Js(20.0),'../internals/export':Js(49.0)})]),'119':Js([PyJs_anonymous_571_, Js({'../internals/array-iteration':Js(24.0),'../internals/array-method-has-species-support':Js(26.0),'../internals/array-method-uses-to-length':Js(28.0),'../internals/export':Js(49.0)})]),'120':Js([PyJs_anonymous_573_, Js({'../internals/add-to-unscopables':Js(17.0),'../internals/array-iteration':Js(24.0),'../internals/array-method-uses-to-length':Js(28.0),'../internals/export':Js(49.0)})]),'121':Js([PyJs_anonymous_576_, Js({'../internals/add-to-unscopables':Js(17.0),'../internals/array-iteration':Js(24.0),'../internals/array-method-uses-to-length':Js(28.0),'../internals/export':Js(49.0)})]),'122':Js([PyJs_anonymous_579_, Js({'../internals/a-function':Js(15.0),'../internals/array-species-create':Js(30.0),'../internals/export':Js(49.0),'../internals/flatten-into-array':Js(51.0),'../internals/to-length':Js(107.0),'../internals/to-object':Js(108.0)})]),'123':Js([PyJs_anonymous_581_, Js({'../internals/array-species-create':Js(30.0),'../internals/export':Js(49.0),'../internals/flatten-into-array':Js(51.0),'../internals/to-integer':Js(106.0),'../internals/to-length':Js(107.0),'../internals/to-object':Js(108.0)})]),'124':Js([PyJs_anonymous_583_, Js({'../internals/array-for-each':Js(21.0),'../internals/export':Js(49.0)})]),'125':Js([PyJs_anonymous_584_, Js({'../internals/array-from':Js(22.0),'../internals/check-correctness-of-iteration':Js(32.0),'../internals/export':Js(49.0)})]),'126':Js([PyJs_anonymous_586_, Js({'../internals/add-to-unscopables':Js(17.0),'../internals/array-includes':Js(23.0),'../internals/array-method-uses-to-length':Js(28.0),'../internals/export':Js(49.0)})]),'127':Js([PyJs_anonymous_588_, Js({'../internals/array-includes':Js(23.0),'../internals/array-method-is-strict':Js(27.0),'../internals/array-method-uses-to-length':Js(28.0),'../internals/export':Js(49.0)})]),'128':Js([PyJs_anonymous_590_, Js({'../internals/export':Js(49.0),'../internals/is-array':Js(66.0)})]),'129':Js([PyJs_anonymous_591_, Js({'../internals/add-to-unscopables':Js(17.0),'../internals/define-iterator':Js(41.0),'../internals/internal-state':Js(64.0),'../internals/iterators':Js(73.0),'../internals/to-indexed-object':Js(105.0)})]),'130':Js([PyJs_anonymous_594_, Js({'../internals/array-method-is-strict':Js(27.0),'../internals/export':Js(49.0),'../internals/indexed-object':Js(61.0),'../internals/to-indexed-object':Js(105.0)})]),'131':Js([PyJs_anonymous_596_, Js({'../internals/array-last-index-of':Js(25.0),'../internals/export':Js(49.0)})]),'132':Js([PyJs_anonymous_597_, Js({'../internals/array-iteration':Js(24.0),'../internals/array-method-has-species-support':Js(26.0),'../internals/array-method-uses-to-length':Js(28.0),'../internals/export':Js(49.0)})]),'133':Js([PyJs_anonymous_599_, Js({'../internals/create-property':Js(40.0),'../internals/export':Js(49.0),'../internals/fails':Js(50.0)})]),'134':Js([PyJs_anonymous_602_, Js({'../internals/array-method-is-strict':Js(27.0),'../internals/array-method-uses-to-length':Js(28.0),'../internals/array-reduce':Js(29.0),'../internals/engine-is-node':Js(45.0),'../internals/engine-v8-version':Js(47.0),'../internals/export':Js(49.0)})]),'135':Js([PyJs_anonymous_604_, Js({'../internals/array-method-is-strict':Js(27.0),'../internals/array-method-uses-to-length':Js(28.0),'../internals/array-reduce':Js(29.0),'../internals/engine-is-node':Js(45.0),'../internals/engine-v8-version':Js(47.0),'../internals/export':Js(49.0)})]),'136':Js([PyJs_anonymous_606_, Js({'../internals/export':Js(49.0),'../internals/is-array':Js(66.0)})]),'137':Js([PyJs_anonymous_608_, Js({'../internals/array-method-has-species-support':Js(26.0),'../internals/array-method-uses-to-length':Js(28.0),'../internals/create-property':Js(40.0),'../internals/export':Js(49.0),'../internals/is-array':Js(66.0),'../internals/is-object':Js(68.0),'../internals/to-absolute-index':Js(104.0),'../internals/to-indexed-object':Js(105.0),'../internals/to-length':Js(107.0),'../internals/well-known-symbol':Js(114.0)})]),'138':Js([PyJs_anonymous_610_, Js({'../internals/array-iteration':Js(24.0),'../internals/array-method-is-strict':Js(27.0),'../internals/array-method-uses-to-length':Js(28.0),'../internals/export':Js(49.0)})]),'139':Js([PyJs_anonymous_612_, Js({'../internals/a-function':Js(15.0),'../internals/array-method-is-strict':Js(27.0),'../internals/export':Js(49.0),'../internals/fails':Js(50.0),'../internals/to-object':Js(108.0)})]),'140':Js([PyJs_anonymous_616_, Js({'../internals/set-species':Js(98.0)})]),'141':Js([PyJs_anonymous_617_, Js({'../internals/array-method-has-species-support':Js(26.0),'../internals/array-method-uses-to-length':Js(28.0),'../internals/array-species-create':Js(30.0),'../internals/create-property':Js(40.0),'../internals/export':Js(49.0),'../internals/to-absolute-index':Js(104.0),'../internals/to-integer':Js(106.0),'../internals/to-length':Js(107.0),'../internals/to-object':Js(108.0)})]),'142':Js([PyJs_anonymous_619_, Js({'../internals/add-to-unscopables':Js(17.0)})]),'143':Js([PyJs_anonymous_620_, Js({'../internals/add-to-unscopables':Js(17.0)})]),'144':Js([PyJs_anonymous_621_, Js({'../internals/global':Js(56.0),'../internals/set-to-string-tag':Js(99.0)})]),'145':Js([PyJs_anonymous_622_, Js({'../internals/set-to-string-tag':Js(99.0)})]),'146':Js([PyJs_anonymous_623_, Js({'../internals/export':Js(49.0),'../internals/object-assign':Js(76.0)})]),'147':Js([PyJs_anonymous_624_, Js({'../internals/descriptors':Js(43.0),'../internals/export':Js(49.0),'../internals/object-create':Js(77.0)})]),'148':Js([PyJs_anonymous_625_, Js({'../internals/a-function':Js(15.0),'../internals/descriptors':Js(43.0),'../internals/export':Js(49.0),'../internals/object-define-property':Js(79.0),'../internals/object-prototype-accessors-forced':Js(88.0),'../internals/to-object':Js(108.0)})]),'149':Js([PyJs_anonymous_627_, Js({'../internals/descriptors':Js(43.0),'../internals/export':Js(49.0),'../internals/object-define-properties':Js(78.0)})]),'150':Js([PyJs_anonymous_628_, Js({'../internals/descriptors':Js(43.0),'../internals/export':Js(49.0),'../internals/object-define-property':Js(79.0)})]),'151':Js([PyJs_anonymous_629_, Js({'../internals/a-function':Js(15.0),'../internals/descriptors':Js(43.0),'../internals/export':Js(49.0),'../internals/object-define-property':Js(79.0),'../internals/object-prototype-accessors-forced':Js(88.0),'../internals/to-object':Js(108.0)})]),'152':Js([PyJs_anonymous_631_, Js({'../internals/export':Js(49.0),'../internals/object-to-array':Js(90.0)})]),'153':Js([PyJs_anonymous_633_, Js({'../internals/export':Js(49.0),'../internals/fails':Js(50.0),'../internals/freezing':Js(52.0),'../internals/internal-metadata':Js(63.0),'../internals/is-object':Js(68.0)})]),'154':Js([PyJs_anonymous_636_, Js({'../internals/create-property':Js(40.0),'../internals/export':Js(49.0),'../internals/iterate':Js(70.0)})]),'155':Js([PyJs_anonymous_639_, Js({'../internals/descriptors':Js(43.0),'../internals/export':Js(49.0),'../internals/fails':Js(50.0),'../internals/object-get-own-property-descriptor':Js(80.0),'../internals/to-indexed-object':Js(105.0)})]),'156':Js([PyJs_anonymous_642_, Js({'../internals/create-property':Js(40.0),'../internals/descriptors':Js(43.0),'../internals/export':Js(49.0),'../internals/object-get-own-property-descriptor':Js(80.0),'../internals/own-keys':Js(92.0),'../internals/to-indexed-object':Js(105.0)})]),'157':Js([PyJs_anonymous_644_, Js({'../internals/export':Js(49.0),'../internals/fails':Js(50.0),'../internals/object-get-own-property-names-external':Js(81.0)})]),'158':Js([PyJs_anonymous_646_, Js({'../internals/correct-prototype-getter':Js(36.0),'../internals/export':Js(49.0),'../internals/fails':Js(50.0),'../internals/object-get-prototype-of':Js(84.0),'../internals/to-object':Js(108.0)})]),'159':Js([PyJs_anonymous_649_, Js({'../internals/export':Js(49.0),'../internals/fails':Js(50.0),'../internals/is-object':Js(68.0)})]),'160':Js([PyJs_anonymous_652_, Js({'../internals/export':Js(49.0),'../internals/fails':Js(50.0),'../internals/is-object':Js(68.0)})]),'161':Js([PyJs_anonymous_655_, Js({'../internals/export':Js(49.0),'../internals/fails':Js(50.0),'../internals/is-object':Js(68.0)})]),'162':Js([PyJs_anonymous_658_, Js({'../internals/export':Js(49.0),'../internals/same-value':Js(96.0)})]),'163':Js([PyJs_anonymous_659_, Js({'../internals/export':Js(49.0),'../internals/fails':Js(50.0),'../internals/object-keys':Js(86.0),'../internals/to-object':Js(108.0)})]),'164':Js([PyJs_anonymous_662_, Js({'../internals/descriptors':Js(43.0),'../internals/export':Js(49.0),'../internals/object-get-own-property-descriptor':Js(80.0),'../internals/object-get-prototype-of':Js(84.0),'../internals/object-prototype-accessors-forced':Js(88.0),'../internals/to-object':Js(108.0),'../internals/to-primitive':Js(109.0)})]),'165':Js([PyJs_anonymous_664_, Js({'../internals/descriptors':Js(43.0),'../internals/export':Js(49.0),'../internals/object-get-own-property-descriptor':Js(80.0),'../internals/object-get-prototype-of':Js(84.0),'../internals/object-prototype-accessors-forced':Js(88.0),'../internals/to-object':Js(108.0),'../internals/to-primitive':Js(109.0)})]),'166':Js([PyJs_anonymous_666_, Js({'../internals/export':Js(49.0),'../internals/fails':Js(50.0),'../internals/freezing':Js(52.0),'../internals/internal-metadata':Js(63.0),'../internals/is-object':Js(68.0)})]),'167':Js([PyJs_anonymous_669_, Js({'../internals/export':Js(49.0),'../internals/fails':Js(50.0),'../internals/freezing':Js(52.0),'../internals/internal-metadata':Js(63.0),'../internals/is-object':Js(68.0)})]),'168':Js([PyJs_anonymous_672_, Js({'../internals/export':Js(49.0),'../internals/object-set-prototype-of':Js(89.0)})]),'169':Js([PyJs_anonymous_673_, Js({'../internals/object-to-string':Js(91.0),'../internals/redefine':Js(94.0),'../internals/to-string-tag-support':Js(110.0)})]),'170':Js([PyJs_anonymous_674_, Js({'../internals/export':Js(49.0),'../internals/object-to-array':Js(90.0)})]),'171':Js([PyJs_anonymous_676_, Js({'../internals/export':Js(49.0),'../internals/global':Js(56.0),'../internals/set-to-string-tag':Js(99.0)})]),'172':Js([PyJs_anonymous_677_, Js({'../internals/define-iterator':Js(41.0),'../internals/internal-state':Js(64.0),'../internals/string-multibyte':Js(103.0)})]),'173':Js([PyJs_anonymous_680_, Js({'../internals/an-object':Js(18.0),'../internals/array-iteration':Js(24.0),'../internals/create-non-enumerable-property':Js(38.0),'../internals/create-property-descriptor':Js(39.0),'../internals/define-well-known-symbol':Js(42.0),'../internals/descriptors':Js(43.0),'../internals/export':Js(49.0),'../internals/fails':Js(50.0),'../internals/get-built-in':Js(54.0),'../internals/global':Js(56.0),'../internals/has':Js(57.0),'../internals/hidden-keys':Js(58.0),'../internals/internal-state':Js(64.0),'../internals/is-array':Js(66.0),'../internals/is-object':Js(68.0),'../internals/is-pure':Js(69.0),'../internals/native-symbol':Js(74.0),'../internals/object-create':Js(77.0),'../internals/object-define-property':Js(79.0),'../internals/object-get-own-property-descriptor':Js(80.0),'../internals/object-get-own-property-names':Js(82.0),'../internals/object-get-own-property-names-external':Js(81.0),'../internals/object-get-own-property-symbols':Js(83.0),'../internals/object-keys':Js(86.0),'../internals/object-property-is-enumerable':Js(87.0),'../internals/redefine':Js(94.0),'../internals/set-to-string-tag':Js(99.0),'../internals/shared':Js(102.0),'../internals/shared-key':Js(100.0),'../internals/to-indexed-object':Js(105.0),'../internals/to-object':Js(108.0),'../internals/to-primitive':Js(109.0),'../internals/uid':Js(111.0),'../internals/use-symbol-as-uid':Js(112.0),'../internals/well-known-symbol':Js(114.0),'../internals/well-known-symbol-wrapped':Js(113.0)})]),'174':Js([PyJs_anonymous_713_, Js({'./_root':Js(187.0)})]),'175':Js([PyJs_anonymous_714_, Js({})]),'176':Js([PyJs_anonymous_715_, Js({})]),'177':Js([PyJs_anonymous_716_, Js({})]),'178':Js([PyJs_anonymous_717_, Js({'./_Symbol':Js(174.0),'./_getRawTag':Js(184.0),'./_objectToString':Js(186.0)})]),'179':Js([PyJs_anonymous_718_, Js({})]),'180':Js([PyJs_anonymous_720_, Js({'./_Symbol':Js(174.0),'./_arrayMap':Js(175.0),'./isArray':Js(190.0),'./isSymbol':Js(192.0)})]),'181':Js([PyJs_anonymous_721_, Js({'./_arrayReduce':Js(176.0),'./deburr':Js(189.0),'./words':Js(196.0)})]),'182':Js([PyJs_anonymous_723_, Js({'./_basePropertyOf':Js(179.0)})]),'183':Js([PyJs_anonymous_724_, Js({})]),'184':Js([PyJs_anonymous_726_, Js({'./_Symbol':Js(174.0)})]),'185':Js([PyJs_anonymous_727_, Js({})]),'186':Js([PyJs_anonymous_728_, Js({})]),'187':Js([PyJs_anonymous_729_, Js({'./_freeGlobal':Js(183.0)})]),'188':Js([PyJs_anonymous_730_, Js({})]),'189':Js([PyJs_anonymous_732_, Js({'./_deburrLetter':Js(182.0),'./toString':Js(195.0)})]),'190':Js([PyJs_anonymous_733_, Js({})]),'191':Js([PyJs_anonymous_734_, Js({})]),'192':Js([PyJs_anonymous_735_, Js({'./_baseGetTag':Js(178.0),'./isObjectLike':Js(191.0)})]),'193':Js([PyJs_anonymous_736_, Js({})]),'194':Js([PyJs_anonymous_948_, Js({'./_createCompounder':Js(181.0)})]),'195':Js([PyJs_anonymous_950_, Js({'./_baseToString':Js(180.0)})]),'196':Js([PyJs_anonymous_951_, Js({'./_asciiWords':Js(177.0),'./_hasUnicodeWord':Js(185.0),'./_unicodeWords':Js(188.0),'./toString':Js(195.0)})]),'197':Js([PyJs_anonymous_952_, Js({'../dist-cjs/AProcess/mutations/index.js':Js(5.0),'../dist-cjs/AProcess/polylineLayout/index.js':Js(8.0),'core-js/configurator':Js(12.0),'core-js/es/array':Js(13.0),'core-js/es/object':Js(14.0),'lodash/snakeCase':Js(194.0)})])}), Js({}), Js([Js(197.0)]))
PyJs_LONG_956_()
pass


# Add lib to the module scope
ASLMutation = var.to_python()