statechart:
  name: Microwave controller with contracts
  preamble: |
    POWER_VALUES = [300, 600, 900, 1200, 1500]
    POWER_DEFAULT = 2  # 900W
    MAXPOWER = 3  # 1200W
  root state:
    name: controller
    initial: door closed
    on entry: |
      power = POWER_DEFAULT
      timer = 0
    transitions:
      - event: cooking_stop
        action: |
          power = POWER_DEFAULT
          timer = 0
    contract:
      - always: not sent('heating_on') or active('cooking mode')
      - always: timer >= 0
      - always: 0 <= power <= MAXPOWER
    states:
      - name: door closed
        initial: closed without item
        states:
          - name: closed without item
            transitions:
              - event: door_opened
                target: opened without item
          - name: closed with item
            initial: program mode
            on exit: send('display_clear')
            transitions:
              - event: door_opened
                target: opened with item
              - event: timer_inc
                action: |
                  timer = timer + 1
                  send('display_set', text='TIMER: %d' % timer)
              - event: timer_dec
                guard: timer >= 0
                action: |
                  timer = timer - 1
                  send('display_set', text='TIMER: %d' % timer)
              - event: timer_reset
                action: |
                  timer = 0
                  send('display_set', text='TIMER: %d' % timer)
            states:
              - name: program mode
                initial: not ready
                transitions:
                  - event: power_reset
                    action: |
                      power = POWER_DEFAULT
                      send('display_set', text='POWER: %d' % POWER_VALUES[power])
                  - event: power_inc
                    guard: power < MAXPOWER
                    action: |
                      power = power + 1
                      send('display_set', text='POWER: %d' % POWER_VALUES[power])
                  - event: power_dec
                    guard: power > 0
                    action: |
                      power = power - 1
                      send('display_set', text='POWER: %d' % POWER_VALUES[power])
                states:
                  - name: not ready
                    transitions:
                      - guard: timer > 0
                        target: ready
                  - name: ready
                    transitions:
                      - guard: timer == 0
                        target: not ready
                      - event: cooking_start
                        target: cooking mode
              - name: cooking mode
                on entry: |
                  send('heating_set_power', power=POWER_VALUES[power])
                  send('heating_on')
                  send('lamp_switch_on')
                  send('turntable_start')
                on exit: |
                  send('heating_off')
                  send('lamp_switch_off')
                  send('turntable_stop')
                contract:
                  - before: timer > 0
                  - always: timer >= 0
                  - always: power == __old__.power or received('cooking_stop')
                  - after: received('door_opened') or timer == 0
                transitions:
                  - guard: timer == 0
                    target: program mode
                    action: |
                      send('beep', number=3)
                      send('display_set', text='DONE')
                  - event: timer_tick
                    action: |
                      timer -= 1
                      send('display_set', text='REMAINING: %d' % timer)
      - name: door opened
        on entry: send('lamp_switch_on')
        on exit: send('lamp_switch_off')
        initial: opened without item
        states:
          - name: opened without item
            transitions:
              - event: door_closed
                target: closed without item
              - event: item_placed
                target: opened with item
          - name: opened with item
            transitions:
              - event: item_removed
                target: opened without item
              - event: door_closed
                target: closed with item
