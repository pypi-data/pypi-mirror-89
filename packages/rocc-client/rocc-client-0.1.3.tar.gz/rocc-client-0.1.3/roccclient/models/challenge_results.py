# coding: utf-8

"""
    Registry of Open Community Challenge API

    The OpenAPI specification implemented by the Challenge Registries. # Introduction TBA   # noqa: E501

    The version of the OpenAPI document: 0.1.2
    Contact: thomas.schaffter@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from roccclient.configuration import Configuration


class ChallengeResults(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'n_submissions': 'int',
        'n_final_submissions': 'int',
        'n_registered_participants': 'int'
    }

    attribute_map = {
        'n_submissions': 'nSubmissions',
        'n_final_submissions': 'nFinalSubmissions',
        'n_registered_participants': 'nRegisteredParticipants'
    }

    def __init__(self, n_submissions=None, n_final_submissions=None, n_registered_participants=None, local_vars_configuration=None):  # noqa: E501
        """ChallengeResults - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._n_submissions = None
        self._n_final_submissions = None
        self._n_registered_participants = None
        self.discriminator = None

        if n_submissions is not None:
            self.n_submissions = n_submissions
        if n_final_submissions is not None:
            self.n_final_submissions = n_final_submissions
        if n_registered_participants is not None:
            self.n_registered_participants = n_registered_participants

    @property
    def n_submissions(self):
        """Gets the n_submissions of this ChallengeResults.  # noqa: E501

        Number of submissions throughout the challenge # noqa: E501

        :return: The n_submissions of this ChallengeResults.  # noqa: E501
        :rtype: int
        """
        return self._n_submissions

    @n_submissions.setter
    def n_submissions(self, n_submissions):
        """Sets the n_final_submissions of this ChallengeResults.

        Number of submissions throughout the challenge  # noqa: E501

        :param n_submissions: The n_submissions of this ChallengeResults.  # noqa: E501
        :type n_submissions: int
        """
        if (self.local_vars_configuration.client_side_validation and
                n_submissions is not None and n_submissions < 0):  # noqa: E501
            raise ValueError("Invalid value for `n_submissions`, must be a value greater than or equal to `0`")  # noqa: E501

        self._n_submissions = n_submissions

    @property
    def n_final_submissions(self):
        """Gets the n_final_submissions of this ChallengeResults.  # noqa: E501

        Number of final submissions  # noqa: E501

        :return: The n_final_submissions of this ChallengeResults.  # noqa: E501
        :rtype: int
        """
        return self._n_final_submissions

    @n_final_submissions.setter
    def n_final_submissions(self, n_final_submissions):
        """Sets the n_final_submissions of this ChallengeResults.

        Number of final submissions  # noqa: E501

        :param n_final_submissions: The n_final_submissions of this ChallengeResults.  # noqa: E501
        :type n_final_submissions: int
        """
        if (self.local_vars_configuration.client_side_validation and
                n_final_submissions is not None and n_final_submissions < 0):  # noqa: E501
            raise ValueError("Invalid value for `n_final_submissions`, must be a value greater than or equal to `0`")  # noqa: E501

        self._n_final_submissions = n_final_submissions

    @property
    def n_registered_participants(self):
        """Gets the n_registered_participants of this ChallengeResults.  # noqa: E501

        Number of registered participants  # noqa: E501

        :return: The n_registered_participants of this ChallengeResults.  # noqa: E501
        :rtype: int
        """
        return self._n_registered_participants

    @n_registered_participants.setter
    def n_registered_participants(self, n_registered_participants):
        """Sets the n_registered_participants of this ChallengeResults.

        Number of registered participants  # noqa: E501

        :param n_registered_participants: The n_registered_participants of this ChallengeResults.  # noqa: E501
        :type n_registered_participants: int
        """
        if (self.local_vars_configuration.client_side_validation and
                n_registered_participants is not None and n_registered_participants < 0):  # noqa: E501
            raise ValueError("Invalid value for `n_registered_participants`, must be a value greater than or equal to `0`")  # noqa: E501

        self._n_registered_participants = n_registered_participants

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChallengeResults):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ChallengeResults):
            return True

        return self.to_dict() != other.to_dict()
