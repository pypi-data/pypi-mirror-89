# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['CartDiscount']


class CartDiscount(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 is_active: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 predicate: Optional[pulumi.Input[str]] = None,
                 requires_discount_code: Optional[pulumi.Input[bool]] = None,
                 sort_order: Optional[pulumi.Input[str]] = None,
                 stacking_mode: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[pulumi.InputType['CartDiscountTargetArgs']]] = None,
                 valid_from: Optional[pulumi.Input[str]] = None,
                 valid_until: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[pulumi.InputType['CartDiscountValueArgs']]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Create a CartDiscount resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['description'] = description
            __props__['is_active'] = is_active
            __props__['key'] = key
            __props__['name'] = name
            if predicate is None:
                raise TypeError("Missing required property 'predicate'")
            __props__['predicate'] = predicate
            __props__['requires_discount_code'] = requires_discount_code
            if sort_order is None:
                raise TypeError("Missing required property 'sort_order'")
            __props__['sort_order'] = sort_order
            __props__['stacking_mode'] = stacking_mode
            __props__['target'] = target
            __props__['valid_from'] = valid_from
            __props__['valid_until'] = valid_until
            if value is None:
                raise TypeError("Missing required property 'value'")
            __props__['value'] = value
            __props__['version'] = None
        super(CartDiscount, __self__).__init__(
            'commercetools:index/cartDiscount:CartDiscount',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            is_active: Optional[pulumi.Input[bool]] = None,
            key: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            predicate: Optional[pulumi.Input[str]] = None,
            requires_discount_code: Optional[pulumi.Input[bool]] = None,
            sort_order: Optional[pulumi.Input[str]] = None,
            stacking_mode: Optional[pulumi.Input[str]] = None,
            target: Optional[pulumi.Input[pulumi.InputType['CartDiscountTargetArgs']]] = None,
            valid_from: Optional[pulumi.Input[str]] = None,
            valid_until: Optional[pulumi.Input[str]] = None,
            value: Optional[pulumi.Input[pulumi.InputType['CartDiscountValueArgs']]] = None,
            version: Optional[pulumi.Input[int]] = None) -> 'CartDiscount':
        """
        Get an existing CartDiscount resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["description"] = description
        __props__["is_active"] = is_active
        __props__["key"] = key
        __props__["name"] = name
        __props__["predicate"] = predicate
        __props__["requires_discount_code"] = requires_discount_code
        __props__["sort_order"] = sort_order
        __props__["stacking_mode"] = stacking_mode
        __props__["target"] = target
        __props__["valid_from"] = valid_from
        __props__["valid_until"] = valid_until
        __props__["value"] = value
        __props__["version"] = version
        return CartDiscount(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Mapping[str, Any]]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def predicate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "predicate")

    @property
    @pulumi.getter(name="requiresDiscountCode")
    def requires_discount_code(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "requires_discount_code")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sort_order")

    @property
    @pulumi.getter(name="stackingMode")
    def stacking_mode(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "stacking_mode")

    @property
    @pulumi.getter
    def target(self) -> pulumi.Output[Optional['outputs.CartDiscountTarget']]:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="validFrom")
    def valid_from(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "valid_from")

    @property
    @pulumi.getter(name="validUntil")
    def valid_until(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "valid_until")

    @property
    @pulumi.getter
    def value(self) -> pulumi.Output['outputs.CartDiscountValue']:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[int]:
        return pulumi.get(self, "version")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

