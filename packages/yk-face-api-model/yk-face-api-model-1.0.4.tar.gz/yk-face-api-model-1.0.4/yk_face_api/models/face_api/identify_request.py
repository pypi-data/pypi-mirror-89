# coding: utf-8

from __future__ import absolute_import

from yk_face_api.models import util
from yk_face_api.models.base_model_ import Model


IdentifyRequestSchema = \
    {
        "type": "object",
        "required": [
            "template"
        ],
        "properties": {
            "template": {
                "type": "string"
            },
            "candidate_list_length": {
                "type": "integer",
                "minimum": 1,
                "default": 1
            },
            "minimum_score": {
                "type": "number",
                "format": "double",
                "minimum": -1,
                "default": -1
            },
            "gallery_id": {
                "type": "string"
            }
        }
    }


class IdentifyRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, template: str = None, candidate_list_length: int = 1, minimum_score: float = -1.0, gallery_id: str = None):  # noqa: E501
        """IdentifyRequest - a model defined in Swagger

        :param template: The template of this IdentifyRequest.  # noqa: E501
        :type template: str
        :param candidate_list_length: The candidate_list_length of this IdentifyRequest.  # noqa: E501
        :type candidate_list_length: int
        :param minimum_score: The minimum_score of this IdentifyRequest.  # noqa: E501
        :type minimum_score: float
        :param gallery_id: The gallery_id of this IdentifyRequest.  # noqa: E501
        :type gallery_id: str
        """
        self.swagger_types = {
            'template': str,
            'candidate_list_length': int,
            'minimum_score': float,
            'gallery_id': str
        }

        self.attribute_map = {
            'template': 'template',
            'candidate_list_length': 'candidate_list_length',
            'minimum_score': 'minimum_score',
            'gallery_id': 'gallery_id'
        }

        self._template = template
        self._candidate_list_length = candidate_list_length
        self._minimum_score = minimum_score
        self._gallery_id = gallery_id

    @classmethod
    def from_dict(cls, dikt) -> 'IdentifyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The identify_request of this IdentifyRequest.  # noqa: E501
        :rtype: IdentifyRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def template(self) -> str:
        """Gets the template of this IdentifyRequest.


        :return: The template of this IdentifyRequest.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template: str):
        """Sets the template of this IdentifyRequest.


        :param template: The template of this IdentifyRequest.
        :type template: str
        """
        if template is None:
            raise ValueError("Invalid value for `template`, must not be `None`")  # noqa: E501

        self._template = template

    @property
    def candidate_list_length(self) -> int:
        """Gets the candidate_list_length of this IdentifyRequest.


        :return: The candidate_list_length of this IdentifyRequest.
        :rtype: int
        """
        return self._candidate_list_length

    @candidate_list_length.setter
    def candidate_list_length(self, candidate_list_length: int):
        """Sets the candidate_list_length of this IdentifyRequest.


        :param candidate_list_length: The candidate_list_length of this IdentifyRequest.
        :type candidate_list_length: int
        """
        if candidate_list_length is not None and candidate_list_length < 1:  # noqa: E501
            raise ValueError("Invalid value for `candidate_list_length`, must be a value greater than or equal to `1`")  # noqa: E501

        self._candidate_list_length = candidate_list_length

    @property
    def minimum_score(self) -> float:
        """Gets the minimum_score of this IdentifyRequest.


        :return: The minimum_score of this IdentifyRequest.
        :rtype: float
        """
        return self._minimum_score

    @minimum_score.setter
    def minimum_score(self, minimum_score: float):
        """Sets the minimum_score of this IdentifyRequest.


        :param minimum_score: The minimum_score of this IdentifyRequest.
        :type minimum_score: float
        """
        if minimum_score is not None and minimum_score < -1:  # noqa: E501
            raise ValueError("Invalid value for `minimum_score`, must be a value greater than or equal to `-1`")  # noqa: E501

        self._minimum_score = minimum_score

    @property
    def gallery_id(self) -> str:
        """Gets the gallery_id of this IdentifyRequest.


        :return: The gallery_id of this IdentifyRequest.
        :rtype: str
        """
        return self._gallery_id

    @gallery_id.setter
    def gallery_id(self, gallery_id: str):
        """Sets the gallery_id of this IdentifyRequest.


        :param gallery_id: The gallery_id of this IdentifyRequest.
        :type gallery_id: str
        """

        self._gallery_id = gallery_id
