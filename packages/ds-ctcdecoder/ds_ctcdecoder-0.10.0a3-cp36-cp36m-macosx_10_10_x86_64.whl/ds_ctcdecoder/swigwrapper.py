# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _swigwrapper
else:
    import _swigwrapper

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _swigwrapper.delete_SwigPyIterator

    def value(self):
        return _swigwrapper.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _swigwrapper.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _swigwrapper.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _swigwrapper.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _swigwrapper.SwigPyIterator_equal(self, x)

    def copy(self):
        return _swigwrapper.SwigPyIterator_copy(self)

    def next(self):
        return _swigwrapper.SwigPyIterator_next(self)

    def __next__(self):
        return _swigwrapper.SwigPyIterator___next__(self)

    def previous(self):
        return _swigwrapper.SwigPyIterator_previous(self)

    def advance(self, n):
        return _swigwrapper.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _swigwrapper.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _swigwrapper.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _swigwrapper.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _swigwrapper.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _swigwrapper.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _swigwrapper.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _swigwrapper:
_swigwrapper.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _swigwrapper.SHARED_PTR_DISOWN
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigwrapper.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigwrapper.StringVector___nonzero__(self)

    def __bool__(self):
        return _swigwrapper.StringVector___bool__(self)

    def __len__(self):
        return _swigwrapper.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _swigwrapper.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigwrapper.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigwrapper.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigwrapper.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigwrapper.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigwrapper.StringVector___setitem__(self, *args)

    def pop(self):
        return _swigwrapper.StringVector_pop(self)

    def append(self, x):
        return _swigwrapper.StringVector_append(self, x)

    def empty(self):
        return _swigwrapper.StringVector_empty(self)

    def size(self):
        return _swigwrapper.StringVector_size(self)

    def swap(self, v):
        return _swigwrapper.StringVector_swap(self, v)

    def begin(self):
        return _swigwrapper.StringVector_begin(self)

    def end(self):
        return _swigwrapper.StringVector_end(self)

    def rbegin(self):
        return _swigwrapper.StringVector_rbegin(self)

    def rend(self):
        return _swigwrapper.StringVector_rend(self)

    def clear(self):
        return _swigwrapper.StringVector_clear(self)

    def get_allocator(self):
        return _swigwrapper.StringVector_get_allocator(self)

    def pop_back(self):
        return _swigwrapper.StringVector_pop_back(self)

    def erase(self, *args):
        return _swigwrapper.StringVector_erase(self, *args)

    def __init__(self, *args):
        _swigwrapper.StringVector_swiginit(self, _swigwrapper.new_StringVector(*args))

    def push_back(self, x):
        return _swigwrapper.StringVector_push_back(self, x)

    def front(self):
        return _swigwrapper.StringVector_front(self)

    def back(self):
        return _swigwrapper.StringVector_back(self)

    def assign(self, n, x):
        return _swigwrapper.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _swigwrapper.StringVector_resize(self, *args)

    def insert(self, *args):
        return _swigwrapper.StringVector_insert(self, *args)

    def reserve(self, n):
        return _swigwrapper.StringVector_reserve(self, n)

    def capacity(self):
        return _swigwrapper.StringVector_capacity(self)
    __swig_destroy__ = _swigwrapper.delete_StringVector

# Register StringVector in _swigwrapper:
_swigwrapper.StringVector_swigregister(StringVector)

class UnsignedIntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigwrapper.UnsignedIntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigwrapper.UnsignedIntVector___nonzero__(self)

    def __bool__(self):
        return _swigwrapper.UnsignedIntVector___bool__(self)

    def __len__(self):
        return _swigwrapper.UnsignedIntVector___len__(self)

    def __getslice__(self, i, j):
        return _swigwrapper.UnsignedIntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigwrapper.UnsignedIntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigwrapper.UnsignedIntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigwrapper.UnsignedIntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigwrapper.UnsignedIntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigwrapper.UnsignedIntVector___setitem__(self, *args)

    def pop(self):
        return _swigwrapper.UnsignedIntVector_pop(self)

    def append(self, x):
        return _swigwrapper.UnsignedIntVector_append(self, x)

    def empty(self):
        return _swigwrapper.UnsignedIntVector_empty(self)

    def size(self):
        return _swigwrapper.UnsignedIntVector_size(self)

    def swap(self, v):
        return _swigwrapper.UnsignedIntVector_swap(self, v)

    def begin(self):
        return _swigwrapper.UnsignedIntVector_begin(self)

    def end(self):
        return _swigwrapper.UnsignedIntVector_end(self)

    def rbegin(self):
        return _swigwrapper.UnsignedIntVector_rbegin(self)

    def rend(self):
        return _swigwrapper.UnsignedIntVector_rend(self)

    def clear(self):
        return _swigwrapper.UnsignedIntVector_clear(self)

    def get_allocator(self):
        return _swigwrapper.UnsignedIntVector_get_allocator(self)

    def pop_back(self):
        return _swigwrapper.UnsignedIntVector_pop_back(self)

    def erase(self, *args):
        return _swigwrapper.UnsignedIntVector_erase(self, *args)

    def __init__(self, *args):
        _swigwrapper.UnsignedIntVector_swiginit(self, _swigwrapper.new_UnsignedIntVector(*args))

    def push_back(self, x):
        return _swigwrapper.UnsignedIntVector_push_back(self, x)

    def front(self):
        return _swigwrapper.UnsignedIntVector_front(self)

    def back(self):
        return _swigwrapper.UnsignedIntVector_back(self)

    def assign(self, n, x):
        return _swigwrapper.UnsignedIntVector_assign(self, n, x)

    def resize(self, *args):
        return _swigwrapper.UnsignedIntVector_resize(self, *args)

    def insert(self, *args):
        return _swigwrapper.UnsignedIntVector_insert(self, *args)

    def reserve(self, n):
        return _swigwrapper.UnsignedIntVector_reserve(self, n)

    def capacity(self):
        return _swigwrapper.UnsignedIntVector_capacity(self)
    __swig_destroy__ = _swigwrapper.delete_UnsignedIntVector

# Register UnsignedIntVector in _swigwrapper:
_swigwrapper.UnsignedIntVector_swigregister(UnsignedIntVector)

class OutputVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigwrapper.OutputVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigwrapper.OutputVector___nonzero__(self)

    def __bool__(self):
        return _swigwrapper.OutputVector___bool__(self)

    def __len__(self):
        return _swigwrapper.OutputVector___len__(self)

    def __getslice__(self, i, j):
        return _swigwrapper.OutputVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigwrapper.OutputVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigwrapper.OutputVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigwrapper.OutputVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigwrapper.OutputVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigwrapper.OutputVector___setitem__(self, *args)

    def pop(self):
        return _swigwrapper.OutputVector_pop(self)

    def append(self, x):
        return _swigwrapper.OutputVector_append(self, x)

    def empty(self):
        return _swigwrapper.OutputVector_empty(self)

    def size(self):
        return _swigwrapper.OutputVector_size(self)

    def swap(self, v):
        return _swigwrapper.OutputVector_swap(self, v)

    def begin(self):
        return _swigwrapper.OutputVector_begin(self)

    def end(self):
        return _swigwrapper.OutputVector_end(self)

    def rbegin(self):
        return _swigwrapper.OutputVector_rbegin(self)

    def rend(self):
        return _swigwrapper.OutputVector_rend(self)

    def clear(self):
        return _swigwrapper.OutputVector_clear(self)

    def get_allocator(self):
        return _swigwrapper.OutputVector_get_allocator(self)

    def pop_back(self):
        return _swigwrapper.OutputVector_pop_back(self)

    def erase(self, *args):
        return _swigwrapper.OutputVector_erase(self, *args)

    def __init__(self, *args):
        _swigwrapper.OutputVector_swiginit(self, _swigwrapper.new_OutputVector(*args))

    def push_back(self, x):
        return _swigwrapper.OutputVector_push_back(self, x)

    def front(self):
        return _swigwrapper.OutputVector_front(self)

    def back(self):
        return _swigwrapper.OutputVector_back(self)

    def assign(self, n, x):
        return _swigwrapper.OutputVector_assign(self, n, x)

    def resize(self, *args):
        return _swigwrapper.OutputVector_resize(self, *args)

    def insert(self, *args):
        return _swigwrapper.OutputVector_insert(self, *args)

    def reserve(self, n):
        return _swigwrapper.OutputVector_reserve(self, n)

    def capacity(self):
        return _swigwrapper.OutputVector_capacity(self)
    __swig_destroy__ = _swigwrapper.delete_OutputVector

# Register OutputVector in _swigwrapper:
_swigwrapper.OutputVector_swigregister(OutputVector)

class OutputVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigwrapper.OutputVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigwrapper.OutputVectorVector___nonzero__(self)

    def __bool__(self):
        return _swigwrapper.OutputVectorVector___bool__(self)

    def __len__(self):
        return _swigwrapper.OutputVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _swigwrapper.OutputVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigwrapper.OutputVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigwrapper.OutputVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigwrapper.OutputVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigwrapper.OutputVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigwrapper.OutputVectorVector___setitem__(self, *args)

    def pop(self):
        return _swigwrapper.OutputVectorVector_pop(self)

    def append(self, x):
        return _swigwrapper.OutputVectorVector_append(self, x)

    def empty(self):
        return _swigwrapper.OutputVectorVector_empty(self)

    def size(self):
        return _swigwrapper.OutputVectorVector_size(self)

    def swap(self, v):
        return _swigwrapper.OutputVectorVector_swap(self, v)

    def begin(self):
        return _swigwrapper.OutputVectorVector_begin(self)

    def end(self):
        return _swigwrapper.OutputVectorVector_end(self)

    def rbegin(self):
        return _swigwrapper.OutputVectorVector_rbegin(self)

    def rend(self):
        return _swigwrapper.OutputVectorVector_rend(self)

    def clear(self):
        return _swigwrapper.OutputVectorVector_clear(self)

    def get_allocator(self):
        return _swigwrapper.OutputVectorVector_get_allocator(self)

    def pop_back(self):
        return _swigwrapper.OutputVectorVector_pop_back(self)

    def erase(self, *args):
        return _swigwrapper.OutputVectorVector_erase(self, *args)

    def __init__(self, *args):
        _swigwrapper.OutputVectorVector_swiginit(self, _swigwrapper.new_OutputVectorVector(*args))

    def push_back(self, x):
        return _swigwrapper.OutputVectorVector_push_back(self, x)

    def front(self):
        return _swigwrapper.OutputVectorVector_front(self)

    def back(self):
        return _swigwrapper.OutputVectorVector_back(self)

    def assign(self, n, x):
        return _swigwrapper.OutputVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _swigwrapper.OutputVectorVector_resize(self, *args)

    def insert(self, *args):
        return _swigwrapper.OutputVectorVector_insert(self, *args)

    def reserve(self, n):
        return _swigwrapper.OutputVectorVector_reserve(self, n)

    def capacity(self):
        return _swigwrapper.OutputVectorVector_capacity(self)
    __swig_destroy__ = _swigwrapper.delete_OutputVectorVector

# Register OutputVectorVector in _swigwrapper:
_swigwrapper.OutputVectorVector_swigregister(OutputVectorVector)

class Map(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigwrapper.Map_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigwrapper.Map___nonzero__(self)

    def __bool__(self):
        return _swigwrapper.Map___bool__(self)

    def __len__(self):
        return _swigwrapper.Map___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _swigwrapper.Map___getitem__(self, key)

    def __delitem__(self, key):
        return _swigwrapper.Map___delitem__(self, key)

    def has_key(self, key):
        return _swigwrapper.Map_has_key(self, key)

    def keys(self):
        return _swigwrapper.Map_keys(self)

    def values(self):
        return _swigwrapper.Map_values(self)

    def items(self):
        return _swigwrapper.Map_items(self)

    def __contains__(self, key):
        return _swigwrapper.Map___contains__(self, key)

    def key_iterator(self):
        return _swigwrapper.Map_key_iterator(self)

    def value_iterator(self):
        return _swigwrapper.Map_value_iterator(self)

    def __setitem__(self, *args):
        return _swigwrapper.Map___setitem__(self, *args)

    def asdict(self):
        return _swigwrapper.Map_asdict(self)

    def __init__(self, *args):
        _swigwrapper.Map_swiginit(self, _swigwrapper.new_Map(*args))

    def empty(self):
        return _swigwrapper.Map_empty(self)

    def size(self):
        return _swigwrapper.Map_size(self)

    def swap(self, v):
        return _swigwrapper.Map_swap(self, v)

    def begin(self):
        return _swigwrapper.Map_begin(self)

    def end(self):
        return _swigwrapper.Map_end(self)

    def clear(self):
        return _swigwrapper.Map_clear(self)

    def get_allocator(self):
        return _swigwrapper.Map_get_allocator(self)

    def count(self, x):
        return _swigwrapper.Map_count(self, x)

    def erase(self, *args):
        return _swigwrapper.Map_erase(self, *args)

    def find(self, x):
        return _swigwrapper.Map_find(self, x)
    __swig_destroy__ = _swigwrapper.delete_Map

# Register Map in _swigwrapper:
_swigwrapper.Map_swigregister(Map)

class Alphabet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _swigwrapper.Alphabet_swiginit(self, _swigwrapper.new_Alphabet(*args))
    __swig_destroy__ = _swigwrapper.delete_Alphabet

    def init(self, config_file):
        return _swigwrapper.Alphabet_init(self, config_file)

    def Serialize(self):
        return _swigwrapper.Alphabet_Serialize(self)

    def Deserialize(self, buffer, buffer_size):
        return _swigwrapper.Alphabet_Deserialize(self, buffer, buffer_size)

    def GetSize(self):
        return _swigwrapper.Alphabet_GetSize(self)

    def IsSpace(self, label):
        return _swigwrapper.Alphabet_IsSpace(self, label)

    def GetSpaceLabel(self):
        return _swigwrapper.Alphabet_GetSpaceLabel(self)

    def CanEncodeSingle(self, string):
        return _swigwrapper.Alphabet_CanEncodeSingle(self, string)

    def CanEncode(self, string):
        return _swigwrapper.Alphabet_CanEncode(self, string)

    def DecodeSingle(self, label):
        return _swigwrapper.Alphabet_DecodeSingle(self, label)

    def EncodeSingle(self, string):
        return _swigwrapper.Alphabet_EncodeSingle(self, string)

    def Decode(self, *args):
        return _swigwrapper.Alphabet_Decode(self, *args)

    def Encode(self, input):
        return _swigwrapper.Alphabet_Encode(self, input)

# Register Alphabet in _swigwrapper:
_swigwrapper.Alphabet_swigregister(Alphabet)

class UTF8Alphabet(Alphabet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _swigwrapper.UTF8Alphabet_swiginit(self, _swigwrapper.new_UTF8Alphabet())

    def init(self, arg2):
        return _swigwrapper.UTF8Alphabet_init(self, arg2)

    def CanEncodeSingle(self, string):
        return _swigwrapper.UTF8Alphabet_CanEncodeSingle(self, string)

    def CanEncode(self, string):
        return _swigwrapper.UTF8Alphabet_CanEncode(self, string)

    def Encode(self, input):
        return _swigwrapper.UTF8Alphabet_Encode(self, input)
    __swig_destroy__ = _swigwrapper.delete_UTF8Alphabet

# Register UTF8Alphabet in _swigwrapper:
_swigwrapper.UTF8Alphabet_swigregister(UTF8Alphabet)

class Output(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    confidence = property(_swigwrapper.Output_confidence_get, _swigwrapper.Output_confidence_set)
    tokens = property(_swigwrapper.Output_tokens_get, _swigwrapper.Output_tokens_set)
    timesteps = property(_swigwrapper.Output_timesteps_get, _swigwrapper.Output_timesteps_set)

    def __init__(self):
        _swigwrapper.Output_swiginit(self, _swigwrapper.new_Output())
    __swig_destroy__ = _swigwrapper.delete_Output

# Register Output in _swigwrapper:
_swigwrapper.Output_swigregister(Output)

class Scorer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _swigwrapper.Scorer_swiginit(self, _swigwrapper.new_Scorer())
    __swig_destroy__ = _swigwrapper.delete_Scorer

    def init(self, *args):
        return _swigwrapper.Scorer_init(self, *args)

    def get_log_cond_prob(self, *args):
        return _swigwrapper.Scorer_get_log_cond_prob(self, *args)

    def get_max_order(self):
        return _swigwrapper.Scorer_get_max_order(self)

    def is_utf8_mode(self):
        return _swigwrapper.Scorer_is_utf8_mode(self)

    def reset_params(self, alpha, beta):
        return _swigwrapper.Scorer_reset_params(self, alpha, beta)

    def set_utf8_mode(self, utf8):
        return _swigwrapper.Scorer_set_utf8_mode(self, utf8)

    def make_ngram(self, prefix):
        return _swigwrapper.Scorer_make_ngram(self, prefix)

    def split_labels_into_scored_units(self, labels):
        return _swigwrapper.Scorer_split_labels_into_scored_units(self, labels)

    def set_alphabet(self, alphabet):
        return _swigwrapper.Scorer_set_alphabet(self, alphabet)

    def save_dictionary(self, path, append_instead_of_overwrite=False):
        return _swigwrapper.Scorer_save_dictionary(self, path, append_instead_of_overwrite)

    def is_scoring_boundary(self, prefix, new_label):
        return _swigwrapper.Scorer_is_scoring_boundary(self, prefix, new_label)

    def fill_dictionary(self, vocabulary):
        return _swigwrapper.Scorer_fill_dictionary(self, vocabulary)

    def load_lm(self, lm_path):
        return _swigwrapper.Scorer_load_lm(self, lm_path)
    alpha = property(_swigwrapper.Scorer_alpha_get, _swigwrapper.Scorer_alpha_set)
    beta = property(_swigwrapper.Scorer_beta_get, _swigwrapper.Scorer_beta_set)

# Register Scorer in _swigwrapper:
_swigwrapper.Scorer_swigregister(Scorer)
cvar = _swigwrapper.cvar
OOV_SCORE = cvar.OOV_SCORE
START_TOKEN = cvar.START_TOKEN
UNK_TOKEN = cvar.UNK_TOKEN
END_TOKEN = cvar.END_TOKEN

class DecoderState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _swigwrapper.DecoderState_swiginit(self, _swigwrapper.new_DecoderState())
    __swig_destroy__ = _swigwrapper.delete_DecoderState

    def init(self, alphabet, beam_size, cutoff_prob, cutoff_top_n, ext_scorer, hot_words):
        return _swigwrapper.DecoderState_init(self, alphabet, beam_size, cutoff_prob, cutoff_top_n, ext_scorer, hot_words)

    def next(self, probs):
        return _swigwrapper.DecoderState_next(self, probs)

    def decode(self, num_results=1):
        return _swigwrapper.DecoderState_decode(self, num_results)

# Register DecoderState in _swigwrapper:
_swigwrapper.DecoderState_swigregister(DecoderState)


def ctc_beam_search_decoder(probs, alphabet, beam_size, cutoff_prob, cutoff_top_n, ext_scorer, hot_words, num_results=1):
    return _swigwrapper.ctc_beam_search_decoder(probs, alphabet, beam_size, cutoff_prob, cutoff_top_n, ext_scorer, hot_words, num_results)

def ctc_beam_search_decoder_batch(probs, seq_lengths, alphabet, beam_size, num_processes, cutoff_prob, cutoff_top_n, ext_scorer, hot_words, num_results=1):
    return _swigwrapper.ctc_beam_search_decoder_batch(probs, seq_lengths, alphabet, beam_size, num_processes, cutoff_prob, cutoff_top_n, ext_scorer, hot_words, num_results)
__version__ = _swigwrapper.__version__
__git_version__ = _swigwrapper.__git_version__
DS_ERR_OK = _swigwrapper.DS_ERR_OK
DS_ERR_NO_MODEL = _swigwrapper.DS_ERR_NO_MODEL
DS_ERR_INVALID_ALPHABET = _swigwrapper.DS_ERR_INVALID_ALPHABET
DS_ERR_INVALID_SHAPE = _swigwrapper.DS_ERR_INVALID_SHAPE
DS_ERR_INVALID_SCORER = _swigwrapper.DS_ERR_INVALID_SCORER
DS_ERR_MODEL_INCOMPATIBLE = _swigwrapper.DS_ERR_MODEL_INCOMPATIBLE
DS_ERR_SCORER_NOT_ENABLED = _swigwrapper.DS_ERR_SCORER_NOT_ENABLED
DS_ERR_SCORER_UNREADABLE = _swigwrapper.DS_ERR_SCORER_UNREADABLE
DS_ERR_SCORER_INVALID_LM = _swigwrapper.DS_ERR_SCORER_INVALID_LM
DS_ERR_SCORER_NO_TRIE = _swigwrapper.DS_ERR_SCORER_NO_TRIE
DS_ERR_SCORER_INVALID_TRIE = _swigwrapper.DS_ERR_SCORER_INVALID_TRIE
DS_ERR_SCORER_VERSION_MISMATCH = _swigwrapper.DS_ERR_SCORER_VERSION_MISMATCH
DS_ERR_FAIL_INIT_MMAP = _swigwrapper.DS_ERR_FAIL_INIT_MMAP
DS_ERR_FAIL_INIT_SESS = _swigwrapper.DS_ERR_FAIL_INIT_SESS
DS_ERR_FAIL_INTERPRETER = _swigwrapper.DS_ERR_FAIL_INTERPRETER
DS_ERR_FAIL_RUN_SESS = _swigwrapper.DS_ERR_FAIL_RUN_SESS
DS_ERR_FAIL_CREATE_STREAM = _swigwrapper.DS_ERR_FAIL_CREATE_STREAM
DS_ERR_FAIL_READ_PROTOBUF = _swigwrapper.DS_ERR_FAIL_READ_PROTOBUF
DS_ERR_FAIL_CREATE_SESS = _swigwrapper.DS_ERR_FAIL_CREATE_SESS
DS_ERR_FAIL_CREATE_MODEL = _swigwrapper.DS_ERR_FAIL_CREATE_MODEL
DS_ERR_FAIL_INSERT_HOTWORD = _swigwrapper.DS_ERR_FAIL_INSERT_HOTWORD
DS_ERR_FAIL_CLEAR_HOTWORD = _swigwrapper.DS_ERR_FAIL_CLEAR_HOTWORD
DS_ERR_FAIL_ERASE_HOTWORD = _swigwrapper.DS_ERR_FAIL_ERASE_HOTWORD


