# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from kobe import kobe_pb2 as kobe__pb2


class KobeApiStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateProject = channel.unary_unary(
                '/api.KobeApi/CreateProject',
                request_serializer=kobe__pb2.CreateProjectRequest.SerializeToString,
                response_deserializer=kobe__pb2.CreateProjectResponse.FromString,
                )
        self.ListProject = channel.unary_unary(
                '/api.KobeApi/ListProject',
                request_serializer=kobe__pb2.ListProjectRequest.SerializeToString,
                response_deserializer=kobe__pb2.ListProjectResponse.FromString,
                )
        self.GetInventory = channel.unary_unary(
                '/api.KobeApi/GetInventory',
                request_serializer=kobe__pb2.GetInventoryRequest.SerializeToString,
                response_deserializer=kobe__pb2.GetInventoryResponse.FromString,
                )
        self.RunPlaybook = channel.unary_unary(
                '/api.KobeApi/RunPlaybook',
                request_serializer=kobe__pb2.RunPlaybookRequest.SerializeToString,
                response_deserializer=kobe__pb2.RunPlaybookResult.FromString,
                )
        self.RunAdhoc = channel.unary_unary(
                '/api.KobeApi/RunAdhoc',
                request_serializer=kobe__pb2.RunAdhocRequest.SerializeToString,
                response_deserializer=kobe__pb2.RunAdhocResult.FromString,
                )
        self.WatchResult = channel.unary_stream(
                '/api.KobeApi/WatchResult',
                request_serializer=kobe__pb2.WatchRequest.SerializeToString,
                response_deserializer=kobe__pb2.WatchStream.FromString,
                )
        self.GetResult = channel.unary_unary(
                '/api.KobeApi/GetResult',
                request_serializer=kobe__pb2.GetResultRequest.SerializeToString,
                response_deserializer=kobe__pb2.GetResultResponse.FromString,
                )
        self.ListResult = channel.unary_unary(
                '/api.KobeApi/ListResult',
                request_serializer=kobe__pb2.ListResultRequest.SerializeToString,
                response_deserializer=kobe__pb2.ListResultResponse.FromString,
                )
        self.TestHello = channel.unary_unary(
                '/api.KobeApi/TestHello',
                request_serializer=kobe__pb2.HelloRequest.SerializeToString,
                response_deserializer=kobe__pb2.HelloResponse.FromString,
                )
        self.SetAnsibleResult = channel.unary_unary(
                '/api.KobeApi/SetAnsibleResult',
                request_serializer=kobe__pb2.SetAnsibleResultRequest.SerializeToString,
                response_deserializer=kobe__pb2.SetAnsibleResultResponse.FromString,
                )


class KobeApiServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateProject(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListProject(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInventory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunPlaybook(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunAdhoc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WatchResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestHello(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetAnsibleResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KobeApiServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateProject': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateProject,
                    request_deserializer=kobe__pb2.CreateProjectRequest.FromString,
                    response_serializer=kobe__pb2.CreateProjectResponse.SerializeToString,
            ),
            'ListProject': grpc.unary_unary_rpc_method_handler(
                    servicer.ListProject,
                    request_deserializer=kobe__pb2.ListProjectRequest.FromString,
                    response_serializer=kobe__pb2.ListProjectResponse.SerializeToString,
            ),
            'GetInventory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInventory,
                    request_deserializer=kobe__pb2.GetInventoryRequest.FromString,
                    response_serializer=kobe__pb2.GetInventoryResponse.SerializeToString,
            ),
            'RunPlaybook': grpc.unary_unary_rpc_method_handler(
                    servicer.RunPlaybook,
                    request_deserializer=kobe__pb2.RunPlaybookRequest.FromString,
                    response_serializer=kobe__pb2.RunPlaybookResult.SerializeToString,
            ),
            'RunAdhoc': grpc.unary_unary_rpc_method_handler(
                    servicer.RunAdhoc,
                    request_deserializer=kobe__pb2.RunAdhocRequest.FromString,
                    response_serializer=kobe__pb2.RunAdhocResult.SerializeToString,
            ),
            'WatchResult': grpc.unary_stream_rpc_method_handler(
                    servicer.WatchResult,
                    request_deserializer=kobe__pb2.WatchRequest.FromString,
                    response_serializer=kobe__pb2.WatchStream.SerializeToString,
            ),
            'GetResult': grpc.unary_unary_rpc_method_handler(
                    servicer.GetResult,
                    request_deserializer=kobe__pb2.GetResultRequest.FromString,
                    response_serializer=kobe__pb2.GetResultResponse.SerializeToString,
            ),
            'ListResult': grpc.unary_unary_rpc_method_handler(
                    servicer.ListResult,
                    request_deserializer=kobe__pb2.ListResultRequest.FromString,
                    response_serializer=kobe__pb2.ListResultResponse.SerializeToString,
            ),
            'TestHello': grpc.unary_unary_rpc_method_handler(
                    servicer.TestHello,
                    request_deserializer=kobe__pb2.HelloRequest.FromString,
                    response_serializer=kobe__pb2.HelloResponse.SerializeToString,
            ),
            'SetAnsibleResult': grpc.unary_unary_rpc_method_handler(
                    servicer.SetAnsibleResult,
                    request_deserializer=kobe__pb2.SetAnsibleResultRequest.FromString,
                    response_serializer=kobe__pb2.SetAnsibleResultResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.KobeApi', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class KobeApi(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.KobeApi/CreateProject',
            kobe__pb2.CreateProjectRequest.SerializeToString,
            kobe__pb2.CreateProjectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.KobeApi/ListProject',
            kobe__pb2.ListProjectRequest.SerializeToString,
            kobe__pb2.ListProjectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetInventory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.KobeApi/GetInventory',
            kobe__pb2.GetInventoryRequest.SerializeToString,
            kobe__pb2.GetInventoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunPlaybook(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.KobeApi/RunPlaybook',
            kobe__pb2.RunPlaybookRequest.SerializeToString,
            kobe__pb2.RunPlaybookResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunAdhoc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.KobeApi/RunAdhoc',
            kobe__pb2.RunAdhocRequest.SerializeToString,
            kobe__pb2.RunAdhocResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WatchResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.KobeApi/WatchResult',
            kobe__pb2.WatchRequest.SerializeToString,
            kobe__pb2.WatchStream.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.KobeApi/GetResult',
            kobe__pb2.GetResultRequest.SerializeToString,
            kobe__pb2.GetResultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.KobeApi/ListResult',
            kobe__pb2.ListResultRequest.SerializeToString,
            kobe__pb2.ListResultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TestHello(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.KobeApi/TestHello',
            kobe__pb2.HelloRequest.SerializeToString,
            kobe__pb2.HelloResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetAnsibleResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.KobeApi/SetAnsibleResult',
            kobe__pb2.SetAnsibleResultRequest.SerializeToString,
            kobe__pb2.SetAnsibleResultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
