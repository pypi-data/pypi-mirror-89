# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = ['DiscountCode']


class DiscountCode(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cart_discounts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 code: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_active: Optional[pulumi.Input[bool]] = None,
                 max_applications: Optional[pulumi.Input[int]] = None,
                 max_applications_per_customer: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 predicate: Optional[pulumi.Input[str]] = None,
                 valid_from: Optional[pulumi.Input[str]] = None,
                 valid_until: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Create a DiscountCode resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if cart_discounts is None:
                raise TypeError("Missing required property 'cart_discounts'")
            __props__['cart_discounts'] = cart_discounts
            if code is None:
                raise TypeError("Missing required property 'code'")
            __props__['code'] = code
            __props__['description'] = description
            __props__['groups'] = groups
            __props__['is_active'] = is_active
            __props__['max_applications'] = max_applications
            __props__['max_applications_per_customer'] = max_applications_per_customer
            __props__['name'] = name
            __props__['predicate'] = predicate
            __props__['valid_from'] = valid_from
            __props__['valid_until'] = valid_until
            __props__['version'] = None
        super(DiscountCode, __self__).__init__(
            'commercetools:index/discountCode:DiscountCode',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cart_discounts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            code: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            is_active: Optional[pulumi.Input[bool]] = None,
            max_applications: Optional[pulumi.Input[int]] = None,
            max_applications_per_customer: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            predicate: Optional[pulumi.Input[str]] = None,
            valid_from: Optional[pulumi.Input[str]] = None,
            valid_until: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[int]] = None) -> 'DiscountCode':
        """
        Get an existing DiscountCode resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["cart_discounts"] = cart_discounts
        __props__["code"] = code
        __props__["description"] = description
        __props__["groups"] = groups
        __props__["is_active"] = is_active
        __props__["max_applications"] = max_applications
        __props__["max_applications_per_customer"] = max_applications_per_customer
        __props__["name"] = name
        __props__["predicate"] = predicate
        __props__["valid_from"] = valid_from
        __props__["valid_until"] = valid_until
        __props__["version"] = version
        return DiscountCode(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cartDiscounts")
    def cart_discounts(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "cart_discounts")

    @property
    @pulumi.getter
    def code(self) -> pulumi.Output[str]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def groups(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter(name="maxApplications")
    def max_applications(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "max_applications")

    @property
    @pulumi.getter(name="maxApplicationsPerCustomer")
    def max_applications_per_customer(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "max_applications_per_customer")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Mapping[str, Any]]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def predicate(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "predicate")

    @property
    @pulumi.getter(name="validFrom")
    def valid_from(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "valid_from")

    @property
    @pulumi.getter(name="validUntil")
    def valid_until(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "valid_until")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[int]:
        return pulumi.get(self, "version")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

