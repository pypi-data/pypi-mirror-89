# -*- coding: utf-8 -*-

"""
    weather_apiiii

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import weather_apiiii.models.list

class CityWeather(object):

    """Implementation of the 'CityWeather' model.

    TODO: type model description here.

    Attributes:
        message (string): TODO: type description here.
        cod (string): TODO: type description here.
        count (int): TODO: type description here.
        list (list of List): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "message":'message',
        "cod":'cod',
        "count":'count',
        "list":'list'
    }

    def __init__(self,
                 message=None,
                 cod=None,
                 count=None,
                 list=None):
        """Constructor for the CityWeather class"""

        # Initialize members of the class
        self.message = message
        self.cod = cod
        self.count = count
        self.list = list


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        message = dictionary.get('message')
        cod = dictionary.get('cod')
        count = dictionary.get('count')
        list = None
        if dictionary.get('list') != None:
            list = list()
            for structure in dictionary.get('list'):
                list.append(weather_apiiii.models.list.List.from_dictionary(structure))

        # Return an object of this model
        return cls(message,
                   cod,
                   count,
                   list)


