openapi: "3.0.3"

info:
  title: "{{title}}"
  version: "0.5"

servers:
  - url: "/{{url_prefix}}"

paths:
  /users:
    get:
      tags:
        - users
      summary: Get all users
      operationId: tensorhive.controllers.user.get
      responses:
        200:
          description: {{RESPONSES['general']['success']}}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserToDisplay'
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        422:
          description: {{RESPONSES['general']['auth_error']}}
      security:
        - Bearer: []
  /users/{id}:
    get:
      tags:
        - users
      summary: Get user with given ID
      operationId: tensorhive.controllers.user.get_by_id
      parameters:
        - description: User ID
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: {{RESPONSES['general']['success']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['user']['get']['success']}}
                  user:
                    $ref: '#/components/schemas/UserToDisplay'
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        404:
          description: {{RESPONSES['user']['not_found']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['user']['not_found']}}
        422:
          description: {{RESPONSES['general']['auth_error']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
  /user/create:
    post:
      tags:
        - users
      summary: Create new user
      operationId: tensorhive.controllers.user.create
      requestBody:
        description: User object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserForm'
              x-body-name: newUser
      responses:
        201:
          description: {{RESPONSES['user']['create']['success']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['user']['create']['success']}}
                  user:
                    $ref: '#/components/schemas/UserToDisplay'
        400:
          description: {{RESPONSES['general']['bad_request']}}
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        409:
          description: {{RESPONSES['user']['create']['failure']['duplicate']}}
        422:
          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['user']['create']['failure']['invalid']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
  /user:
    put:
      tags:
        - users
      summary: Update existing user
      operationId: tensorhive.controllers.user.update
      requestBody:
        description: User object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateForm'
              x-body-name: newValues
      responses:
        201:
          description: {{RESPONSES['user']['update']['success']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['user']['update']['success']}}
                  user:
                    $ref: '#/components/schemas/UserToDisplay'
        400:
          description: {{RESPONSES['general']['bad_request']}}
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        409:
          description: {{RESPONSES['user']['create']['failure']['duplicate']}}
        422:
          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['user']['create']['failure']['invalid']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
  /user/ssh_signup:
    post:
      tags:
        - users
      summary: Create new user account based on SSH authentication
      operationId: tensorhive.controllers.user.ssh_signup
      requestBody:
        description: User object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserForm'
              x-body-name: user
      responses:
        201:
          description: {{RESPONSES['user']['create']['success']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['user']['create']['success']}}
                  user:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserToDisplay'
        400:
          description: {{RESPONSES['general']['bad_request']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
        409:
          description: {{RESPONSES['user']['create']['failure']['duplicate']}}
        422:
          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['user']['create']['failure']['invalid']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
  /user/delete/{id}:
    delete:
      tags:
        - users
      summary: Delete user
      operationId: tensorhive.controllers.user.delete
      parameters:
        - description: User ID
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: {{RESPONSES['user']['delete']['success']}}
          content:
            application/json:
              schema:
                example:
                  msg: {{RESPONSES['user']['delete']['success']}}
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        404:
          description: {{RESPONSES['user']['not_found']}}
        422:
          description: {{RESPONSES['general']['auth_error']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
  /user/logout:
    delete:
      tags:
        - authentication
      summary: Logout user using access token
      operationId: tensorhive.controllers.user.logout_with_access_token
      responses:
        200:
          description: {{RESPONSES['user']['logout']['success']}}
          content:
            application/json:
              schema:
                example:
                  msg: {{RESPONSES['user']['logout']['success']}}
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        422:
          description: {{RESPONSES['general']['auth_error']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
  /user/logout/refresh_token:
    delete:
      tags:
        - authentication
      summary: Logout user using refresh token
      operationId: tensorhive.controllers.user.logout_with_refresh_token
      responses:
        200:
          description: {{RESPONSES['user']['logout']['success']}}
          content:
            application/json:
              schema:
                example:
                  msg: {{RESPONSES['user']['logout']['success']}}
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        422:
          description: {{RESPONSES['general']['auth_error']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
  /user/refresh:
    get:
      tags:
        - authentication
      summary: Generate new access token using refresh token
      operationId: tensorhive.controllers.user.generate
      responses:
        200:
          description: {{RESPONSES['token']['refresh']['success']}}
          content:
            application/json:
              schema:
                example:
                  msg: {{RESPONSES['token']['refresh']['success']}}
                  access_token: <ACCESS_TOKEN>
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        422:
          description: {{RESPONSES['general']['auth_error']}}
      security:
        - Bearer: []
  /user/login:
    post:
      tags:
        - authentication
      summary: Login user
      operationId: tensorhive.controllers.user.login
      requestBody:
        description: User object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginForm'
              x-body-name: user
      responses:
        200:
          description: {{RESPONSES['user']['login']['success']}}
          content:
            application/json:
              schema:
                example:
                  msg: {{RESPONSES['user']['login']['success']}}
                  access_token: <ACCESS_TOKEN>
                  refresh_token: <REFRESH_TOKEN>
        400:
          description: {{RESPONSES['general']['bad_request']}}
        401:
          description: {{RESPONSES['user']['login']['failure']['credentials']}}
        404:
          description: {{RESPONSES['user']['not_found']}}
        422:
          description: {{RESPONSES['general']['auth_error']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
  /user/authorized_keys_entry:
    get:
      tags:
        - authentication
      summary: Get TensorHive public SSH key record for authorized_keys
      operationId: tensorhive.controllers.user.authorized_keys_entry
      responses:
        200:
          description: {{RESPONSES['user']['authorized_keys_entry']['success']}}
          content:
            application/json:
              schema:
                example: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCWuvmEw9RWI0WMv9aseFadgDXZbHW7KjQt6H7keoQ13y/XQX0+vosmEq70DQ9HCxmwvrSruR63DLe8eW5k80OBeAcHZ+e6f6g/017tCKfYTibCEboB7v7TgGO74kWcihZK5jPHg/jxwKktxDdbCfqvl6hrR5hwE2sJ5gVAx6UPJNVoZYRD2rAPhjKJ1NlENhCWrxrt72c/a6Qe9aRSvJ/Yxn+PWr5BbxyFFKEcmos9bUwh7NgdmsZphVrKeGnx9Nl1q46/PLBW2V4FbBpsv6OD6FksIdZF0irFNmfq1LGHDLlRwVrEXrTdQST2FqyNZJSXRxblEchzYijLA1J03xir tensorhive@ai'
        500:
          description: {{RESPONSES['general']['internal_error']}}
  /groups:
    get:
      tags:
        - groups
      summary: Get all or default groups
      operationId: tensorhive.controllers.group.get
      parameters:
        - description: If set to false get all groups if true then only default groups
          in: query
          name: only_default
          required: false
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: {{RESPONSES['general']['success']}}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        422:
          description: {{RESPONSES['general']['auth_error']}}
      security:
        - Bearer: []
    post:
      tags:
        - groups
      summary: Create new group
      operationId: tensorhive.controllers.group.create
      requestBody:
        description: Group object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupForm'
              x-body-name: group
      responses:
        201:
          description: {{RESPONSES['group']['create']['success']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['group']['create']['success']}}
                  group:
                    $ref: '#/components/schemas/Group'
        400:
          description: {{RESPONSES['general']['bad_request']}}
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        422:
          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['group']['create']['failure']['invalid']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
  /groups/{id}:
    get:
      tags:
        - groups
      summary: Get group with given ID
      operationId: tensorhive.controllers.group.get_by_id
      parameters:
        - description: Group ID
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: {{RESPONSES['general']['success']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['group']['get']['success']}}
                  group:
                    $ref: '#/components/schemas/Group'
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        404:
          description: {{RESPONSES['group']['not_found']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['group']['not_found']}}
        422:
          description: {{RESPONSES['general']['auth_error']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
    put:
      tags:
        - groups
      summary: Update existing group
      operationId: tensorhive.controllers.group.update
      requestBody:
        description: Group object with fields to overwrite.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupUpdateForm'
              x-body-name: newValues
      parameters:
        - description: Group ID
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: {{RESPONSES['group']['update']['success']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['group']['update']['success']}}
                  group:
                    $ref: '#/components/schemas/Group'
        400:
          description: {{RESPONSES['general']['bad_request']}}
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        404:
          description: {{RESPONSES['group']['not_found']}}
        422:
          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['group']['update']['failure']['assertions']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
    delete:
      tags:
        - groups
      summary: Delete group
      operationId: tensorhive.controllers.group.delete
      parameters:
        - description: Group ID
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: {{RESPONSES['group']['delete']['success']}}
          content:
            application/json:
              schema:
                example:
                  msg: {{RESPONSES['group']['delete']['success']}}
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        404:
          description: {{RESPONSES['group']['not_found']}}
        422:
          description: {{RESPONSES['general']['auth_error']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
  /groups/{group_id}/users/{user_id}:
    put:
      tags:
        - groups
      summary: Add user to group
      operationId: tensorhive.controllers.group.add_user
      parameters:
        - description: Group ID
          in: path
          name: group_id
          required: true
          schema:
            type: integer
        - description: User ID
          in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: {{RESPONSES['group']['users']['add']['success']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['group']['users']['add']['success']}}
                  group:
                    $ref: '#/components/schemas/Group'
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        404:
          description: {{RESPONSES['group']['not_found']}} or {{RESPONSES['user']['not_found']}}
        409:
          description: {{RESPONSES['group']['users']['add']['failure']['duplicate']}}
        422:
          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['group']['users']['add']['failure']['assertions']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
    delete:
      tags:
        - groups
      summary: Remove user from group
      operationId: tensorhive.controllers.group.remove_user
      parameters:
        - description: Group ID
          in: path
          name: group_id
          required: true
          schema:
            type: integer
        - description: User ID
          in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: {{RESPONSES['group']['users']['remove']['success']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['group']['users']['remove']['success']}}
                  group:
                    $ref: '#/components/schemas/Group'
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        404:
          description: {{RESPONSES['group']['not_found']}} or {{RESPONSES['user']['not_found']}} or {{RESPONSES['group']['users']['remove']['failure']['not_found']}}
        422:
          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['group']['users']['remove']['failure']['assertions']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
  /restrictions:
    get:
      tags:
        - restrictions
      summary: Get all or specific restrictions
      operationId: tensorhive.controllers.restriction.get
      parameters:
        - description: User id
          in: query
          name: user_id
          required: false
          schema:
            type: integer
            nullable: true
            default: null
        - description: If user id is given include restrictions applied to groups of which user is member
          in: query
          name: include_user_groups
          required: false
          schema:
            type: boolean
            nullable: true
            default: null
        - description: Group id
          in: query
          name: group_id
          required: false
          schema:
            type: integer
            nullable: true
            default: null
        - description: Resource id
          in: query
          name: resource_id
          required: false
          schema:
            type: string
            nullable: true
            default: null
        - description: Schedule id
          in: query
          name: schedule_id
          required: false
          schema:
            type: integer
            nullable: true
            default: null
      responses:
        200:
          description: {{RESPONSES['general']['ok']}}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Restriction'
        400:
          description: {{RESPONSES['general']['bad_request']}}.
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        422:
          description: {{RESPONSES['general']['auth_error']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
    post:
      tags:
        - restrictions
      summary: Create new restriction
      operationId: tensorhive.controllers.restriction.create
      requestBody:
        description: Restriction object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestrictionForm'
              x-body-name: restriction
      responses:
        201:
          description: {{RESPONSES['restriction']['create']['success']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['restriction']['create']['success']}}
                  restriction:
                    $ref: '#/components/schemas/Restriction'
        400:
          description: {{RESPONSES['general']['bad_request']}}
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        422:
          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['restriction']['create']['failure']['invalid']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
  /restrictions/{id}:
    put:
      tags:
        - restrictions
      summary: Update existing restriction
      operationId: tensorhive.controllers.restriction.update
      requestBody:
        description: Restriction object with fields to overwrite (end field is nullable string).
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestrictionUpdateForm'
              x-body-name: newValues
      parameters:
          - description: Restriction ID
            in: path
            name: id
            required: true
            schema:
              type: integer
      responses:
        200:
          description: {{RESPONSES['restriction']['update']['success']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['restriction']['update']['success']}}
                  restriction:
                    $ref: '#/components/schemas/Restriction'
        400:
          description: {{RESPONSES['general']['bad_request']}}
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        404:
          description: {{RESPONSES['restriction']['not_found']}}
        422:
          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['restriction']['update']['failure']['assertions']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
    delete:
      tags:
        - restrictions
      summary: Delete restriction
      operationId: tensorhive.controllers.restriction.delete
      parameters:
        - description: Restriction ID
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: {{RESPONSES['restriction']['delete']['success']}}
          content:
            application/json:
              schema:
                example:
                  msg: {{RESPONSES['restriction']['delete']['success']}}
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        404:
          description: {{RESPONSES['restriction']['not_found']}}
        422:
          description: {{RESPONSES['general']['auth_error']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
  /restrictions/{restriction_id}/users/{user_id}:
    put:
      tags:
        - restrictions
      summary: Apply restriction to user
      operationId: tensorhive.controllers.restriction.apply_to_user
      parameters:
        - description: Restriction ID
          in: path
          name: restriction_id
          required: true
          schema:
            type: integer
        - description: User ID
          in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: {{RESPONSES['restriction']['users']['apply']['success']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['restriction']['users']['apply']['success']}}
                  restriction:
                    $ref: '#/components/schemas/Restriction'
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        404:
          description: {{RESPONSES['restriction']['not_found']}} or {{RESPONSES['user']['not_found']}}
        409:
          description: {{RESPONSES['restriction']['users']['apply']['failure']['duplicate']}}
        422:
          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['restriction']['users']['apply']['failure']['assertions']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
    delete:
      tags:
        - restrictions
      summary: Remove restriction from user
      operationId: tensorhive.controllers.restriction.remove_from_user
      parameters:
        - description: Restriction ID
          in: path
          name: restriction_id
          required: true
          schema:
            type: integer
        - description: User ID
          in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: {{RESPONSES['restriction']['users']['remove']['success']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['restriction']['users']['remove']['success']}}
                  restriction:
                    $ref: '#/components/schemas/Restriction'
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        404:
          description: {{RESPONSES['restriction']['not_found']}} or {{RESPONSES['user']['not_found']}} or {{RESPONSES['restriction']['users']['remove']['failure']['not_found']}}
        422:
          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['restriction']['users']['remove']['failure']['assertions']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
  /restrictions/{restriction_id}/groups/{group_id}:
    put:
      tags:
        - restrictions
      summary: Apply restriction to group
      operationId: tensorhive.controllers.restriction.apply_to_group
      parameters:
        - description: Restriction ID
          in: path
          name: restriction_id
          required: true
          schema:
            type: integer
        - description: Group ID
          in: path
          name: group_id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: {{RESPONSES['restriction']['groups']['apply']['success']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['restriction']['groups']['apply']['success']}}
                  restriction:
                    $ref: '#/components/schemas/Restriction'
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        404:
          description: {{RESPONSES['restriction']['not_found']}} or {{RESPONSES['group']['not_found']}}
        409:
          description: {{RESPONSES['restriction']['groups']['apply']['failure']['duplicate']}}
        422:
          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['restriction']['groups']['apply']['failure']['assertions']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
    delete:
      tags:
        - restrictions
      summary: Remove restriction from group
      operationId: tensorhive.controllers.restriction.remove_from_group
      parameters:
        - description: Restriction ID
          in: path
          name: restriction_id
          required: true
          schema:
            type: integer
        - description: Group ID
          in: path
          name: group_id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: {{RESPONSES['restriction']['groups']['remove']['success']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['restriction']['groups']['remove']['success']}}
                  restriction:
                    $ref: '#/components/schemas/Restriction'
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        404:
          description: {{RESPONSES['restriction']['not_found']}} or {{RESPONSES['group']['not_found']}} or {{RESPONSES['restriction']['groups']['remove']['failure']['not_found']}}
        422:
          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['restriction']['groups']['remove']['failure']['assertions']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
  /restrictions/{restriction_id}/resources/{resource_uuid}:
    put:
      tags:
        - restrictions
      summary: Apply restriction to resource
      operationId: tensorhive.controllers.restriction.apply_to_resource
      parameters:
        - description: Restriction ID
          in: path
          name: restriction_id
          required: true
          schema:
            type: integer
        - description: Resource UUID
          in: path
          name: resource_uuid
          required: true
          schema:
            type: string
      responses:
        200:
          description: {{RESPONSES['restriction']['resources']['apply']['success']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['restriction']['resources']['apply']['success']}}
                  restriction:
                    $ref: '#/components/schemas/Restriction'
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        404:
          description: {{RESPONSES['restriction']['not_found']}} or {{RESPONSES['resource']['not_found']}}
        409:
          description: {{RESPONSES['restriction']['resources']['apply']['failure']['duplicate']}}
        422:
          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['restriction']['resources']['apply']['failure']['assertions']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
    delete:
      tags:
        - restrictions
      summary: Remove restriction from resource
      operationId: tensorhive.controllers.restriction.remove_from_resource
      parameters:
        - description: Restriction ID
          in: path
          name: restriction_id
          required: true
          schema:
            type: integer
        - description: Resource UUID
          in: path
          name: resource_uuid
          required: true
          schema:
            type: string
      responses:
        200:
          description: {{RESPONSES['restriction']['resources']['remove']['success']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['restriction']['resources']['remove']['success']}}
                  restriction:
                    $ref: '#/components/schemas/Restriction'
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        404:
          description: {{RESPONSES['restriction']['not_found']}} or {{RESPONSES['resource']['not_found']}} or {{RESPONSES['restriction']['resources']['remove']['failure']['not_found']}}
        422:
          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['restriction']['resources']['remove']['failure']['assertions']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
  /restrictions/{restriction_id}/hosts/{hostname}:
    put:
      tags:
        - restrictions
      summary: Apply restriction to all resources with given hostname
      operationId: tensorhive.controllers.restriction.apply_to_resources_by_hostname
      parameters:
        - description: Restriction ID
          in: path
          name: restriction_id
          required: true
          schema:
            type: integer
        - description: Resources hostname
          in: path
          name: hostname
          required: true
          schema:
            type: string
      responses:
        200:
          description: {{RESPONSES['restriction']['hosts']['apply']['success']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['restriction']['hosts']['apply']['success']}}
                  restriction:
                    $ref: '#/components/schemas/Restriction'
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        404:
          description: {{RESPONSES['restriction']['not_found']}} or {{RESPONSES['nodes']['hostname']['not_found']}}
        422:
          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['restriction']['hosts']['apply']['failure']['assertions']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
    delete:
      tags:
        - restrictions
      summary: Remove restriction from all resources with given hostname
      operationId: tensorhive.controllers.restriction.remove_from_resources_by_hostname
      parameters:
        - description: Restriction ID
          in: path
          name: restriction_id
          required: true
          schema:
            type: integer
        - description: Resources hostname
          in: path
          name: hostname
          required: true
          schema:
            type: string
      responses:
        200:
          description: {{RESPONSES['restriction']['hosts']['remove']['success']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['restriction']['hosts']['remove']['success']}}
                  restriction:
                    $ref: '#/components/schemas/Restriction'
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        404:
          description: {{RESPONSES['restriction']['not_found']}} or {{RESPONSES['nodes']['hostname']['not_found']}}
        422:
          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['restriction']['hosts']['apply']['failure']['assertions']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
  /restrictions/{restriction_id}/schedules/{schedule_id}:
    put:
      tags:
        - restrictions
      summary: Add schedule to restriction
      operationId: tensorhive.controllers.restriction.add_schedule
      parameters:
        - description: Restriction ID
          in: path
          name: restriction_id
          required: true
          schema:
            type: integer
        - description: Schedule ID
          in: path
          name: schedule_id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: {{RESPONSES['restriction']['schedules']['add']['success']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['restriction']['schedules']['add']['success']}}
                  restriction:
                    $ref: '#/components/schemas/Restriction'
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        404:
          description: {{RESPONSES['restriction']['not_found']}} or {{RESPONSES['schedule']['not_found']}}
        409:
          description: {{RESPONSES['restriction']['schedules']['add']['failure']['duplicate']}}
        422:
          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['restriction']['schedules']['add']['failure']['assertions']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
    delete:
      tags:
        - restrictions
      summary: Remove schedule from restriction
      operationId: tensorhive.controllers.restriction.remove_schedule
      parameters:
        - description: Restriction ID
          in: path
          name: restriction_id
          required: true
          schema:
            type: integer
        - description: Schedule ID
          in: path
          name: schedule_id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: {{RESPONSES['restriction']['schedules']['remove']['success']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['restriction']['schedules']['remove']['success']}}
                  restriction:
                    $ref: '#/components/schemas/Restriction'
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        404:
          description: {{RESPONSES['restriction']['not_found']}} or {{RESPONSES['schedule']['not_found']}} or {{RESPONSES['restriction']['schedules']['remove']['failure']['not_found']}}
        422:
          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['restriction']['schedules']['remove']['failure']['assertions']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
  /schedules:
    get:
      tags:
        - schedules
      summary: Get all schedules
      operationId: tensorhive.controllers.schedule.get
      responses:
        200:
          description: {{RESPONSES['general']['success']}}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schedule'
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        422:
          description: {{RESPONSES['general']['auth_error']}}
      security:
        - Bearer: []
    post:
      tags:
        - schedules
      summary: Create new restriction schedule
      operationId: tensorhive.controllers.schedule.create
      requestBody:
        description: Schedule object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleForm'
              x-body-name: schedule
      responses:
        201:
          description: {{RESPONSES['schedule']['create']['success']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['schedule']['create']['success']}}
                  schedule:
                    $ref: '#/components/schemas/Schedule'
        400:
          description: {{RESPONSES['general']['bad_request']}}
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        422:
          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['schedule']['create']['failure']['invalid']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
  /schedules/{id}:
    get:
      tags:
        - schedules
      summary: Get schedule with given ID
      operationId: tensorhive.controllers.schedule.get_by_id
      parameters:
        - description: Schedule ID
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: {{RESPONSES['general']['success']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['schedule']['get']['success']}}
                  schedule:
                    $ref: '#/components/schemas/Schedule'
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        404:
          description: {{RESPONSES['schedule']['not_found']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['schedule']['not_found']}}
        422:
          description: {{RESPONSES['general']['auth_error']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
    put:
      tags:
        - schedules
      summary: Update existing schedule
      operationId: tensorhive.controllers.schedule.update
      requestBody:
        description: Schedule object with fields to overwrite.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleUpdateForm'
              x-body-name: newValues
      parameters:
          - description: Schedule ID
            in: path
            name: id
            required: true
            schema:
              type: integer
      responses:
        200:
          description: {{RESPONSES['schedule']['update']['success']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['schedule']['update']['success']}}
                  schedule:
                    $ref: '#/components/schemas/Schedule'
        400:
          description: {{RESPONSES['general']['bad_request']}}
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        404:
          description: {{RESPONSES['schedule']['not_found']}}
        422:
          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['schedule']['update']['failure']['assertions']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
    delete:
      tags:
        - schedules
      summary: Delete schedule
      operationId: tensorhive.controllers.schedule.delete
      parameters:
        - description: Schedule ID
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: {{RESPONSES['schedule']['delete']['success']}}
          content:
            application/json:
              schema:
                example:
                  msg: {{RESPONSES['schedule']['delete']['success']}}
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        404:
          description: {{RESPONSES['schedule']['not_found']}}
        422:
          description: {{RESPONSES['general']['auth_error']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
  /reservations:
    get:
      tags:
        - reservations
      summary: Get all or specific reservation events
      operationId: tensorhive.controllers.reservation.get
      parameters:
        - description: Array of uuids
          in: query
          name: resources_ids
          required: false
          schema:
            type: array
            items:
              type: string
        - description: UTC ISO (e.g. 2018-10-22T10:00:00.0Z)
          in: query
          name: start
          required: false
          schema:
            type: string
            format: date-time
        - description: UTC ISO (e.g. 2018-10-22T19:00:00.0Z)
          in: query
          name: end
          required: false
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: {{RESPONSES['general']['ok']}}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservation'
        400:
          description: {{RESPONSES['general']['bad_request']}}. Specify all parameters or none.
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        422:
          description: {{RESPONSES['general']['auth_error']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
    post:
      tags:
        - reservations
      summary: Make new reservation
      operationId: tensorhive.controllers.reservation.create
      requestBody:
        description: Reservation object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationForm'
              x-body-name: reservation
      responses:
        201:
          description: {{RESPONSES['reservation']['create']['success']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['reservation']['create']['success']}}
                  reservation:
                    $ref: '#/components/schemas/Reservation'
        400:
          description: {{RESPONSES['general']['bad_request']}}
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['reservation']['create']['failure']['forbidden']}}
        422:
          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['reservation']['create']['failure']['invalid']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
  /reservations/{id}:
    put:
      tags:
        - reservations
      summary: Update existing reservation
      operationId: tensorhive.controllers.reservation.update
      requestBody:
        description: Reservation object with fields to overwrite.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationUpdateForm'
              x-body-name: newValues
      parameters:
        - description: Reservation ID
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        201:
          description: {{RESPONSES['reservation']['update']['success']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['reservation']['update']['success']}}
                  reservation:
                    $ref: '#/components/schemas/Reservation'
        400:
          description: {{RESPONSES['general']['bad_request']}}
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['reservation']['update']['failure']['forbidden']}}
        404:
          description: {{RESPONSES['reservation']['not_found']}}
        422:
          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['reservation']['update']['failure']['assertions']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
    delete:
      tags:
        - reservations
      summary: Delete reservation
      operationId: tensorhive.controllers.reservation.delete
      parameters:
        - description: Reservation ID
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: {{RESPONSES['reservation']['delete']['success']}}
          content:
            application/json:
              schema:
                example:
                  msg: {{RESPONSES['reservation']['delete']['success']}}
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        404:
          description: {{RESPONSES['reservation']['not_found']}}
        422:
          description: {{RESPONSES['general']['auth_error']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
  /resources:
    get:
      tags:
        - resources
      summary: Get all resources
      operationId: tensorhive.controllers.resource.get
      responses:
        200:
          description: {{RESPONSES['general']['success']}}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        422:
          description: {{RESPONSES['general']['auth_error']}}
      security:
        - Bearer: []
  /resource/{uuid}:
    get:
      tags:
        - resources
      summary: Get resource with given UUID
      operationId: tensorhive.controllers.resource.get_by_id
      parameters:
        - description: Resource UUID
          in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        200:
          description: {{RESPONSES['general']['success']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['resource']['get']['success']}}
                  resource:
                    $ref: '#/components/schemas/Resource'
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        404:
          description: {{RESPONSES['resource']['not_found']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['resource']['not_found']}}
        422:
          description: {{RESPONSES['general']['auth_error']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
  /nodes/hostnames:
    get:
      tags:
        - nodes
      summary: Get all hostnames
      operationId: tensorhive.controllers.nodes.get_hostnames
      responses:
        200:
          description: {{RESPONSES['general']['ok']}}
          content:
            application/json:
              schema:
                example:
                  - hostname1
                  - hostname2
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        422:
          description: {{RESPONSES['general']['auth_error']}}
      security:
        - Bearer: []
  /nodes/metrics:
    get:
      tags:
        - nodes
      summary: Get each node's all metric data
      description: Puts null if some data is unavailable
      operationId: tensorhive.controllers.nodes.get_all_data
      responses:
        200:
          description: {{RESPONSES['general']['ok']}}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GPUAllData'
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        422:
          description: {{RESPONSES['general']['auth_error']}}
      security:
        - Bearer: []
  /nodes/{hostname}/gpu/info:
    get:
      tags:
        - nodes
      summary: Get node's basic GPU information
      operationId: tensorhive.controllers.nodes.get_gpu_info
      parameters:
        - $ref: '#/components/parameters/hostnameParam'
      responses:
        200:
          description: {{RESPONSES['general']['ok']}}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GPUInfo'
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        404:
          description: {{RESPONSES['nodes']['hostname']['not_found']}}
        422:
          description: {{RESPONSES['general']['auth_error']}}
      security:
        - Bearer: []
  /nodes/{hostname}/gpu/metrics:
    get:
      tags:
        - nodes
      summary: Get node's GPU metric data
      description: Puts null if some data is unavailable
      operationId: tensorhive.controllers.nodes.get_gpu_metrics
      parameters:
        - $ref: '#/components/parameters/hostnameParam'
        - $ref: '#/components/parameters/gpuMetricTypeQuery'
      responses:
        200:
          description: {{RESPONSES['general']['ok']}}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GPUMetricsInTwoCases'
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        404:
          description: {{RESPONSES['nodes']['hostname']['not_found']}}
        422:
          description: {{RESPONSES['general']['auth_error']}}
      security:
        - Bearer: []
  /nodes/{hostname}/cpu/metrics:
    get:
      tags:
        - nodes
      summary: Get node's CPU metric data
      description: Puts null if some data is unavailable
      operationId: tensorhive.controllers.nodes.get_cpu_metrics
      parameters:
        - $ref: '#/components/parameters/hostnameParam'
        - $ref: '#/components/parameters/cpuMetricTypeQuery'
      responses:
        200:
          description: {{RESPONSES['general']['ok']}}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CPUMetrics'
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        404:
          description: {{RESPONSES['nodes']['hostname']['not_found']}}
        422:
          description: {{RESPONSES['general']['auth_error']}}
      security:
        - Bearer: []
  /nodes/{hostname}/gpu/processes:
    get:
      tags:
        - nodes
      summary: Get node's GPU processes data
      description: Puts null if some data is unavailable
      operationId: tensorhive.controllers.nodes.get_gpu_processes
      parameters:
        - $ref: '#/components/parameters/hostnameParam'
      responses:
        200:
          description: {{RESPONSES['general']['ok']}}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GPUProcesses'
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        404:
          description: {{RESPONSES['nodes']['hostname']['not_found']}}
        422:
          description: {{RESPONSES['general']['auth_error']}}
      security:
        - Bearer: []
  /tasks:
    get:
      tags:
        - tasks
      summary: Query tasks
      description: Fetches either all or only those owned by the user.
      operationId: tensorhive.controllers.task.get_all
      parameters:
        - description: User ID (optional)
          in: query
          name: userId
          required: false
          schema:
            type: integer
            default: null
            nullable: true
        - description: Synchronize all tasks (optional)
          in: query
          name: syncAll
          required: false
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: {{RESPONSES['task']['all']['success']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['task']['all']['success']}}
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/TaskToDisplay'
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        422:
          description: {{RESPONSES['general']['auth_error']}}
      security:
        - Bearer: []
    post:
      tags:
        - tasks
      summary: Create new task
      operationId: tensorhive.controllers.task.create
      requestBody:
        description: |
          Task object
          * spawn field is nullable string
          * terminate field is nullable string
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskForm'
              x-body-name: task
      responses:
        201:
          description: {{RESPONSES['task']['create']['success']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['task']['create']['success']}}
                  task:
                    $ref: '#/components/schemas/TaskToDisplay'
        400:
          description: {{RESPONSES['general']['bad_request']}}
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        # 409:
        #   description: {{RESPONSES['task']['create']['failure']['duplicate']}}
        422:
          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['task']['create']['failure']['invalid']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
  /tasks/{id}:
    get:
      tags:
        - tasks
      summary: Get task by ID
      description: Fetches specific task by ID
      operationId: tensorhive.controllers.task.get
      parameters:
        - description: Task ID
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: {{RESPONSES['general']['ok']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['task']['get']['success']}}
                  task:
                    $ref: '#/components/schemas/TaskToDisplay'
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        404:
          description: {{RESPONSES['task']['not_found']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['task']['not_found']}}
        422:
          description: {{RESPONSES['general']['auth_error']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
    put:
      tags:
        - tasks
      summary: Update task
      operationId: tensorhive.controllers.task.update
      requestBody:
        description: |
          Task object with fields to overwrite.
          * spawn field is nullable string
          * terminate field is nullable string
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdateForm'
              x-body-name: newValues
      parameters:
        - description: Task ID
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        201:
          description: {{RESPONSES['general']['ok']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['task']['update']['success']}}
                  task:
                    $ref: '#/components/schemas/TaskToDisplay'
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        404:
          description: {{RESPONSES['task']['not_found']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['task']['not_found']}}
        422:
          description: {{RESPONSES['general']['auth_error']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
    delete:
      tags:
        - tasks
      summary: Delete task
      operationId: tensorhive.controllers.task.destroy
      parameters:
        - description: Task ID
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: {{RESPONSES['general']['ok']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['task']['delete']['success']}}
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        404:
          description: {{RESPONSES['task']['not_found']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['task']['not_found']}}
        422:
          description: {{RESPONSES['general']['auth_error']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
  /tasks/{id}/log:
    get:
      tags:
        - tasks
      summary: Fetch log file content produced by task
      description: Return lines of log file located on machine where task was running
      operationId: tensorhive.controllers.task.get_log
      parameters:
        - description: Task ID
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: Only tail (10 lines)
          in: query
          name: tail
          required: false
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: {{RESPONSES['general']['ok']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['task']['get']['success']}}
                  path:
                    type: string
                    example: ~/TensorHiveLogs/task_99.log
                  output_lines:
                    type: array
                    items:
                      type: string
                    example:
                      - first line
                      - second line
                      - etc.
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        404:
          description: {{RESPONSES['task']['get_log']['failure']['not_found']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['task']['get_log']['failure']['not_found']}}
        422:
          description: {{RESPONSES['task']['get_log']['failure']['assertions']}} or {{RESPONSES['general']['auth_error']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['task']['get_log']['failure']['assertions']}}
        500:
          description: {{RESPONSES['ssh']['failure']['connection']}} or {{RESPONSES['general']['internal_error']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['ssh']['failure']['connection']}}
      security:
        - Bearer: []
  /screen-sessions:
    get:
      tags:
        - tasks
      summary: Returns PIDs of active screen sessions running on username@hostname
      description: |
        It shows only sessions labeled by TensorHive and ignores anything else.
        This endpoint is purely informational and does not rely on usage of any Task object.
      operationId: tensorhive.controllers.task.screen_sessions
      parameters:
        - description: Username
          in: query
          name: username
          required: true
          schema:
            type: string
        - description: Hostname
          in: query
          name: hostname
          required: true
          schema:
            type: string
      responses:
        200:
          description: {{RESPONSES['general']['ok']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['screen-sessions']['success']}}
                  pids:
                    type: array
                    items:
                      type: integer
                    example:
                      - 1234
                      - 2345
                      - 3456
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        422:
          description: {{RESPONSES['screen-sessions']['failure']['assertions']}} or {{RESPONSES['general']['auth_error']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['screen-sessions']['failure']['assertions']}}
        500:
          description: {{RESPONSES['ssh']['failure']['connection']}} or {{RESPONSES['general']['internal_error']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['ssh']['failure']['connection']}}
      # security:
      #   - Bearer: []
  /tasks/{id}/spawn:
    get:
      tags:
        - tasks
      summary: Spawns a task by id
      description: |
        Task which is already running will not be spawned.
        Task's state will be synced automatically.
      operationId: tensorhive.controllers.task.spawn
      parameters:
        - description: Task ID
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: {{RESPONSES['general']['ok']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['task']['spawn']['success']}}
                  pid:
                    type: integer
                    example: 4321
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        404:
          description: {{RESPONSES['task']['not_found']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['task']['not_found']}}
        422:
          description: {{RESPONSES['task']['spawn']['failure']['assertions']}} or {{RESPONSES['general']['auth_error']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['task']['spawn']['failure']['assertions']}}
        500:
          description: {{RESPONSES['task']['spawn']['failure']['backend']}} or {{RESPONSES['general']['internal_error']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['task']['not_found']}}
      security:
        - Bearer: []
  /tasks/{id}/terminate:
    get:
      tags:
        - tasks
      summary: Interrupts/terminates/kills task by id
      description: |
        Kill - almost guaranteed termination

        Terminate - sends SIGTERM, works in most cases

        Interrupt - sends SIGINT. Only this method allows for capturing logs when program is closing

        Returns exit code of the operation, not task's command!
        Task state will be synced automatically.
      operationId: tensorhive.controllers.task.terminate
      parameters:
        - description: Task ID
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: false to kill, null to terminate, true to interrupt
          in: query
          name: gracefully
          required: false
          schema:
            type: boolean
            default: null
            nullable: true
      responses:
        200:
          description: {{RESPONSES['task']['terminate']['success']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['task']['terminate']['success']}}
                  exit_code:
                    type: integer
                    example: 0
        202:
          description: {{RESPONSES['task']['terminate']['failure']['exit_code']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['task']['terminate']['failure']['exit_code']}}
                  exit_code:
                    type: integer
                    example: 1
        401:
          description: {{RESPONSES['general']['unauthorized']}}
        403:
          description: {{RESPONSES['general']['unprivileged']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['general']['unprivileged']}}
        404:
          description: {{RESPONSES['task']['not_found']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['task']['not_found']}}
        409:
          description: {{RESPONSES['task']['terminate']['failure']['state']}}
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: {{RESPONSES['task']['terminate']['failure']['state']}}
        422:
          description: {{RESPONSES['general']['auth_error']}}
        500:
          description: {{RESPONSES['general']['internal_error']}}
      security:
        - Bearer: []
components:
  schemas:
    UserToDisplay:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        roles:
          type: array
          items:
            type: string
        username:
          type: string
          example: foobar
        email:
          type: string
          example: foo@bar.com
        createdAt:
          type: string
          format: date-time
        groups:
          type: array
          items:
            $ref: '#/components/schemas/GroupWithoutUsers'
    UserWithoutGroup:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        roles:
          type: array
          items:
            type: string
        username:
          type: string
          example: foobar
        createdAt:
          type: string
          format: date-time
    UserForm:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          example: foobar
        email:
          type: string
          example: foo@bar.com
        password:
          type: string
          example: difficult_password
    UserUpdateForm:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
          example: 1
        roles:
          type: array
          items:
            type: string
        username:
          type: string
          example: foobar
        password:
          type: string
          example: difficult_password
    UserLoginForm:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: foobar
        password:
          type: string
          example: difficult_password
    TaskToDisplay:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        userId:
          type: integer
          example: 1
        command:
          type: string
          example: CUDA_VISIBLE_DEVICES=0 train.py
        pid:
          type: integer
          format: int64
          example: 4321
        hostname:
          type: string
          format: localhost
        spawnAt:
          type: string
          format: date-time
          nullable: true
          example: 2019-05-08T12:00:00.066Z (or null!)
        terminateAt:
          type: string
          format: date-time
          nullable: true
          example: 2019-05-08T13:00:00.066Z (or null!)
    TaskForm:
      type: object
      required:
        - userId
        - command
        - hostname
      properties:
        userId:
          type: integer
          example: 1
        command:
          type: string
          example: CUDA_VISIBLE_DEVICES=0 train.py
        hostname:
          type: string
          example: localhost
        spawnAt:
          type: string
          format: date-time
          nullable: true
        terminateAt:
          type: string
          format: date-time
          nullable: true
    TaskUpdateForm:
      type: object
      properties:
        command:
          type: string
          example: CUDA_VISIBLE_DEVICES=0 train.py --worker-id=2
        hostname:
          type: string
          example: localhost
        spawnAt:
          type: string
          format: date-time
          nullable: true
          example: 2019-05-08T12:00:00.066Z (or null!)
        terminateAt:
          type: string
          format: date-time
          nullable: true
          example: 2019-05-08T13:00:00.066Z (or null!)
    Group:
      type: object
      required:
        - name
        - isDefault
        - users
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        name:
          type: string
          example: Example group
        isDefault:
          type: boolean
          default: false
        createdAt:
          type: string
          format: date-time
          readOnly: true
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserWithoutGroup'
    GroupWithoutUsers:
      type: object
      required:
        - name
        - isDefault
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        name:
          type: string
          example: Example group
        isDefault:
          type: boolean
          default: false
        createdAt:
          type: string
          format: date-time
          readOnly: true
    GroupForm:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: Example group
        isDefault:
          type: boolean
          default: false
    GroupUpdateForm:
      type: object
      properties:
        name:
          type: string
          example: Example group
        isDefault:
          type: boolean
          default: false
    Restriction:
      type: object
      required:
        - name
        - createdAt
        - startsAt
        - endsAt
        - isGlobal
        - schedules
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        name:
          type: string
          example: Example restriction
        createdAt:
          type: string
          format: date-time
          readOnly: true
        startsAt:
          type: string
          format: date-time
        endsAt:
          type: string
          format: date-time
        isGlobal:
          type: boolean
          example: false
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserWithoutGroup'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/GroupWithoutUsers'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/Resource'
        schedules:
          type: array
          items:
            $ref: '#/components/schemas/Schedule'
    RestrictionForm:
      type: object
      required:
        - startsAt
        - isGlobal
      properties:
        name:
          type: string
          example: Example restriction
        startsAt:
          type: string
          format: date-time
        endsAt:
          type: string
          format: date-time
        isGlobal:
          type: boolean
          example: false
    RestrictionUpdateForm:
      type: object
      properties:
        name:
          type: string
          example: Example restriction
        startsAt:
          type: string
          format: date-time
        endsAt:
          type: string
          format: date-time
          nullable: true
        isGlobal:
          type: boolean
          example: false
    Schedule:
      type: object
      required:
        - scheduleDays
        - hourStart
        - hourEnd
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        scheduleDays:
          type: array
          items:
            type: string
            example: Monday
        hourStart:
          type: string
          example: '8:00'
        hourEnd:
          type: string
          example: '16:00'
    ScheduleForm:
      type: object
      required:
        - scheduleDays
        - hourStart
        - hourEnd
      properties:
        scheduleDays:
          type: array
          items:
            type: string
            example: Monday
        hourStart:
          type: string
          example: '8:00'
        hourEnd:
          type: string
          example: '16:00'
    ScheduleUpdateForm:
      type: object
      properties:
        scheduleDays:
          type: array
          items:
            type: string
            example: Monday
        hourStart:
          type: string
          example: '8:00'
        hourEnd:
          type: string
          example: '16:00'
    Reservation:
      type: object
      required:
        - title
        - description
        - resourceId
        - userId
        - userName
        - gpuUtilAvg
        - memUtilAvg
        - start
        - end
        - isCancelled
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          example: Example title
        description:
          type: string
          example: Example description
        resourceId:
          type: string
          example: GPU-d38d4de3-85ee-e837-3d87-e8e2faeb6a63
        userId:
          type: integer
          example: 1
        userName:
          type: string
          example: Example owner's username
        gpuUtilAvg:
          type: integer
          example: 99
        memUtilAvg:
          type: integer
          example: 67
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        isCancelled:
          type: boolean
          example: false
    ReservationForm:
      type: object
      required:
        - title
        - description
        - resourceId
        - userId
        - start
        - end
      properties:
        title:
          type: string
          example: Example title
        description:
          type: string
          example: Example description
        resourceId:
          type: string
          example: GPU-d38d4de3-85ee-e837-3d87-e8e2faeb6a63
        userId:
          type: integer
          example: 1
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
    ReservationUpdateForm:
      type: object
      #required:
      # - start
      # - end
      properties:
        title:
          type: string
          example: Example title
        description:
          type: string
          example: Example description
        resourceId:
          type: string
          example: GPU-d38d4de3-85ee-e837-3d87-e8e2faeb6a63
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
    Resource:
      type: object
      properties:
        id:
          type: string
          example: GPU-d38d4de3-85ee-e837-3d87-e8e2faeb6a63
        name:
          type: string
          example: GeForce GTX 1060
        hostname:
          type: string
          example: localhost
    GPUAllData:
      type: object
      example:
        <HOSTNAME>:
          GPU:
            <GPU_UUID>:
              index: 0
              name: GeForce GTX 1060
              metrics:
                fan_speed:
                  unit: '%'
                  value: 30
                power:
                  unit: W
                  value: 90
              processes: 'null'
    GPUInfo:
      type: object
      example:
        <GPU_UUID>:
          index:
            type: integer
            example: 0
          name:
            type: string
            example: GeForce GTX 1060
    GPUMetricsInTwoCases:
      type: object
      example:
        <GPU_UUID (All metrics case)>:
          utilization:
            unit: '%'
            value: 95
          power:
            unit: W
            value: 90
        <GPU_UUID (Specific metric case)>:
          unit: '%'
          value: 95
    GPUProcesses:
      type: object
      example:
        <GPU_UUID>:
          - command: python
            owner: foo
            pid: 1111
          - command: java
            owner: bar
            pid: 2222
    CPUMetrics:
      type: object
  parameters:
    hostnameParam:
      description: Node's hostname in the network
      in: path
      name: hostname
      required: true
      schema:
        type: string
    gpuMetricTypeQuery:
      description: Metric type. If not present, queries for all metrics
      in: query
      name: metric_type
      required: false
      schema:
        type: string
        enum:
          - fan_speed
          - mem_free
          - mem_used
          - mem_total
          - utilization
          - mem_util
          - temp
          - power
    cpuMetricTypeQuery:
      description: Metric type. If not present, queries for all metrics
      in: query
      name: metric_type
      required: false
      schema:
        type: string
        enum:
          - mem_free
          - mem_used
          - mem_total
          - utilization
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: tensorhive.authorization.decode_token