# coding: utf-8

from __future__ import absolute_import

from yk_face_api.models import util
from yk_face_api.models.base_model_ import Model
from yk_face_api.models.face_api.process_request_config import ProcessRequestConfig  # noqa: F401,E501
from typing import List


ProcessRequestSchema = \
    {
        "type": "object",
        "required": [
            "image"
        ],
        "properties": {
            "image": {
                "type": "string"
            },
            "processings": {
                "description": "Requested biometric processings.",
                "type": "array",
                "items": {
                    "type": "string",
                    "enum": [
                        "detect",
                        "analyze",
                        "templify",
                        "none"
                    ]
                },
                "default": [
                    "detect",
                    "analyze",
                    "templify"
                ]
            },
            "configuration": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "Configuration name"
                        },
                        "value": {
                            "type": "string",
                            "description": "Configuration value"
                        }
                    }
                },
                "description": "Extensible configurations for biometric processing.",
                "default": []
            }
        }
    }


class ProcessRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, image: str = None, processings: List[str] = [], configuration: List[ProcessRequestConfig] = []):  # noqa: E501
        """ProcessRequest - a model defined in Swagger

        :param image: The image of this ProcessRequest.  # noqa: E501
        :type image: str
        :param processings: The processings of this ProcessRequest.  # noqa: E501
        :type processings: List[str]
        :param configuration: The configuration of this ProcessRequest.  # noqa: E501
        :type configuration: List[ProcessRequestConfig]
        """
        self.swagger_types = {
            'image': str,
            'processings': List[str],
            'configuration': List[ProcessRequestConfig]
        }

        self.attribute_map = {
            'image': 'image',
            'processings': 'processings',
            'configuration': 'configuration'
        }

        self._image = image
        self._processings = processings
        self._configuration = configuration

    @classmethod
    def from_dict(cls, dikt) -> 'ProcessRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The process_request of this ProcessRequest.  # noqa: E501
        :rtype: ProcessRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image(self) -> str:
        """Gets the image of this ProcessRequest.


        :return: The image of this ProcessRequest.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image: str):
        """Sets the image of this ProcessRequest.


        :param image: The image of this ProcessRequest.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")  # noqa: E501
        self._image = image

    @property
    def processings(self) -> List[str]:
        """Gets the processings of this ProcessRequest.

        Requested biometric processings.  # noqa: E501

        :return: The processings of this ProcessRequest.
        :rtype: List[str]
        """
        return self._processings

    @processings.setter
    def processings(self, processings: List[str]):
        """Sets the processings of this ProcessRequest.

        Requested biometric processings.  # noqa: E501

        :param processings: The processings of this ProcessRequest.
        :type processings: List[str]
        """
        allowed_values = ["detect", "analyze", "templify", "none"]  # noqa: E501
        if processings is None or len(processings) == 0:
            processings = ["detect", "analyze", "templify"]
        if not set(processings).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `processings` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(processings) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )
        self._processings = processings

    @property
    def configuration(self) -> List[ProcessRequestConfig]:
        """Gets the configuration of this ProcessRequest.


        :return: The configuration of this ProcessRequest.
        :rtype: List[ProcessRequestConfig]
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration: List[ProcessRequestConfig]):
        """Sets the configuration of this ProcessRequest.


        :param configuration: The configuration of this ProcessRequest.
        :type configuration: List[ProcessRequestConfig]
        """
        if configuration is None:
            configuration = []
        self._configuration = configuration
