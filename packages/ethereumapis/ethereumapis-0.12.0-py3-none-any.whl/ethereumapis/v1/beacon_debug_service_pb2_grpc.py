# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from eth.v1 import beacon_chain_service_pb2 as eth_dot_v1_dot_beacon__chain__service__pb2
from eth.v1 import beacon_debug_service_pb2 as eth_dot_v1_dot_beacon__debug__service__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class BeaconDebugStub(object):
    """Beacon chain debug API

    The beacon chain debug API is a set of endpoints to debug chain and shouldn't be exposed publicly.

    This service is defined in the upstream eth2.0-apis repository (eth2.0-APIs/apis/debug).
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetBeaconState = channel.unary_unary(
                '/ethereum.eth.v1.BeaconDebug/GetBeaconState',
                request_serializer=eth_dot_v1_dot_beacon__chain__service__pb2.StateRequest.SerializeToString,
                response_deserializer=eth_dot_v1_dot_beacon__debug__service__pb2.BeaconStateResponse.FromString,
                )
        self.ListForkChoiceHeads = channel.unary_unary(
                '/ethereum.eth.v1.BeaconDebug/ListForkChoiceHeads',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=eth_dot_v1_dot_beacon__debug__service__pb2.ForkChoiceHeadsResponse.FromString,
                )


class BeaconDebugServicer(object):
    """Beacon chain debug API

    The beacon chain debug API is a set of endpoints to debug chain and shouldn't be exposed publicly.

    This service is defined in the upstream eth2.0-apis repository (eth2.0-APIs/apis/debug).
    """

    def GetBeaconState(self, request, context):
        """GetBeaconState returns full BeaconState object for given stateId.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListForkChoiceHeads(self, request, context):
        """ListForkChoiceHeads retrieves all possible chain heads (leaves of fork choice tree).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BeaconDebugServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetBeaconState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBeaconState,
                    request_deserializer=eth_dot_v1_dot_beacon__chain__service__pb2.StateRequest.FromString,
                    response_serializer=eth_dot_v1_dot_beacon__debug__service__pb2.BeaconStateResponse.SerializeToString,
            ),
            'ListForkChoiceHeads': grpc.unary_unary_rpc_method_handler(
                    servicer.ListForkChoiceHeads,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=eth_dot_v1_dot_beacon__debug__service__pb2.ForkChoiceHeadsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ethereum.eth.v1.BeaconDebug', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BeaconDebug(object):
    """Beacon chain debug API

    The beacon chain debug API is a set of endpoints to debug chain and shouldn't be exposed publicly.

    This service is defined in the upstream eth2.0-apis repository (eth2.0-APIs/apis/debug).
    """

    @staticmethod
    def GetBeaconState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ethereum.eth.v1.BeaconDebug/GetBeaconState',
            eth_dot_v1_dot_beacon__chain__service__pb2.StateRequest.SerializeToString,
            eth_dot_v1_dot_beacon__debug__service__pb2.BeaconStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListForkChoiceHeads(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ethereum.eth.v1.BeaconDebug/ListForkChoiceHeads',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            eth_dot_v1_dot_beacon__debug__service__pb2.ForkChoiceHeadsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
