test_param:
  -
    id: keys
    obj:
      > class DummyConfig(appcli.Config):
      >     def load(self, obj):
      >         yield appcli.Layer(values={'x': 1}, location='a')
      >
      > class DummyObj:
      >     __config__ = [DummyConfig()]
      >     x = appcli.param()
      >     x1 = appcli.param('x')
      >     x2 = appcli.param(key='x')
      >     x3 = appcli.param(key={DummyConfig: 'x'})
    expected:
      x: 1
      x1: 1
      x2: 1
      x3: 1

  -
    id: pick
    obj:
      > class DummyConfig(appcli.Config):
      >     def load(self, obj):
      >         yield appcli.Layer(values={'x': 1}, location='a')
      >         yield appcli.Layer(values={'x': 2}, location='b')
      >
      > class DummyObj:
      >     __config__ = [DummyConfig()]
      >     x1 = appcli.param('x')
      >     x2 = appcli.param('x', pick=list)
      >     x3 = appcli.param('x', pick=list, default=0)
    expected:
      x1: 1
      x2: [1,2]
      x3: [1,2,0]

  -
    id: default
    obj:
      > class DummyObj:
      >     __config__ = []
      >     x = appcli.param(default=1)
    expected:
      x: 1
  -
    id: default
    obj:
      > class DummyConfig(appcli.Config):
      >     def load(self, obj):
      >         yield appcli.Layer(values={'y': 0}, location='a')
      >
      > class DummyObj:
      >     __config__ = [DummyConfig()]
      >     x = appcli.param(default=1)
      >     y = appcli.param()
    expected:
      x: 1
      y: 0

  -
    id: cast
    obj:
      > class DummyConfig(appcli.Config):
      >     def load(self, obj):
      >         yield appcli.Layer(values={'x': 1}, location='a')
      >
      > class DummyObj:
      >     __config__ = [DummyConfig()]
      >     x = appcli.param(cast=lambda x: x+1)
    expected:
      x: 2
  -
    id: cast
    obj:
      # The cast function is not applied to the default.
      > class DummyObj:
      >     __config__ = []
      >     x = appcli.param(default='not-casted', cast=int)
    expected:
      x: 'not-casted'

  -
    id: set
    obj:
      > class DummyObj:
      >     __config__ = []
      >     x = appcli.param()
      >
      > obj = DummyObj()
      > obj.x = 2
    expected:
      x: 2
  -
    id: set
    obj:
      > class DummyConfig(appcli.Config):
      >     def load(self, obj):
      >         yield appcli.Layer(values={'x': 1}, location='a')
      >
      > class DummyObj:
      >     __config__ = [DummyConfig()]
      >     x = appcli.param()
      >
      > obj = DummyObj()
      > obj.x = 2
    expected:
      x: 2
  -
    id: set
    obj:
      > class DummyConfig(appcli.Config):
      >     def load(self, obj):
      >         yield appcli.Layer(values={'x': 1}, location='a')
      >
      > class DummyObj:
      >     __config__ = [DummyConfig()]
      >     x = appcli.param()
      >
      > # Setting a parameter for one instance shouldn't affect other 
      > # instances.
      > decoy = DummyObj()
      > decoy.x = 2
      >
      > obj = DummyObj()
    expected:
      x: 1
  -
    id: set
    obj:
      > class DummyConfig(appcli.Config):
      >     def load(self, obj):
      >         yield appcli.Layer(values={'x': 1}, location='a')
      >
      > class DummyObj:
      >     __config__ = [DummyConfig()]
      >     x = appcli.param()
      >
      > obj = DummyObj()
      > obj.x = 2
      > del obj.x
    expected:
      x: 1
  -
    id: set
    obj:
      > from copy import copy
      >
      > class DummyObj:
      >     __config__ = []
      >     x = appcli.param()
      >
      > obj = DummyObj()
      > obj.x = 2
      >
      > obj = copy(obj)
    expected:
      x: 2

  -
    id: inherit
    obj:
      > class DummyConfig(appcli.Config):
      >     def load(self, obj):
      >         yield appcli.Layer(values={'x': 1}, location='a')
      >
      > class ParentObj:
      >     __config__ = [DummyConfig()]
      >     x = appcli.param()
      >
      > class ChildObj(ParentObj):
      >     pass
      >
      > obj = ChildObj()
    expected:
      x: 1
  -
    id: inherit
    obj:
      > class DummyConfig(appcli.Config):
      >     def load(self, obj):
      >         yield appcli.Layer(values={'x': 1}, location='a')
      >
      > class ParentObj:
      >     x = appcli.param()
      >
      > class ChildObj(ParentObj):
      >     __config__ = [DummyConfig()]
      >
      > obj = ChildObj()
    expected:
      x: 1
  -
    id: inherit
    obj:
      > class DummyConfig(appcli.Config):
      >     def load(self, obj):
      >         yield appcli.Layer(values={'x': 1}, location='a')
      >
      > class ParentObj:
      >     __config__ = [DummyConfig()]
      >
      > class ChildObj(ParentObj):
      >     x = appcli.param()
      >
      > obj = ChildObj()
    expected:
      x: 1

  -
    id: pending
    obj:
      > class PendingConfig(appcli.Config):
      >     autoload = False
      >     def load(self, obj):
      >         yield appcli.Layer(values={'x': 1}, location='a')
      >
      > class ActiveConfig(appcli.Config):
      >     def load(self, obj):
      >         yield appcli.Layer(values={'x': 2}, location='b')
      >
      > class DummyObj:
      >     __config__ = [PendingConfig(), ActiveConfig()]
      >     x = appcli.param()
    expected:
      x: 2
  -
    id: pending
    obj:
      > class PendingConfig(appcli.Config):
      >     autoload = False
      >     def load(self, obj):
      >         yield appcli.Layer(values={'x': 1}, location='a')
      >
      > class ActiveConfig(appcli.Config):
      >     def load(self, obj):
      >         yield appcli.Layer(values={'x': 2}, location='b')
      >
      > class DummyObj:
      >     __config__ = [PendingConfig(), ActiveConfig()]
      >     x = appcli.param()
      >
      > obj = DummyObj()
      > appcli.load(obj)
    expected:
      x: 1

test_make_map:
  -
    id: dict-0
    configs: []
    values: {}
    expected: {}
  -
    id: dict-0
    configs: [a]
    values: {}
    expected: {}
  -
    id: dict-0
    configs: []
    values: {A: 1}
    error:
      type: ValueError
  -
    id: dict-1
    configs: [a]
    values: {A: 1}
    expected: {a: 1}
  -
    id: dict-1
    configs: [a]
    values: {B: 2}
    error:
      type: ValueError
  -
    id: dict-1
    configs: [a]
    values: {A: 1, B: 2}
    error:
      type: ValueError
  -
    id: dict-2
    configs: [a, b]
    values: {A: 1, B: 2}
    expected: {a: 1, b: 2}
  -
    id: dict-2
    locals:
      > class A(appcli.Config): pass
      > a1, a2 = A(), A()
    configs: [a1, a2]
    values: {A: 1}
    expected: {a1: 1, a2: 1}
  -
    id: dict-inheritance
    locals:
      > class A1(appcli.Config): pass
      > class A2(A1): pass
      > a1, a2 = A1(), A2()
    configs: [a1, a2]
    values: {A1: 1, A2: 2}
    expected: {a1: 1, a2: 2}
  -
    id: dict-inheritance
    locals:
      > class A1(appcli.Config): pass
      > class A2(A1): pass
      > a2 = A2()
    configs: [a2]
    values: {A1: 1}
    expected: {a2: 1}

  -
    id: list
    configs: []
    values: []
    expected: dict()
  -
    id: list
    configs: [a]
    values: [1]
    expected: {a: 1}
  -
    id: list
    configs: [a, b]
    values: [1, 2]
    expected: {a: 1, b: 2}
  -
    id: list
    configs: [a]
    values: [1, 2]
    error:
      type: ValueError
  -
    id: list
    configs: [a, b]
    values: [1]
    error:
      type: ValueError

  -
    id: scalar
    configs: []
    values: 'foo'
    expected: {}
  -
    id: scalar
    configs: [a]
    values: 'foo'
    expected: {a: 'foo'}
  -
    id: scalar
    configs: [a, b]
    values: 'foo'
    expected: {a: 'foo', b: 'foo'}
