Metadata-Version: 2.1
Name: UBPY
Version: 2.1
Summary: UniqueBot python SDK
Home-page: https://github.com/popop098/UBPY
Author: Gawi_pr
Author-email: popop098@naver.com
License: MIT
Description: # UBPY
        # UniqueBots 파이썬 **비공식** SDK입니다.
        # 공식 SDK- (준비중입니다.)
        ### SaidBySolo님의 KoreanBots비공식 sdk레포의 일부를 사용해 제작되었습니다. [URL](<https://github.com/SaidBySolo/DBKR-API-Python>)
        
        ### 현재는 길드수업데이트, 투표여부 모듈만 존재합니다, 
        ### 길드수업데이트 모듈은 자동으로 30분마다 자동으로 길드수를 비교해 요청을 보냅니다.
        
        ### 파이썬 3.6이상을 필요로 합니다.
        
        ```
        pip install UBPY --upgrade
        ```
        
        ## 길드 수 업데이트
        
        **Use not Cogs**
        ```py
        import discord
        from discord.ext import commands
        import UBPY
        bot = commands.Bot(command_prefix='!')
        #or
        bot = discord.Client()
        
        UBPY.Client(bot,token='UniqueBots TOKEN',bot_id="BOT ID")
        
        @bot.event
        async def on_ready():
            print(f"{bot.user.name} 준비 완료.")
        
        bot.run('Discord TOKEN')
        ```
        
        **Using Cogs**
        ```py
        import UBPY
        import discord
        from discord.ext import commands
        
        class GuildCount(commands.Cog):
        
            def __init__(self, bot):
                self.bot = bot
                self.token = "UniqueBots TOKEN"
                self.id = "Bot ID"
                UBPY.Client(self.bot,self.token,self.id)
        
        def setup(bot):
            bot.add_cog(GuildCount(bot))
        ```
        
        ## 유저 봇 투표여부
        
        **Cogs**
        ```py
        import UBPY
        import discord
        from discord.ext import commands
        
        class CheckVote(commands.Cog):
        
            def __init__(self, bot):
                self.bot = bot
                self.token = "UniqueBots TOKEN"
                self.id = "Bot ID"
        
            @commands.command(name="투표확인")
            async def _checkvote(self,ctx):
                VOTE = UBPY.UBPYvote(ctx, self.token, bot_id=self.id)
                check = await VOTE.vote()
                if check == True:
                    print('TRUE')
                elif check == False:
                    print('FALSE')
                else:
                    print('ERROR')
        
        def setup(bot):
            bot.add_cog(CheckVote(bot))
        ```
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3.8
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
