import{PCA as p,UMAP as c,tSNE as l}from"../../resource/high-dimensional/index.js";import{WorkerSelf as u}from"../index.js";const t=new u;t.emit("INITIALIZED"),t.on("RUN",({reduction:n,params:e})=>{switch(n){case"pca":return m(e);case"tsne":return f(e);case"umap":return E(e);default:return null}});function m(n){const{vectors:e,variance:i,totalVariance:o}=p(n.input,n.dim,n.n);t.emit("RESULT",{vectors:e,variance:i,totalVariance:o})}function f(n){const e=new l({dimension:n.n,perplexity:n.perplexity,epsilon:n.epsilon}),i=()=>{e.setData(n.input,n.dim),t.emit("RESULT",{vectors:e.solution,step:e.step})};i(),t.on("INFO",o=>{const r=o.type;switch(r){case"step":return e.run(),t.emit("RESULT",{vectors:e.solution,step:e.step});case"reset":return i();case"params":{const s=o.data;(s==null?void 0:s.perplexity)!=null&&e.setPerplexity(s.perplexity),(s==null?void 0:s.epsilon)!=null&&e.setEpsilon(s.epsilon);return}default:return null}})}function E(n){const e=c(n.n,n.neighbors,n.input,n.dim);e&&t.emit("RESULT",{vectors:e.embedding,epoch:e.nEpochs,nEpochs:e.nEpochs}),t.on("INFO",()=>{t.emit("INITIALIZED")})}
