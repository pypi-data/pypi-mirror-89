from torch.nn import functional
import torch
from torch import nn

from dpipe import layers
from dpipe.torch import to_device

kernel_size = 3
structure = [32, 32, 64, 64]
n_features = 10

architecture = to_device(nn.Sequential(
    nn.Conv2d(1, structure[0], kernel_size),
    nn.ReLU(),
    layers.ConsistentSequential(layers.ResBlock2d, structure, kernel_size=kernel_size),
    layers.PyramidPooling(functional.max_pool2d),
    nn.Linear(structure[-1], 16),
    nn.ReLU(),
    nn.Linear(16, n_features)
), None)

criterion = nn.CrossEntropyLoss()
activation = nn.Softmax(-1)
optimizer = torch.optim.Adam(architecture.parameters())
