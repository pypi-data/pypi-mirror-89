# automatically generated by the FlatBuffers compiler, do not modify

# namespace: dv

import flatbuffers


class IMUPacket(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsIMUPacket(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IMUPacket()
        x.Init(buf, n + offset)
        return x

    # IMUPacket
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # IMUPacket
    def Samples(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .IMU import IMU
            obj = IMU()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # IMUPacket
    def SamplesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0


def IMUPacketStart(builder):
    builder.StartObject(1)


def IMUPacketAddSamples(builder, samples):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(samples), 0)


def IMUPacketStartSamplesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def IMUPacketEnd(builder):
    return builder.EndObject()
