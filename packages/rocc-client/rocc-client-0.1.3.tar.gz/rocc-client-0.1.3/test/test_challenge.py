# coding: utf-8

"""
    Registry of Open Community Challenge API

    The OpenAPI specification implemented by the Challenge Registries. # Introduction TBA   # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Contact: thomas.schaffter@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import roccclient
from roccclient.models.challenge import Challenge  # noqa: E501
from roccclient.rest import ApiException

class TestChallenge(unittest.TestCase):
    """Challenge unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test Challenge
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = roccclient.models.challenge.Challenge()  # noqa: E501
        if include_optional :
            return Challenge(
                id = '507f1f77bcf86cd799439011',
                name = 'Sample Challenge',
                start_date = 'Mon Nov 09 16:00:00 PST 2020',
                end_date = 'Wed Dec 30 16:00:00 PST 2020',
                website = 'https://synapse.org/sample-challenge',
                status = 'open',
                tags = ["Machine Learning","Breast Cancer"],
                grant = [
                    roccclient.models.grant.Grant(
                        id = '507f1f77bcf86cd799439011',
                        name = '0',
                        description = '0',
                        sponsor = roccclient.models.organization.Organization(
                            id = '507f1f77bcf86cd799439011',
                            name = 'Sage Bionetworks',
                            url = 'https://sagebionetworks.org/', ),
                        amount = 56,
                        url = '0', )
                    ],
                organizers = [
                    roccclient.models.person.Person(
                        id = '507f1f77bcf86cd799439011',
                        first_name = 'John',
                        last_name = 'Smith',
                        email = 'john.smith@example.com', )
                    ]
            )
        else :
            return Challenge(
                name = 'Sample Challenge',
                start_date = 'Mon Nov 09 16:00:00 PST 2020',
                end_date = 'Wed Dec 30 16:00:00 PST 2020',
                status = 'open',
        )

    # def testChallenge(self):
    #     """Test Challenge"""
    #     inst_req_only = self.make_instance(include_optional=False)
    #     inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
