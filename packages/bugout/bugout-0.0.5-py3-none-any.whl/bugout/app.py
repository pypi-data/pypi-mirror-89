from typing import Any, Dict, List, Optional
import uuid

from . import data
from . import calls
from .group import Group
from .journal import Journal
from .user import User


class InvalidParameters(ValueError):
    """
    Raised when provided invalid parameters.
    """


class Bugout:
    def __init__(
        self, brood_api_url: Optional[str] = None, spire_api_url: Optional[str] = None
    ) -> None:
        self.brood_api_url = brood_api_url
        self.spire_api_url = spire_api_url

        self.user = User(self.brood_api_url)
        self.group = Group(self.brood_api_url)
        self.journal = Journal(self.spire_api_url)

    @property
    def brood_url(self):
        return self.brood_api_url

    @property
    def spire_url(self):
        return self.spire_api_url

    def brood_ping(self) -> Dict[str, str]:
        if self.brood_api_url is None:
            raise InvalidParameters("Brood API url should be provided")
        return calls.ping(self.brood_api_url)

    def spire_ping(self) -> Dict[str, str]:
        if self.spire_api_url is None:
            raise InvalidParameters("Spire API url should be provided")
        return calls.ping(self.spire_api_url)

    # User handlers
    def create_user(
        self,
        username: str,
        email: str,
        password: str,
        autogenerated_token: str = None,
    ) -> data.BugoutUser:
        return self.user.create_user(
            username, email, password, autogenerated_token=autogenerated_token
        )

    def get_user(self, token: uuid.UUID) -> data.BugoutUser:
        return self.user.get_user(token)

    def get_user_by_id(self, token: uuid.UUID, user_id: uuid.UUID) -> data.BugoutUser:
        return self.user.get_user_by_id(token, user_id)

    def confirm_email(
        self, token: uuid.UUID, verification_code: str
    ) -> data.BugoutUser:
        return self.user.confirm_email(token, verification_code)

    def restore_password(self, email: str) -> Dict[str, str]:
        return self.user.restore_password(email)

    def reset_password(self, reset_id: uuid.UUID, new_password: str) -> data.BugoutUser:
        return self.user.reset_password(reset_id, new_password)

    def change_password(
        self, token: uuid.UUID, current_password: str, new_password: str
    ) -> data.BugoutUser:
        return self.user.change_password(token, current_password, new_password)

    def delete_user(
        self, token: uuid.UUID, user_id: uuid.UUID, password: str
    ) -> data.BugoutUser:
        return self.user.delete_user(token, user_id, password)

    # Token handlers
    def create_token(self, username: str, password: str) -> data.BugoutToken:
        return self.user.create_token(username, password)

    def revoke_token(self, token: uuid.UUID) -> uuid.UUID:
        return self.user.revoke_token(token)

    def revoke_token_by_id(self, token: uuid.UUID) -> uuid.UUID:
        return self.user.revoke_token_by_id(token)

    def update_token(
        self,
        token: uuid.UUID,
        token_type: Optional[data.TokenType] = None,
        token_note: Optional[str] = None,
    ) -> data.BugoutToken:
        return self.user.update_token(token, token_type, token_note)

    def get_token_types(self, token: uuid.UUID) -> List[str]:
        return self.user.get_token_types(token)

    def get_user_tokens(
        self,
        token: uuid.UUID,
        active: Optional[bool] = None,
        token_type: Optional[data.TokenType] = None,
    ) -> data.BugoutUserTokens:
        return self.user.get_user_tokens(token, active, token_type)

    # Group handlers
    def get_group(self, token: uuid.UUID, group_id: uuid.UUID) -> data.BugoutGroup:
        return self.group.get_group(token, group_id)

    def get_user_groups(self, token: uuid.UUID) -> data.BugoutUserGroups:
        return self.group.get_user_groups(token)

    def create_group(self, token: uuid.UUID, group_name: str) -> data.BugoutGroup:
        return self.group.create_group(token, group_name)

    def set_user_group(
        self,
        token: uuid.UUID,
        group_id: uuid.UUID,
        user_type: data.Role,
        username: Optional[str] = None,
        email: Optional[str] = None,
    ) -> data.BugoutGroupUser:
        return self.group.set_user_group(token, group_id, user_type, username, email)

    def delete_user_group(
        self,
        token: uuid.UUID,
        group_id: uuid.UUID,
        username: Optional[str] = None,
        email: Optional[str] = None,
    ) -> data.BugoutGroupUser:
        return self.group.delete_user_group(token, group_id, username, email)

    def get_group_members(
        self, token: uuid.UUID, group_id: uuid.UUID
    ) -> data.BugoutGroupMembers:
        return self.group.get_group_members(token, group_id)

    def update_group(
        self, token: uuid.UUID, group_id: uuid.UUID, group_name: str
    ) -> data.BugoutGroup:
        return self.group.update_group(token, group_id, group_name)

    def delete_group(self, token: uuid.UUID, group_id: uuid.UUID) -> data.BugoutGroup:
        return self.group.delete_group(token, group_id)

    # Journal handlers
    def get_journal(
        self, journal_id: uuid.UUID, token: uuid.UUID
    ) -> data.BugoutJournal:
        return self.journal.get_journal(journal_id, token)
