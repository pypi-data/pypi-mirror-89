# coding: utf-8

"""
    Aliro Q.Network

    This is an api for the Aliro Q.Network  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: nick@aliroquantum.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import aliro_quantum_networking
from aliro_quantum_networking.models.submission_aqn_base import SubmissionAqnBase  # noqa: E501
from aliro_quantum_networking.rest import ApiException

class TestSubmissionAqnBase(unittest.TestCase):
    """SubmissionAqnBase unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test SubmissionAqnBase
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = aliro_quantum_networking.models.submission_aqn_base.SubmissionAqnBase()  # noqa: E501
        if include_optional :
            return SubmissionAqnBase(
                classical_channels = [
                    aliro_quantum_networking.models.classical_channel.ClassicalChannel(
                        delay = 1.337, 
                        distance = 1.337, 
                        node_from = '0', 
                        node_to = '0', )
                    ], 
                name = '0', 
                nodes = [
                    aliro_quantum_networking.models.node.Node(
                        name = '0', 
                        memories = [
                            null
                            ], )
                    ], 
                quantum_connections = [
                    aliro_quantum_networking.models.quantum_connection.QuantumConnection(
                        attenuation = 1.337, 
                        distance = 1.337, 
                        node_from = '0', 
                        node_to = '0', )
                    ], 
                request = aliro_quantum_networking.models.request.Request(
                    memory_size = 56, 
                    node_from = '0', 
                    node_to = '0', 
                    target_fidelity = 1.337, 
                    time_beginning = 1.337, 
                    time_end = 1.337, ), 
                submission_aqn_type = '0'
            )
        else :
            return SubmissionAqnBase(
                name = '0',
                nodes = [
                    aliro_quantum_networking.models.node.Node(
                        name = '0', 
                        memories = [
                            null
                            ], )
                    ],
                quantum_connections = [
                    aliro_quantum_networking.models.quantum_connection.QuantumConnection(
                        attenuation = 1.337, 
                        distance = 1.337, 
                        node_from = '0', 
                        node_to = '0', )
                    ],
                submission_aqn_type = '0',
        )

    def testSubmissionAqnBase(self):
        """Test SubmissionAqnBase"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
