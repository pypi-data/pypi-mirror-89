import logging
import sys

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.addHandler(logging.StreamHandler(sys.stdout))

# 4 spaces used for indenting kerberos file
krb_fmt_padding = " " * 4


def write_krb_conf(emr_cluster, filepath):
    """
    Writes kerberos file at give path using kerberos properties derived from emr cluster
    :param str emr_cluster: EMR cluster Id
    :param str filepath: Absolute file path to write krb5.conf file
    """
    emr_krb_conf = emr_cluster.get_krb_conf()
    logger.debug(f"emr kerb properties:{emr_krb_conf}")
    with open(filepath, "w") as f:
        krb_conf_str = generate_kerb_conf_str(emr_krb_conf)
        f.write(krb_conf_str)


def generate_kerb_conf_str(emr_krb_conf):
    """
    Generates kerberos configuration as a string. Takes as input kerberos configuraiton of emr
    https://web.mit.edu/kerberos/krb5-1.12/doc/admin/conf_files/krb5_conf.html#sections
        {
            "libdefaults": {}
            "realms": {}
            "domain_realm": {}
        }
    :param dict emr_krb_conf : kerberos configuration of emr_cluster as dictionary.
    """
    return (
        "# Generated by SageMaker helper library"
        + _get_libdefaults(emr_krb_conf)
        + "\n"
        + _get_realms(emr_krb_conf)
        + "\n"
        + _get_domains(emr_krb_conf)
        + "\n"
    )


def _get_libdefaults(emr_krb_conf):
    libdefaults_conf = emr_krb_conf["libdefaults"]
    libdefaults = {
        "default_realm": libdefaults_conf["default_realm"],
        "dns_lookup_realm": "false",
        "dns_lookup_kdc": "false",
        "rdns": "false",
        "ticket_lifetime": libdefaults_conf["ticket_lifetime"],
        "forwardable": "true",
        "udp_preference_limit": "1000000",
        "default_tkt_enctypes": "aes256-cts-hmac-sha1-96 aes128-cts-hmac-sha1-96 des3-cbc-sha1",
        "default_tgs_enctypes": "aes256-cts-hmac-sha1-96 aes128-cts-hmac-sha1-96 des3-cbc-sha1",
        "permitted_enctypes": "aes256-cts-hmac-sha1-96 aes128-cts-hmac-sha1-96 des3-cbc-sha1",
    }
    config_str = _convert_to_krb_conf_format(libdefaults, krb_fmt_padding)
    return f"\n[libdefaults]\n{config_str}"


def _get_realms(emr_krb_conf):
    realmstr = ""
    realms_conf = emr_krb_conf["realms"]
    padding = f"{krb_fmt_padding}{krb_fmt_padding}"
    for realm in realms_conf:
        realmstr = (
            realmstr
            + f"{krb_fmt_padding}{realm} = {{\n{_convert_to_krb_conf_format(realms_conf[realm], padding)}{krb_fmt_padding}}}\n"
        )

    return f"[realms]\n{realmstr}"


def _get_domains(emr_krb_conf):
    domains_conf = emr_krb_conf["domain_realm"]
    domain_str = _convert_to_krb_conf_format(domains_conf, krb_fmt_padding)
    return f"[domain_realm]\n{domain_str}"


def _convert_to_krb_conf_format(config, padding):
    configstr = ""
    for key in config:
        configstr = configstr + padding + str(key) + " = " + str(config[key]) + "\n"

    return configstr
