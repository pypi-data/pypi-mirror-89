# coding: utf-8

from __future__ import absolute_import

from yk_face_api.models import util
from yk_face_api.models.base_model_ import Model


VerifyIdRequestSchema = \
    {
        "type": "object",
        "required": [
            "template",
            "template_id"
        ],
        "properties": {
            "template": {
                "type": "string"
            },
            "template_id": {
                "type": "string"
            },
            "gallery_id": {
                "type": "string"
            }
        }
    }


class VerifyIdRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, template: str = None, template_id: str = None, gallery_id: str = None):  # noqa: E501
        """VerifyIdRequest - a model defined in Swagger

        :param template: The template of this VerifyIdRequest.  # noqa: E501
        :type template: str
        :param template_id: The template_id of this VerifyIdRequest.  # noqa: E501
        :type template_id: str
        :param gallery_id: The gallery_id of this VerifyIdRequest.  # noqa: E501
        :type gallery_id: str
        """
        self.swagger_types = {
            'template': str,
            'template_id': str,
            'gallery_id': str
        }

        self.attribute_map = {
            'template': 'template',
            'template_id': 'template_id',
            'gallery_id': 'gallery_id'
        }

        self._template = template
        self._template_id = template_id
        self._gallery_id = gallery_id

    @classmethod
    def from_dict(cls, dikt) -> 'VerifyIdRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The verify_id_request of this VerifyIdRequest.  # noqa: E501
        :rtype: VerifyIdRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def template(self) -> str:
        """Gets the template of this VerifyIdRequest.


        :return: The template of this VerifyIdRequest.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template: str):
        """Sets the template of this VerifyIdRequest.


        :param template: The template of this VerifyIdRequest.
        :type template: str
        """
        if template is None:
            raise ValueError("Invalid value for `template`, must not be `None`")  # noqa: E501

        self._template = template

    @property
    def template_id(self) -> str:
        """Gets the template_id of this VerifyIdRequest.


        :return: The template_id of this VerifyIdRequest.
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id: str):
        """Sets the template_id of this VerifyIdRequest.


        :param template_id: The template_id of this VerifyIdRequest.
        :type template_id: str
        """
        if template_id is None:
            raise ValueError("Invalid value for `template_id`, must not be `None`")  # noqa: E501

        self._template_id = template_id

    @property
    def gallery_id(self) -> str:
        """Gets the gallery_id of this VerifyIdRequest.


        :return: The gallery_id of this VerifyIdRequest.
        :rtype: str
        """
        return self._gallery_id

    @gallery_id.setter
    def gallery_id(self, gallery_id: str):
        """Sets the gallery_id of this VerifyIdRequest.


        :param gallery_id: The gallery_id of this VerifyIdRequest.
        :type gallery_id: str
        """

        self._gallery_id = gallery_id
