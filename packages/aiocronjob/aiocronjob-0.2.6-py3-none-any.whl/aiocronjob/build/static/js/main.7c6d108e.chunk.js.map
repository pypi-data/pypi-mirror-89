{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["JobsView","props","state","jobs","showActionSheet","job","action","buttons","last_status","push","ActionSheet","showActionSheetWithOptions","options","cancelButtonIndex","length","title","name","getStatusBadge","message","crontab","maskClosable","buttonIndex","doAction","then","handleRefresh","catch","reason","console","error","bind","this","fetch","process","res","json","data","log","setState","Toast","offline","jobName","errors","filter","done","running","tabs","text","renderJobList","map","Item","arrow","onClick","mode","rightContent","icon","src","alt","inline","size","initialPage","onChange","tab","index","onTabClick","style","height","margin","status","color","marginLeft","padding","backgroundColor","borderRadius","border","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7c6d108e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {ActionSheet, Badge, Button, List, NavBar, Tabs, Toast} from 'antd-mobile';\n\ntype JobStatus = \"running\" | \"error\" | \"pending\" | \"done\";\n\ntype Job = {\n    name: string,\n    last_status: JobStatus,\n    crontab: string\n}\n\ninterface State {\n    jobs: Job[]\n}\n\n\nclass JobsView extends React.Component<{}, State> {\n    state: State = {\n        jobs: [],\n    };\n\n    constructor(props: Readonly<{}>) {\n        super(props);\n        this.handleRefresh = this.handleRefresh.bind(this);\n    }\n\n\n    componentDidMount() {\n        this.handleRefresh();\n    }\n\n    handleRefresh() {\n        fetch(\n            `${process.env.REACT_APP_API_URL}/api/jobs`,\n        ).then((res: Response) => res.json())\n            .then((data) => {\n                console.log(data);\n                this.setState({\n                    jobs: data,\n                });\n            }).catch((reason => {\n            Toast.offline(`${reason}`, 3);\n        }));\n\n    }\n\n    static getStatusBadge(status: JobStatus) {\n\n        let color;\n\n        switch (status) {\n            case \"pending\": {\n                color = 'orange';\n                break;\n            }\n            case \"running\": {\n                color = 'green';\n                break;\n            }\n            case \"done\": {\n                color = '#000';\n                break;\n            }\n            case \"error\": {\n                color = 'red';\n                break;\n            }\n            default: {\n                color = 'grey';\n            }\n        }\n\n        return <Badge text={status} style={{\n            marginLeft: 12,\n            padding: '0 3px',\n            backgroundColor: '#fff',\n            borderRadius: 2,\n            color: color,\n            border: `1px solid ${color}`,\n        }}/>\n    }\n\n    doAction(jobName: string, action: \"start\" | \"cancel\") {\n        return fetch(`${process.env.REACT_APP_API_URL}/api/jobs/${jobName}/${action}`);\n    }\n\n    showActionSheet = (job: Job) => {\n        let buttons = [],\n            action: \"start\" | \"cancel\";\n        if (job.last_status === \"running\") {\n            action = 'cancel';\n            buttons.push(\"Stop job\");\n        } else {\n            action = 'start';\n            buttons.push(\"Start job\");\n        }\n        buttons.push(\"Cancel\");\n\n        ActionSheet.showActionSheetWithOptions({\n                options: buttons,\n                cancelButtonIndex: buttons.length - 1,\n                title: <span>{job.name} {JobsView.getStatusBadge(job.last_status)}</span>,\n                message: <span>&#128339; {job.crontab}</span>,\n                maskClosable: true,\n            },\n            (buttonIndex: number) => {\n                if (buttonIndex === 0) {\n                    this.doAction(job.name, action).then(\n                        this.handleRefresh\n                    ).catch(reason => {\n                        console.error('oops', reason);\n                    })\n                }\n            });\n    }\n\n    render() {\n        const errors = this.state.jobs.filter(job => job.last_status === \"error\");\n        const done = this.state.jobs.filter(job => job.last_status === \"done\");\n        const running = this.state.jobs.filter(job => job.last_status === \"running\");\n\n        const tabs = [\n            {title: <Badge text={this.state.jobs.length}>All</Badge>},\n            {title: <Badge text={running.length}>Running</Badge>},\n            {title: <Badge text={errors.length}>Error</Badge>},\n            {title: <Badge text={done.length}>Done</Badge>},\n        ];\n\n        const renderJobList = (jobs: Job[]) => {\n            return (\n                <List>\n                    {jobs.map(job =>\n                        <List.Item key={job.name}\n                                   arrow=\"horizontal\"\n                                   onClick={() => this.showActionSheet(job)}\n                        >\n                            <span>{job.name}\n                                {JobsView.getStatusBadge(job.last_status)}\n                            </span>\n                        </List.Item>\n                    )}\n                </List>\n            )\n        }\n\n\n        return [\n            <NavBar\n                key=\"navbar\"\n                mode=\"light\"\n                rightContent={\n                    <Button\n                        icon={<img\n                            src=\"https://gw.alipayobjects.com/zos/rmsportal/jBfVSpDwPbitsABtDDlB.svg\"\n                            alt=\"\"/>}\n                        inline size=\"small\"\n                        onClick={this.handleRefresh}\n                    >\n                        Refresh\n                    </Button>\n                }\n            >Aiocronjob</NavBar>,\n\n            <Tabs key=\"tabs\"\n                  tabs={tabs}\n                  initialPage={1}\n                  onChange={(tab, index) => {\n                      console.log('onChange', index, tab);\n                  }}\n                  onTabClick={(tab, index) => {\n                      console.log('onTabClick', index, tab);\n                  }}\n            >\n                <div style={{height: '100%'}}>\n                    {\n                        this.state.jobs.length === 0 ?\n                            <span>No jobs.</span> :\n                            renderJobList(this.state.jobs)\n                    }\n                </div>\n                <div style={{height: '100%'}}>\n                    {\n                        running.length === 0 ?\n                            <span style={{margin: \"auto\"}}>No running jobs.</span> :\n                            renderJobList(running)\n                    }\n                </div>\n                <div style={{height: '100%'}}>\n                    {errors.length === 0 ?\n                        <span>No error jobs.</span> :\n                        renderJobList(errors)}\n                </div>\n                <div style={{height: '100%'}}>\n                    {done.length === 0 ? <span>No done jobs.</span> : renderJobList(done)}\n                </div>\n            </Tabs>\n        ];\n    }\n}\n\nfunction App() {\n    return (\n        <div className=\"App\">\n\n            <JobsView/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd-mobile/dist/antd-mobile.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}