# -*- coding: utf-8 -*-

"""
    dropbox_test_api

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import base64
import calendar
from datetime import datetime
from dropbox_test_api.controllers.o_auth_authorization_controller import OAuthAuthorizationController
from dropbox_test_api.api_helper import APIHelper
from dropbox_test_api.configuration import Configuration


class OAuth2:

    @classmethod
    def apply(cls, http_request):
        """ Add OAuth2 authentication to the request.

        Args:
            http_request (HttpRequest): The HttpRequest object to which
                authentication header will be added.

        """
        cls.check_auth()
        token = Configuration.o_auth_token.access_token
        http_request.headers['Authorization'] = "Bearer {}".format(token)

    @staticmethod
    def get_authorization_url(scope=None, state=None, additional_params=None):
        """ Builds and returns an authorization URL. The user is expected to
            obtain an authorization code from this URL and then call the authorize
            function with that authorization code.

        Args:
            scope (str | list of str): The scope required for the access token.
            state (str): An opaque state string.
            additional_params (dict): Any additional query parameters to be added to the URL.

        Returns:
            str: The authorization URL.

        """
        auth_url = Configuration.get_base_uri(Configuration.Server.AUTH)
        auth_url += '/authorize'
        query_params = {
            'response_type': 'code',
            'client_id': Configuration.o_auth_client_id,
            'redirect_uri': Configuration.o_auth_redirect_uri
        }
        if scope:
            query_params['scope'] = ' '.join(scope) if isinstance(scope, list) else scope
        if state:
            query_params['state'] = state
        if additional_params:
            query_params.update(additional_params)
        auth_url = APIHelper.append_url_with_query_parameters(auth_url, query_params)
        return APIHelper.clean_url(auth_url)

    @staticmethod
    def update_token(token):
        """ Sets the token object of the configuation class.

        Args:
            token (OAuthToken): The OAuth token.

        """
        if token.expires_in:
            utc_now = calendar.timegm(datetime.now().utctimetuple())
            token.expiry = (utc_now + int(token.expires_in))
        Configuration.o_auth_token = token
        if Configuration.o_auth_callback:
            Configuration.o_auth_callback(token)

    @staticmethod
    def build_basic_auth_header():
        """ Builds the basic auth header for endpoints in the
            OAuth Authorization Controller.

        Returns:
            str: The value of the Authentication header.

        """
        username = Configuration.o_auth_client_id
        password = Configuration.o_auth_client_secret
        joined = "{}:{}".format(username, password)
        encoded = base64.b64encode(str.encode(joined)).decode('iso-8859-1')
        return "Basic {}".format(encoded)

    @classmethod
    def check_auth(cls):
        """ Checks if OAuth token is valid."""
        if not Configuration.o_auth_token:
            raise Exception('Client is not authorized. An OAuth token is needed to make API calls.')
        if cls.token_expired():
            cls.refresh_token()

    @classmethod
    def authorize(cls, authCode, additional_params=None):
        """ Authorizes the client.

        Args:
            authCode (str): The authentication code.
            additional_params (dict):  Any additional form parameters.

        Returns:
            OAuthToken: The OAuth token.

        """
        token = OAuthAuthorizationController().request_token(
            cls.build_basic_auth_header(),
            authCode,
            Configuration.o_auth_redirect_uri,
            additional_params
        )
        cls.update_token(token)
        return token

    @staticmethod
    def token_expired():
        """ Checks if OAuth token has expired.

        Returns:
            bool: True if token has expired, False otherwise.

        """
        utc_now = calendar.timegm(datetime.now().utctimetuple())
        return (hasattr(Configuration.o_auth_token, 'expiry')
            and Configuration.o_auth_token.expiry < utc_now)

    @classmethod
    def refresh_token(cls, scope=None, additional_params=None):
        """ Refreshes OAuth token. This function is automatically called
            if the token has expired.

        Args:
            scope (str | list of str): Any scopes for the new authentication token.
            additional_params (dict):  Any additional form parameters.

        Returns:
            OAuthToken: The refreshed OAuth token.

        """
        token = OAuthAuthorizationController().refresh_token(
            cls.build_basic_auth_header(),
            Configuration.o_auth_token.refresh_token,
            ' '.join(scope) if (isinstance(scope, list)) else scope,
            additional_params
        )
        cls.update_token(token)
        return token
