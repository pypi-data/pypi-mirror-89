#!/usr/bin/env python3

import os, sys, random, argparse
import games as gd
import pygame as pg
from ialauncher import Game


def parse_args():
    parser = argparse.ArgumentParser(description='Play all of the Internet Archiveâ€™s MS-DOS games offline!')
    parser.add_argument('--slideshow', type=int, metavar='X', help='Focus on a random title screen every X seconds')
    return parser.parse_args()


def load_games():
    games = []
    print('Loading games', end='')
    games_dir = os.path.dirname(gd.__file__)
    for entry in os.listdir(games_dir):
        if not os.path.isdir(os.path.join(games_dir, entry)):
            continue
        if entry.startswith('.'):
            continue
        if entry.startswith('__'):
            continue
        try:
            games.append(Game(os.path.join(games_dir, entry)))
            print('.', end='', flush=True)
        except:
            raise ValueError('Unable to load', entry)
    print('')

    if not games:
        print('No games found!')
        sys.exit(1)

    games.sort()
    print(f'{len(games)} games loaded!')
    return games


def show_ui(games, slideshow=0):
    pg.init()
    ADVANCE = pg.event.custom_type()
    pg.key.set_repeat(300, 60)
    if slideshow:
        pg.time.set_timer(ADVANCE, slideshow * 1000)
    info = pg.display.Info()
    size = info.current_w, info.current_h
    screen = pg.display.set_mode(size, flags=pg.RESIZABLE|pg.WINDOWMAXIMIZED)
    pg.display.set_caption('IA Launcher')
    current_game = random.randrange(len(games)) if slideshow else 0
    image = pg.image.load(games[current_game].get_titlescreen())
    scaled_image = image.copy()

    while event := pg.event.wait():
        if event.type == pg.QUIT:
            sys.exit()
        if event.type == ADVANCE:
            current_game = random.randrange(len(games))
            image = pg.image.load(games[current_game].get_titlescreen())
            scaled_image = image.copy()
        if event.type == pg.KEYDOWN:
            if event.key == pg.K_ESCAPE:
                sys.exit()
            if event.key == pg.K_RIGHT:
                current_game = current_game + 1 % len(games)
                image = pg.image.load(games[current_game].get_titlescreen())
                scaled_image = image.copy()
            if event.key == pg.K_LEFT:
                current_game = current_game - 1 % len(games)
                image = pg.image.load(games[current_game].get_titlescreen())
                scaled_image = image.copy()
            if event.key == pg.K_RETURN:
                if event.mod & pg.KMOD_ALT:
                    games[current_game].start(autorun=False)
                else:
                    games[current_game].start()
                pg.event.clear()

        rect = screen.get_rect()
        if rect.size != scaled_image.get_rect().size:
            scaled_image = pg.transform.scale(image, rect.size)

        screen.blit(scaled_image, rect)
        pg.display.flip()


if __name__ == '__main__':
    slideshow = parse_args().slideshow
    games = load_games()
    show_ui(games, slideshow)
