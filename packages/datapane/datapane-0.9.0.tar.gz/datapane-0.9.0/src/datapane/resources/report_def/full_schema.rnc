# This schema currently covers all report states - eventually to be split out to handle all substates
# (want to delay splitting out as long as possible for simplicities sake)
# NOTE - generate the Relax-NG .rng file using `java -jar trang.jar`
#default namespace = "https://datapane.com/report"

namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"

start = element Report {
  attribute xml:id { xsd:ID },
  # unsignedByte ?
  attribute version { xsd:positiveInteger },
  Meta, Main
}

################################################################################
# Metadata fields
# we extract these into the Report DB fields for quick lookup
Meta = element Meta {
  element Author { xsd:string { minLength = "1" maxLength = "127" } } &
  element CreatedOn { xsd:dateTime } &
  element Title { xsd:string { minLength = "1" maxLength = "127" } } &
  element Description { xsd:string { maxLength = "10240" } }
}


################################################################################
# Main Report Tree
Main = element Main { Page+, attribute full_width { xsd:boolean } }

block_id = attribute id { xsd:ID }
block_label = attribute label { xsd:string { minLength = "1" } }
block_id_label = block_id, block_label?

Page = element Page {
  block_id_label, LayoutBlock+
}

LayoutBlock = Group | Select

Select = element Select {
  block_id_label,
  attribute type { string "dropdown" | string "tabs" }?,
  Block, Block+  # at least 2 block elements in a Select
}

Group = element Group {
  block_id_label,
  attribute rows { xsd:nonNegativeInteger },
  attribute columns { xsd:nonNegativeInteger },
  Block+
}

Block = LayoutBlock | DataBlock

DataBlock = EmbeddedTextBlock | AssetBlock | BigNumber

EmbeddedTextBlock = Text | HTML | Code

AssetBlock = File | Plot | Table | DataTable


################################################################################
# EmbeddedTextBlocks
# Markdown Text
Text = element Text {
  block_id_label,
  xsd:string { minLength = "1" }
}

HTML = element HTML {
  block_id_label,
  xsd:string { minLength = "1" }
}

Code = element Code {
  block_id_label,
  attribute language { xsd:string { minLength = "1" maxLength = "127" } },
  xsd:string { minLength = "1" }
}

BigNumber = element BigNumber {
  block_id_label,
  attribute heading { xsd:string { minLength = "1" maxLength = "127" } },
  attribute value { xsd:string { minLength = "1" maxLength = "127" } },

  # optional attributes
  attribute change { xsd:string { minLength = "1" maxLength = "127" } }?,
  attribute prev_value { xsd:string { minLength = "1" maxLength = "127" } }?,
  attribute is_positive_intent { xsd:boolean }?,
  attribute is_upward_change { xsd:boolean }?
}


################################################################################
# AssetBlocks
assetAttributes =
  block_id_label,
  # TODO - should attachment be it's own attribute?
  attribute src { xsd:anyURI { pattern = "(http|https|cas|file|data|attachment):.+"} },
  attribute preview { xsd:anyURI { pattern = "(http|https|cas|file|data):.+"} }?,
  # TODO - do we validate export_url protocol?
  attribute export_url { xsd:anyURI }?,
  attribute type { xsd:string { pattern = '\w+/[\w.+\-]+' } },
  attribute size { xsd:positiveInteger },
  element Caption { text }?

File = element File {
  assetAttributes,

  [ a:defaultValue = "true" ]
  attribute can_download { xsd:boolean },

  attribute name { xsd:string }
  }

Plot = element Plot {
  assetAttributes,
  attribute width { xsd:positiveInteger },
  attribute height { xsd:positiveInteger }
}

Table = element Table {
  assetAttributes
}

DataTable = element DataTable {
  assetAttributes,
  attribute rows { xsd:positiveInteger },
  attribute columns { xsd:positiveInteger },

  [ a:defaultValue = "true" ]
  attribute can_pivot { xsd:boolean }

  # attribute cells { xsd:positiveInteger }
}
