# coding: utf-8

"""
    Aliro Q.Network

    This is an api for the Aliro Q.Network  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: nick@aliroquantum.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from aliro_aqn.configuration import Configuration


class MemoryOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'coherence_time': 'float',
        'memory_type': 'str',
        'raw_fidelity': 'float',
        'entangled_at_time': 'float',
        'fidelity': 'float'
    }

    attribute_map = {
        'coherence_time': 'coherenceTime',
        'memory_type': 'memoryType',
        'raw_fidelity': 'rawFidelity',
        'entangled_at_time': 'entangledAtTime',
        'fidelity': 'fidelity'
    }

    def __init__(self, coherence_time=-1, memory_type=None, raw_fidelity=1, entangled_at_time=None, fidelity=None, local_vars_configuration=None):  # noqa: E501
        """MemoryOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._coherence_time = None
        self._memory_type = None
        self._raw_fidelity = None
        self._entangled_at_time = None
        self._fidelity = None
        self.discriminator = None

        if coherence_time is not None:
            self.coherence_time = coherence_time
        self.memory_type = memory_type
        if raw_fidelity is not None:
            self.raw_fidelity = raw_fidelity
        if entangled_at_time is not None:
            self.entangled_at_time = entangled_at_time
        self.fidelity = fidelity

    @property
    def coherence_time(self):
        """Gets the coherence_time of this MemoryOutput.  # noqa: E501

        The coherence time of the memory, in seconds. (-1 signals infinite coherence time)  # noqa: E501

        :return: The coherence_time of this MemoryOutput.  # noqa: E501
        :rtype: float
        """
        return self._coherence_time

    @coherence_time.setter
    def coherence_time(self, coherence_time):
        """Sets the coherence_time of this MemoryOutput.

        The coherence time of the memory, in seconds. (-1 signals infinite coherence time)  # noqa: E501

        :param coherence_time: The coherence_time of this MemoryOutput.  # noqa: E501
        :type: float
        """

        self._coherence_time = coherence_time

    @property
    def memory_type(self):
        """Gets the memory_type of this MemoryOutput.  # noqa: E501


        :return: The memory_type of this MemoryOutput.  # noqa: E501
        :rtype: str
        """
        return self._memory_type

    @memory_type.setter
    def memory_type(self, memory_type):
        """Sets the memory_type of this MemoryOutput.


        :param memory_type: The memory_type of this MemoryOutput.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and memory_type is None:  # noqa: E501
            raise ValueError("Invalid value for `memory_type`, must not be `None`")  # noqa: E501

        self._memory_type = memory_type

    @property
    def raw_fidelity(self):
        """Gets the raw_fidelity of this MemoryOutput.  # noqa: E501

        Fidelity of entanglement in memory  # noqa: E501

        :return: The raw_fidelity of this MemoryOutput.  # noqa: E501
        :rtype: float
        """
        return self._raw_fidelity

    @raw_fidelity.setter
    def raw_fidelity(self, raw_fidelity):
        """Sets the raw_fidelity of this MemoryOutput.

        Fidelity of entanglement in memory  # noqa: E501

        :param raw_fidelity: The raw_fidelity of this MemoryOutput.  # noqa: E501
        :type: float
        """

        self._raw_fidelity = raw_fidelity

    @property
    def entangled_at_time(self):
        """Gets the entangled_at_time of this MemoryOutput.  # noqa: E501

        Time at which it was entangled at, relative to beginning of timeline  # noqa: E501

        :return: The entangled_at_time of this MemoryOutput.  # noqa: E501
        :rtype: float
        """
        return self._entangled_at_time

    @entangled_at_time.setter
    def entangled_at_time(self, entangled_at_time):
        """Sets the entangled_at_time of this MemoryOutput.

        Time at which it was entangled at, relative to beginning of timeline  # noqa: E501

        :param entangled_at_time: The entangled_at_time of this MemoryOutput.  # noqa: E501
        :type: float
        """

        self._entangled_at_time = entangled_at_time

    @property
    def fidelity(self):
        """Gets the fidelity of this MemoryOutput.  # noqa: E501

        The fidelity of the memory at the current moment in simulation  # noqa: E501

        :return: The fidelity of this MemoryOutput.  # noqa: E501
        :rtype: float
        """
        return self._fidelity

    @fidelity.setter
    def fidelity(self, fidelity):
        """Sets the fidelity of this MemoryOutput.

        The fidelity of the memory at the current moment in simulation  # noqa: E501

        :param fidelity: The fidelity of this MemoryOutput.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and fidelity is None:  # noqa: E501
            raise ValueError("Invalid value for `fidelity`, must not be `None`")  # noqa: E501

        self._fidelity = fidelity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MemoryOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MemoryOutput):
            return True

        return self.to_dict() != other.to_dict()
