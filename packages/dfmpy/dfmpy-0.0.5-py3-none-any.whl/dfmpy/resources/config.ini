# ==============================================================================
# This file must have a top-level section called either:
#
#   [dfmpy]
#   [DEFAULT]
#
# The `dfmpy` program will search for those sections in that order.  If one of
# those sections is not found the program will error out.
# ------------------------------------------------------------------------------
# All variables in this config will be interpolated given these rules in this
# order:
#
#   1.  The value will have whitespace trimmed from the beginning and end.
#   2.  The value will have environment variables expanded.
#   3.  The value will have tildes expanded.
#
# Essentially this is accomplished with:
#
#   key = expanduser(expandvars(value.strip()))
#
# The `expandvars()` method will search for variables with one of these forms:
#
#   ${NAME}
#   $NAME
#   %NAME%
#
# The `expanduser()` method will only search the very beginning of the value for
# a tilde.
# ------------------------------------------------------------------------------
# TODO document how to override with cli args.
# ------------------------------------------------------------------------------
[DEFAULT]

# This is the marker that signals to dfmpy that the symlink file should switch
# between different files depending on the hostname and system type.
#marker = ##

# This is the delimiter between the hostname and system type for multiple files
# with the same name.
#delimiter = .

# The directory that contains the dotfiles.  This does not have to be the root
# directory of a Git repository, it just needs to be the top level directory
# that contains the dotfiles.
repository_dir = ~/.files

# The destination directory to install the dotfiles.  This does not make much
# sense to be anything other than your home directory, but you can change it if
# your home directory is not in the normal location.
install_dir = ~/

# You can override the value returned by `socket.gethostname()` with this
# property.
#hostname = overridden_hostname

# You can override the value returned by `platform.system()` with this property.
#system = overridden_system
