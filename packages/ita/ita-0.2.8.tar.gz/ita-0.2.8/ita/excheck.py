import sys
import io
import math
import collections.abc

import unittest
import re
import signal
import concurrent.futures

class TestTimeoutError(Exception):
    pass

class GTest(unittest.TestCase):
    def __init__(self, testcases, places=7, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.testcases = testcases
        self.places = places
        self.addTypeEqualityFunc(float, self.assertFloatEqual)
        self.addTypeEqualityFunc(list, self.assertListEqual2)

    def assertFloatEqual(self, f1, f2, **kwargs):
        self.assertAlmostEqual(f1, f2, places=self.places, **kwargs)

    def assertListEqual2(self, list1, list2, **kwargs):
        with self.subTest():
            self.assertEqual(len(list1), len(list2), **kwargs)
            for a, b in zip(list1, list2):
                self.assertEqual(a, b, **kwargs)

    def eval_with_timeout(self, f, arg):
        executor = concurrent.futures.ThreadPoolExecutor(max_workers=1)
        future = executor.submit(self.getVal, f, arg)
        try:
            res = future.result(timeout=self.timeout)
        except concurrent.futures.TimeoutError:
            raise TestTimeoutError('evaluation timed out after ' +
                                   str(self.timeout) + 's.')
        return res

    def getVal(self, f, arg):
        if isinstance(arg, tuple):
            return f(*arg)
        else:
            return f(arg)

    def call2Str(self, f, arg, out):
        if isinstance(arg, tuple):
            sarg = str(arg)
        else:
            sarg = "(" + str(arg) + ")" 
        return f.__name__ + sarg + " must result in " + str(out)

    def setParam(self, f, timeout=2):
        self.func = f
        self.timeout = timeout

    def runTest(self):
        for i, o in self.testcases:
            with self.subTest(case=self.call2Str(self.func, i, o)):
                r = self.eval_with_timeout(self.func,i)
                self.assertEqual(r, o)

class cknml(GTest):
    pass

class ckround(GTest): #approximate the result
    def __init__(self, p, testcases):
        super().__init__(testcases, places=p)

class ckprint(GTest): #write the result to the stdout
    def getVal(self, f, arg):
        stdo = sys.stdout
        sys.stdout = io.StringIO()
        try:
            super().getVal(f, arg)
            res = sys.stdout.getvalue()
        except Exception as e:
            raise(e)
        finally:
            sys.stdout = stdo
        return res

class ckfst(GTest): #overwrite the first argument
    def getVal(self, f, arg):
        super().getVal(f, arg)
        return arg[0]

def showResults(r, f):
    if r.wasSuccessful():
        print(f.__name__ + " passed the check")
    else:
        print(f.__name__ + " failed to pass the check")
        for test, trace in r.failures + r.errors:
            m = re.match(".*\(case='(.*)'\)", test.id())
            print(m.expand("\\1"))
            m = re.match(".*\n([^\n]+\n?)", trace, flags=re.DOTALL)
            print(m.expand("\\1"))

def excheck(f, testcases=None, places=7, timeout=2):
    if testcases:
        exdata = cknml(testcases, places=places)
    else:
        exdata = excheckdata(f.__name__)
        if not exdata:
            print(f.__name__ + " cannot be checked")
            return
    exdata.setParam(f, timeout=timeout)
    showResults(exdata.run(), f)

def excheckdata(fn):
    if fn == "ex3_3":
        return cknml([((2,3,5), 242.0),
                      ((0.2,0.3,10), 0.28571259860000003),
                      ((0.1,0.1,0), -0.0)])
    elif fn == "ex3_4":
        return cknml([((4, 3, 6), 72.0),
                      ((10, 2, 3), 7.5),
                      ((2, 0, 1), 0.0)])
    elif fn == "ex3_5":
        return cknml([(6, 36.0), (3, 18.0), (0, 0.0)])
    elif fn == "ex3_6":
        return ckprint([((2.0,8.0), 'A = 2.0 B = 8.0\nArithmetic mean: 5.0\nGeometric mean: 4.0\n'),
                        ((9.0,36.0),'A = 9.0 B = 36.0\nArithmetic mean: 22.5\nGeometric mean: 18.0\n'),
                        ((0.0,6.25),'A = 0.0 B = 6.25\nArithmetic mean: 3.125\nGeometric mean: 0.0\n')])
    elif fn == "ex3_7":
        return cknml([(0, 0.0),
                      (180, 3.141592653589793),
                      (36, 0.6283185307179586)])
    elif fn == "ex3_8_sin":
        return cknml([(0, 0.0),
                      (180, 1.2246467991473532e-16),
                      (36, 0.5877852522924731)])
    elif fn == "ex3_8_cos":
        return cknml([(0, 1.0),
                      (270, -1.8369701987210297e-16),
                      (36, 0.8090169943749475)])
    elif fn == "ex3_9_x":
        return cknml([((2, 1, 36), 1.0302487364574218),
                      ((3, -1, 210), -3.098076211353316),
                      ((-6, 28, 15), -13.04248822060499)])
    elif fn == "ex3_9_y":
        return cknml([((2, 1, 36), 1.9845874989598937),
                      ((3, -1, 210), -0.6339745962155618),
                      ((-6, 28, 15), 25.493008865478785)])
    elif fn == "ex4_1":
        return ckprint([(0, "0\n"),
                        (3, "0\n1\n2\n3\n"),
                        (5, "0\n1\n2\n3\n4\n5\n")])
    elif fn == "ex4_2":
        return cknml([([2, 0, 5], 2),
                      ([-2, -4, -1, -6], 2),
                      ([-2, 8, -4, 10], 3),
                      ([0], 0)])
    elif fn == "ex4_3":
        return cknml([([2, 0, 5], 7),
                      ([-2, -4, -1, -6], 13),
                      ([-2, 8, -4, 10], 24)])
    elif fn == "ex4_4":
        return ckround(5,
                       [(([2, 0, 5], [3, 1, -2]), 7.14142842854285),
                        (([-2, -4, -1, -6], [3, 3, 0, 0]), 10.535653752852738),
                        (([-2, 8, -4, 10], [-2, -1, -7, -3]), 16.09347693943108)])
    elif fn == "ex4_5":
        return cknml([([3, 1, 2], 312),
                      ([2, 4, 1, 6], 2416),
                      ([9, 8, 7, 3], 9873)])
    elif fn == "ex4_7":
        return cknml([((3, 1, -2), 1), ((4, -1, -6), -1), ((8, -7, -3), -3)])
    elif fn == "ex4_8":
        return cknml([([3, 1, -2], 1),
                      ([-2, -4, -1, -6], -2),
                      ([-2, 8, -7, -3], -2)])
    elif fn == "ex4_9":
        return cknml([([[3, 1, -2, 7, 6]], 3),
                      ([[3, 1, -2, 7, 6], [-2, 4, -1, -6, 8]], 3),
                      ([[3, 1, -2, 7, 6], [-2, -4, -1, -6, 8], [12, 8, -7, -3, 15]], 12)])
    elif fn == "ex4_10":
        return cknml([(([[3, 1, -2]], -1), 0),
                     (([[3, 1, -2], [-2, 4, -1, -6]], -1), 1),
                     (([[3, 1, -2], [-2, 4, -1, -6], [-1, 8, -1, -7, -3]], -1),
                      3)])
    elif fn == "ex5_1":
        return cknml([(3, [1.0, 0.5, 0.3333333333333333]),
                      (6, [1.0, 0.5, 0.3333333333333333, 0.25, 0.2, 0.16666666666666666]),
                      (0, [])])
    elif fn == "ex5_2":
        return cknml([((3, 2), [[0.0, 0.5], [0.0, 0.5], [0.0, 0.5]]),
                      ((6, 10),
                       [[0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
                        [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
                        [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
                        [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
                        [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
                        [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]]),
                      ((0, 0), [])])
    elif fn == "ex5_3":
        return cknml([(3, [[1, 0, 1], [0, 1, 0], [1, 0, 1]]),
                      (10, [[1, 0, 1, 0, 1, 0, 1, 0, 1, 0],
                            [0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
                            [1, 0, 1, 0, 1, 0, 1, 0, 1, 0],
                            [0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
                            [1, 0, 1, 0, 1, 0, 1, 0, 1, 0],
                            [0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
                            [1, 0, 1, 0, 1, 0, 1, 0, 1, 0],
                            [0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
                            [1, 0, 1, 0, 1, 0, 1, 0, 1, 0],
                            [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]]),
                      (0, [])])
    elif fn == "ex5_4":
        return cknml([(3, [[0, 0.5, 0], [0.5, 1, 0.5], [0, 0.5, 0]]),
                      (10, [[0, 0.5, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0.5],
                            [0.5, 1, 0.5, 1, 0.5, 1, 0.5, 1, 0.5, 1],
                            [0, 0.5, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0.5],
                            [0.5, 1, 0.5, 1, 0.5, 1, 0.5, 1, 0.5, 1],
                            [0, 0.5, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0.5],
                            [0.5, 1, 0.5, 1, 0.5, 1, 0.5, 1, 0.5, 1],
                            [0, 0.5, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0.5],
                            [0.5, 1, 0.5, 1, 0.5, 1, 0.5, 1, 0.5, 1],
                            [0, 0.5, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0.5],
                            [0.5, 1, 0.5, 1, 0.5, 1, 0.5, 1, 0.5, 1]]),
                      (0, [])])
    elif fn == "ex5_5":
        return ckfst([(([[0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0]], 2, 2, 4, 5, 0.5),
                       [[0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0.5, 0.5, 0.5, 0.5, 0, 0],
                        [0, 0, 0.5, 0.5, 0.5, 0.5, 0, 0],
                        [0, 0, 0.5, 0.5, 0.5, 0.5, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0]]),
                      (([[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                          [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
                         [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                          [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
                         [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                          [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
                         [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                          [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
                         [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                          [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
                         [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                          [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
                         [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                          [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
                         [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                          [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]],
                        2, 7, 5, 7, [1, 0, 0.5]),
                       [[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                         [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
                        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                         [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
                        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                         [0, 0, 0], [0, 0, 0], [0, 0, 0], [1, 0, 0.5]],
                        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                         [0, 0, 0], [0, 0, 0], [0, 0, 0], [1, 0, 0.5]],
                        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                         [0, 0, 0], [0, 0, 0], [0, 0, 0], [1, 0, 0.5]],
                        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                         [0, 0, 0], [0, 0, 0], [0, 0, 0], [1, 0, 0.5]],
                        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                         [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
                        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                         [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]]),
                      (([[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                          [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
                         [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                          [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
                         [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                          [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
                         [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                          [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
                         [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                          [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
                         [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                          [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
                         [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                          [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
                         [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                          [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]],
                        3, 5, 3, 6, [0, 0.5, 0.5]),
                       [[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                         [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
                        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                         [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
                        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                         [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
                        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                         [0, 0, 0], [0, 0.5, 0.5], [0, 0.5, 0.5], [0, 0, 0]],
                        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                         [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
                        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                         [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
                        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                         [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
                        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                         [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]])])
    elif fn == "ex5_6":
        return ckfst([(([[0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0]], 2, 2, 4, 5, 0.5),
                       [[0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0],
                        [0, 0, 0.5, 0, 0, 0],
                        [0, 0, 0, 0.5, 0.5, 0],
                        [0, 0, 0, 0, 0, 0.5],
                        [0, 0, 0, 0, 0, 0]]),
                      (([[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                          [0, 0, 0], [0, 0, 0]],
                         [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                          [0, 0, 0], [0, 0, 0]],
                         [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                          [0, 0, 0], [0, 0, 0]],
                         [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                          [0, 0, 0], [0, 0, 0]],
                         [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                          [0, 0, 0], [0, 0, 0]],
                         [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                          [0, 0, 0], [0, 0, 0]]],
                        2, 5, 5, 5, [1, 0, 0.5]),
                       [[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                         [0, 0, 0], [0, 0, 0]],
                        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                         [0, 0, 0], [0, 0, 0]],
                        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                         [0, 0, 0], [1, 0, 0.5]],
                        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                         [0, 0, 0], [1, 0, 0.5]],
                        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                         [0, 0, 0], [1, 0, 0.5]],
                        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                         [0, 0, 0], [1, 0, 0.5]]]),
                      (([[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                          [0, 0, 0], [0, 0, 0]],
                         [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                          [0, 0, 0], [0, 0, 0]],
                         [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                          [0, 0, 0], [0, 0, 0]],
                         [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                          [0, 0, 0], [0, 0, 0]],
                         [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                          [0, 0, 0], [0, 0, 0]],
                         [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                          [0, 0, 0], [0, 0, 0]]],
                        3, 2, 3, 4, [0, 0.5, 0.5]),
                       [[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                         [0, 0, 0], [0, 0, 0]],
                        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                         [0, 0, 0], [0, 0, 0]],
                        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                         [0, 0, 0], [0, 0, 0]],
                        [[0, 0, 0], [0, 0, 0], [0, 0.5, 0.5], [0, 0.5, 0.5],
                         [0, 0.5, 0.5], [0, 0, 0]],
                        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                         [0, 0, 0], [0, 0, 0]],
                        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                         [0, 0, 0], [0, 0, 0]]])])
    elif fn == "ex5_7":
        return cknml([(([[1, 1, 0, 1, 1, 0],
                         [1, 0, 0, 0, 1, 1],
                         [1, 0, 1, 1, 0, 0],
                         [0, 0, 1, 1, 1, 0],
                         [0, 0, 1, 1, 0, 0],
                         [0, 1, 1, 1, 1, 0]], 3),
                       [[0, 1, 1, 1, 1, 1],
                        [1, 1, 0, 1, 0, 0],
                        [0, 1, 1, 1, 1, 0],
                        [1, 0, 0, 0, 0, 0],
                        [1, 1, 0, 0, 0, 0],
                        [0, 1, 0, 0, 0, 0]]),
                      (([[0, 1, 1, 1, 0, 0],
                         [1, 0, 0, 1, 1, 0],
                         [0, 1, 0, 0, 0, 0],
                         [1, 1, 1, 1, 1, 1],
                         [1, 0, 0, 1, 1, 0],
                         [1, 0, 0, 1, 1, 1]], 10),
                       [[1, 1, 1, 1, 1, 1],
                        [0, 1, 0, 0, 0, 0],
                        [1, 1, 0, 0, 0, 0],
                        [1, 0, 0, 0, 0, 0],
                        [1, 0, 0, 0, 0, 0],
                        [1, 0, 0, 0, 0, 0]]),
                      (([[0, 0, 0, 1, 0, 0],
                         [1, 0, 1, 0, 1, 1],
                         [1, 1, 0, 1, 0, 1],
                         [0, 1, 0, 0, 1, 1],
                         [0, 0, 0, 1, 0, 0],
                         [1, 0, 0, 1, 1, 0]], 0),
                       [[0, 0, 0, 1, 0, 0],
                        [1, 0, 1, 0, 1, 1],
                        [1, 1, 0, 1, 0, 1],
                        [0, 1, 0, 0, 1, 1],
                        [0, 0, 0, 1, 0, 0],
                       [1, 0, 0, 1, 1, 0]])])
    elif fn == "ex6_1":
        return cknml([(2, 1), (36, 18), (62491, 5681)])
    elif fn == "ex6_2":
        return cknml([((4, 6), 2), ((144, 132), 12), ((62491, 14630), 209)])
    elif fn == "ex6_3":
        return cknml([(4,2), (6, 3), (132, 8), (62491, 16)])
    elif fn == "ex6_4":
        return cknml([((1, 0.2, 0.3, 0.01, 10),
                       [0.999, 0.998003997, 0.9970119690599161,
                        0.9960238943986897,0.9950397513928476,
                        0.9940595185750775, 0.9930831746328185,
                        0.9921106984068677, 0.9911420688900013,
                        0.9901772652256107]),
                      ((1, 0.8, 0.2, 0.03, 10),
                       [1.018, 1.036214056, 1.054640755924888,
                        1.0732785313227384, 1.0921256552396943,
                        1.1111802402844506, 1.1304402368928859,
                        1.1499034318031964, 1.1695674467516366,
                        1.189429737398669]),
                      ((1, 0.5, 0.7, 0.5, 10),
                       [0.9, 0.8415, 0.8040322125, 0.7787765360668242,
                        0.7611981574886457, 0.748699774623369,
                        0.739681744896832, 0.7331070018142724,
                        0.7282776956296514, 0.7247111788539919])])
    elif fn == "ex6_5":
        return cknml([((lambda x: x * x, 0.01, 0, 2), 2.646700000000006),
                      ((lambda x: math.cos(x),
                        0.0001, 0, 3.141592653589793), 9.265358959514573e-05),
                      ((lambda x: math.log(x), 0.01, 1, 10), 14.014330504503139)])
    elif fn == "ex8_3":
        return cknml([(0, 0), (20, 210), (100, 5050)])
    elif fn == "ex8_4":
        return cknml([((2, 10), 1024),
                      ((3, 20), 3486784401),
                      ((1, 1000000000), 1)])
    elif fn == "ex8_5":
        return cknml([(1, [1, 0, 1]),
                      (2, [1, 0, 1, 0, 0, 0, 1, 0, 1]),
                      (3, [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
                           0, 1, 0, 1, 0, 0, 0, 1, 0, 1])])
    elif fn == "ex8_6":
        return cknml([(1, [[0, 1, 0], [1, 1, 1], [0, 1, 0]]),
                      (2, [[0, 0, 0, 0, 1, 0, 0, 0, 0],
                           [0, 0, 0, 1, 1, 1, 0, 0, 0],
                           [0, 0, 0, 0, 1, 0, 0, 0, 0],
                           [0, 1, 0, 0, 1, 0, 0, 1, 0],
                           [1, 1, 1, 1, 1, 1, 1, 1, 1],
                           [0, 1, 0, 0, 1, 0, 0, 1, 0],
                           [0, 0, 0, 0, 1, 0, 0, 0, 0],
                           [0, 0, 0, 1, 1, 1, 0, 0, 0],
                           [0, 0, 0, 0, 1, 0, 0, 0, 0]]),
                      (3, [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0,
                            1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,
                            1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0,
                            1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
                            0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                           [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0,
                            0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
                           [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
                            0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                           [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,
                            1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0],
                           [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                           [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,
                            1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0],
                           [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
                            0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                           [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0,
                            0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
                           [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
                            0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0,
                            1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,
                            1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0,
                            1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])])
    elif fn == "ex8_7":
        return cknml([(5, 5), (8, 21), (11, 89)])
    elif fn == "ex8_8":
        return ckround(2, [(100000, 0.778), (200000, 0.778), (300000, 0.778)])
    elif fn == "ex8_9":
        return ckround(2, [(100000, 1.0), (200000, 1.0), (300000, 1.0)])
    elif fn == "ex8_10":
        return ckround(2, [(10000, 0.608), (200000, 0.608), (300000, 0.608)])
    elif fn == "ex9_1":
        return cknml([((['A', 'C', 'D', 'He', 'Na', 'Ze'], 'Dog'), -1),
                      ((['A', 'C', 'D', 'He', 'Na', 'Ze'], 'Ze'), 5),
                      ((['A', 'C', 'D', 'He', 'Na', 'Ze'], 'A'), 0),
                      ((['A', 'A', 'B', 'B', 'B', 'C', 'C'], 'B'), 2)])
    elif fn == "ex9_2":
        return cknml([(([1, 3, 4, 10, 13, 15], 0, 8), 3),
                      (([1, 3, 4, 10, 13, 15], 4, 15), 4),
                      (([1, 3, 4, 10, 13, 15], 3, 11), 3)])
    elif fn == "ex9_3":
        return cknml([(([1, 1, 1, 2, 2, 4, 4, 4, 4, 8, 9, 9], 9), 2),
                      (([1, 1, 1, 2, 2, 4, 4, 4, 4, 8, 9, 9], 4), 4),
                      (([1, 1, 1, 2, 2, 4, 4, 4, 4, 8, 9, 9], 0), 0)])
    elif fn == "ex9_4":
        return cknml([(([1, 3, 4, 8, 9], [2, 3, 4, 9, 11]), [3, 4, 9]),
                      (([2, 3, 4, 9, 11], [1, 3, 4, 8, 9]), [3, 4, 9]),
                      (([1, 2, 3, 4, 9, 11], [1, 2, 3, 4, 9, 11]),
                       [1, 2, 3, 4, 9, 11])])
    elif fn == "ex9_5":
        return cknml([(([1, 3, 4, 8, 9, 2, 3, 4, 9, 11], 3), [1, 2, 3]),
                      (([2, 3, 4, 9, 11, 1, 3, 4, 8, 9], 4), [1, 2, 3, 3]),
                      (([1, 2, 3, 4, 9, 11, 1, 2, 3, 4, 9, 11], 5),
                       [1, 1, 2, 2, 3])])
    elif fn == "ex9_6":
        return cknml([([1, 3, 4, 8, 9, 2, 3, 4, 9, 11],
                       [1, 2, 3, 4, 8, 9, 11]),
                      ([2, 3, 4, 9, 11, 1, 3, 4, 8, 9],[1, 2, 3, 4, 8, 9, 11]),
                      ([1, 2, 3, 4, 9, 11, 1, 2, 3, 4, 9, 11],
                       [1, 2, 3, 4, 9, 11])])
    elif fn == "ex11_1":
        return cknml([((lambda x: x * x, 0.01, 2), 4.009999999999891),
                      ((lambda x: math.sin(x), 0.001, 3.141592653589793),
                       -0.9999998333332315),
                      ((lambda x: math.log(x), 0.0001, 2),
                       0.49998750041746476)])
    elif fn == "ex11_3":
        return cknml([((0.3141592653589793, 0.5, 0.1, 10),
                       [0.2535919344614896, 0.1438516089291287,
                        0.006013508389513686,  -0.1330032326906939,
                        -0.24602813062416665,  -0.3113165181930915,
                        -0.3165677270697436,  -0.2608028268409138,
                        -0.1544980893084057,  -0.018032051257967502]),
                      ((1.5707963267948966, 0.1, 0.05, 10),
                       [1.3257963267948965,  0.8431126821766006,
                        0.17748334587415973,  -0.5314014790554881,
                        -1.1161345016426936,  -1.4807571742111536,
                        -1.601372289528167,  -1.4771019198865782,
                        -1.1089061474055328, -0.5213834947619238]),
                      ((0, 0.1, 0.01, 10),
                       [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])])
    elif fn == "ex12_1":
        return cknml([([10, 4, 13, 7, 11, 10, 1, 12], False),
                      ([17, 9, 4, 16, 9, 6, 7, 19, 4, 17], True),
                      ([1, 14, 4, 8, 1, 9, 19, 17, 17, 1, 10, 16, 14, 14, 3],
                       True)])
    elif fn == "ex12_2":
        return cknml([(([13, 5, 5, 9, 7, 1, 8, 8], 8), 33),
                      (([15, 8, 15, 7, 17, 14, 17, 19, 1, 1], 10), 67),
                      (([3, 2, 1, 2, 4, 14, 4, 1, 19, 10, 1, 17, 15, 16, 10],
                        15), 71)])
    elif fn == "ex12_3":
        return cknml([((lambda i,j: max(110 + 20 * (j - i), 18 * (j - i) ** 2),
                        20), 1170),
                      ((lambda i,j:
                        max(110 + 10 * (j - i) ** 1.5, 18 * (j - i) ** 2), 20),
                       1110.284271247462),
                      ((lambda i,j:
                        max(110 + 10 * (j - i) ** 0.7, 18 * (j - i) ** 1.5),
                        20), 720.0)])
    elif fn == "ex12_4":
        return cknml([((0.2, 0.8, 11, 3), 0.0),
                      ((0.2, 0.8, 12, 3), 0.04865392640000005),
                      ((0.4, 0.6, 13, 6), 0.12421693440000002)])
    else:
        return None

