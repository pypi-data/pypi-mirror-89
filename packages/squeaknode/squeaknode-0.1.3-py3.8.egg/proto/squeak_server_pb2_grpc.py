# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import squeak_server_pb2 as proto_dot_squeak__server__pb2


class SqueakServerStub(object):
    """Interface exported by the server.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PostSqueak = channel.unary_unary(
                '/squeaknode.SqueakServer/PostSqueak',
                request_serializer=proto_dot_squeak__server__pb2.PostSqueakRequest.SerializeToString,
                response_deserializer=proto_dot_squeak__server__pb2.PostSqueakReply.FromString,
                )
        self.GetSqueak = channel.unary_unary(
                '/squeaknode.SqueakServer/GetSqueak',
                request_serializer=proto_dot_squeak__server__pb2.GetSqueakRequest.SerializeToString,
                response_deserializer=proto_dot_squeak__server__pb2.GetSqueakReply.FromString,
                )
        self.LookupSqueaks = channel.unary_unary(
                '/squeaknode.SqueakServer/LookupSqueaks',
                request_serializer=proto_dot_squeak__server__pb2.LookupSqueaksRequest.SerializeToString,
                response_deserializer=proto_dot_squeak__server__pb2.LookupSqueaksReply.FromString,
                )
        self.GetOffer = channel.unary_unary(
                '/squeaknode.SqueakServer/GetOffer',
                request_serializer=proto_dot_squeak__server__pb2.GetOfferRequest.SerializeToString,
                response_deserializer=proto_dot_squeak__server__pb2.GetOfferReply.FromString,
                )


class SqueakServerServicer(object):
    """Interface exported by the server.
    """

    def PostSqueak(self, request, context):
        """* sqk: `postsqueak`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSqueak(self, request, context):
        """* sqk: `getsqueak`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LookupSqueaks(self, request, context):
        """* sqk: `lookupsqueaks`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOffer(self, request, context):
        """* sqk: `getoffer`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SqueakServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PostSqueak': grpc.unary_unary_rpc_method_handler(
                    servicer.PostSqueak,
                    request_deserializer=proto_dot_squeak__server__pb2.PostSqueakRequest.FromString,
                    response_serializer=proto_dot_squeak__server__pb2.PostSqueakReply.SerializeToString,
            ),
            'GetSqueak': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSqueak,
                    request_deserializer=proto_dot_squeak__server__pb2.GetSqueakRequest.FromString,
                    response_serializer=proto_dot_squeak__server__pb2.GetSqueakReply.SerializeToString,
            ),
            'LookupSqueaks': grpc.unary_unary_rpc_method_handler(
                    servicer.LookupSqueaks,
                    request_deserializer=proto_dot_squeak__server__pb2.LookupSqueaksRequest.FromString,
                    response_serializer=proto_dot_squeak__server__pb2.LookupSqueaksReply.SerializeToString,
            ),
            'GetOffer': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOffer,
                    request_deserializer=proto_dot_squeak__server__pb2.GetOfferRequest.FromString,
                    response_serializer=proto_dot_squeak__server__pb2.GetOfferReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squeaknode.SqueakServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SqueakServer(object):
    """Interface exported by the server.
    """

    @staticmethod
    def PostSqueak(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squeaknode.SqueakServer/PostSqueak',
            proto_dot_squeak__server__pb2.PostSqueakRequest.SerializeToString,
            proto_dot_squeak__server__pb2.PostSqueakReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSqueak(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squeaknode.SqueakServer/GetSqueak',
            proto_dot_squeak__server__pb2.GetSqueakRequest.SerializeToString,
            proto_dot_squeak__server__pb2.GetSqueakReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LookupSqueaks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squeaknode.SqueakServer/LookupSqueaks',
            proto_dot_squeak__server__pb2.LookupSqueaksRequest.SerializeToString,
            proto_dot_squeak__server__pb2.LookupSqueaksReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOffer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squeaknode.SqueakServer/GetOffer',
            proto_dot_squeak__server__pb2.GetOfferRequest.SerializeToString,
            proto_dot_squeak__server__pb2.GetOfferReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
