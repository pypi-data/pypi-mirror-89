# -*- coding: utf-8 -*-

"""
    weather_apiiii

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from weather_apiiii.api_helper import APIHelper
from weather_apiiii.configuration import Configuration
from weather_apiiii.controllers.base_controller import BaseController
from weather_apiiii.http.auth.custom_query_auth import CustomQueryAuth
from weather_apiiii.models.city_weather import CityWeather

class FindWeatherController(BaseController):

    """A Controller to access Endpoints in the weather_apiiii API."""


    def find(self,
                q):
        """Does a GET request to /find.

        The endpoint to get data of a specific city.

        Args:
            q (string): City Name

        Returns:
            CityWeather: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/find'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'q': q
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CityWeather.from_dictionary)
