# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['TaxCategoryRate']


class TaxCategoryRate(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 amount: Optional[pulumi.Input[float]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 included_in_price: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 sub_rates: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TaxCategoryRateSubRateArgs']]]]] = None,
                 tax_category_id: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Create a TaxCategoryRate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['amount'] = amount
            if country is None:
                raise TypeError("Missing required property 'country'")
            __props__['country'] = country
            if included_in_price is None:
                raise TypeError("Missing required property 'included_in_price'")
            __props__['included_in_price'] = included_in_price
            __props__['name'] = name
            __props__['state'] = state
            __props__['sub_rates'] = sub_rates
            if tax_category_id is None:
                raise TypeError("Missing required property 'tax_category_id'")
            __props__['tax_category_id'] = tax_category_id
        super(TaxCategoryRate, __self__).__init__(
            'commercetools:index/taxCategoryRate:TaxCategoryRate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            amount: Optional[pulumi.Input[float]] = None,
            country: Optional[pulumi.Input[str]] = None,
            included_in_price: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            sub_rates: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TaxCategoryRateSubRateArgs']]]]] = None,
            tax_category_id: Optional[pulumi.Input[str]] = None) -> 'TaxCategoryRate':
        """
        Get an existing TaxCategoryRate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["amount"] = amount
        __props__["country"] = country
        __props__["included_in_price"] = included_in_price
        __props__["name"] = name
        __props__["state"] = state
        __props__["sub_rates"] = sub_rates
        __props__["tax_category_id"] = tax_category_id
        return TaxCategoryRate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def amount(self) -> pulumi.Output[Optional[float]]:
        return pulumi.get(self, "amount")

    @property
    @pulumi.getter
    def country(self) -> pulumi.Output[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="includedInPrice")
    def included_in_price(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "included_in_price")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subRates")
    def sub_rates(self) -> pulumi.Output[Optional[Sequence['outputs.TaxCategoryRateSubRate']]]:
        return pulumi.get(self, "sub_rates")

    @property
    @pulumi.getter(name="taxCategoryId")
    def tax_category_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tax_category_id")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

