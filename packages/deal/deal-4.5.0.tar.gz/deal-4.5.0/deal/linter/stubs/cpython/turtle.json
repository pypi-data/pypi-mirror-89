{
  "RawTurtle.__init__": {
    "raises": [
      "TurtleGraphicsError"
    ]
  },
  "RawTurtle._cc": {
    "raises": [
      "TurtleGraphicsError"
    ]
  },
  "RawTurtle._undogoto": {
    "has": [
      "stdout"
    ]
  },
  "RawTurtle.clone": {
    "raises": [
      "Error"
    ]
  },
  "RawTurtle.shape": {
    "raises": [
      "TurtleGraphicsError"
    ]
  },
  "RawTurtle.shapesize": {
    "raises": [
      "TurtleGraphicsError"
    ]
  },
  "RawTurtle.shapetransform": {
    "raises": [
      "TurtleGraphicsError"
    ]
  },
  "ScrolledCanvas.adjustScrolls": {
    "raises": [
      "ZeroDivisionError"
    ]
  },
  "ScrolledCanvas.reset": {
    "raises": [
      "ZeroDivisionError"
    ]
  },
  "Shape.__init__": {
    "raises": [
      "TurtleGraphicsError"
    ]
  },
  "Shape.addcomponent": {
    "raises": [
      "TurtleGraphicsError"
    ]
  },
  "TNavigator._setDegreesPerAU": {
    "raises": [
      "ZeroDivisionError"
    ]
  },
  "TNavigator._setmode": {
    "raises": [
      "ZeroDivisionError"
    ]
  },
  "TNavigator.circle": {
    "raises": [
      "ZeroDivisionError"
    ]
  },
  "TurtleScreen._color": {
    "raises": [
      "TurtleGraphicsError"
    ]
  },
  "TurtleScreen._colorstr": {
    "raises": [
      "TurtleGraphicsError"
    ]
  },
  "TurtleScreen._incrementudc": {
    "raises": [
      "Terminator"
    ]
  },
  "TurtleScreen.mode": {
    "raises": [
      "TurtleGraphicsError"
    ]
  },
  "TurtleScreen.register_shape": {
    "raises": [
      "TurtleGraphicsError"
    ]
  },
  "TurtleScreen.setworldcoordinates": {
    "raises": [
      "ZeroDivisionError"
    ]
  },
  "Vec2D.rotate": {
    "raises": [
      "ZeroDivisionError"
    ]
  },
  "_Screen.exitonclick": {
    "raises": [
      "SystemExit"
    ]
  },
  "_Screen.setup": {
    "raises": [
      "ZeroDivisionError"
    ]
  },
  "_make_global_funcs": {
    "has": [
      "stdout"
    ]
  },
  "_screen_docrevise": {
    "has": [
      "import"
    ],
    "raises": [
      "TypeError",
      "ValueError"
    ]
  },
  "_turtle_docrevise": {
    "has": [
      "import"
    ],
    "raises": [
      "TypeError",
      "ValueError"
    ]
  },
  "config_dict": {
    "has": [
      "read",
      "stdout"
    ]
  },
  "getmethparlist": {
    "raises": [
      "TypeError"
    ]
  },
  "read_docstrings": {
    "has": [
      "stdout"
    ]
  },
  "readconfig": {
    "has": [
      "read",
      "stdout"
    ]
  },
  "write_docstringdict": {
    "has": [
      "write"
    ]
  }
}