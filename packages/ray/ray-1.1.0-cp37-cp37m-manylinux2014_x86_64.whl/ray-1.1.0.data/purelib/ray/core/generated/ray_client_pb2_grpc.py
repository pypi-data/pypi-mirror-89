# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import ray_client_pb2 as src_dot_ray_dot_protobuf_dot_ray__client__pb2


class RayletDriverStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetObject = channel.unary_unary(
        '/ray.rpc.RayletDriver/GetObject',
        request_serializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.GetRequest.SerializeToString,
        response_deserializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.GetResponse.FromString,
        )
    self.PutObject = channel.unary_unary(
        '/ray.rpc.RayletDriver/PutObject',
        request_serializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.PutRequest.SerializeToString,
        response_deserializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.PutResponse.FromString,
        )
    self.WaitObject = channel.unary_unary(
        '/ray.rpc.RayletDriver/WaitObject',
        request_serializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.WaitRequest.SerializeToString,
        response_deserializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.WaitResponse.FromString,
        )
    self.Schedule = channel.unary_unary(
        '/ray.rpc.RayletDriver/Schedule',
        request_serializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.ClientTask.SerializeToString,
        response_deserializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.ClientTaskTicket.FromString,
        )


class RayletDriverServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def GetObject(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PutObject(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def WaitObject(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Schedule(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RayletDriverServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetObject': grpc.unary_unary_rpc_method_handler(
          servicer.GetObject,
          request_deserializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.GetRequest.FromString,
          response_serializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.GetResponse.SerializeToString,
      ),
      'PutObject': grpc.unary_unary_rpc_method_handler(
          servicer.PutObject,
          request_deserializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.PutRequest.FromString,
          response_serializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.PutResponse.SerializeToString,
      ),
      'WaitObject': grpc.unary_unary_rpc_method_handler(
          servicer.WaitObject,
          request_deserializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.WaitRequest.FromString,
          response_serializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.WaitResponse.SerializeToString,
      ),
      'Schedule': grpc.unary_unary_rpc_method_handler(
          servicer.Schedule,
          request_deserializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.ClientTask.FromString,
          response_serializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.ClientTaskTicket.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ray.rpc.RayletDriver', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
